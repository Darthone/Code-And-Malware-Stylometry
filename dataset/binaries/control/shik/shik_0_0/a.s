xor ebp, ebp
mov r9, rdx
pop rsi
mov rdx, rsp
and rsp, 0xfffffffffffffff0
push rax
push rsp
mov r8, sym.__libc_csu_fini
mov rcx, sym.__libc_csu_init
mov rdi, sym.main
call sym.imp.__libc_start_main
hlt
nop word [rax + rax]
mov eax, 0x603077
push rbp
sub rax, obj.__TMC_END__
cmp rax, 0xe
mov rbp, rsp
jbe 0x4007b0
mov eax, 0
test rax, rax
je 0x4007b0
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop word [rax + rax]
pop rbp
ret
nop dword [rax]
nop word cs:[rax + rax]
mov esi, obj.__TMC_END__
push rbp
sub rsi, obj.__TMC_END__
sar rsi, 3
mov rbp, rsp
mov rax, rsi
shr rax, 0x3f
add rsi, rax
sar rsi, 1
je 0x4007f8
mov eax, 0
test rax, rax
je 0x4007f8
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop dword [rax]
pop rbp
ret
nop word [rax + rax]
cmp byte [rip + 0x202879], 0
jne 0x40081a
push rbp
mov rbp, rsp
call sym.deregister_tm_clones
pop rbp
mov byte [rip + 0x202866], 1
ret
nop dword [rax]
mov edi, obj.__JCR_LIST__
cmp qword [rdi], 0
jne 0x400830
jmp sym.register_tm_clones
nop dword [rax]
mov eax, 0
test rax, rax
je 0x40082b
push rbp
mov rbp, rsp
call rax
pop rbp
jmp sym.register_tm_clones
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rsi, rax
mov edi, 0x401cf0
mov eax, 0
call sym.imp.scanf
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rsi, rax
mov edi, 0x401cf3
mov eax, 0
call sym.imp.scanf
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rsi, rax
mov edi, 0x401cf7
mov eax, 0
call sym.imp.scanf
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rsi, rax
mov edi, 0x401cfb
mov eax, 0
call sym.imp.scanf
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rsi, rax
mov edi, 0x401cff
mov eax, 0
call sym.imp.scanf
nop
leave
ret
push rbp
mov rbp, rsp
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov eax, dword [rax]
mov esi, eax
mov edi, 0x401cf0
mov eax, 0
call sym.imp.printf
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rax
mov edi, 0x401cf3
mov eax, 0
call sym.imp.printf
nop
leave
ret
push rbp
mov rbp, rsp
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov esi, obj.n
mov edi, obj.d
call sym.R_double_int_
mov dword [rbp - 4], 0
mov eax, dword [rip + 0x202721]
cmp dword [rbp - 4], eax
jge 0x4009b4
mov eax, dword [rbp - 4]
cdqe
shl rax, 3
lea rdx, [rax + obj.s]
mov eax, dword [rbp - 4]
cdqe
shl rax, 3
add rax, obj.x
mov rsi, rdx
mov rdi, rax
call sym.R_double_double_
add dword [rbp - 4], 1
jmp 0x400979
nop
leave
ret
push rbp
mov rbp, rsp
mov dword [rbp - 4], edi
mov dword [rbp - 8], esi
mov eax, dword [rbp - 4]
cdqe
movsd xmm0, qword [rax*8 + obj.x]
mov eax, dword [rbp - 8]
cdqe
movsd xmm1, qword [rax*8 + obj.x]
ucomisd xmm0, xmm1
seta al
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x40
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov dword [rbp - 0x2c], 0
mov eax, dword [rip + 0x202696]
cmp dword [rbp - 0x2c], eax
jge 0x400a24
mov eax, dword [rbp - 0x2c]
cdqe
mov edx, dword [rbp - 0x2c]
mov dword [rax*4 + obj.ord], edx
add dword [rbp - 0x2c], 1
jmp 0x400a04
mov eax, dword [rip + 0x202676]
cdqe
shl rax, 2
add rax, obj.ord
mov edx, sym.cmp
mov rsi, rax
mov edi, obj.ord
call sym.std::sort_int__bool____int_int__
pxor xmm0, xmm0
movsd qword [rbp - 0x20], xmm0
mov dword [rbp - 0x28], 0
mov eax, dword [rip + 0x202642]
cmp dword [rbp - 0x28], eax
jge 0x400ac5
mov eax, dword [rbp - 0x28]
cdqe
mov eax, dword [rax*4 + obj.ord]
mov dword [rbp - 0x24], eax
movsd xmm0, qword [rip + 0x20262e]
mov eax, dword [rbp - 0x24]
cdqe
movsd xmm1, qword [rax*8 + obj.x]
subsd xmm0, xmm1
mov eax, dword [rbp - 0x24]
cdqe
movsd xmm1, qword [rax*8 + obj.s]
divsd xmm0, xmm1
movsd qword [rbp - 0x18], xmm0
lea rdx, [rbp - 0x18]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::max_double_
movsd xmm0, qword [rax]
movsd qword [rbp - 0x20], xmm0
add dword [rbp - 0x28], 1
jmp 0x400a58
movsd xmm0, qword [rip + 0x2025db]
movsd xmm1, qword [rbp - 0x20]
divsd xmm0, xmm1
movsd qword [rbp - 0x10], xmm0
mov rax, qword [rbp - 0x10]
mov qword [rbp - 0x38], rax
movsd xmm0, qword [rbp - 0x38]
mov edi, str._.14f_n
mov eax, 1
call sym.imp.printf
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x400b0c
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov dword [rbp - 0x14], edi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.R_int_
mov dword [rbp - 0xc], 1
mov eax, dword [rbp - 0x10]
cmp dword [rbp - 0xc], eax
jg 0x400b8c
call sym.input
cmp dword [rbp - 0x14], 2
jne 0x400b6a
mov rax, qword [rbp - 0x20]
add rax, 8
mov rax, qword [rax]
mov rdi, rax
call sym.imp.atoi
cmp eax, dword [rbp - 0xc]
jne 0x400b85
mov eax, dword [rbp - 0xc]
mov esi, eax
mov edi, str.Case___d:
mov eax, 0
call sym.imp.printf
call sym.solve
jmp 0x400b86
nop
add dword [rbp - 0xc], 1
jmp 0x400b3f
mov eax, 0
mov rdx, qword [rbp - 8]
xor rdx, qword fs:[0x28]
je 0x400ba5
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov dword [rbp - 4], edi
mov dword [rbp - 8], esi
cmp dword [rbp - 4], 1
jne 0x400be2
cmp dword [rbp - 8], 0xffff
jne 0x400be2
mov edi, obj.std::__ioinit
call sym.std::ios_base::Init::Init
mov edx, obj.__dso_handle
mov esi, obj.std::__ioinit
mov edi, sym.std::ios_base::Init::_Init
call sym.imp.__cxa_atexit
nop
leave
ret
push rbp
mov rbp, rsp
mov esi, 0xffff
mov edi, 1
call sym.__static_initialization_and_destruction_0
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov edx, 0x40
mov rax, qword [rbp - 8]
bsr rax, rax
xor rax, 0x3f
cdqe
sub rdx, rax
mov rax, rdx
sub rax, 1
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call 0x400890
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.R_int_
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call 0x400890
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.R_double_
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gnu_cxx::__ops::__iter_comp_iter_bool____int_int__
mov rdx, rax
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::__sort_int____gnu_cxx::__ops::_Iter_comp_iter_bool____int_int___
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
movsd xmm1, qword [rax]
mov rax, qword [rbp - 0x10]
movsd xmm0, qword [rax]
ucomisd xmm0, xmm1
jbe 0x400cd8
mov rax, qword [rbp - 0x10]
jmp 0x400cdc
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym._R
call sym.R
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call 0x400890
call sym.R
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__ops::_Iter_comp_iter_bool____int_int__::_Iter_comp_iter
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x400d64
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x20], rdx
mov rax, qword [rbp - 8]
cmp rax, qword [rbp - 0x10]
je 0x400dd3
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
sub rdx, rax
mov rax, rdx
sar rax, 2
mov rdi, rax
call sym.std::__lg
lea rdi, [rax + rax]
mov rdx, qword [rbp - 0x20]
mov rsi, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rcx, rdx
mov rdx, rdi
mov rdi, rax
call sym.std::__introsort_loop_int__long___gnu_cxx::__ops::_Iter_comp_iter_bool____int_int___
mov rdx, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::__final_insertion_sort_int____gnu_cxx::__ops::_Iter_comp_iter_bool____int_int___
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rdx, rax
mov rax, rdx
cmp rax, 0x43
jle 0x400e7f
cmp qword [rbp - 0x28], 0
jne 0x400e3d
mov rcx, qword [rbp - 0x30]
mov rdx, qword [rbp - 0x20]
mov rsi, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__partial_sort_int____gnu_cxx::__ops::_Iter_comp_iter_bool____int_int___
jmp 0x400e7f
sub qword [rbp - 0x28], 1
mov rdx, qword [rbp - 0x30]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__unguarded_partition_pivot_int____gnu_cxx::__ops::_Iter_comp_iter_bool____int_int___
mov qword [rbp - 8], rax
mov rcx, qword [rbp - 0x30]
mov rdx, qword [rbp - 0x28]
mov rsi, qword [rbp - 0x20]
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__introsort_loop_int__long___gnu_cxx::__ops::_Iter_comp_iter_bool____int_int___
mov rax, qword [rbp - 8]
mov qword [rbp - 0x20], rax
jmp 0x400e08
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x20], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
sub rdx, rax
mov rax, rdx
cmp rax, 0x43
jle 0x400ee1
mov rax, qword [rbp - 8]
lea rcx, [rax + 0x40]
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::__insertion_sort_int____gnu_cxx::__ops::_Iter_comp_iter_bool____int_int___
mov rax, qword [rbp - 8]
lea rcx, [rax + 0x40]
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rax
mov rdi, rcx
call sym.std::__unguarded_insertion_sort_int____gnu_cxx::__ops::_Iter_comp_iter_bool____int_int___
jmp 0x400ef8
mov rdx, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::__insertion_sort_int____gnu_cxx::__ops::_Iter_comp_iter_bool____int_int___
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 0x20], rcx
mov rcx, qword [rbp - 0x20]
mov rdx, qword [rbp - 0x18]
mov rsi, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__heap_select_int____gnu_cxx::__ops::_Iter_comp_iter_bool____int_int___
mov rdx, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::__sort_heap_int____gnu_cxx::__ops::_Iter_comp_iter_bool____int_int___
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x30], rdx
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rdx, rax
mov rax, rdx
sar rax, 2
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
lea rdx, [rax*4]
mov rax, qword [rbp - 0x18]
add rax, rdx
mov qword [rbp - 8], rax
mov rax, qword [rbp - 0x20]
lea rcx, [rax - 4]
mov rax, qword [rbp - 0x18]
lea rsi, [rax + 4]
mov rdi, qword [rbp - 0x30]
mov rdx, qword [rbp - 8]
mov rax, qword [rbp - 0x18]
mov r8, rdi
mov rdi, rax
call sym.std::__move_median_to_first_int____gnu_cxx::__ops::_Iter_comp_iter_bool____int_int___
mov rax, qword [rbp - 0x18]
lea rdi, [rax + 4]
mov rcx, qword [rbp - 0x30]
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x20]
mov rsi, rax
call sym.std::__unguarded_partition_int____gnu_cxx::__ops::_Iter_comp_iter_bool____int_int___
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x40
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x40], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
cmp rax, qword [rbp - 0x30]
je 0x4010ae
mov rax, qword [rbp - 0x28]
add rax, 4
mov qword [rbp - 0x10], rax
mov rax, qword [rbp - 0x10]
cmp rax, qword [rbp - 0x30]
je 0x4010af
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x10]
lea rax, [rbp - 0x40]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::__ops::_Iter_comp_iter_bool____int_int__::operator___int__int__
test al, al
je 0x401086
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::move_int__
mov eax, dword [rax]
mov dword [rbp - 0x14], eax
mov rax, qword [rbp - 0x10]
lea rdx, [rax + 4]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 0x28]
mov rsi, rcx
mov rdi, rax
call sym.std::move_backward_int__int__
lea rax, [rbp - 0x14]
mov rdi, rax
call sym.std::move_int__
mov edx, dword [rax]
mov rax, qword [rbp - 0x28]
mov dword [rax], edx
jmp 0x4010a4
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.__gnu_cxx::__ops::__val_comp_iter_bool____int_int__
mov rdx, rax
mov rax, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::__unguarded_linear_insert_int____gnu_cxx::__ops::_Val_comp_iter_bool____int_int___
add qword [rbp - 0x10], 4
jmp 0x40101b
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x4010c3
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x30], rdx
mov rax, qword [rbp - 0x18]
mov qword [rbp - 8], rax
mov rax, qword [rbp - 8]
cmp rax, qword [rbp - 0x20]
je 0x401110
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.__gnu_cxx::__ops::__val_comp_iter_bool____int_int__
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::__unguarded_linear_insert_int____gnu_cxx::__ops::_Val_comp_iter_bool____int_int___
add qword [rbp - 8], 4
jmp 0x4010e1
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rdx, qword [rbp - 0x30]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__make_heap_int____gnu_cxx::__ops::_Iter_comp_iter_bool____int_int___
mov rax, qword [rbp - 0x20]
mov qword [rbp - 8], rax
mov rax, qword [rbp - 8]
cmp rax, qword [rbp - 0x28]
jae 0x40118e
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 8]
lea rax, [rbp - 0x30]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::__ops::_Iter_comp_iter_bool____int_int__::operator___int__int__
test al, al
je 0x401187
mov rcx, qword [rbp - 0x30]
mov rdx, qword [rbp - 8]
mov rsi, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__pop_heap_int____gnu_cxx::__ops::_Iter_comp_iter_bool____int_int___
add qword [rbp - 8], 4
jmp 0x40114a
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x20], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
sub rdx, rax
mov rax, rdx
cmp rax, 7
jle 0x4011d8
sub qword [rbp - 0x10], 4
mov rcx, qword [rbp - 0x20]
mov rdx, qword [rbp - 0x10]
mov rsi, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__pop_heap_int____gnu_cxx::__ops::_Iter_comp_iter_bool____int_int___
jmp 0x4011a5
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 0x20], rcx
mov qword [rbp - 0x30], r8
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
lea rax, [rbp - 0x30]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::__ops::_Iter_comp_iter_bool____int_int__::operator___int__int__
test al, al
je 0x40128d
mov rdx, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x18]
lea rax, [rbp - 0x30]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::__ops::_Iter_comp_iter_bool____int_int__::operator___int__int__
test al, al
je 0x401245
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap_int__int__
jmp 0x401300
mov rdx, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x10]
lea rax, [rbp - 0x30]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::__ops::_Iter_comp_iter_bool____int_int__::operator___int__int__
test al, al
je 0x401278
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap_int__int__
jmp 0x401300
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap_int__int__
jmp 0x401300
mov rdx, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x10]
lea rax, [rbp - 0x30]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::__ops::_Iter_comp_iter_bool____int_int__::operator___int__int__
test al, al
je 0x4012bd
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap_int__int__
jmp 0x401300
mov rdx, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x18]
lea rax, [rbp - 0x30]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::__ops::_Iter_comp_iter_bool____int_int__::operator___int__int__
test al, al
je 0x4012ed
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap_int__int__
jmp 0x401300
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap_int__int__
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 0x20], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 8]
lea rax, [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::__ops::_Iter_comp_iter_bool____int_int__::operator___int__int__
test al, al
je 0x40133d
add qword [rbp - 8], 4
jmp 0x40131b
sub qword [rbp - 0x10], 4
mov rdx, qword [rbp - 0x10]
mov rcx, qword [rbp - 0x18]
lea rax, [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::__ops::_Iter_comp_iter_bool____int_int__::operator___int__int__
test al, al
je 0x401364
sub qword [rbp - 0x10], 4
jmp 0x401342
mov rax, qword [rbp - 8]
cmp rax, qword [rbp - 0x10]
jb 0x401374
mov rax, qword [rbp - 8]
jmp 0x40138e
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap_int__int__
add qword [rbp - 8], 4
jmp 0x40131b
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov ecx, dword [rdx]
mov rdx, qword [rbp - 0x10]
mov edx, dword [rdx]
mov esi, ecx
mov edi, edx
call rax
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__miter_base_int__
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__miter_base_int__
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::__copy_move_backward_a2_true_int__int__
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x20], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x20]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__ops::_Val_comp_iter_bool____int_int__::_Val_comp_iter
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x401451
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::move_int__
mov eax, dword [rax]
mov dword [rbp - 0x14], eax
mov rax, qword [rbp - 0x28]
mov qword [rbp - 0x10], rax
sub qword [rbp - 0x10], 4
mov rdx, qword [rbp - 0x10]
lea rcx, [rbp - 0x14]
lea rax, [rbp - 0x30]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::__ops::_Val_comp_iter_bool____int_int__::operator___int_int__
test al, al
je 0x4014ce
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::move_int__
mov edx, dword [rax]
mov rax, qword [rbp - 0x28]
mov dword [rax], edx
mov rax, qword [rbp - 0x10]
mov qword [rbp - 0x28], rax
sub qword [rbp - 0x10], 4
jmp 0x401490
lea rax, [rbp - 0x14]
mov rdi, rax
call sym.std::move_int__
mov edx, dword [rax]
mov rax, qword [rbp - 0x28]
mov dword [rax], edx
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x4014f7
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x40
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x40], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
sub rdx, rax
mov rax, rdx
cmp rax, 7
jle 0x4015ba
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
sub rdx, rax
mov rax, rdx
sar rax, 2
mov qword [rbp - 0x10], rax
mov rax, qword [rbp - 0x10]
sub rax, 2
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
lea rdx, [rax*4]
mov rax, qword [rbp - 0x28]
add rax, rdx
mov rdi, rax
call sym.std::move_int__
mov eax, dword [rax]
mov dword [rbp - 0x1c], eax
lea rax, [rbp - 0x1c]
mov rdi, rax
call sym.std::move_int__
mov ecx, dword [rax]
mov rdi, qword [rbp - 0x40]
mov rdx, qword [rbp - 0x10]
mov rsi, qword [rbp - 0x18]
mov rax, qword [rbp - 0x28]
mov r8, rdi
mov rdi, rax
call sym.std::__adjust_heap_int__long_int___gnu_cxx::__ops::_Iter_comp_iter_bool____int_int___
cmp qword [rbp - 0x18], 0
je 0x4015bd
sub qword [rbp - 0x18], 1
jmp 0x401563
nop
jmp 0x4015be
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x4015d2
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::move_int__
mov eax, dword [rax]
mov dword [rbp - 0xc], eax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_int__
mov edx, dword [rax]
mov rax, qword [rbp - 0x28]
mov dword [rax], edx
lea rax, [rbp - 0xc]
mov rdi, rax
call sym.std::move_int__
mov edx, dword [rax]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rcx, rax
mov rax, rcx
sar rax, 2
mov rsi, rax
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x18]
mov r8, rcx
mov ecx, edx
mov rdx, rsi
mov esi, 0
mov rdi, rax
call sym.std::__adjust_heap_int__long_int___gnu_cxx::__ops::_Iter_comp_iter_bool____int_int___
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x401675
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::swap_int_
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_int__false_::_S_base
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::__niter_base_int__
mov r12, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__niter_base_int__
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__niter_base_int__
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::__copy_move_backward_a_true_int__int__
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov ecx, dword [rdx]
mov rdx, qword [rbp - 0x10]
mov edx, dword [rdx]
mov esi, ecx
mov edi, edx
call rax
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov dword [rbp - 0x3c], ecx
mov qword [rbp - 0x50], r8
mov rax, qword [rbp - 0x30]
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x30]
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
sub rax, 1
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
cmp rax, qword [rbp - 0x20]
jle 0x401831
mov rax, qword [rbp - 0x20]
add rax, 1
add rax, rax
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x20]
shl rax, 2
lea rdx, [rax - 4]
mov rax, qword [rbp - 0x28]
add rdx, rax
mov rax, qword [rbp - 0x20]
lea rcx, [rax*4]
mov rax, qword [rbp - 0x28]
add rcx, rax
lea rax, [rbp - 0x50]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::__ops::_Iter_comp_iter_bool____int_int__::operator___int__int__
test al, al
je 0x4017f1
sub qword [rbp - 0x20], 1
mov rax, qword [rbp - 0x30]
lea rdx, [rax*4]
mov rax, qword [rbp - 0x28]
lea rbx, [rdx + rax]
mov rax, qword [rbp - 0x20]
lea rdx, [rax*4]
mov rax, qword [rbp - 0x28]
add rax, rdx
mov rdi, rax
call sym.std::move_int__
mov eax, dword [rax]
mov dword [rbx], eax
mov rax, qword [rbp - 0x20]
mov qword [rbp - 0x30], rax
jmp 0x401785
mov rax, qword [rbp - 0x38]
and eax, 1
test rax, rax
jne 0x4018a6
mov rax, qword [rbp - 0x38]
sub rax, 2
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
cmp rax, qword [rbp - 0x20]
jne 0x4018a6
mov rax, qword [rbp - 0x20]
add rax, 1
add rax, rax
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x30]
lea rdx, [rax*4]
mov rax, qword [rbp - 0x28]
lea rbx, [rdx + rax]
mov rax, qword [rbp - 0x20]
shl rax, 2
lea rdx, [rax - 4]
mov rax, qword [rbp - 0x28]
add rax, rdx
mov rdi, rax
call sym.std::move_int__
mov eax, dword [rax]
mov dword [rbx], eax
mov rax, qword [rbp - 0x20]
sub rax, 1
mov qword [rbp - 0x30], rax
mov rax, qword [rbp - 0x50]
mov rdi, rax
call sym.__gnu_cxx::__ops::__iter_comp_val_bool____int_int__
mov rbx, rax
lea rax, [rbp - 0x3c]
mov rdi, rax
call sym.std::move_int__
mov ecx, dword [rax]
mov rdx, qword [rbp - 0x18]
mov rsi, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
mov r8, rbx
mov rdi, rax
call sym.std::__push_heap_int__long_int___gnu_cxx::__ops::_Iter_comp_val_bool____int_int___
nop
add rsp, 0x48
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_int__
mov eax, dword [rax]
mov dword [rbp - 0xc], eax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_int__
mov edx, dword [rax]
mov rax, qword [rbp - 0x18]
mov dword [rax], edx
lea rax, [rbp - 0xc]
mov rdi, rax
call sym.std::move_int__
mov edx, dword [rax]
mov rax, qword [rbp - 0x20]
mov dword [rax], edx
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x40194f
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_int__false_::_S_base
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__copy_move_backward_true_true_std::random_access_iterator_tag_::__copy_move_b_int_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x20], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x20]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__ops::_Iter_comp_val_bool____int_int__::_Iter_comp_val
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4019f0
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov dword [rbp - 0x3c], ecx
mov qword [rbp - 0x50], r8
mov rax, qword [rbp - 0x30]
sub rax, 1
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x30]
cmp rax, qword [rbp - 0x38]
jle 0x401a63
mov rax, qword [rbp - 0x18]
lea rdx, [rax*4]
mov rax, qword [rbp - 0x28]
lea rcx, [rdx + rax]
lea rdx, [rbp - 0x3c]
lea rax, [rbp - 0x50]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::__ops::_Iter_comp_val_bool____int_int__::operator___int__int_
test al, al
je 0x401a63
mov eax, 1
jmp 0x401a68
mov eax, 0
test al, al
je 0x401ac5
mov rax, qword [rbp - 0x30]
lea rdx, [rax*4]
mov rax, qword [rbp - 0x28]
lea rbx, [rdx + rax]
mov rax, qword [rbp - 0x18]
lea rdx, [rax*4]
mov rax, qword [rbp - 0x28]
add rax, rdx
mov rdi, rax
call sym.std::move_int__
mov eax, dword [rax]
mov dword [rbx], eax
mov rax, qword [rbp - 0x18]
mov qword [rbp - 0x30], rax
mov rax, qword [rbp - 0x30]
sub rax, 1
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
mov qword [rbp - 0x18], rax
jmp 0x401a27
mov rax, qword [rbp - 0x30]
lea rdx, [rax*4]
mov rax, qword [rbp - 0x28]
lea rbx, [rdx + rax]
lea rax, [rbp - 0x3c]
mov rdi, rax
call sym.std::move_int__
mov eax, dword [rax]
mov dword [rbx], eax
nop
add rsp, 0x48
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rdx, rax
mov rax, rdx
sar rax, 2
mov qword [rbp - 8], rax
cmp qword [rbp - 8], 0
je 0x401b52
mov rax, qword [rbp - 8]
lea rdx, [rax*4]
mov rax, qword [rbp - 8]
shl rax, 2
neg rax
mov rcx, rax
mov rax, qword [rbp - 0x28]
add rcx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rax
mov rdi, rcx
call sym.imp.memmove
mov rax, qword [rbp - 8]
shl rax, 2
neg rax
mov rdx, rax
mov rax, qword [rbp - 0x28]
add rax, rdx
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov ecx, dword [rdx]
mov rdx, qword [rbp - 0x10]
mov edx, dword [rdx]
mov esi, ecx
mov edi, edx
call rax
leave
ret
nop word cs:[rax + rax]
nop dword [rax]
push r15
push r14
mov r15d, edi
push r13
push r12
lea r12, [rip + 0x201226]
push rbp
lea rbp, [rip + 0x20122e]
push rbx
mov r14, rsi
mov r13, rdx
sub rbp, r12
sub rsp, 8
sar rbp, 3
call sym._init
test rbp, rbp
je 0x401c16
xor ebx, ebx
nop dword [rax + rax]
mov rdx, r13
mov rsi, r14
mov edi, r15d
call qword [r12 + rbx*8]
add rbx, 1
cmp rbx, rbp
jne 0x401c00
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
nop word cs:[rax + rax]
ret
add byte [rax], al
sub rsp, 8
add rsp, 8
ret
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add al, 0
add byte [rax], al
or byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], 0
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add al, 0
add byte [rax], al
or byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, 0
add byte [rax], al
add eax, 0x6000000
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], cl
or byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
or al, byte [rax]
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
or al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
jmp qword [rip + 0x6c250064]
add byte fs:[rip + 0x2000666c], ah
and eax, 0x73250063
add byte [rax], al
add dl, dh
add eax, dword [rax]
add byte [rip + 0x6634312e], ah
and eax, 0x6634312e
or al, byte [rax]
jae 0x401d78
and byte [rbx], ah
and eax, 0x203a64
add byte [rax], al
add dword [rbx], ebx
add edi, dword [rbx]
lock add dword [rax], eax
add byte [rip - 0x7c000000], bh
jmp 0x27d1d2d
add byte [rax], al
xor al, 0xea
dec dword [rdx + rax]
add byte [rax], al
sub ch, bl
inc dword [rdx + rax - 0x14b10000]
jmp qword [rdx + rax - 0x148c0000]
inc esp
add al, byte [rax]
add byte [rcx - 0x1b000015], bl
add al, byte [rax]
add byte [rsi + 0x4ffffeb], bh
add eax, dword [rax]
add bl, ah
jmp 0x401d62
jmp qword [rbx + rax]
add byte [rax], al
jmp 0x401d6a
inc dword [rbx + rax]
add byte [rax], dl
in al, dx
jmp qword [rbx + rax]
add byte [rax], bh
in al, dx
inc dword [rbx + rax - 0x13c10000]
jmp qword [rbx + rax - 0x13650000]
inc esp
add eax, dword [rax]
add dl, cl
in al, dx
jmp rsp
add eax, dword [rax]
add dl, dh
in eax, dx
inc dword [rsp + rax]
add byte [rax], al
mov ebp, esi
jmp qword [rcx + rcx]
add cl, cl
out dx, al
inc dword [rcx + rcx - 0x11220000]
jmp qword [rdx + rax]
add byte [rip + 0x24ffffef], al
add al, 0
add byte [rax], dh
out dx, eax
inc dword [rsp + rax]
add byte [rbx - 0x11], bl
jmp qword [rsp + rax]
add byte [rdi + rbp*8 + 0x484ffff], dl
add byte [rax], al
ret 0xffef
jmp qword [rsp + rax - 0x101e0000]
inc esp
add al, 0
add byte [rdx], al
jmp rsp
add al, 0
add byte [rdx - 0x10], cl
inc dword [rax - 0xf460000]
jmp qword [rax - 0xf2c0000]
inc dword [rbp + rax]
add byte [rbp - 0xf], ah
jmp qword [rbp + rax]
add bh, bl
int1
inc dword [rbp + rax - 0xdd70000]
jmp qword [rbp + rax - 0xd4c0000]
inc esp
add eax, 0xf2c20000
jmp rsp
add eax, 0xf3a90000
inc dword [rsi + rax]
add byte [rax], al
div ebx
jmp qword [rsi + rax]
add byte [rax], al
jne 0x401e36
inc dword [rsi + rax]
add byte [rdi + 0x64fffff4], bh
add byte [rax], al
out 0xf5, eax
inc dword [rsi + rax - 0x98c0000]
jmp qword [rsi + rax - 0x95d0000]
inc esp
add byte [rax], al
out dx, eax
idiv bh
in al, dx
add byte [rax], al
idiv edi
dec dword [rdi + rax]
add byte [rax], al
idiv edi
ljmp [rdi + rax]
add byte [rax], al
mov eax, 0x4cfffff8
add byte [rax], al
pop rbx
stc
ljmp [rdi + rax]
add byte [rcx - 0x73000007], al
add byte [rax], al
wait
stc
ljmp [rdi + rax - 0x60c0000]
call rsp
add byte [rax], al
cli
push rsp
add byte [rax], al
cmp eax, 0x14fffffa
or byte [rax], al
add dh, al
sti
cmp al, 8
add byte [rax], al
xor eax, 0x5cfffffc
or byte [rax], al
add byte [rbx - 4], al
jl 0x401ed6
add byte [rax], al
pop rbp
cld
lcall [rax + rcx - 0x3720000]
mov esp, 0xd6000008
cld
fmul qword [rax]
add byte [rax], al
std
inc dword [rcx + rcx]
add byte [rax], al
jmp qword [rcx + rcx]
add byte [rax], al
push 0x44fffffe
or dword [rax], eax
add byte [rsi + rdi*8 + 0x9a4ffff], ah
add byte [rax], al
adc al, 0xff
in al, dx
or dword [rax], eax
add byte [rax + rax], dl
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x401f2f
add dword [rbx], ebx
or al, 7
or byte [rax + 0x14100701], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
and al, ch
ljmp [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x401f5f
add dword [rbx], ebx
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
out 0xff, eax
jmp qword [rax]
adc byte [rsi + 0xe], al
sbb byte [rdx + 0xf], cl
or esi, dword [rdi + 8]
add byte [rax], 0x3f
sbb bh, byte [rbx]
sub dh, byte [rbx]
and al, 0x22
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], r8b
add byte [rdx - 0x14], dh
jmp qword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte fs:[rax], al
add byte [rsi + 0x25ffffe8], bl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rax], al
add byte [rax], al
movabs dword [0x25ffffe8], eax
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
add byte [rax + 0x25ffffe8], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x25ffffe8], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0
add byte [rax], al
mov dl, 0xe8
jmp qword [rip]
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 1
add byte [rax], al
mov bh, 0xe8
inc dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 1
add byte [rax], al
sahf
call 0x67206d
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add dword [rax], r8d
add byte [rax + rbp*8 + 0x28ffff], ah
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
movsxd rcx, dword [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add dword fs:[rax], eax
add byte [rax + rbp*8 + 0x7ffff], ch
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rcx], al
add byte [rax], al
xchg eax, ebx
call 0x9d20cd
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add dword [rax], eax
add bh, cl
call 0x7020ed
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push 0xc
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add dword [rax], eax
add dh, bl
call 0x169210d
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add esp, dword [rbx]
add dword [rdi + rax], ecx
or byte [rax], al
sbb al, 0
add byte [rax], al
in al, 1
add byte [rax], al
out 0xe9, al
lcall [rcx]
adc byte [rsi + 0x60d4302], al
add dl, byte [rsp + rcx + 0x807]
sbb al, 0
add byte [rax], al
add al, 2
add byte [rax], al
fldl2e
ljmp [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 2
add byte [rax], al
in al, 0xea
ljmp [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add r8b, byte [rax]
add bh, ch
cmp dword [rax], eax
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
je 0x4021a7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, byte fs:[rax]
add byte [rax], cl
jmp 0x4021aa
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
test byte [rdx], al
add byte [rax], al
jmp 0x4021ca
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add al, byte [rax]
add byte [rsi], dl
jmp 0x4021ea
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, byte [rax]
add byte [rsi], dl
jmp 0x40220a
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
in al, 2
add byte [rax], al
jmp 0x40222a
push qword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ch, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add al, 3
add byte [rax], al
mov gs, ebx
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 3
add byte [rax], al
mov bl, ch
call qword [rcx]
adc byte [rsi + 0x60d4302], al
add cl, byte [rsp + rcx + 0x807]
sbb al, 0
add byte [rax], al
add r8d, dword [rax]
add cl, bh
jmp 0x40228a
jp 0x40228e
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dh, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add eax, dword fs:[rax]
add byte [rbx - 0x14], dl
dec dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
test byte [rbx], al
add byte [rax], al
jge 0x4022b6
dec dword [rbx]
adc byte [rsi + 0x60d4302], al
add al, byte [rsi + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add eax, dword [rax]
add al, ch
in al, dx
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add eax, dword [rax]
add dh, dl
in al, dx
jmp rdi
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add ah, dl
or al, 7
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
in al, 3
add byte [rax], al
popfq
in eax, dx
dec dword [rsi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rcx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add al, 4
add byte [rax], al
retf
in eax, dx
jle 0x40234e
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bh, byte [rcx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
and al, 4
add byte [rax], al
sub esi, ebp
dec dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add al, 0
add byte [rbx - 0x12], dl
ljmp [rax]
add dword [rax], eax
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add esp, dword [rbx]
add dword [rdi + rax], ecx
or byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0
add byte [rbx - 0x11], bl
dec dword [rbp]
adc byte [rsi + 0x60d4302], al
add cl, byte [rax + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
test byte [rax + rax], al
add al, cl
out dx, eax
ljmp [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push 0xc
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add al, 0
add bh, dl
out dx, eax
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
add al, 0
add bl, bh
out dx, eax
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
in al, dx
add al, 0
add byte [rbx], ah
jmp qword [rsi]
adc byte [rsi + 0x60d4302], al
add ah, byte [rcx + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
or al, 5
add byte [rax], al
test eax, 0xdbfffff0
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dl, dh
or al, 7
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sub al, 5
add byte [rax], al
int1
jmp qword [rbx]
adc byte [rsi + 0x60d4302], al
add bl, byte [rsi + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
add rax, -0xe190000
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
add eax, 0xf1ed0000
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov word [rip - 0xe190000], es
lcall [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x4c
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 5
add byte [rax], al
sbb dl, dh
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add eax, 0xf2120000
ljmp [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push 0xc
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
hlt
add eax, 0xf2210000
dec dword [rcx + 1]
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
jg 0x402550
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sbb al, 6
add byte [rax], al
ljmp [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ch, byte [rdx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cmp al, 6
add byte [rax], al
sal ebx, 1
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add byte [rax], al
mov edi, 0x1afffff3
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x4025c4
add byte [rax], al
mov ecx, 0x31fffff3
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add byte [rax], al
retf -0xd
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
mov esp, 0xf2000006
inc dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
cmc
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 6
add byte [rax], al
leave
hlt
js 0x40262e
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dh, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add al, 7
add byte [rax], al
and dh, ch
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 7
add byte [rax], al
sbb al, 0xf5
ljmp [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push 0xc
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
in eax, 0xff
add byte ds:[rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jns 0x4026a7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
cmp eax, 0x15ffffe5
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rax
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rdi + rax - 0xb080000], al
jmp qword [rbp]
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b8], es
cmp byte [rbx + 0x400e4d07], al
jb 0x402702
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
adc al, 0
add byte [rax], al
int3
add byte [rax], al
and ch, dh
inc dword [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], cl
add byte [rax], al
add byte [rax], al
add ch, ah
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], 0x40
add byte [rax], al
add byte [rax], al
add byte [rip], cl
add byte [rax], al
add byte [rsp + rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
sub eax, 0x60
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], dl
add al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sgdt [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rax], ah
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
fadd dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4005], ch
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4005], dl
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bh
ljmp [rdi]
add byte [rax], al
add byte [rax + 5], al
add byte [rax], al
add byte [rax], al
add bh, bh
ljmp [rdi]
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
ljmp [rdi]
add byte [rax], al
add byte [rax], ah
add eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4006], dh
add byte [rax], al
add dh, al
add byte [rax], al
add byte [rax], al
add dh, dl
add byte [rax], al
add byte [rax], al
add dh, ah
add byte [rax], al
add byte [rax], al
add dh, dh
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x43], al
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x4030e8
je 0x4030f1
and byte [rip + 0x302e342e], dh
sub eax, 0x75627536
outsb dx, byte [rsi]
je 0x4030ff
xor dword [rsi + 0x31], edi
xor byte cs:[rsi + rbp], dh
xor al, 0x29
and byte [rip + 0x302e342e], dh
and byte [rdx], dh
xor byte [rcx], dh
xor byte ss:[rsi], dh
xor byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add al, byte [rax]
push rsp
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, dword [rax]
je 0x4030fc
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], al
cwde
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, 0x4002c000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], al
add byte [rax], dl
add al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], al
add byte [rax], ah
add eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or byte [rax], al
add eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or dword [rax], eax
nop
add eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or al, byte [rax]
test al, 5
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], cl
add byte [rax + 0x4006], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], cl
movabs al, byte [0x4006]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x40074000], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], cl
add byte [rax + 7], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], cl
add byte [rsp + rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], dl
add byte [rax + 0x1c], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], dl
add byte [rbx + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc al, byte [rax]
adc byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], dl
add al, bh
sub eax, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc al, 0
or byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x602e1000], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], dl
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], dl
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], bl
add byte [rax], al
xor byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
sbb dword [rax], eax
xor byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
sbb al, byte [rax]
xor byte [rax], 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add dword [rax], eax
adc eax, 0x602e1000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0x4007], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add al, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rcx], al
add byte [rdx], bl
add byte [rax + 0x6030], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add dword [rax], eax
adc al, 0
or byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, byte [rax]
add byte [rax], ah
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg byte [rax], al
add byte [rax], al
add dword [rax], eax
adc eax, dword [rax]
clc
sub eax, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsd dword [rdi], dword ptr [rsi]
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x10000], ch
adc byte [rax], al
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, al
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rcx + 0x1c], cl
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bl
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rdx + 0x1c], cl
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, ch
add byte [rax], al
add byte [rcx], al
add byte [rdx], bl
add al, cl
jg 0x4034eb
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rsp + rbx + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x1c], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add dword [rax], eax
add byte [rcx], al
add byte [rax], dl
add byte [rcx + 0x1c], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rdx + 0x1c], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 1], dl
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
push rsp
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jne 0x403513
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
pop rax
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, ebp
add dword [rax], eax
add byte [rcx], al
add byte [rax], dl
add byte [rsp + rbx + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov bh, 1
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fadd dword [rcx]
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
std
add dword [rax], eax
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x1c], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 2
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
insb byte [rdi], dx
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte ds:[rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x1c], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rbx
add al, byte [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rsp + rbx + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jns 0x4035d4
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
js 0x4035f6
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cwde
add al, byte [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rsp + rbx + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rdx], 0
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x401c], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
call 0x140361f
add byte [rax], dl
add byte [rsp + rbx + 0x40], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rbx], al
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
mov byte [rax + rax*2], bl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rbx], al
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
mov word [rax + rax*2], ds
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x401c], dl
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rbx], 0
add byte [rcx], al
add byte [rax], dl
add byte [rsp + rbx + 0x40], dl
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
lodsb al, byte [rsi]
add eax, dword [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x401c], bl
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xlatb
add eax, dword [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rsp + rbx + 0x40], bl
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax + rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x401c], ah
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub eax, dword [rax + rax]
add byte [rcx], al
add byte [rax], dl
add byte [rsp + rbx + 0x40], ah
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
add al, 0
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x401c], ch
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jns 0x40370e
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
lodsb al, byte [rsi]
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsd dword [rdi], dword ptr [rsi]
add al, 0
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x401c], dh
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
int 4
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
mov ah, 0x1c
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x401c], bh
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rip + 0x10000]
adc byte [rax], al
mov esp, 0x401c
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x10000
adc byte [rax], al
rcr byte [rax + rax*2], 0
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
push 0x1000005
add byte [rax], dl
add ah, al
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov es, word [rip + 0x10000]
adc byte [rax], al
enter 0x401c, 0
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ah, 5
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
int3
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fld qword [rip + 0x10000]
adc byte [rax], al
rcr byte [rax + rax*2], 1
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rsi]
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub dword [rsi], eax
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
fcomp dword [rax + rax*2]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbx
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
fcomp qword [rax + rax*2]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jle 0x403848
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
loopne 0x403866
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
call 0x407881
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, cl
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
add al, 0x1d
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rsi], 1
add byte [rax], al
add al, byte [rax]
add byte [rdi + 0x400b], ah
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add ch, ah
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
adc eax, 0
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add dword [rax], eax
adc al, byte [rax]
and byte [rdi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x1000007], ah
add byte [rip + 0x602e1000], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
sbb al, 0x1d
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rax], al
add byte [rcx], al
add byte [rax], bl
add byte [rax], al
xor byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rdx
add byte [rax], al
add byte [rax], al
adc eax, dword [rax]
or byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 7], ch
add byte [rax], al
add byte [rax], al
adc eax, dword [rax]
clc
sub eax, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jle 0x403981
add byte [rax], al
add dword [rax], eax
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2000000b], bl
add byte [rcx], bl
add byte [rax + 0x30], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ch
add byte [rax], al
adc dword [rax], eax
sbb al, byte [rax]
push rax
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1f], dl
add byte [rax], al
add byte [rdi + 0x22000007], al
add byte [rsi], cl
add byte [rbp + 0x4016], bl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, al
add byte [rax], al
and al, byte [rax]
add dl, dh
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x1b], ch
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rcx], bl
add byte [rdx], dl
add byte [rsi], cl
add byte [rax], dh
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rcx], ch
add byte [rdx], ah
add byte [rsi], cl
add byte [rsp + rcx + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1200000b], ah
add byte [rsi], cl
add byte [rax + 7], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000008], al
add byte [rsi], cl
add al, dh
or eax, 0x40
add byte [rax], al
xchg eax, ecx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dl
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0xf], al
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], dh
or dword [rax], eax
add byte [rdx], dl
add byte [rsi], cl
add byte [rcx + rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
or dword [rax], eax
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 9], cl
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsp
or dword [rax], eax
add byte [rdx], dl
add byte [rsi], cl
add dh, ah
or dword [rax], eax
add byte [rax], al
add byte [rax], al
sub byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or word [rax], ax
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4013], dl
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 8], ah
add byte [rax], al
adc al, byte [rax]
add byte [rsp + rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x12000009], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add ah, dl
adc eax, 0x40
add byte [rax], al
movabs dword [0x1400000000000000], eax
or al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
or al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add dh, dl
or eax, 0x40
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rdx], dl
add byte [rsi], cl
add byte [rax + 0x4008], dl
add byte [rax], al
add byte [rip], ah
add byte [rax], al
add byte [rdx + rcx], ch
add byte [rcx], dl
add byte [rdx], bl
add byte [rax + 0x6030], ch
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xa], ch
add byte [rax], al
and al, byte [rax]
add cl, bh
adc al, 0x40
add byte [rax], al
add byte [rax], al
add bl, bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2200000a], bh
add byte [rsi], cl
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ch
or al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
or dword [rax], eax
add byte [rcx], dl
add byte [rdx], bl
add al, al
xor byte [rax], ah
add byte [rax], al
add byte [rax], al
nop
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0xb
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
or eax, dword [rax]
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0xb], al
add byte [rax], al
adc dword [rax], eax
adc byte [rax], al
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rsp
or eax, dword [rax]
add byte [rdx], dl
add byte [rsi], cl
add byte [rcx + rcx + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0xb], bl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x400c], dh
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xb], dh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rbx], 0
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x1000000b], bl
add byte [rcx], bl
add byte [rax + 0x30], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2200000b], ch
add byte [rsi], cl
add byte [rdx + 0x4019], ch
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 0xc
add byte [rax], al
and al, byte [rax]
add dh, bl
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
or al, 0
add byte [rdx], ah
add byte [rsi], cl
add dh, bh
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rcx], dh
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x400e], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax + rax], ecx
add byte [rdx], ah
add byte [rsi], cl
add bl, bl
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
sub byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
in al, 0xc
add byte [rax], al
adc al, byte [rax]
add byte [rbx + 8], ch
add byte [rax], al
add byte [rax], al
add byte [rip], ah
add byte [rax], al
add ah, ch
or al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + 0x4016], dh
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
and dword [rip + 0x220000], ecx
add byte [rsp + rcx + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
or eax, 0x120000
add byte [rsi], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bh
or eax, 0x120000
add byte [rdi + 0x4009], dh
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xd], cl
add byte [rax], al
and al, byte [rax]
add byte [rbx + rbx + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2200000d], al
add byte [rsi], cl
add byte [rdi + 0x16], dh
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x1100000d], bl
add bl, byte [rcx]
add byte [rax + 0x30], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2200000d], ch
add byte [rsi], cl
add byte [rbx], al
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
lea eax, [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0xe
add byte [rax], al
adc dword [rdx], eax
sbb dword [rax], eax
push 0x6030
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x19], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
add byte [rax], al
adc al, byte [rax]
add al, al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte gs:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0xe], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rcx
add byte [rax], al
and al, byte [rax]
add byte [rsi], bl
or eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200000e], ah
add byte [rsi], cl
add byte [rbx], dl
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
jle 0x403eb2
add byte [rax], al
add byte [rax], al
add byte [rax], al
hlt
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rdi], ecx
add byte [rax], al
and al, byte [rax]
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
sldt word [rax]
adc byte [rax], al
sbb al, byte [rax]
jo 0x403f22
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0xf], al
add byte [rax], al
and al, byte [rax]
add byte [rcx], ah
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rcx], bl
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xf], bh
add byte [rax], al
and al, byte [rax]
add al, dl
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x1200000f], ch
add byte [rsi], cl
add byte [rbp + 0x4008], dh
add byte [rax], al
add byte [rip], ah
add byte [rax], al
add byte [rdx + 0x2200000f], dh
add byte [rsi], cl
add dh, bl
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
out 0, eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], edx
add byte [rax], al
adc al, byte [rax]
add byte [rbx + 9], bl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add cl, ch
adc eax, dword [rax]
add byte [rcx], dl
add byte [rdx], bl
add byte [rax + 0x6030], ah
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or edx, dword [rax]
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x17], bl
add byte [rax], al
add byte [rax], al
add byte [rcx + 1], cl
add byte [rax], al
add byte [rdi + 0x10], bl
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x4011], dl
add byte [rax], al
add byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x22000010
add byte [rsi], cl
add ch, al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rsi + 7], ah
add byte [rax], al
adc byte [rax], al
sbb al, byte [rax]
sar byte [rdi + 0x60], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add bl, bh
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rdx
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + 0x14], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rsi + 0x22000011], ah
add byte [rsi], cl
add byte [rdi + 0xc], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, al
adc dword [rax], eax
add byte [rdx], dl
add byte [rsi], cl
add bh, bh
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0xd], ah
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, 0x22000012
add byte [rsi], cl
add dh, bh
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
adc al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add dl, bh
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rdx], ch
add byte [rax], al
adc al, byte [rax]
add dl, bl
or byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, 0
add byte [rax], al
add byte [rdx + rdx], dh
add byte [rax], al
and al, byte [rax]
add cl, dh
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
js 0x4040da
add byte [rax], al
add byte [rax], al
add byte [rax], al
cdq
adc al, byte [rax]
add byte [rax], dl
add byte [rcx], bl
add byte [rax + 0x30], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000012], ah
add byte [rsi], cl
add dh, bl
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rdx + 0x220000], dh
add byte [rdx + 0x1b], ch
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, ah
adc al, byte [rax]
add byte [rcx], dl
add byte [rdx], bl
add byte [rax], al
jo 0x404193
add byte [rax], al
add byte [rax], al
add al, cl
sldt word [rax]
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x19], bh
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
adc eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add dl, ah
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
outsd dx, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
adc eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx], ah
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x13], al
add byte [rax], al
and al, byte [rax]
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000013], al
add byte [rsi], cl
add byte [rdi + 0x4013], bh
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000013], ch
add byte [rsi], cl
add byte [rdi + 0x19], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, ah
adc eax, dword [rax]
add byte [rdx], dl
add byte [rsi], cl
add byte [rsi], cl
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
cdq
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0xe], al
add byte [rax], al
adc al, byte [rax]
or eax, dword [rax]
add byte [rsi], 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ch
adc eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add dh, dl
or eax, 0x40
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sysret
add byte [rax], al
adc al, byte [rax]
add byte [rsi + 8], al
add byte [rax], al
add byte [rax], al
add byte [rip], ah
add byte [rax], al
add byte [rsi], bl
adc al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx], cl
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x72], ah
je 0x4042c0
je 0x4042c4
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
pop rdi
pop rdi
add byte [rbp + 0x72], ah
imul esi, dword gs:[ebx + 0x74], 0x745f7265
insd dword [rdi], dx
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x404276
pop rdi
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x4042f4
jb 0x4042fa
pop rdi
jne 0x404303
add byte [rbx + 0x6f], ah
insd dword [rdi], dx
jo 0x4042fd
je 0x4042f9
xor eax, 0x5f003538
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x404319
jb 0x40431f
pop rdi
jne 0x404328
pop rdi
imul bp, word [rsi + 0x69], 0x615f
jb 0x40432b
jns 0x40431b
outsb dx, byte gs:[rsi]
je 0x404332
jns 0x4042c2
jb 0x404326
insd dword [rdi], dx
pop rdi
jne 0x404338
insd dword [rdi], dx
jns 0x4042ce
pop rdi
pop rdi
jb 0x404334
insd dword [rdi], dx
pop rdi
jne 0x404346
insd dword [rdi], dx
jns 0x40433b
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x404346
jns 0x404346
outsb dx, byte gs:[rsi]
je 0x40435d
jns 0x4042ed
jo 0x404350
movsxd rsi, dword cs:[rax + 0x70]
add byte [rdi + 0x5a], bl
push rbx
je 0x404345
xor dword [rcx], edi
jo 0x404366
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x40437e
jb 0x404381
movsxd rsi, dword [rax + rax + 0x5f]
pop rdx
push rbx
je 0x404360
xor dword [rbx], esi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40437f
jb 0x40438a
add byte [rdi + 0x5a], bl
push rbx
je 0x404375
imul esp, dword ss:[rdi + 0x6e], 0x65726f
pop rdi
pop rdx
push rbx
je 0x404382
cmp byte [rdi + 0x5f], bl
imul ebp, dword [rdi + 0x69], 0x74696e
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4043a9
movsxd rdi, dword [rax + 0x78]
xor r14b, byte [rcx]
pop rdi
pop rdi
jne 0x4043c4
je 0x4043b9
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4043d0
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x5a5f0045
push rbx
je 0x4043b8
xor dword [rax], esi
jb 0x4043d3
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx]
pop rdi
pop rdx
push rbx
je 0x4043ca
xor dword [rcx], esi
je 0x4043f4
jns 0x4043e3
je 0x4043f5
pop rdi
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx]
pop rdi
pop rdx
push rbx
je 0x4043dd
xor dword [rax], esi
outsd dx, dword fs:[rsi]
jo 0x40440c
pop rdi
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx]
pop rdi
pop rdx
push rbx
je 0x4043d5
xor eax, 0x65676572
js 0x40440a
movsxd rbp, dword [rdi + 0x6e]
jae 0x404424
outsb dx, byte [rsi]
je 0x404427
xor rax, 0x73616369
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x4043f4
xor eax, 0x65676572
js 0x404429
movsxd rbp, dword [rdi + 0x6e]
jae 0x404443
outsb dx, byte [rsi]
je 0x404446
outsb dx, byte ss:[rsi]
outsd dx, dword [rsi]
jae 0x40444e
jae 0x404421
add byte [rdi + 0x5a], bl
push rbx
je 0x404414
xor eax, 0x65676572
js 0x404449
movsxd rbp, dword [rdi + 0x6e]
jae 0x404463
outsb dx, byte [rsi]
je 0x404466
cmp byte [rdi + 0x70], r13b
je 0x404462
insd dword [rdi], dx
imul edi, dword [rdx + 0x65], 0x5a5f0045
push rbx
je 0x404436
xor eax, 0x65676572
js 0x40446b
movsxd rbp, dword [rdi + 0x6e]
jae 0x404485
outsb dx, byte [rsi]
je 0x404488
movsxd rbp, dword [rdi + 0x6c]
insb byte [rdi], dx
je 0x404483
add byte [r15 + 0x5a], r11b
push rbx
je 0x404457
xor eax, 0x65676572
js 0x40448c
movsxd rbp, dword [rdi + 0x6e]
jae 0x4044a6
outsb dx, byte [rsi]
je 0x4044a9
xor qword [rax], r14
push r11
movsxd rsi, dword [rdx + 0x69]
jo 0x4044b7
add byte [r15 + 0x5a], r11b
push rbx
je 0x40447c
xor eax, 0x65676572
js 0x4044b1
movsxd rbp, dword [rdi + 0x6e]
jae 0x4044cb
outsb dx, byte [rsi]
je 0x4044ce
xor rax, 0x69736162
movsxd rax, dword [rbp]
pop rdi
pop rdx
push rbx
je 0x40449b
xor eax, 0x65676572
js 0x4044d0
movsxd rbp, dword [rdi + 0x6e]
jae 0x4044ea
outsb dx, byte [rsi]
je 0x4044ed
cmp byte [rbp + 0x78], r12b
je 0x4044e5
outsb dx, byte [rsi]
add byte fs:[r15 + 0x5a], r11b
push rbx
je 0x4044bd
xor eax, 0x65676572
js 0x4044f2
movsxd rbp, dword [rdi + 0x6e]
jae 0x40450c
outsb dx, byte [rsi]
je 0x40450f
xor r12, qword [rcx + 0x77]
imul eax, dword [rbp], 0x5f
pop rdx
push rbx
je 0x4044da
xor eax, 0x65676572
js 0x40450f
movsxd rbp, dword [rdi + 0x6e]
jae 0x404529
outsb dx, byte [rsi]
je 0x40452c
xor al, 0x67
jb 0x404523
jo 0x404505
add byte [rdi + 0x5a], bl
push rbx
je 0x4044f8
xor eax, 0x65676572
js 0x40452d
movsxd rbp, dword [rdi + 0x6e]
jae 0x404547
outsb dx, byte [rsi]
je 0x40454a
xor rax, 0x65726765
jo 0x404524
add byte [rdi + 0x5a], bl
push rbx
je 0x404517
xor eax, 0x65676572
js 0x40454c
movsxd rbp, dword [rdi + 0x6e]
jae 0x404566
outsb dx, byte [rsi]
je 0x404569
xor qword [rbx], r14
insd dword [rdi], dx
je 0x404560
push 0x6665645f
jne 0x404571
je 0x40454c
add byte [rdi + 0x5a], bl
push rbx
je 0x40453f
xor eax, 0x65676572
js 0x404574
movsxd rbp, dword [rdi + 0x6e]
jae 0x40458e
outsb dx, byte [rsi]
je 0x404591
xor qword [rbx], r14
insd dword [rdi], dx
je 0x404588
push 0x746f6e5f
pop rdi
outsd dx, dword [rsi]
insb byte [rdi], dx
add byte [r15 + 0x5a], r11b
push rbx
je 0x404567
xor eax, 0x65676572
js 0x40459c
movsxd rbp, dword [rdi + 0x6e]
jae 0x4045b6
outsb dx, byte [rsi]
je 0x4045b9
xor qword [rbx], r14
insd dword [rdi], dx
je 0x4045b0
push 0x746f6e5f
pop rdi
outsd dx, dword gs:[rsi]
insb byte [rdi], dx
add byte [r15 + 0x5a], r11b
push rbx
je 0x40458f
xor eax, 0x65676572
js 0x4045c4
movsxd rbp, dword [rdi + 0x6e]
jae 0x4045de
outsb dx, byte [rsi]
je 0x4045e1
xor qword [rbx], r14
insd dword [rdi], dx
je 0x4045d8
push 0x746f6e5f
pop rdi
outsd dx, dword [rsi]
ja 0x4045c4
add byte [rdi + 0x5a], bl
push rbx
je 0x4045b7
xor eax, 0x65676572
js 0x4045ec
movsxd rbp, dword [rdi + 0x6e]
jae 0x404606
outsb dx, byte [rsi]
je 0x404609
xor qword [rbx], r14
insd dword [rdi], dx
je 0x404600
push 0x746f6e5f
pop rdi
outsd dx, dword gs:[rsi]
ja 0x4045ec
add byte [rdi + 0x5a], bl
push rbx
je 0x4045df
xor eax, 0x65676572
js 0x404614
movsxd rbp, dword [rdi + 0x6e]
jae 0x40462e
outsb dx, byte [rsi]
je 0x404631
cmp qword [rbp + 0x61], r13
je 0x404627
push 0x796e615f
add byte [r15 + 0x5a], r11b
push rbx
je 0x404602
xor eax, 0x65676572
js 0x404637
movsxd rbp, dword [rdi + 0x6e]
jae 0x404651
outsb dx, byte [rsi]
je 0x404654
xor qword [rbp*2 + 0x68637461], r14
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
je 0x40464d
outsb dx, byte [rsi]
jne 0x40465d
insb byte [rdi], dx
add byte [r15 + 0x5a], r11b
push rbx
je 0x40462b
xor eax, 0x65676572
js 0x404660
movsxd rbp, dword [rdi + 0x6e]
jae 0x40467a
outsb dx, byte [rsi]
je 0x40467d
xor qword [rsi], r14
insd dword [rdi], dx
je 0x404674
push 0x6e6f635f
je 0x404681
outsb dx, byte [rsi]
jne 0x40468a
jne 0x404690
add byte [r15 + 0x5a], r11b
push rbx
je 0x404656
xor eax, 0x65676572
js 0x40468b
movsxd rbp, dword [rdi + 0x6e]
jae 0x4046a5
outsb dx, byte [rsi]
je 0x4046a8
xor qword [rsi], r14
insd dword [rdi], dx
je 0x40469f
push 0x6572705f
jbe 0x4046a2
jbe 0x4046a7
imul ebp, dword [rbp + rax*2], 0x534e5a5f
je 0x404681
xor eax, 0x65676572
js 0x4046b6
movsxd rbp, dword [rdi + 0x6e]
jae 0x4046d0
outsb dx, byte [rsi]
je 0x4046d3
xor qword [rsi], r14
outsd dx, dword [rsi]
jb 0x4046d4
je 0x4046c9
jne 0x4046dc
je 0x4046b7
add byte [rdi + 0x5a], bl
push rbx
je 0x4046aa
xor eax, 0x65676572
js 0x4046df
movsxd rbp, dword [rdi + 0x6e]
jae 0x4046f9
outsb dx, byte [rsi]
je 0x4046fc
xor qword [rax], r14
outsw dx, word [rsi]
jb 0x4046fd
je 0x4046f2
jae 0x4046fa
add byte fs:[r15 + 0x5a], r11b
push rbx
je 0x4046cf
xor eax, 0x65676572
js 0x404704
movsxd rbp, dword [rdi + 0x6e]
jae 0x40471e
outsb dx, byte [rsi]
je 0x404721
xor qword [rsi], r14
outsd dx, dword [rsi]
jb 0x404722
je 0x404717
outsb dx, byte [rsi]
outsd dx, dword [rsi]
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x404705
add byte [rdi + 0x5a], bl
push rbx
je 0x4046f8
xor eax, 0x65676572
js 0x40472d
movsxd rbp, dword [rdi + 0x6e]
jae 0x404747
outsb dx, byte [rsi]
je 0x40474a
xor qword [rdi], r14
outsw dx, word [rsi]
jb 0x40474b
je 0x404740
imul si, word [rdx + 0x73], 0x5f74
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
jns 0x404731
add byte [rdi + 0x5a], bl
push rbx
je 0x404724
xor eax, 0x65676572
js 0x404759
movsxd rbp, dword [rdi + 0x6e]
jae 0x404773
outsb dx, byte [rsi]
je 0x404776
xor qword [rbx], r14
jb 0x40477b
outsd dx, dword [rsi]
jb 0x40476b
movsxd rbp, dword [rdi + 0x6c]
insb byte [rdi], dx
je 0x404778
add byte [r15 + 0x5a], r11b
push rbx
je 0x40474c
xor eax, 0x65676572
js 0x404781
movsxd rbp, dword [rdi + 0x6e]
jae 0x40479b
outsb dx, byte [rsi]
je 0x40479e
xor qword [rcx], r14
jb 0x4047a3
outsd dx, dword [rsi]
jb 0x404793
movsxd rsi, dword [rcx + rdi*2 + 0x70]
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x404772
xor eax, 0x65676572
js 0x4047a7
movsxd rbp, dword [rdi + 0x6e]
jae 0x4047c1
outsb dx, byte [rsi]
je 0x4047c4
xor qword [rdx], r14
jb 0x4047c9
outsd dx, dword [rsi]
jb 0x4047b9
jae 0x4047c0
jo 0x4047c5
add byte [r15 + 0x5a], r11b
push rbx
je 0x404799
xor eax, 0x65676572
js 0x4047ce
movsxd rbp, dword [rdi + 0x6e]
jae 0x4047e8
outsb dx, byte [rsi]
je 0x4047eb
xor qword [rbx], r14
jb 0x4047f0
outsd dx, dword [rsi]
jb 0x4047e0
movsxd rbp, dword [rbx + 0x72]
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x4047c1
xor eax, 0x65676572
js 0x4047f6
movsxd rbp, dword [rdi + 0x6e]
jae 0x404810
outsb dx, byte [rsi]
je 0x404813
xor qword [rcx], r14
jb 0x404818
outsd dx, dword [rsi]
jb 0x404808
jb 0x40480d
movsxd rbp, dword [rbx + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x4047e7
xor eax, 0x65676572
js 0x40481c
movsxd rbp, dword [rdi + 0x6e]
jae 0x404836
outsb dx, byte [rsi]
je 0x404839
xor qword [rcx], r14
jb 0x40483e
outsd dx, dword [rsi]
jb 0x40482e
jo 0x404832
jb 0x404838
outsb dx, byte [rsi]
add byte [r15 + 0x5a], r11b
push rbx
je 0x40480d
xor eax, 0x65676572
js 0x404842
movsxd rbp, dword [rdi + 0x6e]
jae 0x40485c
outsb dx, byte [rsi]
je 0x40485f
xor qword [rcx], r14
jb 0x404864
outsd dx, dword [rsi]
jb 0x404854
jb 0x404859
movsxd rsp, dword [rbp + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x404833
xor eax, 0x65676572
js 0x404868
movsxd rbp, dword [rdi + 0x6e]
jae 0x404882
outsb dx, byte [rsi]
je 0x404885
xor qword [0x726f7272], r14
pop rdi
jb 0x404882
movsxd rsp, dword [rbp + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x40485c
xor eax, 0x65676572
js 0x404891
movsxd rbp, dword [rdi + 0x6e]
jae 0x4048ab
outsb dx, byte [rsi]
je 0x4048ae
xor qword [rcx], r14
jb 0x4048b3
outsd dx, dword [rsi]
jb 0x4048a3
jb 0x4048a7
outsb dx, byte [rsi]
add byte gs:[r15d + 0x5a], r11b
push rbx
je 0x404882
xor eax, 0x65676572
js 0x4048b7
movsxd rbp, dword [rdi + 0x6e]
jae 0x4048d1
outsb dx, byte [rsi]
je 0x4048d4
xor qword [rcx], r14
jb 0x4048d9
outsd dx, dword [rsi]
jb 0x4048c9
jae 0x4048dc
movsxd rsp, dword [rbp + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x4048a8
xor eax, 0x65676572
js 0x4048dd
movsxd rbp, dword [rdi + 0x6e]
jae 0x4048f7
outsb dx, byte [rsi]
je 0x4048fa
xor qword [rip + 0x6f727265], r14
jb 0x4048ef
jb 0x4048fa
jo 0x4048fc
je 0x4048df
add byte [rdi + 0x5a], bl
push rbx
je 0x4048d2
xor eax, 0x65676572
js 0x404907
movsxd rbp, dword [rdi + 0x6e]
jae 0x404921
outsb dx, byte [rsi]
je 0x404924
xor qword [rsi], r14
jb 0x404929
outsd dx, dword [rsi]
jb 0x404919
movsxd rbp, dword [rdi + 0x6d]
jo 0x40492b
js 0x40492b
je 0x40493d
add byte [r15 + 0x5a], r11b
push rbx
je 0x4048fd
xor eax, 0x65676572
js 0x404932
movsxd rbp, dword [rdi + 0x6e]
jae 0x40494c
outsb dx, byte [rsi]
je 0x40494f
xor qword [rcx], r14
jb 0x404954
outsd dx, dword [rsi]
jb 0x404944
jae 0x40495b
movsxd rbp, dword [rbx + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x40492a
pop rdi
pop rdi
je 0x404959
imul ebp, dword [rsp + rcx*2 + 0x31], 0x5f535f39
imul ebp, dword [rsi + 0x76], 0x64696c61
pop rdi
jae 0x40497e
je 0x404972
pop rdi
imul esp, dword [rbp + rax*2], 0x314c5a5f
add byte [rdi + 0x5a], r11b
xor al, 0x31
pop rdi
pop rdi
jae 0x404994
je 0x40498c
movsxd rbx, dword [rdi + 0x69]
outsb dx, byte [rsi]
imul esi, dword [rcx + rbp*2 + 0x61], 0x617a696c
je 0x40499a
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
outsb dx, byte [rsi]
pop rdi
jae 0x4049b0
jb 0x4049b3
movsxd rsi, dword [rcx + rbp*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
xor byte [rcx + 0x69], ch
add byte [rdi + 0x47], bl
pop rdi
pop rdi
jae 0x4049c8
pop rdi
pop r15
pop rdi
pop rdx
xor bl, byte [rdi + 0x52]
push rdx
imul eax, dword [rax], 0x52465f5f
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push r10
pop rdi
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push rbp
pop rdi
pop rdi
push rdx
pop r15
push rdx
add byte [rdi + 0x47], bl
pop rdi
push rbx
push r12
pop rdi
push rsp
pop r15
add byte [rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x404a0e
jns 0x404a0e
outsb dx, byte gs:[rsi]
add byte fs:[rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x404a1f
jns 0x404a1f
jae 0x404a36
jb 0x404a39
add byte [rdi + 0x44], bl
pop rcx
add byte [r15 + 0x5a], bl
push rbx
je 0x404a05
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
imul eax, dword [rbp + 0x4e], 0x31317453
pop rdi
imul r14, qword [r13 + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x404a7f
jo 0x404a6d
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x404a43
xor dword [rdi + 0x5f], ebx
jo 0x404a8c
jae 0x404a81
pop rdi
push 0x49706165
push rax
imul ebp, dword [rcx + rbp*2 + 0x4e], 0x675f5f39
outsb dx, byte [rsi]
jne 0x404a8a
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x404a66
xor al, 0x5f
je 0x404a9f
jb 0x404a9b
movsxd rbp, dword [rdi + 0x6d]
jo 0x404aa0
jbe 0x404aa4
insb byte [rdi], dx
push r8
imul ebp, dword [rcx + 0x45], 0x76454545
push rsp
pop rdi
push rsp
xor byte [rdi + 0x53], bl
cmp byte [rdi + 0x54], bl
xor dword [rdi + 0x54], ebx
xor bl, byte [rdi]
jo 0x404ad2
imul ebp, dword [rsi + 0x74], 0x47404066
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x404adb
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x404ab7
xor al, 0x5f
je 0x404af0
jb 0x404aec
movsxd rbp, dword [rdi + 0x6d]
jo 0x404af1
jbe 0x404af5
insb byte [rdi], dx
push r8
imul ebp, dword [rcx + 0x45], 0x45324345
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul bp, word [rsi + 0x69], 0x5f00
pop rdx
xor dword [rdx + 0x49], edx
jbe 0x404b12
push rsp
pop rdi
jo 0x404b17
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x404aff
pop rdi
pop rdi
imul ebp, dword [rsi + 0x74], 0x6f736f72
jb 0x404b4e
pop rdi
insb byte [rdi], dx
outsd dx, dword [rsi]
outsd dx, dword [rsi]
jo 0x404b29
push rax
imul ebp, dword [rsi + rcx*2 + 0x39], 0x6e675f5f
jne 0x404b4a
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x404b26
xor eax, 0x6574495f
jb 0x404b5b
movsxd rbp, dword [rdi + 0x6d]
jo 0x404b60
imul esi, dword [rbp + 0x72], 0x62465049
imul ebp, dword [rcx + 0x45], 0x76454545
push rsp
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi + 0x54], bl
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x404b53
pop rdi
pop rdi
jne 0x404b94
jne 0x404b8a
jb 0x404b8f
pop rdi
jo 0x404b91
jb 0x404ba6
imul esi, dword [rcx + rbp*2 + 0x6f], 0x69705f6e
jbe 0x404bab
je 0x404b87
push rax
imul ecx, dword [rsi + 0x39], 0x6e675f5f
jne 0x404ba7
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x404b83
xor eax, 0x6574495f
jb 0x404bb8
movsxd rbp, dword [rdi + 0x6d]
jo 0x404bbd
imul esi, dword [rbp + 0x72], 0x62465049
imul ebp, dword [rcx + 0x45], 0x54454545
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
xor bl, byte [rdi + 0x57]
push rdx
js 0x404b81
pop rdi
pop rdi
insd dword [edi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x404bfe
jb 0x404c01
pop rdi
pop rdi
add byte [rdi + 0x4a], bl
jbe 0x404bf3
push rdx
imul esi, dword gs:[ebx + 0x74], 0x6c437265
jae 0x404c14
jae 0x404ba4
pop rdi
pop rdx
xor eax, 0x766c6f73
jbe 0x404bae
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x404c17
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x404bf3
xor eax, 0x6574495f
jb 0x404c28
movsxd rbp, dword [rdi + 0x6d]
jo 0x404c2d
imul esi, dword [rbp + 0x72], 0x62465049
imul ebp, dword [rcx + 0x45], 0x496c6345
push rax
imul edx, dword [rbx + 0x36], 0x6245455f
push rsp
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x404c29
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rbx + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x404c46
xor byte [rdi + 0x5f], bl
jo 0x404c89
jo 0x404c7b
push 0x49706165
push rax
imul ecx, dword [rsi + 0x39], 0x6e675f5f
jne 0x404c8a
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x404c66
xor eax, 0x6574495f
jb 0x404c9b
movsxd rbp, dword [rdi + 0x6d]
jo 0x404ca0
imul esi, dword [rbp + 0x72], 0x62465049
imul ebp, dword [rcx + 0x45], 0x76454545
push rsp
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x6174735f
jb 0x404cdc
pop rdi
insd dword [rdi], dx
imul ebp, dword [rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x404ce4
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x404cc0
xor eax, 0x6574495f
jb 0x404cf5
movsxd rbp, dword [rdi + 0x6d]
jo 0x404cfa
imul esi, dword [rbp + 0x72], 0x62465049
imul ebp, dword [rcx + 0x45], 0x45314345
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
xor bl, byte [rdi + 0x52]
push rdx
add byte fs:[rdi + 0x5a], bl
push rbx
je 0x404cec
xor dword [rdi + 0x5f], ebx
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x68
jo 0x404d11
push rax
imul ecx, dword [rsi + 0x39], 0x6e675f5f
jne 0x404d31
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x404d0d
xor eax, 0x6574495f
jb 0x404d42
movsxd rbp, dword [rdi + 0x6d]
jo 0x404d47
imul esi, dword [rbp + 0x72], 0x62465049
imul ebp, dword [rcx + 0x45], 0x76454545
push rsp
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x404d69
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x404d45
xor al, 0x5f
push rsi
insb byte [rdi], dx
pop rdi
movsxd rbp, dword [rdi + 0x6d]
jo 0x404d7e
imul esi, dword [rbp + 0x72], 0x62465049
imul ebp, dword [rcx + 0x45], 0x45324345
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
je 0x404da0
js 0x404da6
je 0x404d7f
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x404d8a
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rsp + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
push r12
pop r15
jb 0x404ddf
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x49], bl
pop r15
jae 0x404e07
imul ebp, dword fs:[rsi + 0x5f], 0x64657375
add byte [rdi + 0x5a], bl
xor dword [rdi + 0x76], edx
add byte [rdi + 0x5a], bl
push rbx
je 0x404dda
insd dword [rdi], dx
js 0x404df4
push r10
push r12
pop rdi
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi]
jae 0x404e1d
outsb dx, byte [rsi]
pop r15w
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x54495f00
pop r15
jb 0x404e37
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5f], bl
je 0x404e4c
pop rdi
jae 0x404e62
jb 0x404e65
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x404e5b
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x404e37
xor eax, 0x74695f5f
jb 0x404e6d
movsxd rbp, dword [rdi + 0x6d]
jo 0x404e72
jbe 0x404e76
insb byte [rdi], dx
push r8
imul ebp, dword [rcx + 0x45], 0x534e4545
xor byte [rdi + 0x31], bl
xor al, 0x5f
je 0x404e8e
jb 0x404e8a
movsxd rbp, dword [rdi + 0x6d]
jo 0x404e8f
jbe 0x404e93
insb byte [rdi], dx
push r12
pop rdi
push rbx
xor byte [rdi + 0x31], bl
xor eax, 0x6574495f
jb 0x404ea3
movsxd rbp, dword [rdi + 0x6d]
jo 0x404ea8
imul esi, dword [rbp + 0x72], 0x5f355349
add byte [r15 + 0x5a], r11b
xor dword [rdx + 0x49], edx
imul ecx, dword [rdx + 0x45], 0x54527645
pop rdi
jo 0x404eb6
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
xor dword [rdx + 0x49], edx
jbe 0x404ec5
push rsp
pop rdi
jo 0x404eca
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x404eb3
xor bl, byte [rdi + 0x5f]
imul bp, word [rsi + 0x61], 0x5f6c
imul ebp, dword [rsi + 0x73], 0x69747265
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x404f05
jb 0x404f0c
push r8
imul ecx, dword [rsi + 0x39], 0x6e675f5f
jne 0x404f02
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x404ede
xor eax, 0x6574495f
jb 0x404f13
movsxd rbp, dword [rdi + 0x6d]
jo 0x404f18
imul esi, dword [rbp + 0x72], 0x62465049
imul ebp, dword [rcx + 0x45], 0x76454545
push rsp
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x404f08
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x404f42
pop rdi
insd dword [rdi], dx
imul esp, dword fs:[rcx + 0x6e], 0x5f6f745f
imul si, word [rdx + 0x73], 0x4974
push rax
imul ecx, dword [rsi + 0x39], 0x6e675f5f
jne 0x404f57
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x404f33
xor eax, 0x6574495f
jb 0x404f68
movsxd rbp, dword [rdi + 0x6d]
jo 0x404f6d
imul esi, dword [rbp + 0x72], 0x62465049
imul ebp, dword [rcx + 0x45], 0x76454545
push rsp
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
xor bl, byte [rdi + 0x52]
push rdx
js 0x404f34
pop rdi
pop rdx
push rbx
je 0x404f6b
xor ebx, dword [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x404fa0
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x404faa
pop rdi
movsxd rbp, dword [rbx + 0x77]
jb 0x404fb2
pop rdi
xor cl, byte [rcx + 0x4c]
xor dword [rbp + 0x50], eax
imul edx, dword [rbx + 0x30], 0x3154455f
pop rdi
push rsp
xor byte [rdi + 0x53], bl
xor bl, byte [rdi + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdx
xor dword [rdx + 0x49], edx
jbe 0x404fc7
push rsp
pop rdi
jo 0x404fcc
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
xor bl, byte [rdi + 0x57]
push rdx
imul rax, qword [r8], 0x63335a5f
insd dword [rdi], dx
jo 0x404ff7
imul eax, dword [rax], 0x394e5a5f
pop rdi
pop rdi
outsb dx, byte [esi]
jne 0x404ff9
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x404fd5
xor al, 0x5f
je 0x40500e
jb 0x40500a
movsxd rbp, dword [rdi + 0x6d]
jo 0x40500f
jbe 0x405013
insb byte [rdi], dx
push r8
imul ebp, dword [rcx + 0x45], 0x496c6345
push rax
imul ebp, dword [rcx + 0x45], 0x5f546245
push rdx
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x405009
imul esi, dword [rbp + 0x72], 0x6177735f
jo 0x405023
push rax
imul edx, dword [rbx + 0x30], 0x5476455f
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdi
push rsp
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40502a
xor dword [rdi + 0x5f], ebx
jne 0x40506b
jne 0x405061
jb 0x405066
pop rdi
jo 0x405068
jb 0x40507d
imul esi, dword [rcx + rbp*2 + 0x6f], 0x6950496e
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405078
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x405054
xor eax, 0x6574495f
jb 0x405089
movsxd rbp, dword [rdi + 0x6d]
jo 0x40508e
imul esi, dword [rbp + 0x72], 0x62465049
imul ebp, dword [rcx + 0x45], 0x54454545
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdi
jae 0x4050c0
pop rdi
push 0x6c646e61
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x405090
xor byte [rdi + 0x49], bl
je 0x4050c9
jb 0x4050c5
jae 0x4050cf
push r8
imul ecx, dword [rdx + 0x30], 0x5f374545
push rbx
pop rdi
jae 0x4050df
push r11
xor byte [rdi], bl
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul ebp, dword [rsi + 0x69], 0x74610074
outsd dx, dword [rsi]
imul eax, dword [rax + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x40510a
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x4050e6
pop rdi
pop rdi
imul esi, dword [rbp + 0x72], 0x6d6f635f
jo 0x405121
imul esi, dword [rbp + 0x72], 0x62465049
imul ebp, dword [rcx + 0x45], 0x534e4545
xor byte [rdi + 0x31], bl
xor eax, 0x6574495f
jb 0x40513a
movsxd rbp, dword [rdi + 0x6d]
jo 0x40513f
imul esi, dword [rbp + 0x72], 0x455f5449
push r11
xor eax, 0x5a5f005f
push rbx
je 0x405123
xor ebx, dword [rdi + 0x5f]
push 0x5f706165
jae 0x405161
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rcx*2 + 0x50]
imul ecx, dword [rsi + 0x39], 0x6e675f5f
jne 0x40516a
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x405146
xor eax, 0x6574495f
jb 0x40517b
movsxd rbp, dword [rdi + 0x6d]
jo 0x405180
imul esi, dword [rbp + 0x72], 0x62465049
imul ebp, dword [rcx + 0x45], 0x76454545
push rsp
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
insd dword [rdi], dx
insd dword [rdi], dx
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4051a8
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x4051ba
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x405196
xor al, 0x5f
push rsi
insb byte [rdi], dx
pop rdi
movsxd rbp, dword [rdi + 0x6d]
jo 0x4051cf
imul esi, dword [rbp + 0x72], 0x62465049
imul ebp, dword [rcx + 0x45], 0x45314345
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdi
jae 0x4051fb
pop rdi
jae 0x4051ff
jb 0x405202
add byte [rdi + 0x5a], bl
xor dword [rdx + 0x49], edx
imul rax, qword fs:[r13 + 0x45], 0x5f545276
jo 0x4051f2
push rsp
xor byte [rdi], bl
pop rdi
pop rdi
jae 0x40521c
movsxd rbp, dword [rbx + 0x5f]
movsxd rbp, dword [rax + 0x6b]
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x4051f9
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40522e
push r10
imul eax, dword [rbp + 0x4f], 0x3174534e
jb 0x40523a
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40523e
pop rdi
jb 0x405241
jb 0x405245
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x40525b
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
xor bl, byte [rdi + 0x52]
push rdx
movsxd rax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x405230
pop rdi
pop rdi
imul ebp, dword [rsi + 0x73], 0x69747265
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x40527d
jb 0x405284
push r8
imul ecx, dword [rsi + 0x39], 0x6e675f5f
jne 0x40527a
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x405256
xor eax, 0x6574495f
jb 0x40528b
movsxd rbp, dword [rdi + 0x6d]
jo 0x405290
imul esi, dword [rbp + 0x72], 0x62465049
imul ebp, dword [rcx + 0x45], 0x76454545
push rsp
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
xor eax, 0x75706e69
je 0x4052c8
add byte [rdi + 0x5a], bl
push rbx
je 0x405289
xor ebx, dword [rdi + 0x5f]
push 0x75
jae 0x4052d5
pop rdi
push 0x49706165
push rax
imul ebp, dword [rcx + rbp*2 + 0x4e], 0x675f5f39
outsb dx, byte [rsi]
jne 0x4052d2
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x4052ae
xor eax, 0x6574495f
jb 0x4052e3
movsxd rbp, dword [rdi + 0x6d]
jo 0x4052e8
imul esi, dword [rbp + 0x72], 0x62465049
imul ebp, dword [rcx + 0x45], 0x76454545
push rsp
pop rdi
push rsp
xor byte [rdi + 0x53], bl
cmp byte [rdi + 0x54], bl
xor dword [rdi + 0x54], ebx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x4052dd
xor dword [rdi + 0x5f], ebx
jae 0x405320
jb 0x405327
pop rdi
push 0x49706165
push rax
imul ecx, dword [rsi + 0x39], 0x6e675f5f
jne 0x405322
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x4052fe
xor eax, 0x6574495f
jb 0x405333
movsxd rbp, dword [rdi + 0x6d]
jo 0x405338
imul esi, dword [rbp + 0x72], 0x62465049
imul ebp, dword [rcx + 0x45], 0x76454545
push rsp
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x405328
pop rdi
pop rdi
jne 0x405369
jne 0x40535f
jb 0x405364
pop rdi
imul ebp, dword [rsi + 0x73], 0x69747265
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x40537e
jb 0x405385
push r8
imul ecx, dword [rsi + 0x39], 0x6e675f5f
jne 0x40537b
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x405357
xor eax, 0x6574495f
jb 0x40538c
movsxd rbp, dword [rdi + 0x6d]
jo 0x405391
imul esi, dword [rbp + 0x72], 0x62465049
imul ebp, dword [rcx + 0x45], 0x76454545
push rsp
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x405380
xor al, 0x5f
pop rdi
jo 0x4053b5
jb 0x4053ca
imul esp, dword [rcx + 0x6c], 0x726f735f
je 0x4053a8
push rax
imul ecx, dword [rsi + 0x39], 0x6e675f5f
jne 0x4053c8
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x4053a4
xor eax, 0x6574495f
jb 0x4053d9
movsxd rbp, dword [rdi + 0x6d]
jo 0x4053de
imul esi, dword [rbp + 0x72], 0x62465049
imul ebp, dword [rcx + 0x45], 0x76454545
push rsp
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4053d1
xor eax, 0x6e755f5f
jne 0x405408
jb 0x40540d
pop rdi
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x695f7261
outsb dx, byte [rsi]
jae 0x40541c
jb 0x40542d
push r8
imul ecx, dword [rsi + 0x39], 0x6e675f5f
jne 0x405423
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x4053ff
xor al, 0x5f
push rsi
insb byte [rdi], dx
pop rdi
movsxd rbp, dword [rdi + 0x6d]
jo 0x405438
imul esi, dword [rbp + 0x72], 0x62465049
imul ebp, dword [rcx + 0x45], 0x76454545
push rsp
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x405427
jae 0x405464
jb 0x40546b
push r8
imul edx, dword [rax + 0x46], 0x45696962
jbe 0x405457
pop rdi
push rbx
xor ebx, dword [rdi + 0x54]
xor byte [rdi], bl
pop rdi
pop rdx
xor dword [rdx + 0x76], edx
add byte [rdi + 0x5a], bl
push rbx
je 0x40544c
pop rdi
pop rdi
jae 0x405489
jb 0x405490
push r8
imul ecx, dword [rsi + 0x39], 0x6e675f5f
jne 0x405486
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x405462
xor eax, 0x6574495f
jb 0x405497
movsxd rbp, dword [rdi + 0x6d]
jo 0x40549c
imul esi, dword [rbp + 0x72], 0x62465049
imul ebp, dword [rcx + 0x45], 0x76454545
push rsp
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
xor dword [rdx + 0x49], edx
jbe 0x4054b2
push rsp
pop rdi
jo 0x4054b7
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4054a2
pop rdi
pop rdi
insb byte [rdi], dx
insb byte [edi], dx
add byte [rdi + 0x5a], bl
xor bl, byte [rdi + 0x52]
push rax
movsxd rax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x4054b4
xor byte [rdi + 0x5f], bl
movsxd rbp, dword [rdi + 0x70]
jns 0x4054e9
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4054f3
pop rdi
movsxd rbp, dword [rbx + 0x77]
jb 0x4054fb
xor dword [rbp + 0x4c], eax
xor dword [rbp + 0x53], eax
je 0x4054d5
jb 0x405507
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x405524
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40551e
xor dword [r11d], r14d
pop rdi
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x405527
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x405531
pop rdi
imul rax, qword [r13 + 0x45], 0x505f5450
push r11
xor ebx, dword [rdi + 0x53]
pop rdi
push rbx
xor al, 0x5f
add byte [rdi + 0x65], bl
je 0x405548
add byte [rdi + 0x5a], bl
xor dword [rdx + 0x49], edx
imul ecx, dword [rcx + 0x45], 0x54527645
pop rdi
jo 0x40554a
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405565
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x405541
xor al, 0x5f
je 0x40557a
jb 0x405576
movsxd rbp, dword [rdi + 0x6d]
jo 0x40557b
jbe 0x40557f
insb byte [rdi], dx
push r8
imul ebp, dword [rcx + 0x45], 0x45314345
push rbx
xor ebx, dword [rdi]
outsd dx, dword [rsi]
jb 0x405595
add byte [rdi + 0x5a], bl
push rbx
je 0x405569
xor bl, byte [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x40559e
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4055a8
pop rdi
movsxd rbp, dword [rbx + 0x77]
jb 0x4055b0
pop rdi
xor dword [rbp + 0x50], eax
imul edx, dword [rbx + 0x30], 0x3154455f
pop rdi
push rsp
xor byte [rdi + 0x53], bl
xor bl, byte [rdi + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40559f
jae 0x4055e4
jo 0x4055b9
imul eax, dword [rbp + 0x76], 0x535f5452
xor dword [rdi], ebx
pop rdi
pop rdx
xor dword [rdx + 0x49], edx
imul rax, qword fs:[rbp + 0x45], 0x5f545276
jo 0x4055dd
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4055f8
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x4055d4
xor al, 0x5f
push rsi
insb byte [rdi], dx
pop rdi
movsxd rbp, dword [rdi + 0x6d]
jo 0x40560d
imul esi, dword [rbp + 0x72], 0x62465049
imul ebp, dword [rcx + 0x45], 0x496c6345
imul edx, dword [rax + 0x69], 0x52624545
push rsp
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x405600
xor ebp, dword [rbp + 0x6f]
jbe 0x405639
pop rdi
movsxd rbp, dword [rbx + 0x77]
jb 0x405641
push r8
imul edx, dword [rbx + 0x30], 0x3054455f
pop rdi
push rsp
pop rdi
push rbx
xor bl, byte [rdi + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x405626
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
imul eax, dword [rbp + 0x4e], 0x31317453
pop rdi
imul r14, qword [rbp + r12*2 + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x4056a0
jo 0x40568e
push r11
xor bl, byte [rdi]
insd dword [rdi], dx
imul ebp, dword [rsi], 0x394e5a5f
pop rdi
pop rdi
outsb dx, byte [esi]
jne 0x40569c
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x405678
xor eax, 0x6574495f
jb 0x4056ad
movsxd rbp, dword [rdi + 0x6d]
jo 0x4056b2
imul esi, dword [rbp + 0x72], 0x62465049
imul ebp, dword [rcx + 0x45], 0x45324345
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4056cf
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x4056ab
xor eax, 0x61765f5f
insb byte [rdi], dx
pop rdi
movsxd rbp, dword [rdi + 0x6d]
jo 0x4056e5
imul esi, dword [rbp + 0x72], 0x62465049
imul ebp, dword [rcx + 0x45], 0x534e4545
xor byte [rdi + 0x31], bl
xor al, 0x5f
push rsi
insb byte [rdi], dx
pop rdi
movsxd rbp, dword [rdi + 0x6d]
jo 0x405702
imul esi, dword [rbp + 0x72], 0x455f5449
push rbx
xor byte [rdi + 0x31], bl
xor eax, 0x6574495f
jb 0x405717
movsxd rbp, dword [rdi + 0x6d]
jo 0x40571c
imul esi, dword [rbp + 0x72], 0x5f355349
add byte [r8], r8b
jae 0x405745
insd dword [rdi], dx
je 0x405730
add byte [rsi], ch
jae 0x405748
jb 0x40574a
add byte [rsi], ch
jae 0x405744
jae 0x405752
jb 0x405754
add byte [rsi], ch
imul ebp, dword [rsi + 0x74], 0x707265
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x405755
sub rax, 0x676174
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x405763
outsb dx, byte cs:[esi]
jne 0x405731
jne 0x40576f
insb byte [rdi], dx
sub eax, 0x2e006469
outsb dx, byte [esi]
jne 0x40573f
push 0x687361
jns 0x405788
jae 0x405795
insd dword [rdi], dx
add byte [rsi], ch
jns 0x405790
jae 0x405798
jb 0x405726
outsb dx, byte cs:[esi]
jne 0x405759
jbe 0x405792
jb 0x4057a2
imul ebp, dword [rdi + 0x6e], 0x6e672e00
jne 0x405766
jbe 0x40579f
jb 0x4057af
imul ebp, dword [rdi + 0x6e], 0x2e00725f
jb 0x4057aa
insb byte [rdi], dx
jns 0x4057b9
add byte [rsi], ch
jb 0x4057b4
insb byte [rdi], dx
jo 0x4057c0
je 0x405756
imul ebp, dword cs:[rsi + 0x69], 0x702e0074
insb byte [rdi], dx
je 0x40578f
outsd dx, dword [esi]
je 0x405765
je 0x4057cd
js 0x4057de
add byte [rsi], ch
imul bp, word [rsi + 0x69], 0x2e00
jb 0x4057e3
je 0x4057d9
add byte [rsi], ch
push 0x6172665f
insd dword [rdi], dx
pop rdi
push 0x2e007264
push 0x6172665f
insd dword [rdi], dx
add byte gs:[rsi], ch
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x4057fc
jns 0x40579d
imul bp, word cs:[rsi + 0x69], 0x615f
jb 0x405818
jns 0x4057a9
push 0x63
jb 0x4057ae
jns 0x405820
insd dword [rdi], dx
imul esp, dword [rbx], 0x746f672e
jo 0x40582a
je 0x4057c0
je 0x405826
add byte [rsi], ch
jae 0x40583d
add byte [rsi], ch
movsxd rbp, dword [rdi + 0x6d]
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x4057d4
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add dh, dh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rax + 2], bl
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rdx], 0x40
add byte [rax], al
add byte [rax], al
add al, al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + 1], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax + rax*2], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add eax, 0x40
add byte [rax], al
and byte [rip], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 5], al
add byte [rax], al
add byte [rax], al
add byte [rax + 5], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, 0
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
add eax, 0x40
add byte [rax], al
nop
add eax, 0
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x40000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4005], ch
add byte [rax], al
add byte [rax + 5], ch
add byte [rax], al
add al, bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x18000000], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4006], al
add byte [rax], al
add byte [rax + 6], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4006], ah
add byte [rax], al
add byte [rax + 6], ah
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x10000], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 7], al
add byte [rax], al
add byte [rax], al
add byte [rax + 7], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
popfq
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 7], dl
add byte [rax], al
add byte [rax], al
add byte [rax + 7], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
loop 0x405b8e
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs dword [0x600000001000000], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rsp + rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1c], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1c], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fiadd dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov cl, 0
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0x1d
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
hlt
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 8
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
leave
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
sub eax, 0x60
add byte [rax], al
clc
sub eax, 0
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte cs:[rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
loope 0x405d1a
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte cs:[rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0, al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte cs:[rax], al
add byte [rax], al
add byte [rax], al
loopne 0x405d7b
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], bl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out dx, eax
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x30], ah
add byte [rax], al
add byte [rax], al
add byte [rax + 0x30], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc byte [rax]
add byte [rax], al
or byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rax], 0x60
add byte [rax], al
add byte [rax], al
add byte [rax + 0x30], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rcx]
add byte [rax], al
add dword [rax], eax
add byte [rax], al
xor byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jo 0x405ee2
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
enter 0x56, 0
add byte [rax], al
add byte [rax], al
or al, 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test al, 0x30
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs al, byte [0x1e00000000000011]
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax + rax], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
