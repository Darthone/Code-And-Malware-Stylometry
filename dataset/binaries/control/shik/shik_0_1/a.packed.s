call 0x4012b8
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x4010d0
add ebx, ebx
je 0x401086
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x4010be
cmp rbp, -4
ja 0x4010be
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x4010a6
add ecx, 4
mov dl, byte [rax]
je 0x4010ce
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x4010be
ret
cld
pop r11
cmp r8b, 2
je 0x4010e6
jmp 0x401163
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x4010f6
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x4010de
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x40110e
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x4010fb
sub eax, 3
jb 0x40112c
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x401163
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x401153
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x401151
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x401140
cmp rbp, -0xd00
adc ecx, eax
call 0x401092
jmp 0x4010e6
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x40123c
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x4011da
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x401226
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x4011f9
push 0x3a707474
jne 0x401252
js 0x401212
jae 0x40124c
outsb dx, byte cs:[rsi]
je 0x40120b
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x401279
jb 0x40126b
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x401296
jb 0x4012a9
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x21299c
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x21299c
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x401174
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x40129f
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x40124d
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add eax, dword [rax]
jmp rbp
call 0x706f1347
jb 0x40135f
movsxd rbp, dword [rdi]
jae 0x401359
insb byte [rdi], dx
js 0x40135f
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x40133f
cmp rsi, rcx
jae 0x401347
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x401326
cmp al, 0x8f
ja 0x401326
cmp byte [rsi - 2], 0xf
je 0x40132c
sub al, 0xe8
jg 0x401329
push rdi
cmp al, 1
ja 0x401314
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x401317
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x401344
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x40139b
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c1819
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x4013df
mov al, 0xa
jmp 0x4013df
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x4013bb
inc ebx
mov al, 0
jmp 0x4013e3
mov al, 2
jmp 0x4013e3
mov al, 3
jmp 0x4013e3
mov al, 0x3c
jmp 0x4013e3
push rcx
rcr ah, 1
fstp st(7)
jle 0x401424
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x401436
jg 0x401428
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a6bab
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x401482
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb65ff
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x40148a
cmp esi, 0x21585055
jne 0x40148e
jge 0x401480
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x401483
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x401487
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x401533
pop rcx
or al, 0x3b
jb 0x401539
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x4014ab
jmp 0x4014ad
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x36613ee
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf53636
in eax, dx
jg 0x4014e5
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x40152b
mov bh, 0x2a
add edi, 0x10
jmp 0x401528
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x401565
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x4015a1
jne 0x4015b8
fstpnce st(6), st(0)
jle 0x401581
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x4015b7
jrcxz 0x4015eb
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1b54f
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x40166a
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x40162a
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x58295bff
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x40169d
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x401637
and ecx, 7
or al, 0xeb
jae 0x4016a2
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x4016d7
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x401715
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x4016ce
push rax
call 0xffffffff868d13bb
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x4016d8
std
cmp edi, esi
xchg eax, edi
jle 0x40172d
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c95cb9
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x40172b
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x401719
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x401742
js 0x401782
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x401814
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad2a4f
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x401835
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x40183a
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc212ec
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x4017c8
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax - 0x80], al
sub byte [rdx], dl
add byte [rax], al
add byte [rax], ah
add edi, edi
sub byte [rdi], ch
add byte [rax], al
ror dword [rip + 0x20000], 1
add byte [rax], al
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x4018ee
je 0x4018f7
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x4018c0
mov dh, 0x7d
jbe 0x4018bf
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x4018f8
sahf
sahf
add al, 0
cwde
add eax, 0x1f90c000
and byte [rdi + 0x4100006], bl
add byte [rax], ah
add eax, 0xf902790
or byte [rax], al
or dword [rax], eax
nop
enter -0x6fd9, 0x27
or al, byte [rax]
test al, 0xb
add byte [rax - 0x37ec1bfa], al
or al, 0
movabs al, byte [0x3e409f60740000d]
add byte [rax + 0xf], dl
add byte [rsp + rbx], dh
lahf
ror dl, 1
adc byte [rdi], dl
adc dword [rax], eax
sbb al, 0x1d
seto byte [rdi]
and byte [rdx], dl
add byte [rax], dl
adc eax, dword [rax]
add edx, esi
add esp, esp
clc
sub eax, 0x8001460
add al, 0xf2
add al, 0xf2
adc eax, 0x161000
sbb byte [rax + 0x17f900fc], al
add al, bh
sbb byte [rax], al
add byte [rax], dh
cmp dword [rcx + rax*4], 0x6000197c
sbb al, byte [rax]
adc byte [rdx + 0x1b365377], 0x13
add dword [rdi], edx
add al, 0
int1
dec dword [rip + 0xc3b1657]
sbb edi, dword [rdi - 0xdfd80e7]
mov ebp, 0x59803490
shr byte [rsi], 0xe4
and byte [rbx + 0x2e], al
add byte [rax], cl
enter -0x68a0, -0x3b
pop rdi
cmpsd dword [rsi], dword ptr [rdi]
add dword [rdi], edx
push rbx
xchg eax, edx
shr dword [rsi + 0x477a4f84], 0x20
fcom dword [rbp - 0x6879e6f0]
movsd dword [rdi], dword ptr [rsi]
xlatb
jmp 0xfec5cb5
ja 0x4019b2
and al, 0x83
fdivr qword [r9]
fcom dword [rax - 0x4016b5f4]
enter 0x197f, 0x64
mov al, 0xb
clc
add al, 0x36
and al, 0x27
add dword [rax + 0x31], edx
xor cl, al
nop
or al, 0x51
push rdx
sbb edx, dword [rdx + 0x15643b3]
pop rdi
push rsp
jne 0x4019c9
sbb dword [rax + rcx*2 + 6], ebp
pop rax
xchg eax, ebp
pop rsp
xchg byte [rax + rdx*4 + 0x21], ah
mov bh, 0x60
fadd dword [rsi]
sbb dword [rdx + 0x68fd6441], edx
jb 0x401a3d
sbb al, 2
insb byte [rdi], dx
sbb dword [rdx + 0x5b700293], edx
je 0x4019fa
sbb dword [rax + rcx*2 + 0x79], esp
js 0x401a20
xchg byte [rax + rdx*4 - 0x68], ah
jl 0x4019a5
sbb dword [rdx - 0x6c7b1780], edx
jb 0x401a62
adc byte [rbx], al
mov byte [rax], bh
add ecx, dword [rax + 6]
sbb dword [rdx - 0x6f6f9f74], edx
and dword [rcx], ebx
adc dword fs:[rsp + rbp*4 + 0x64864192], -0x68
xlatb
pushfq
in al, 0x90
pushfq
sbb al, 2
add al, 0xa0
sub eax, dword [rdx + rdx*4]
xchg r12b, spl
movsb byte [rdi], byte ptr [rsi]
push rax
test al, 0x64
sbb dword [rcx - 0x54], edi
movsd dword [rdi], dword ptr [rsi]
nop
and dword [rcx], ebx
mov al, 0xcd
mov ah, 0x1c
xchg eax, edx
xchg r11b, sil
mov eax, 0xe4e4051a
nop
pushfq
mov esp, 0x19c00542
xchg eax, edx
xchg byte [r8 - 0x3c], bpl
mov ds, word [rcx]
enter -0x334c, -0x79
nop
and ebp, ebx
rol byte [rbx], 1
cmp dword [rcx], edi
and al, 0x27
sub dword [rsi], eax
fadd dword [rsi + 0x53219064]
fdivr qword [rsi + 6]
sbb dword [rdx - 0x175b1fbf], edx
sbb al, 0x64
nop
or r10b, cl
add al, 0x1d
pushfq
cmp eax, 0x6d085eb
xchg eax, edi
cmpsd dword [rsi], dword ptr [rdi]
or edx, dword [rdi]
nop
xchg eax, ebx
add dword [rax], 7
in eax, 0x15
mov ebx, 0x6f4a1cf5
adc bl, bh
sbb byte [rcx + r9 - 0x1f35b8db], bl
cmp eax, 0x73147c0
add eax, 0x4195d8d7
in al, dx
pop r10
sbb ecx, 0x6f13c094
imul edx, dword [rdi], 0x57
push rdi
mov cl, 0x29
jle 0x401af9
mov edi, 0x6401b19f
or dword [rbx], 0xffffff8f
and byte [rcx*4 - 0x49b0f633], ch
sbb dl, byte [rdi]
push rax
nop
xchg dword [rdx], esp
in al, 0xac
popfq
and dword [rdi], edx
sbb cl, byte [rsi]
wait
sbb al, 0xf2
sbb eax, esp
mov byte [rdx], dl
enter -0x226d, -0x38
in al, dx
sub r9b, byte [r8]
push 0x1b
fmul st(1)
out dx, al
pop rbp
pop rsp
xor byte [rdx + rax], bl
xor ch, byte [rsp + rcx*2 + 0xc]
sub ebx, dword [rcx]
in al, 0xe4
leave
movabs dword [0x6720c8812a07500b], eax
or eax, 0x27d49147
cmp dword [rcx], edi
jnp 0xffffffffb06c2447
nop
mov bl, 9
sub byte [rcx], bh
and byte [rdi + 0x6c21b06], bh
pop rsp
out 0xe4, al
leave
mov bl, 0x43
add edi, ebp
or word [rax + 0x19116513], dx
in al, 0x2f
jmp qword [rdi]
mov esp, 0x9a37840
enter 0x6709, -0x2c
add eax, 0x15939072
movabs dword [0xa33e4f2177b0a14], eax
or eax, 0x278f2f66
loope 0x401b40
or byte [rip - 0x57f59309], ah
wait
movsb byte [rdi], byte ptr [rsi]
sbb dword [rdi], ecx
outsb dx, byte [rsi]
stc
adc al, 0x39
enter 0x2760, -0x25
pop rdi
mov eax, 0x87191710
mov al, 0xb
or dword [rdi + 0x46], edx
in al, 0xc0
xor byte [rbx + rcx], al
movabs r12, 0xb45479f294318b2
test dword [rsi + 0x4007eb64], 0x9ea74754
sbb al, 0xe4
push rsp
or dword [rdi], eax
pop rdx
or esi, dword [rax + 0x41c8170c]
jo 0x401bb8
add dword [rax + 0x77610d34], -0x63
adc byte [rcx - 0x32], al
stosb byte [rdi], al
pop rdi
stosb byte [rdi], al
sbb dword [rdi + 0x48], esi
insb byte [rdi], dx
mov dl, 0xc9
leave
or al, 0xc
ficom word [rbx + 0x20]
jb 0x401b5c
and dword [rcx], ebx
xor al, 0x81
mov word [rbx - 0x76858df4], es
fist dword [rcx]
push rdi
or eax, 0xe42f09c9
or al, 0xc7
imul ebp, esp, 0x1c
in al, 0xa4
sub dword [rdi], -0x49
pop r8
and dword [rip - 0x7e86c264], ecx
or eax, 0x26170906
or esp, ebx
and byte [rbx - 0x48f648c1], al
and byte [rdi], dl
jbe 0x401bb5
test byte [r11], r11b
sub dword [rsp + rbp*2], 0x2e
in al, dx
ja 0x401c27
lahf
adc dword [rdx], eax
jo 0x401c51
cmp eax, ebx
nop
stosd dword [rdi], eax
add edx, dword [rbx]
lea edi, [rcx]
and al, 0x27
add al, 0xe
push -0x7c6cf1ef
pushfq
cmp eax, 0xea71951
jb 0x401bf9
rcr byte [rbx], 0xdf
mov esp, 0x59bc2790
scasd eax, dword [rdi]
or eax, 0x41900ea5
sahf
adc edx, dword [rcx]
jle 0x401c45
sbb byte [rdi + 0x3bff0f09], al
and al, 0x27
pushfq
mov dl, 0x1a
out dx, eax
movq qword [r9], mm4
jns 0x401c5d
add bh, byte [rbx]
pop rsp
maxps xmm7, xmmword [rax + 0xf]
out dx, eax
ror byte [rdi], 1
jb 0x401c36
or ebp, dword [rdx - 0x4d4a08f1]
cmp ecx, esp
fimul word [rdi]
out 1, eax
adc byte [rsi], cl
shl byte [rax], cl
pop rbx
pop rsp
jmp 0x4d6508a4
movabs al, byte [0xe41d9c83d7100b47]
pop rcx
mov dword [rcx], eax
pop rdi
xchg eax, ecx
sahf
sbb al, 0x84
xchg eax, ebx
adc dword [rdx + 7], ecx
test eax, 0xe410c510
leave
sar byte [rdi - 0x45], 1
nop
add dl, byte [rcx]
sti
push rdx
enter 0x2720, 7
push rbx
adc al, 0xa6
cmpsb byte [rsi], byte ptr [rdi]
leave
cmp r14b, byte [rdi + 0xc]
out dx, eax
cmp ebx, eax
adc esp, esp
in al, 0xff
or cl, cl
adc dword [rdi + 0x66], esi
or eax, 0xe41c8178
jo 0x401cf0
adc ah, byte [rcx]
adc ah, ah
and byte [rdi], ah
cli
or esp, dword [rdi]
sub al, 0x12
xchg eax, ebx
xchg esp, esp
fidiv dword [rdx + rdx]
out dx, eax
int1
sbb ch, byte [rdi + 0x7890738c]
cdq
adc ah, bh
movabs al, byte [0x12b4075817890212]
sahf
out 0x12, al
xchg eax, edi
add byte [rax - 0x38], dh
comiss xmm5, xmm2
jns 0x401d11
in al, 0x20
jns 0x401d38
xor dword [rax], eax
adc esp, esp
pushfq
cmp al, 0xe2
sbb byte [rdi + 0x6f], ch
xor dl, byte [rbx]
or edi, dword [rcx - 0x2e]
or eax, dword [rdi + 0x13]
mov edi, 0xe41c172a
in al, 0xd9
adc esp, dword [rdi - 0x57b3ec41]
adc edi, dword [rip + 0x5f9e4861]
sbb dword [rbx], edx
or ecx, dword [rbx]
and byte [rdi], ah
cdq
js 0x401cd8
shr dword [rbx], -0x15
adc ecx, dword [rdi + 0x749e070f]
adc al, 0xa7
or edx, dword [rdi + rdx*4]
lcall [rbx + 0x42]
xchg eax, ebx
movsxd rsi, dword [rdx + 0x74]
jae 0x401de7
jne 0x401ddb
movsxd rbx, dword cs:[rdi + 0x4a]
outsd dx, dword [rsi]
in eax, dx
inc byte [rbx + 0x52]
pop rdi
push r11
push rsp
or dword [rax], eax
jb 0x401df0
imul ebx, dword [edx], 0x6d745f06
outsd dx, dword [rsi]
outsd dx, dword [rsi]
out dx, eax
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x401dbf
outsd dx, dword fs:[rsi]
pop rdi
or esp, dword [edx + 0x61]
insb byte [rdi], dx
or dword [rdi + rbp*2 + 0x72], esi
fcomp st(7)
jle 0x401da9
jae 0x401e0f
jne 0x401e2b
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x401e24
sub dword gs:[rsi + rbp + 0x37], esp
xor eax, 0xe3243538
push rsi
pop rdi
imul bp, word [rsi + 0x69], 0x7208
jb 0x401e2f
jns 0x401e2f
outsb dx, byte gs:[rsi]
je 0x401e46
jns 0x401e27
rcr ah, 0xb7
pop rbx
or ch, byte [rbp + 0x65]
and byte [rbp + 0x6d], dh
insd dword [rdi], dx
jns 0x401e15
or eax, 0x6eb09dbb
pop rdi
sub dword [rdx + rbp + 0x70], esi
popfq
jo 0x401e61
and eax, 0x7ffdad6d
pop rdx
push rbx
je 0x401e46
xor dword [rcx], edi
jo 0x401e67
movsxd rsp, dword gs:[rbp + 0x77]
js 0x401e74
mov ebx, 0xa0bec1b5
jb 0x401e82
movsxd rsi, dword [rdx + rbx + 0x33]
jno 0x401e89
movsxd rsp, dword [rcx + 0x73]
mov bl, 0xed
popfq
adc al, 0x36
imul esp, dword [rdi + 0x6e], 0xb60c650f
mov dh, 0x7b
mov bh, 0x38
push 0xe5e6f69
cmp qword [rdx + r11], r9
jne 0x401de2
insd dword [rdi], dx
mov ebx, 0x787844df
xor r14b, byte [rcx]
mov ah, 0x65
cmpsw word [rsi], word ptr [rdi]
insb byte [rdi], dx
js 0x401e85
or al, 0x6e
mov al, 0xff
imul ebx, dword [rdi + 0x70], 0x6f
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x1b305745
mov al, 0xd6
or eax, 0x311119f6
xchg eax, esi
pop rdi
adc ch, byte [esi + 0x6f]
mov dh, 0x3d
xor byte [rcx - 0xa], ah
jo 0x401ea7
pop rbp
adc dh, byte [rcx]
xor eax, 0x1b676f6d
js 0x401e1a
enter 0x4c73, 0x35
push rbx
in al, dx
fist dword [rcx]
mov dh, 0xb6
test al, 0x73
jne 0x401eea
jae 0x401ea9
push rdi
fdivr dword [rbx + 0x695f3829]
insd dword [rdi], dx
imul edi, dword [rdx + 0x41], 0x56b0ad37
push 0x20ff010a
or ch, byte [rbx + 0xb]
mov edi, 0x4d4345a5
push r11
hlt
imul ecx, dword [rdx + 0x24], 0x76b5856d
xor eax, 0x86a9a562
or eax, 0x6c2d8521
outsb dx, byte [rsi]
adc ah, byte [rcx - 0x79]
mov al, 0xed
adc al, 0x76
ja 0x401f31
sbb al, 0x34
adc dword [eax + 0x7b], esi
mov dh, 0x90
enter 0x65ae, 0x1e
loop 0x401f41
fisub word [rcx]
xchg eax, ebp
or eax, 0xac6863e1
push rcx
or dword [rax + 0x629142c2], esi
adc esp, dword [rdi]
sub dword [rcx - 0x70], 0xdb774f65
in al, dx
or cl, byte [rbx]
cmp dword [rsi], esp
or edi, dword [rcx + 0x6b]
xchg eax, edi
pop rsp
xor al, 0x6e
jmp 0x401e9a
xor eax, 0x362064dc
adc dword [rsi], ebx
xchg eax, ebp
mov ebp, 0x73756f29
sub dh, byte [rax + 0x18]
jbe 0x401f8f
jbe 0x401f85
movsd dword [rdi], dword ptr [rsi]
add ebx, ecx
imul edx, dword [rbp + 0x34], 0x6d2d3666
add al, 0xbb
push 0x30
sub cl, bl
nop
jne 0x401f98
xchg eax, ebp
int 0x15
jo 0x401f26
mov ch, 0x96
imul esi, dword [rsi], 0x37
sub byte [rdi], ch
cmp byte [rip - 0x49bf2d2d], al
insb byte [rdi], dx
sub esi, dword [rbx]
xchg eax, esp
jb 0x401f30
jnp 0x401ef7
test eax, 0x2731f40c
je 0x401fc7
jo 0x401f75
movsd dword [rdi], dword ptr [rsi]
and byte fs:[rdx], dh
out 0xa4, al
movsd dword [rdi], dword ptr [rsi]
push rdx
sub byte [rbx + 0x26], bh
je 0x401f81
out 0x99, eax
cmp edx, dword [rbp + 0x74661b6d]
jb 0x401f91
and eax, 0x52b5b201
loope 0x401fbb
outsb dx, byte [rsi]
in al, dx
nop
sub dword [rcx + rbx*4], 0x59286434
fild dword [rsi - 0x27]
and al, 0x6e
sbb byte [rcx + rcx*2 + 0x26], dh
xchg eax, edx
push rbx
jae 0x401ff8
xor eax, 0x4d0ac2b9
mov bh, 0x65
xchg byte [rcx], ch
test dword gs:[rdi + 0x30], esp
sub eax, 0x7a8c6978
int1
shl byte [rip + 0x383b745c], 0xa1
je 0x401fd9
sbb al, 0xec
sal byte [rcx + 0x23535f01], 0xbd
mov word [rsi + 0x78], ss
or esp, dword [rdx + 0xdf92264]
jns 0x401fae
or al, 0x74
pop rbx
sbb dword [rsi + 5], ecx
xor al, 0xcb
adc eax, 0xa0c6eb9a
ror dword [rax + 0x69], 0x26
jp 0x401fd9
pop rsp
loopne 0x401f6b
insd dword [rdi], dx
xor dword fs:[r15], ecx
xor byte [rcx + 0x69], ch
in eax, 5
fcomp st(0), st(7)
xor r15b, byte [rcx + 0x5f]
pop r15
adc ch, ch
jg 0x401fe4
xor bl, byte [rdi + 0x52]
push rdx
pop rdi
push rdx
pop r15
or r11b, byte [rax]
pop rbx
sahf
insb byte [rdi], dx
or eax, dword [rdi + 0x4e]
push rbp
and byte [rax + 0x44], cl
sti
and eax, 0x4352b27e
push rbx
cmp r10d, dword [r9 + rax*2 + 0x42]
sub byte [r11 - 0x28], r11b
test cl, al
adc byte fs:[rcx - 0x5f1123e8], ah
jb 0x401faf
pop rcx
adc al, 0x68
lea eax, [rax + 0x6270dd21]
fstp xword gs:[rcx + 7]
and eax, 0x45695049
int 0x4d
adc eax, esp
loopne 0x40207e
mov dh, 0x5c
jg 0x40205c
jrcxz 0x4020a2
imul esp, dword [rbx - 0x32], 0x53
xor eax, 0xfa70f63d
movabs al, byte [0x3c708468dba585b9]
cmc
sbb cl, byte [rbx + 0x6d]
shl al, 0x35
or dword [rbx + rsi*2 + 0x20], esi
outsd dx, dword [rsi]
xchg byte [rdi - 0x7eb51e29], al
pop rdi
and eax, 0xb5696246
test dword [rsi + 0x7600656b], ebp
mov ch, 0x30
push rbp
cmp byte [rip - 0x48d29049], al
push r12
push rax
stosb byte [rdi], al
je 0x4020f8
fmul dword [rcx + 0x42]
or ch, byte [rcx + rcx*4 + 0x325f43f6]
add esi, edx
pop rdx
push rax
push 0x4376c3b7
xor dl, byte [rsi + 0x62840133]
movsxd rbx, dword [rip + 0x5122efdd]
pop rdx
std
xor dword [r10 + 0x49], edx
outsd dx, dword fs:[rsi]
push rdx
jo 0x4020f9
jae 0x402132
jo 0x402109
jo 0x402119
jae 0x402084
sbb ebp, esp
mov esi, edx
movabs al, byte [0x8087c06f41d5fe97]
pop rsp
pop rcx
outsb dx, byte [rsi]
xor eax, 0x3bdcc705
rcl byte [rbx + 0x37], 0xc3
rcl byte [rdx + 0x32], 0x37
cmp dword [rax], ebp
insb byte [rdi], dx
sub al, 0x75
fidiv word [rbp + 0x65]
test al, 0xb6
mov byte [rax + 0x38], dl
pop rsi
int1
cmp al, 0x76
or byte ss:[rbx + 5], dh
pop r13
pop rsp
pop rbx
mov ch, 0xf8
jrcxz 0x402132
pop rsi
add byte [rax], ah
push rdi
push rdx
hlt
jrcxz 0x402156
add al, 0xd7
insd dword [rdi], dx
jbe 0x402151
movabs eax, dword [0x73738d433050835b]
sub eax, 0xf6e050ec
pop rdx
xor eax, 0x6a766cd0
cmp ebp, dword [rdi - 0x7b]
scasb al, byte [rdi]
push rax
or ch, byte [rdx - 0x62]
push rbx
adc dword [rbx + 0x30], ebx
and cl, byte [rbx]
xchg eax, ebp
mov esp, 0xe3b68473
sbb byte [rbx], al
xor al, 0x49
xor r9d, esi
popfq
xor al, 0x73
pop rax
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 2
xor byte [rdx - 0x28], bl
sub al, byte [rcx + 0x50e33f01]
mov bh, 0xda
mov eax, dword [rsi - 0x28]
sub ah, byte [rbx - 0x36a6f767]
cmp cl, ch
loope 0x40211b
or dword [rsi + 0x64], edx
test al, 0xe3
lodsd eax, dword [rsi]
enter 0x546e, 0x6b
cmpsb byte gs:[rsi], byte ptr [rdi]
movabs dword [0x83725602e8e6578d], eax
xor dh, dh
pop rdx
sub dword es:[rcx + 0x7d], esp
je 0x40220c
shr byte [rbx], 1
cmp dword [rdx], edx
push rdx
mov bpl, 0x2d
test eax, 0x5f4d7c4b
adc al, 0xc
push 0x123f5ae8
push rsp
retf
sbb ecx, dword [rdi + 0x2d]
sti
movabs byte [0xeb7657e704722851], al
imul ebp, dword [rsp + rsi*2 + 0x11], 0xd
js 0x4021b3
mov bh, 0x52
cmpsd dword [rsi], dword ptr [rdi]
add dword [rdx - 0x51a791a4], ebp
add al, 0xf6
pop rcx
push rdi
test dword [rax], edx
xchg eax, esp
mov byte [rsi + 0x15], dh
fimul dword [rdx - 0x76]
jmp 0x1263f2b6
sub ax, 0x9d25
test byte [rax], bl
and al, 0x3d
leave
mov ebp, 0x9f1a3553
imul ecx, dword [rdx - 0x62], 0x291494da
mov bl, 0xb2
xor cl, bl
pop rbx
xor ebx, dword [rsp + rdx*8 + 0x72f3046f]
pop rbx
mov bl, 0x40
or dword [rdi + 0x6154d0bd], esp
movabs eax, dword [0x2769450430544a95]
loop 0x402272
int3
leave
pop rdx
jge 0x4022a0
adc esi, dword [rbx - 0x7ff6cba8]
test eax, 0x77d70df0
and dl, byte [rsi]
xor cl, byte [rcx + 0x4c]
js 0x40226a
ret 0xa503
xor byte [rax + rsi], al
mov al, 0x4c
mov cl, 0x46
adc eax, 0x420549b4
movabs al, byte [0x1d767f6333d25fb5]
test byte [rax + 0x23], cl
or eax, 0x4ede69e0
test dword [rsi + 0x47], 0x73c63998
ja 0x40227a
add ebx, 0xd
add eax, edi
movsb byte [rdi], byte ptr [rsi]
mov dl, byte [rax]
jns 0x402295
sub eax, dword [rcx - 0x2fce2984]
xchg eax, esp
or dl, byte [rbx - 0x459b10ec]
mov ds, esi
cmp al, 0x4c
jae 0x40221a
xor byte [rbx], bh
mov ecx, 0x880c90b6
sbb dh, byte [rax]
xor al, 0x2e
mov byte [rdi], cl
fidiv dword [rax]
lodsb al, byte [rsi]
mov dl, 0x3a
cmp byte [rsi - 0x71], cl
imul esp, dword [rip + 0xec0b181], 0x669692e6
add al, 0xc7
movsxd rsi, dword [rax - 0x6ace4766]
push 0x66315e8e
movsd dword [rdi], dword ptr [rsi]
mov edi, 0x6506361d
fistp word [rbp + 0x6d]
std
in al, 8
imul edx, dword [rbp - 0x73ceaf51], 0x24
adc eax, 0x9ce66218
and eax, 0x642c59b6
imul eax, eax, 0x96046840
mov ecx, 0xb96603d8
jo 0x402290
pop rdx
pand mm5, mm7
xor al, 0x85
push r10
xor al, 0x4f
jb 0x402323
add al, ah
xor dword cs:[r11 + 0x636e6554], r10d
mov edi, ss
mov rbp, gs
xor al, 0xe3
cmp r13, r8
add al, 0x48
loop 0x402369
xor byte [rdi - 0x6e], dh
jo 0x402296
jbe 0x402342
cmp byte [r14 + rsi*2 + 0x65], sil
and dword [rbx + rcx*4 - 0x7b], 0xffffffc9
push 0x47
je 0x4022ab
mov al, 0x48
push rdi
push rcx
or dword [rcx - 0x7e0f5d10], edi
xor eax, 0x36fd8e90
js 0x402348
sbb dword es:[rdx], eax
jmp 0x3d11183
xchg rax, r9
test al, 0x35
int1
pop bx
cmp ebp, dword [rcx + rbp*4 - 7]
jb 0x4022f4
pop rdx
sbb dword [rbx + 0x48], eax
sub dword [rax + 0x4f], 0x59bc702d
mov al, 0x98
sbb ebx, dword [rcx]
test byte [rdx - 0x5def3d9f], al
mov ebp, 0x79290a1e
and byte [rsp + rbp*8 + 0x49], dl
sal byte [rbx - 0x3a], 0xd
sbb eax, 0x816c676c
push rax
add dword [rcx], 0x453048d2
add esp, dword [rbx - 0x53785193]
jb 0x4023ce
outsb dx, byte [rsi]
pop rdi
sbb cl, bl
and edx, dword [rbx + 0x28]
mov dh, 0x61
out dx, al
not byte [rax + rsi + 0x7250383d]
push rax
rcr byte [r13 - 0x5e8a5f3], cl
push rbx
jo 0x402398
add ah, byte gs:[rbx + 0x69929c91]
mov dword [rax + rax*8 + 0x7531b916], ebx
std
xor dh, byte [rax - 0x37e9fbe]
imul edx, dword [rsi], 0x9577e07b
imul eax, dword [rax + 0x6056ea13], 0x3d4ae485
xchg cl, ch
or al, byte [rsi]
inc bl
cmp eax, 0x6c197f62
and dword [rbx + rsi + 0x45], ecx
mov dh, byte [rax]
mov esi, 0x2089581a
outsb dx, byte [rsi]
call 0x4e594e30
adc byte [rsi + 0x2e], dh
mov dil, 0x32
xor dh, byte [rdx + 0x60870211]
ret
hlt
ret 0x651f
xor dword [rbx], esi
jae 0x402471
insd dword [rdi], dx
out 0xda, eax
mov al, 0x93
frstor dword [rdx + 7]
je 0x402474
push -0x38c4cf7
jb 0x4023f4
jo 0x402413
outsb dx, byte [rsi]
outsd dx, dword [rsi]
sub rax, 0x6f0a0d39
fld qword [rip + 0x75622e92]
pushfq
sub eax, 0xd6f7d969
sbb al, ah
or eax, 0x640938be
jns 0x40249b
fnstcw word [r10]
imul esi, dword [rbx], 7
sbb dword [r14 + 0x25], r14d
jae 0x40248e
ror byte [rbp - 0x68], 0xc
pop rdi
sbb esp, dword [rax + 0x3d]
fsubr dword [rbx]
cmpsd dword [rsi], dword ptr [rdi]
sub byte [rcx], cl
jo 0x4024b5
je 0x4024bd
jae 0x402431
mov dh, 0xe7
int3
or ch, byte [rdi + rbp*2]
or byte [rax - 0x6a117388], ch
mov esp, 0x2e906f24
push -0x515c49a5
lodsb al, byte [rsi]
insd dword [rdi], dx
mov edi, 0x3a0d7264
mov bl, 8
xor ah, bl
xor dword [rbx], ecx
jnp 0x40241a
sub eax, 0x72636af6
and al, 0x69
cmp dl, byte [rsi + 0x69]
xchg dh, ah
add al, 0x13
cmp al, byte [rax]
insb byte [rdi], dx
imul eax, dword [rax - 0x15], 0
add byte [rbx], bl
mov byte [rip - 0x105cd200], ah
and dword [rcx], edi
jae 0x40242e
pop rdi
sbb al, 6
movsb byte [rdi], byte ptr [rsi]
sbb dword [rdx + 0x54072301], edx
xchg byte [rax + rdx*4 + 0x41], ah
push rsp
and byte [rcx + rax*2], al
xchg byte [rax + rcx*2 + 0x31], ah
je 0x402450
movabs eax, dword [0x90fff64424749064]
or al, 0x72
enter 0x6fff, -0x68
cwde
xor al, 0x43
xor bl, al
add eax, 0xb4e087f
xor bl, al
add al, 0x3f
rcl byte [rax + 1], 0x20
xchg eax, ebx
sti
sbb byte [rbx + 0x56cd2588], dh
add esp, dword [rdi]
pop rbp
and al, 0x4f
js 0x4024f2
lidt [rsi + 0x37]
mov ebx, dword [rax - 0x2e]
mov edi, 0x21074fff
sbb edx, dword [rdx + 0x21cbfb3]
sbb dword [rax + rax*2 - 0x46], esp
imul edi, dword [rdi], -2
add ebx, eax
and eax, 0x200bfdf
jp 0x402549
cmp dword [rax + rcx], ebp
push rbx
nop
sub ebx, dword [rbx + 0x3fe730b0]
inc dword [rsi]
sbb dword [rax + rsi*4 - 0x7c], esp
test al, 0xa8
add byte [rcx], bl
nop
fcomp dword [r8]
mov ss, word [rbx]
mov bh, 0x43
leave
or dword [rdi + 7], ebp
lcall [rdx]
mov dword [rdi + 0x6e], esp
xor ah, byte [rdi + rdi - 0x60]
movabs al, byte [0x3f94071024364364]
xor ah, bl
test byte [rdx], ah
or al, 0xd9
xchg eax, ecx
sub eax, 0x503f9d0f
or esp, esp
cdq
wait
jg 0x402548
adc al, 0xb
or cl, cl
movabs dword [0x9ff07373392868f], eax
test eax, 0x90b6c832
mov edi, 0x81c1cbf
fst dword [rax + 0x72]
fidiv dword [rcx + 0x3733c93f]
sub dword [rdi], eax
jg 0x402581
add dword [rdx + 0x7bf1724], ecx
pop rbp
and al, 0xcf
fadd qword [rdi]
jg 0x4025af
or cl, cl
xchg eax, ebx
ror qword [r14], cl
add edi, dword [rdi]
mov dl, 0x73
js 0x4025b1
wait
adc al, 0x2c
imul ecx, dword [rdi], 0x726c0797
add edx, eax
mov edi, 0x40863fe1
cdq
adc byte [rax], dl
out 0x64, al
nop
add ecx, ebp
jg 0x4025ce
sbb byte [rax], bl
enter -0x6370, 0x1c
loopne 0x4025d1
adc ch, cl
sub byte [rdx + 0x32], al
cwde
iretd
fldenv [rcx - 0x75]
int3
jg 0x4025e6
out dx, eax
sub ecx, dword [rax]
scasd eax, dword [rdi]
xor byte [rdi], bh
xchg eax, ebx
and dword [rcx], ebx
clc
int 0x2e
jo 0x4025fb
jg 0x4025f4
adc edi, dword [rcx]
enter -0x6ce0, 0x3f
xor byte [rax + 0x50], 0x4f
mov bl, 0x47
or ecx, dword [rdi]
add eax, dword [rcx]
jg 0x402621
sbb al, 0x16
mov dl, 0x30
xor al, 0x7f
add eax, 0x742c3b3
adc dword [rbx + 0x25], edi
xor byte [rip + 0xc7f56af], ah
lodsd eax, dword [rsi]
xchg eax, esp
int 8
mov ebx, 0xcd20bf00
leave
xchg eax, ebx
xor byte [rax + 0x3c5f1e11], ah
cmp dword [rbp + rcx + 0x42487f09], eax
adc byte [rax + rax], 0
xchg eax, ecx
nop
add byte [rax], al
add bh, bh
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rip + 0x45080216], ecx
add dword [rbx + 0x731e100d], 0x4d
sub byte [rdi], ch
add byte [rax], al
ror dword [rip + 0x5f980000], 1
add byte [rax], al
add rax, qword [r8]
add al, 0xf4
add byte [rax], al
add bh, bh
