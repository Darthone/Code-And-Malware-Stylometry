call 0x401620
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x401438
add ebx, ebx
je 0x4013ee
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x401426
cmp rbp, -4
ja 0x401426
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x40140e
add ecx, 4
mov dl, byte [rax]
je 0x401436
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x401426
ret
cld
pop r11
cmp r8b, 2
je 0x40144e
jmp 0x4014cb
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x40145e
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x401446
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x401476
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x401463
sub eax, 3
jb 0x401494
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x4014cb
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x4014bb
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x4014b9
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x4014a8
cmp rbp, -0xd00
adc ecx, eax
call 0x4013fa
jmp 0x40144e
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x4015a4
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x401542
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x40158e
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x401561
push 0x3a707474
jne 0x4015ba
js 0x40157a
jae 0x4015b4
outsb dx, byte cs:[rsi]
je 0x401573
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x4015e1
jb 0x4015d3
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x4015fe
jb 0x401611
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x213090
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x213090
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x4014dc
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x401607
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x4015b5
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add byte [rax], al
jmp rbp
call 0x706f16af
jb 0x4016c7
movsxd rbp, dword [rdi]
jae 0x4016c1
insb byte [rdi], dx
js 0x4016c7
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x4016a7
cmp rsi, rcx
jae 0x4016af
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x40168e
cmp al, 0x8f
ja 0x40168e
cmp byte [rsi - 2], 0xf
je 0x401694
sub al, 0xe8
jg 0x401691
push rdi
cmp al, 1
ja 0x40167c
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x40167f
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x4016ac
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x401703
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c1b81
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x401747
mov al, 0xa
jmp 0x401747
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x401723
inc ebx
mov al, 0
jmp 0x40174b
mov al, 2
jmp 0x40174b
mov al, 3
jmp 0x40174b
mov al, 0x3c
jmp 0x40174b
push rcx
rcr ah, 1
fstp st(7)
jle 0x40178c
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x40179e
jg 0x401790
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a6f13
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x4017ea
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb6967
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x4017f2
cmp esi, 0x21585055
jne 0x4017f6
jge 0x4017e8
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x4017eb
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x4017ef
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x40189b
pop rcx
or al, 0x3b
jb 0x4018a1
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x401813
jmp 0x401815
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x3661756
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf5399e
in eax, dx
jg 0x40184d
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x401893
mov bh, 0x2a
add edi, 0x10
jmp 0x401890
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x4018cd
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x401909
jne 0x401920
fstpnce st(6), st(0)
jle 0x4018e9
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x40191f
jrcxz 0x401953
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1b8b7
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x4019d2
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x401992
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x58295f67
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x401a05
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x40199f
and ecx, 7
or al, 0xeb
jae 0x401a0a
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x401a3f
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x401a7d
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x401a36
push rax
call 0xffffffff868d1723
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x401a40
std
cmp edi, esi
xchg eax, edi
jle 0x401a95
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c96021
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x401a93
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x401a81
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x401aaa
js 0x401aea
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x401b7c
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad2db7
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x401b9d
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x401ba2
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc21654
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x401b30
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
xor byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x40090], ah
add byte [rax], al
add byte [rax], al
add byte [rax + 0x35d0ff], al
add byte [rax], bh
adc byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rdi], bl
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x401c56
je 0x401c5f
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x401c28
mov dh, 0x7d
jbe 0x401c27
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x401c60
sahf
sahf
add al, 0
cwde
add eax, 0x3f2c000
insb byte [rdi], dx
wait
add al, 5
add dh, dl
stc
add cl, bh
add dword [rax], ecx
add byte [rax], cl
or dword [rax], eax
mov byte [rdx + rax + 0x79], bh
add cl, byte [rdx]
add byte [rax + 0x968000b], ah
cmp dword ds:[rax + rax*4 + 0xc], 0xd9000
ror byte [rdx], 1
lahf
add al, ah
sldt word [rdi + rbx + 0x4d]
and byte [rdi], bl
and byte [rax], dl
add byte [rax + 0x11], dl
jle 0x401bec
mov al, 0xa7
and byte [rdi + 0x12], bh
add byte [rax], bl
and edi, ecx
add ebp, dword [rcx + rdi + 0x13]
sub eax, 0xe8001417
sub eax, 0x79027c60
add byte [rip + 0x16f800], dl
add byte [rsi], ch
cmp dword ds:[rax + rax*4 + 0x17], 0x180800
clc
and byte [rdi], bh
sbb dword [rax], eax
add byte [rax], dh
sbb al, byte [rax]
mov al, 0x4d
and byte [rdi + 0x20], cl
sbb eax, dword [rax]
rcr byte [rsi + rcx*4], 0xe4
fst qword [rbx + rdx + 0x41701]
int1
dec dword [rcx*2 + 0x1bc595c3]
mov edi, 0x10029719
and al, 0x83
fmul dword [rbx]
sbb edx, dword [rax - 0x28]
nop
or al, 0x32
nop
pop rdi
adc byte [rcx], bl
in al, dx
mov dl, 0xa7
add dword [rdi], edx
push rbx
xor bl, r8b
xchg eax, ebp
jp 0x401d26
mov al, 0x86
or byte [rbx - 0x5a68ddee], bh
xlatb
leave
sbb eax, 0x5827ac67
ja 0x401d32
xchg byte [rax + rsi*4 - 0x39], ah
pop rcx
fdiv qword [rax + 0x5a921b07]
jmp 0x61f62bc1
xchg eax, r8d
cdq
clc
pop rsp
add al, 0x60
jb 0x401d80
add dword [rax + 0x31], esp
and al, 0x83
or al, 0xc9
mov al, 0x21
cmp dword [rbx], edi
push rsi
add dword [rdi + 0x64], ebx
jne 0x401d3b
xchg eax, edx
rol dword [rsi + 0x2f956864], 0x6c
sbb dword [rdi - 0x6f9b2790], esi
and dword [rcx], ebx
je 0x401d36
js 0x401d74
and al, 0x27
xchg dword [rdx + rax], ebx
jl 0x401d80
add ah, byte [rax + rdx*4 + 0x21]
cmp dword [rax - 0x6de67ba5], eax
xchg byte [r9 - 0x78], dil
cwde
sbb dword [rax + rcx*2 + 6], esp
mov eax, es
nop
xchg dword [rax + rdx*4 + 0x21], esp
call 0x39432df5
cmp dword [rdi], esp
cwde
cmp byte [rbx], al
pushfq
xchg byte [rax + rdx*4 + 0x21], ah
movabs al, byte [0xa8aca44192190683]
and dword [rcx], ebx
xlatb
lodsb al, byte [rsi]
leave
leave
add al, byte [rax + rsi*4]
sub eax, dword [rsp + rsi*4]
and dword [rcx], ebx
push rax
mov eax, 0x90648641
jns 0x401d4e
movsd dword [rdi], dword ptr [rsi]
sbb dword [rdx - 0x363b3240], edx
and dword [rcx], ebx
enter 0x51a, 0x48
leave
int3
add eax, 0x192190d0
push 0x41928ed4
xchg byte [rax + rbx*8 - 0x4c], ah
fdiv qword [rdx + 0x48]
sbb ebp, ebx
loopne 0x401dc2
xchg eax, edx
xchg eax, ebx
jb 0x401da9
sub dword [rsi], eax
call 0x19466630
push rbx
in al, dx
jle 0x401e34
nop
and dword [rcx], ebx
movsb byte [rdi], byte ptr [rsi]
clc
enter 0x641, 0x19
or dl, cl
adc al, 0x20
enter -0x7ce0, 0x5d
rcl byte [rdi], 1
sbb byte [rax], cl
pop rax
or dword [rdx + rsi], 0xffffffd8
mov byte [rip + 0x3d9c87c7], cl
cmp ecx, edi
scasd eax, dword [rdi]
adc bh, byte [rdi - 0x3f6bf8c2]
and byte [rdi + 0x17], ah
in eax, dx
adc eax, 0x7941909f
cmp al, byte [rax + 7]
mov edi, 0x2160a712
or al, 0xde
ja 0x401e59
jbe 0x401e39
int1
pop rdx
add eax, 0x60476d1f
in al, dx
retf 0x7720
sub dword [rdi], 0x14
and dword [rcx], ebx
insb byte [rdi], dx
lahf
xchg eax, esp
call 0xffffffffb14675a4
cmpsd dword [rsi], dword ptr [rdi]
out dx, eax
mov al, 0xef
and al, byte [rcx + 6]
cmp ebx, ecx
sbb byte [rsp + rbp*2], dl
rcl dword [rsi - 0x27363e7d], cl
sbb ah, ch
out dx, eax
and byte [rsi + 0x1b], dh
sbb eax, dword [rax + 0x2c]
mov ebp, 0x61aebf1b
cmp dword [rcx], edi
jo 0x401e5e
cld
adc al, 0xb
jns 0x401e52
int3
and dword [rdi], edx
or dword [rax], ecx
cwde
sbb cl, byte [rdx + rsi*2]
jb 0x401dfb
neg byte [rbp - 0x6c8ce393]
and dword [rbp + rdx + 0x8a35f86], 0x65
add eax, 0x95b08173
add byte [rcx + 0x4e], al
jbe 0x401e61
sbb al, 0x15
push rax
xchg eax, ebx
xchg dword [rax + 0x46090ffb], edx
pushfq
sbb al, 0x64
mov al, 0x11
xor byte [rdi - 0x1b1bd1e6], bh
and byte [rbx + 0x2b131463], al
and byte [rdi], ah
sbb dword [rax - 0x6a], edi
sbb al, 0x1a
je 0x401ef2
xor cl, al
xchg eax, edi
sub eax, ebp
adc al, byte [rcx + 6]
cmp ecx, ebx
add dl, ch
leave
mov bl, 0x17
mov bh, 3
or al, byte [rdi - 0x4e]
adc eax, 0xc839d097
cmp dword [rsi + 0xe], esp
mov edi, 0x393c852a
or byte [rdi], dh
or spl, r12b
adc al, 0xe
jb 0x401ed1
in al, dx
jno 0x401eec
cmpsd dword [rsi], dword ptr [rdi]
push 0x13
and byte [rbp + 0x21760c0a], al
outsd dx, dword [rsi]
sbb eax, 0xecec77d6
leave
xchg eax, ebx
sub edx, 1
or edi, dword [rsp + rcx + 0x1decae2f]
in al, 0x28
or edx, dword [rbx]
pop rbp
and byte [rdx + rax*8], bl
cmp cl, byte [rbx]
xchg eax, edi
enter -0x6c27, -0x7d
pop rdi
add edx, dword [rax]
adc eax, dword [rdx]
pop rax
pop rbp
sbb dword [rbp - 0x50f630bd], ebx
jae 0x401f44
cmp al, 0x3b
test byte [rdi], ch
lea ecx, [rbx]
xlatb
sbb rsi, qword [r15]
cmp eax, ecx
adc byte [rsi - 0x45], dh
loopne 0x401faf
adc eax, 0xbc27243
add dword [rdi + rsi], ecx
sti
mov bl, 0x27
mov al, 0xc
xlatb
pop rsi
or al, 0xf4
or eax, 0xc8324347
leave
lar ebp, word [rax - 0x1f]
movabs eax, dword [0x250c202f60e4e907]
rol dword [rdi], 1
xor dh, dl
fsub dword [rdi]
xor byte [rax], 0x47
and byte [rdx + 1], bh
test eax, 0xe339072
adc ecx, dword [rdi]
ret 0x640c
mov al, 0xb
jns 0x401f31
adc ebx, ebx
mov edi, 0x7205e89
sbb dword [rax + 7], ebx
or eax, 0x641c0d21
nop
xor edi, edi
add dl, byte [rdx]
sub dword [rip - 0x7e89f14e], ecx
and byte [r10], r9b
mul dword [rax]
sbb r9b, byte [rip + 0xf1bec5f]
sbb byte [rdi + 0xd9de4e4], al
mov dl, 0xd
enter 0x1760, -0x32
ja 0x401fba
and edx, dword [rdi]
nop
je 0x401f87
or al, 0xfe
adc dword [rdi + 0x50], esi
nop
adc ecx, dword [rsi]
ror byte [rip + 0x1f0ce42f], cl
ret 0x790b
jb 0x401fde
add byte [rip - 0x7ef8f1cd], dl
or ebp, esp
add eax, 0x608f0e46
jns 0x401fae
add dword [rax + rdx + 0x548f0e6d], esp
sbb al, 0x90
cmp dword [rdx - 0x65], eax
movsb byte [rdi], byte ptr [rsi]
adc al, 0x75
mov ebx, 0xc3c417af
enter 0x7813, -0x7f
jrcxz 0x40200b
lahf
and byte [rdx + 0x5e102c38], dh
out 0xe, eax
div dword [rax - 0xe]
in al, dx
test esp, edi
push rdi
sti
or ecx, dword [rax]
cmova esp, dword [rax + 0x3c9e4eb5]
jns 0x402087
add byte [rdi + rcx], cl
adc eax, 0x7027311e
nop
xchg eax, esi
or al, 0xcf
in al, 0x20
cmovbe ebx, dword [rsp + rsi*2]
xor cl, al
leave
mov bl, 0xf
mov edi, 0x5e541a1e
adc edi, dword [rax]
and dword [rdi], ecx
add byte [rcx], dh
mov eax, 0x393c3f0f
enter 0x23c9, 0x1d
out 0xf, eax
jmp 0x40205c
nop
sbb dword [rcx + rbx*2 + 0x10220ff4], -0x3e
and eax, dword [rcx]
jbe 0x4020bd
add bl, byte [rdx]
scasd eax, dword [rdi]
adc bh, dh
mov ebx, 0x4e05e040
adc byte [rdi - 0x72], ch
jbe 0x4020e5
mov eax, 0xe4bf109b
mov word [rdi], fs
movsxd rbp, dword [rdi - 0x63]
adc al, dl
push rdi
jbe 0x402004
sbb al, 0xe4
lodsd eax, dword gs:[rsi]
adc byte [rdi + 0x10bc0877], bh
clc
sbb dword [rdi - 0x24], ecx
adc byte [rdi + 0x1784f217], dh
lock adc byte [rdi - 0x7cd1e350], dl
pushfq
cmp al, 0x83
adc dword [rdi + 0x520b1bfc], edi
nop
nop
adc dword [rdi + 0x11], esp
ja 0x402116
sbb byte [rsi + rbx*2], ah
and byte [rbp - 0x6b70ee81], bh
adc edi, ebx
mov word [rdi], ss
fmul dword [rbx]
movabs eax, dword [0x86e824cf11b6d711]
in al, 0x84
iretd
adc byte [rdi + 7], al
sbb eax, edx
scasb al, byte [rdi]
fild dword [rdi - 9]
xlatb
mov ah, 0x1a
leave
adc edi, dword [rax + 0x21]
sbb edx, dword [rdx]
jae 0x4020fd
and dword [rcx], edi
cmp eax, ecx
adc al, byte [rbp - 0x3c]
or edi, dword [rcx - 0x3a]
imul edx, dword [rdx], 0x8f1e579f
adc cl, al
mov bl, 0x78
xor dword [rdi], 0x8a0f12bd
adc edx, dword [rax - 0x2ca27c6d]
ja 0x402092
sbb byte [rbx - 0x70], cl
xchg eax, ebx
jp 0x40217e
adc byte [rbx], dl
or eax, 0xbc67b0e7
loopne 0x40212a
lahf
movsb byte [rdi], byte ptr [rsi]
loopne 0x402181
or al, 0x36
and al, 0x33
jnp 0x402147
cmp byte [r9 + 0x1b1e9713], r9b
lahf
adc edx, edi
or dword [rdi + 0x1ce23c9c], eax
adc al, 7
cmp dword [ecx - 0x49ef0ded], eax
retf
adc ecx, dword [rdi]
call 0xffffffffd161e34e
adc edi, dword [rdi - 0x13]
adc esp, dword [rcx]
jo 0x402198
cmpsq qword [rsi], qword ptr [rdi]
insb byte [rdi], dx
and byte [rdi], dl
adc ebx, dword [rsi + 0x60]
or eax, 0x145ac714
xchg eax, edi
in al, 0x19
sbb al, 0x92
push 0x62
adc al, 0x17
in eax, dx
sbb ch, cl
sbb eax, 0x5f912ec2
scasd eax, dword [rdi]
adc al, 0xd7
xlatb
js 0x4020f6
shr byte [rbx], 0xb6
adc al, 0x57
retf 0x814
sbb edx, dword [rdx - 0x145f70cd]
pop rdi
adc eax, 0x17fe6c21
adc eax, 0x4f272017
jp 0x4021e0
adc eax, 0x221afca7
jb 0x40218c
in al, 0x6f
adc eax, 0x9e351830
adc eax, 0x40bc605e
ret 0x5715
call qword [rip + 0x302f59e4]
jmp qword [rbx]
mov ebx, 0x49e42f1b
outsb dx, byte [rsi]
xlatb
jb 0x4021d8
movabs eax, dword [0x12169759e4e41916]
cdq
cmpsd dword [rsi], dword ptr [rdi]
xor edi, dword [rax + 0x65]
push rdi
cmp byte [rdi], al
sbb edx, dword [rdx - 0x3ba0592a]
sbb dword [rbx], esi
std
jmp qword [rcx + 0x30]
movsxd rsi, dword [rdx + 0x74]
jae 0x402259
jne 0x40224d
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
std
fstp st(2), st(0)
mov edi, 0x65640009
jb 0x402264
imul ebx, dword [edx], 0x6d745f06
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x402204
fstp st(6), st(0)
fisub word [rcx]
outsd dx, dword fs:[rsi]
pop rdi
or esp, dword [edx + 0x61]
insb byte [rdi], dx
or dword [rdi + rbp*2 + 0x72], esi
jae 0x40227f
jne 0x40229b
mov al, 0xbf
std
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x402298
sub dword gs:[rsi + rbp + 0x37], esp
xor eax, 0x5f243538
lodsw ax, word [rsi]
in eax, dx
imul ebp, dword [rsi + 0x69], 0x61727208
jns 0x4022a3
outsb dx, byte gs:[rsi]
je 0x4022ba
jns 0x40225b
or dh, byte [rdi]
out dx, al
fld xword [rbp + 0x65]
and byte [rbp + 0x6d], dh
insd dword [rdi], dx
jns 0x402289
or eax, 0xddbf295f
pop rax
je 0x40228a
jo 0x4022c5
popfq
jo 0x4022d5
and eax, 0x4c74535a
xor edi, ebx
mov dh, 0xd6
cmp dword [rax + 0x69], esi
movsxd rsp, dword gs:[rbp + 0x77]
js 0x4022e8
movabs al, byte [0x60daddce74637572]
sbb dh, byte [rbx]
jno 0x4022fd
movsxd rsp, dword [rcx + 0x73]
fcmovnu st(0), st(1)
div byte [rbx + 0x69361467]
outsb dx, byte [esi]
pcmpgtw mm1, qword [rax + rdi]
push -0x24a49097
mov ebp, 0x4e0e5e6f
cmp dword [rdx + rbx], ecx
jne 0x4022ec
js 0x402322
jg 0x402284
mov dh, 0xdd
xor dh, byte [rcx]
mov ah, 0x65
cmpsw word [rsi], word ptr [rdi]
insb byte [rdi], dx
js 0x4022f9
imul ebx, dword [rdi + 0x70], 0x6f
insb byte [rdi], dx
imul esp, dword [rbx + 0x7b], 0x79d83706
push r15
xor byte [rbx], bl
sbb dword [rcx], edx
pop rax
jmp 0x4022d5
xor dword [rsi + 0x3012675f], edx
or eax, 0xf6db37b7
jo 0x40231b
pop rbp
adc dh, byte [rcx]
xor eax, 0xb6db6541
mov bh, 0xb3
js 0x40228e
enter 0x4c73, 0x35
push rbx
mov dh, 0x45
adc al, 0xf6
in eax, dx
or byte [rsi], dh
test al, 0x73
jne 0x40235e
jae 0x40231d
mov ah, 0x2b
in al, dx
fnstsw dword [rax]
pop rdi
imul ebp, dword [rbp + 0x69], 0xa37417a
fist word [rsi + 0x58]
sub eax, dword [rcx]
jmp qword [rax]
movsd dword [rdi], dword ptr [rsi]
cmp eax, dword [r13 - 0xbac7a4b]
imul ecx, dword [rdx + 0x24], 0xb6a56235
mov dh, 0xc2
pop rdx
test eax, 0x6e610d86
mov ebx, 0x1216c290
and dword fs:[rdi + 0x571c6b77], eax
fdiv dword [rsi + 0xa]
xor al, 0x67
adc dword [rax + 0x7b], esi
jo 0x40239e
loop 0x4023b5
fisub word [rbx + 0x68]
movabs eax, dword [0xc8915127ac86ca90]
add al, 0x58
adc esp, dword [rdi]
test dword gs:[rax - 0x4a], eax
adc byte [rdi + 0x77], cl
mov al, 0x6d
jbe 0x4022ea
cmp dword [rsi], esp
or edi, dword [rcx + 0x4a]
nop
mov ch, 0x4b
scasb al, byte [rdi]
xor al, 0x6e
jmp 0x40230e
ficomp word [rdx]
outsb dx, byte [rsi]
xor dh, byte [rsi]
adc dword [rsi], ebx
sub dword [rdi + 0x75], ebp
jae 0x40236b
insd dword [rdi], dx
wait
retf 0x702a
sbb byte [rsi + 0x7c], dh
jbe 0x4023ea
imul edx, dword [rbp + 0x25], 0x3481d2b8
sub ax, 0xca6a
pop rbp
xor byte [rax], ch
fldenv [rbp + rcx*2 + 0x1b]
enter -0x4946, -0x33
adc eax, 0x2837f570
fistp dword [rdx - 0x35]
xor eax, 0x1705382f
insb byte [rdi], dx
sub eax, dword [rsi + 0x33206969]
xchg eax, esp
jb 0x4023a4
hlt
nop
cmp eax, 0x273154d8
je 0x40243b
jo 0x4023e9
mov ebp, 0x32326b52
out 0xa4, al
mov dh, 0x52
sub dword [rsp + rsi*2 + 0x661be723], edx
test eax, 0x74ca9dcc
jb 0x402405
and eax, 0xdb2012c8
jo 0x402445
outsb dx, byte [rsi]
cdq
xchg eax, esp
int 0xe
sbb dword [rsp], esi
sub byte [rsi + 0x39], cl
xchg eax, ebp
mov ch, 0x6d
and al, 0x6e
sbb byte [rbx + rsi*2 + 0x70], dh
rcl byte [rsp + 0x65b73522], 1
xchg eax, ebx
sub ebp, dword [rsi + rax*4 - 0x3dd2c9d7]
push rbp
push rsi
js 0x402485
imul ecx, dword [rdx + rdi*2 + 0x1c0e3b74], 0xa1385c0f
je 0x4023cb
add dword [rdi + 0x5fc1c340], esi
push rbx
and edi, dword [rbp - 0x48dd9b5e]
push 0x790df985
sbb dword [rsi + 5], ecx
fcmovnu st(0), st(0)
mov eax, 0x4e4933fb
pop rdx
xor eax, 0xe7761773
call 0x60002420
push rax
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
adc byte [rax], r12b
xor al, 0x8d
jmp 0x402475
hlt
jno 0x4024ca
sal byte [rip + 0x7a4fd735], 0xd
test dword [rsi - 0x4047939c], edx
std
int 0x5a
wrmsr
imul ebp, dword [rcx + 0x2f], 0x424f4c47
xor r13b, byte [rdi - 0x12]
retf
or esp, dword [rdx + 0x325f495f]
pop rdi
push rdx
push rdx
push rbx
push rdx
sahf
in al, dx
sti
pop r15
push rsp
or eax, dword [r15 + 0x4e]
push rbp
jge 0x402451
pop rbx
and byte [rax + 0x44], cl
push rdx
push rbx
sbb byte [r15 + rdi*4 + 0x41545f8f], r15b
sub r8b, r14b
in eax, dx
mov edx, 0x72a11085
scasb al, byte [rdi]
pop rcx
faddp st(1)
jbe 0x40248b
or esi, dword [r14]
movsxd rsp, esp
push rbx
xor dword [rsi + 0x4503dc4a], edx
adc r10d, r14d
push -0x26b24f70
push r10
and rsi, qword fs:[r9]
scasb al, byte [rdi]
fdivr dword [r11]
cmp bh, byte [rax - 0x249a979f]
insb byte [rdi], dx
imul ebp, dword [rbp + 0x50], 0x1f4b634b
xor bl, cl
mov edi, 0x4532441c
jbe 0x402511
je 0x40253a
xor byte [rdx + rdx*2 + 0x75886e12], ah
outsb dx, byte [rsi]
sbb bl, ch
mov ecx, 0x7dd61b36
xor dword [rsi + 0x33], ecx
sbb edx, dword [rbp - 0x513cf451]
stc
outsd dx, dword [rsi]
jbe 0x4024b1
xor byte [rcx + 0x77], ah
fstp st(2)
mov dh, 0x50
push rbx
and al, 0x29
push rsp
jmp 0x4fae5b8e
in eax, dx
mov al, 2
xor eax, 0x77df2773
shl byte [rcx + rcx*2 - 0x4f], cl
mov cl, 0xed
stosb byte [rdi], al
sbb r10b, byte [r10 + 1]
cmp eax, 0x4d4c35ad
push rax
or byte gs:[rdi + 0x50], ch
scasd eax, dword [rdi]
sbb dword [rbx - 0x2e], ebx
xor al, 0xaf
cmpsb byte [rsi], byte ptr [rdi]
xor dword [rax + 0x78dbed8c], ebx
je 0x4025d4
and byte [rdi - 0x36], dh
or dword [edi + 0x2d], ebx
mov bl, 0xff
test dword [rbp - 0x2f], ebx
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0xc4
movabs eax, dword [0xa0a10856f77438f5]
or eax, 0xd8815bb
int1
add al, 0xbf
je 0x4025fe
xor esp, dword [rax + 0x13]
mov dh, 7
pop rdi
xor ch, byte [rsi]
add dword [rip + 0x378bcb3b], esi
loope 0x4025c5
xor al, 0x3e
sbb dword [rdi - 0x29133a98], ebp
je 0x4025d5
jae 0x4025ff
push rdi
insd dword [rdi], dx
in eax, dx
in al, dx
sub dword [rdx], ebx
sub al, 0x52
push rbx
cmpsd dword [rsi], dword ptr [rdi]
cmp dword [rbp + 0xc], ebp
outsd dx, dword [rsi]
mov bh, 0xdf
xor dh, byte [rcx]
push rdx
imul rcx, qword [r10 + 0x69], -0x10ad89e2
jo 0x402627
adc dh, byte [rbx - 0x79]
xchg eax, ebp
int 0x47
jle 0x402614
mov al, 0x54
sub byte [rax], bh
and byte [rsi], ch
jae 0x4025ae
test dword [rax + 0x2def92c1], ebx
or byte [rcx + 0x62], ch
vmovhpd xmm12, xmm7, qword [rcx + 0x669a63c6]
stc
push rsp
mov dh, 0xe9
mov dl, 0x15
imul eax, dword [rsi + 0x77d23143], 0x39d092d8
or eax, 0x29c6b34a
mov al, 0xf3
mov ebp, 0x6d4fcad9
ret 0x1987
or eax, 0x200c4978
int3
mov dword [rax + 0x5f], 0x1c40096d
mov dh, 0x6c
jmp 0xffffffffb5a86b7d
test edi, eax
mov cs, word [rdx + 0x3e2f5f22]
xlatb
xchg rax, r11
xor al, 1
cmp dword [rbp - 0x7a], esp
mul byte [rbx + 0x2cce2e48]
xchg eax, esi
shl byte [r9 - 0x25], cl
fimul word [rbx]
retf
test dword [rdi + 0x11], edx
js 0x4026ab
jrcxz 0x40262f
movsb byte [rdi], byte ptr [rsi]
lodsd eax, dword [rsi]
jge 0x4026cf
jl 0x40262e
jbe 0x40260e
mov bh, 0x6d
adc dword [rsi + rcx + 0x43], 0x40
jae 0x4026e8
jae 0x40269c
or edx, esi
enter 0x6478, 0x6c
push rax
jbe 0x4026ec
je 0x4026bc
nop
loope 0x402669
sahf
and eax, 0x63b2663c
sub eax, 0x72a3a386
ret 0x251a
mov esp, 0x73b72d5
push rax
xor dword [rsi], ebp
xor esi, ebp
ret 0x5918
insd dword [rdi], dx
sub ecx, 8
pop rbx
lahf
jae 0x4026b1
xor al, 0x49
mov edi, cs
jle 0x4026ea
xor byte [rdx - 0x33bbc56f], dh
outsd dx, dword [rsi]
jns 0x40266e
mov ah, 0x19
jbe 0x40264b
xor ebp, ecx
push rbx
leave
and al, 0x34
jp 0x40270b
jnp 0x402736
imul eax, esi, 0x68827245
xor r15b, byte [rcx - 0x2c]
push -0x6ad8b7b4
jl 0x402665
insd dword [rdi], dx
movabs dword [0xac9264ff754b4e91], eax
ret 0x7036
loope 0x402746
xor byte [rbx + 0x6d], bh
movabs al, byte [0x8123d8164686122]
rcl byte [rax + 0x18], cl
pop rax
lea esi, [rdi]
and edx, edi
or al, 0xa0
xchg byte [rsi], dl
jmp 0x4026df
pop rdi
imul esp, dword [rcx + 0x32], 0xc3f67bd
rcr byte [rdx - 0x68], 1
fild word [rax]
or eax, 0x105a0f64
xchg eax, ebx
test dword [rdi + 0x2a42b9c2], edx
jl 0x402792
ja 0x402793
out 0xb0, eax
xor dword [rdx - 0x37], ebx
xchg eax, ebp
xor byte [rsp + rax*2 - 0x4fc914be], cl
je 0x402780
outsb dx, byte [rsi]
shr ebx, -0x17
wait
mov al, 0x4b
mov dh, 0x37
cmpsb byte fs:[rsi], byte ptr [rdi]
sal dword [rsi + 0x5f], -0x50
nop
xchg eax, edx
sub ecx, dword [rdx + 0x64]
sub al, 0xb6
and al, 0x40
movabs dword [0xb81594430c9dc78b], eax
add dword [rbx + 0xc626154], ebx
mov dword [rax + 9], ebx
imul ebx, dword [rsi + 0x1b430b9a], 5
mov r11d, 0xbd75e99e
adc dword [rsi], eax
outsd dx, dword [rsi]
push rdi
jbe 0x402746
push rdi
mov ebp, 0x1f434091
outsb dx, byte [rsi]
xchg eax, ebx
imul r12d, dword [rdx], 0x61b59181
and byte [rax + 0x19], ah
movabs dword [0x9ee58390b7e09e6c], eax
sub dword [rcx + 0x4a], ebp
adc esp, dword [rdi + 0xa]
sbb ecx, ecx
scasd eax, dword [rdi]
ret
pop rsp
insb byte [rdi], dx
fidiv word [rbx + 0x24]
xor bl, byte [rsi - 0x70]
mov bh, 0x34
jbe 0x4027d2
xor byte [rbx], dh
xor dword [rbx], ebp
test dword [rcx + 0x4afa282f], edx
xlatb
std
jno 0x402826
movsxd rbx, ecx
push rsi
out 0x37, eax
jo 0x4027ae
cwde
xor esi, dword [rcx + rbp*4]
xor eax, dword [rsi + 0x12]
pop rsp
pop rcx
and bp, ax
fsubr qword [rbp + 0x70a18486]
je 0x402857
js 0x4027e8
mov esp, 0x464b9893
xor edi, dword [rdi + 0x32]
xor dword [rbp + 0x34271240], esi
jp 0x40280f
stosd dword [rdi], eax
jo 0x40286a
xor dword [rdx], 0x34
xor eax, 0x81b89e88
xor byte [rax + 0x6d], ch
js 0x4027e6
add byte [rsi], bl
mov word [rcx + 0x18], ds
sahf
xor bl, byte [rdi - 0x30]
rcr dword [rdx], cl
cdq
or byte [rbx + 0x494a3289], al
je 0x402792
mov byte [rdx], 0x2d
pop rdi
push 0x30e83030
jg 0x402857
jno 0x4027f6
mov al, 0x92
call 0x6992dc74
scasd eax, dword [rdi]
leave
loopne 0x4027ee
xchg eax, esp
fdiv dword [rdx + rbx]
push -0x50
mov dl, 0xb8
xchg eax, edx
cmp sil, dl
nop
enter -0x7ee8, 0x46
sal byte [rax], 0x92
add ebp, esi
and qword [r13 + 0x60], rcx
and dword [rsi + 0x10e6e185], eax
or cl, cl
mov sil, byte [r9]
pop rcx
retf -0x7ca2
insd dword [rdi], dx
mov dl, 0x96
div ch
sub bl, byte [rip + 0x78694e94]
jbe 0x4028c5
push 0x6d435268
cmc
imul ebp, dword [rax], -0x6b
adc eax, 0xca898532
clc
mov dword [rcx + 0x6a], ecx
xor edx, dword [rbp - 0x629a949f]
mov ah, 0x12
add al, dl
cmp al, byte es:[rsi]
xor dword [rcx], 0x2f
cmp byte [rax + 0x63], ah
add byte [rcx + 0x3856e02c], al
in eax, dx
xor byte [rsi + rdx*4 + 8], cl
mov ecx, dword [rbx - 0x5f]
insd dword [rdi], dx
mov ebp, 0xca2b8686
push rax
xor al, byte [rdx]
add byte [rbx - 0x6c], ah
fild dword [rbp - 0x7e255a7d]
int3
xor eax, 0x57744f4f
and r11b, r8b
add dh, byte [rbp + 0x1d]
lea ebx, [rsi - 0x54]
and eax, 0xb5b0ca03
jb 0x402859
xor bh, byte [rbp - 0x529c8d1e]
xchg eax, edi
test byte [rcx + 0x61328a26], ah
loopne 0x402928
retf
mov ebp, 0x734b3361
in eax, 0xd1
in al, dx
push rdx
mov al, 0xc7
pop rbp
retf
movabs eax, dword [0x4b86c83465cb6d49]
int3
or dword [rsi - 0x33], ebx
loopne 0x40287f
js 0x40296b
leave
lodsd eax, dword [rsi]
sub al, 0x4c
rol byte [rdi], 1
pop rdi
or al, 0xa9
push rdi
stosd dword [rdi], eax
xor dword [rdi], esi
outsd dx, dword [rsi]
push rdx
mov bl, 2
in eax, 0x1d
fcomp st(3)
adc byte [rdx - 0x7b669f9], dl
push rax
movsxd rsi, dword [rbp + rdx*8 - 0x5f]
and al, 0xfc
jne 0x402958
sub eax, 0xd7439ba9
adc byte fs:[rcx], dl
xor byte [rbp + 0x70], 0x76
mov edi, 0xc16e4b62
and dword [rcx], edi
jnp 0x4029a4
outsd dx, dword gs:[rsi]
imul ebx, edx, 0xbe685c2a
and dword [rdi + 0x70], ebx
outsb dx, byte [rsi]
outsb dx, byte [rsi]
jbe 0x4029b2
fdiv dword [rcx + rbp*2 + 0x76]
xor ch, bh
leave
xchg byte [rsi + 0x55b76436], dh
adc ah, byte [rdi + 0x64]
fisttp dword [rdx + rdi*4 + 0x6d625b4f]
movsxd rax, dword [rbx + 0x43]
xor byte [rdi], bh
test dword gs:[rax + 0x4a], esp
mov ss, word [rdi + 8]
and dword [rcx - 0x5d], esp
xor dword [rbx], 0x30923594
lahf
outsd dx, dword [rsi]
in al, 0xa
xor esi, dword [rcx]
out dx, al
mov byte [r12*2 - 0x5fcdf853], cl
add eax, 0x320b0d90
sub esi, dword [rax + rdx]
cwde
test byte [rdx], dh
sub byte [rbx + 0x6c], ah
xor dword [rdi], ebx
movabs dword [0x2c540018ff5960cb], eax
int3
ret 0x3136
cmp ch, bl
or esi, dword [rbp + 0x6d7973f1]
and ah, byte [rdx + 7]
je 0x4029a0
fidiv dword [rax + 0x9687293]
movsb byte [rdi], byte ptr [rsi]
jo 0x4029c6
xor byte [rbx - 0x39], dl
jb 0x402a32
outsd dx, dword [rsi]
sub eax, 0x8e850d94
push rcx
add bpl, byte [r14]
stosb byte [rdi], al
sub eax, 0x6b7b0769
or eax, 0x38850d62
or dword [rcx + rdi*2 + 0x6e], esp
jo 0x40297e
mov ch, 0x99
sbb dword [r14 + 0x63], r14d
or dword [rdi], esi
sub eax, 0x1b5f0c16
js 0x402a0f
rcr esi, 0x28
or dword [rcx], ebp
je 0x402a6d
sbb al, 0xb9
in eax, dx
cmp dword [rdi + 0x86f2c0a], esi
fmul dword [rsi]
loopne 0x402a0f
movsb byte [rdi], byte ptr [rsi]
and al, 0x6f
retf
fdiv qword gs:[rdx - 0x2975f31]
push 0x5d0d7264
pop rsp
add al, 0xb6
pop r15
insb byte [rdi], dx
mov ebp, 0x9b0f116c
and eax, 0xb43160b
push 0x63
fldcw word [rbx]
insd dword [rdi], dx
mov cl, 0x72
movabs eax, dword [0x734427b686f6936]
mov bl, 0x5e
adc byte [rsp + rsi*2], al
sub dl, byte [rbp - 0x4a]
mov ch, 0x52
std
add byte [rax], al
or bl, byte [r10 + 0x43070167]
jb 0x402a39
mov dword es:[rdi], 0xc011c3f
xor rsp, qword [rbx]
push rsp
or al, 0xc9
and byte [rbx - 0x7cfbdfac], al
or al, 0xc9
nop
xor dword [rsp + rsi*2 + 0x37], esi
leave
and byte [rsp + rax*2], ah
idiv bh
inc ecx
sbb esp, esp
nop
outsd dx, dword [rsi]
cwde
cwde
or byte [rdx], dl
jo 0x402acb
add eax, 0x21509b67
and ebp, edi
retf
jbe 0x402a1e
rol al, 0x40
add bh, bl
cdq
insb byte [rdi], dx
jb 0x402aa0
sbb byte [rsi - 0x65], dl
add dword [rip + 0x708f0369], ebp
je 0x402abd
or dword [rdi], ebp
add dword [rdi], edi
pop rsi
mov edi, 0x80cdecff
xchg eax, esi
mov bh, 7
mov edi, 0xe486c86e
xor byte [rdx], al
imul edi, dword [rdi], -0x43
sbb eax, edx
xchg eax, edx
fild word [rdi]
retf -0x7cda
pushfq
cmpsd dword [rsi], dword ptr [rdi]
add byte [rsi], 0xff
xchg dword es:[rip + 0x3f537a61], eax
mov byte [rbp + 0x13], ah
out 7, al
out 0x3f, eax
jmp qword [rax]
or dword [rsi + rsi*2], 0xffffff84
movabs al, byte [0x1901c8a0c8392e40]
push rcx
xchg eax, ebx
sbb byte [r14 + 0x72500613], cl
ret 0xff9b
lcall [rdx]
and byte [rbx + 0x3f89d90c], al
nop
nop
insb byte [rdi], dx
enter -0x1bd2, 0x40
add dword [rax], edx
xchg eax, esp
xchg byte [rbx + 0x7a78504], bl
and dword [rbx], edi
mov dl, 5
setge byte [rdi]
and eax, 0xe0937001
push rdi
test ah, ah
mov dl, 0x95
jg 0x402b68
movabs dword [0x9ff0747409b99c9], eax
sub dword [rax], ecx
test eax, 0xc91777bf
xor esi, dword [rdi]
mov edi, 0xdcb10150
test byte [rdx], ah
and al, 0x17
fst dword [rax - 0x30408071]
fsubr qword [rax + rbp]
outsd dx, dword [rsi]
jg 0x402bb4
or ah, byte [rax - 0x36dba370]
sub byte [rcx], bh
jae 0x402b15
xchg eax, edi
inc dword [rax + rdx*2 + 0x4c]
outsb dx, byte [rsi]
fisttp dword [rsi]
add edx, dword [rax + 0x72]
ret 0x9f9b
mov edi, 0x20326e10
fucom st(7)
psubb mm0, qword [rdi]
retf
add eax, 0x3ff3ff08
add eax, 0x971464d8
outsb dx, byte [rsi]
pop rbx
sar al, cl
wait
sbb dword [rdx - 0xf80986d], edx
add dword [rsi], eax
adc byte [rax], ah
fild dword [rdx + 6]
cwde
mov edi, 0x1720e42f
leave
or byte [rcx], al
add dword [rbp + rcx*2 + 0x60308758], edx
js 0x402b66
loopne 0x402bdf
xor cl, byte [r10]
mov al, 7
add edx, edx
pop rbp
cmp byte [rdi + 0x10], 0x3f
or al, al
test byte [rax + rcx*8], bh
and al, al
push rax
test dword [rcx], eax
or dword fs:[rip + 0x7f1520c9], 0x30
test dword [rax], esi
cmp byte [rdi + rdi], ch
xor al, 0xbf
jo 0x402bab
xchg word [rdi], ax
adc dword [rbx], edi
jno 0x402c46
retf
or byte [rip - 0x44e140d9], ah
xchg eax, ebx
or eax, 0xff30d709
test al, 0x15
or byte [rbx], bl
or dword [rdi - 0x40], edi
and bh, byte [rcx + 0x72]
movabs al, byte [0x16d146]
add byte [rax], ah
add edi, edi
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rip + 0x56080216], ecx
enter -0x3096, 0x77
pop rcx
xor byte [rdx + 0x35d0], bh
cmp byte [rax], dl
add byte [rax], al
nop
add byte [rax], al
add byte [r8], al
call 0x402d38
