call 0x4010a8
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x400ec0
add ebx, ebx
je 0x400e76
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x400eae
cmp rbp, -4
ja 0x400eae
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x400e96
add ecx, 4
mov dl, byte [rax]
je 0x400ebe
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x400eae
ret
cld
pop r11
cmp r8b, 2
je 0x400ed6
jmp 0x400f53
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x400ee6
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x400ece
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x400efe
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x400eeb
sub eax, 3
jb 0x400f1c
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x400f53
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x400f43
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x400f41
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x400f30
cmp rbp, -0xd00
adc ecx, eax
call 0x400e82
jmp 0x400ed6
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x40102c
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x400fca
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x401016
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x400fe9
push 0x3a707474
jne 0x401042
js 0x401002
jae 0x40103c
outsb dx, byte cs:[rsi]
je 0x400ffb
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x401069
jb 0x40105b
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x401086
jb 0x401099
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x211ad4
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x211ad4
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x400f64
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x40108f
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x40103d
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add byte [rax], al
jmp rbp
call 0x706f1137
jb 0x40114f
movsxd rbp, dword [rdi]
jae 0x401149
insb byte [rdi], dx
js 0x40114f
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x40112f
cmp rsi, rcx
jae 0x401137
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x401116
cmp al, 0x8f
ja 0x401116
cmp byte [rsi - 2], 0xf
je 0x40111c
sub al, 0xe8
jg 0x401119
push rdi
cmp al, 1
ja 0x401104
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x401107
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x401134
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x40118b
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c1609
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x4011cf
mov al, 0xa
jmp 0x4011cf
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x4011ab
inc ebx
mov al, 0
jmp 0x4011d3
mov al, 2
jmp 0x4011d3
mov al, 3
jmp 0x4011d3
mov al, 0x3c
jmp 0x4011d3
push rcx
rcr ah, 1
fstp st(7)
jle 0x401214
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x401226
jg 0x401218
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a699b
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x401272
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb63ef
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x40127a
cmp esi, 0x21585055
jne 0x40127e
jge 0x401270
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x401273
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x401277
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x401323
pop rcx
or al, 0x3b
jb 0x401329
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x40129b
jmp 0x40129d
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x36611de
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf53426
in eax, dx
jg 0x4012d5
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x40131b
mov bh, 0x2a
add edi, 0x10
jmp 0x401318
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x401355
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x401391
jne 0x4013a8
fstpnce st(6), st(0)
jle 0x401371
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x4013a7
jrcxz 0x4013db
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1b33f
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x40145a
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x40141a
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x582959ef
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x40148d
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x401427
and ecx, 7
or al, 0xeb
jae 0x401492
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x4014c7
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x401505
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x4014be
push rax
call 0xffffffff868d11ab
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x4014c8
std
cmp edi, esi
xchg eax, edi
jle 0x40151d
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c95aa9
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x40151b
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x401509
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x401532
js 0x401572
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x401604
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad283f
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x401625
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x40162a
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc210dc
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x4015b8
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
int3
add eax, 0xe0000
add byte [rax], al
add al, byte [rax]
add byte [rax], al
and byte [rax + 0x90], bpl
add byte [rax], al
add byte [rax], al
and byte [rcx], al
fcom dword [rdi]
add byte [rax], al
int 7
add byte [rax], al
add al, byte [rax]
add byte [rax], al
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x4016de
je 0x4016e7
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x4016b0
mov dh, 0x7d
jbe 0x4016af
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x4016e8
sahf
sahf
add al, 0
cwde
add eax, 0x1f90c000
and byte [rdi + 0x4a00006], bl
add byte [rdx], ch
nop
nop
invd
add byte [rax + 9], bl
add al, ch
cld
add bl, bl
or al, byte es:[rdi + rax]
or eax, dword [rax]
push 0x7c813208
or byte [rax + rax], 0x90
or eax, 0xd8072b02
or dword [rdi + 0x72b0170e], edi
cmp byte [rbp + 0xf], 0
xchg eax, esp
adc ebp, dword [rdi]
adc byte [rdi], dl
enter -0x37f9, 0x27
adc dword [rax], eax
xor byte [rdx + rdx], dl
add al, ah
sbb al, 0x20
insb byte [rdi], dx
adc edx, dword [rbx]
test eax, 0x2140718
jns 0x401705
mov ebx, 0x1517601d
add al, bh
cmp dword [rax + rax*4 + 0x7c], 0x1e000016
add byte [rax], cl
and byte [rdi], bh
sbb byte ds:[rax], al
clc
sbb dword [rax], eax
add byte [rax], ah
and byte [rdi + 0x20], cl
sbb al, byte [rax]
nop
sbb eax, dword [rax]
movabs al, byte [0x1701131c4d94dde4]
add al, 0
int1
inc ebx
xchg eax, ebp
mov cs, word [rbx + rbx]
mov edi, 0x4c839719
fmul dword [rbp + 2]
nop
or eax, dword [rax + 0x17]
sbb edx, eax
xor ah, byte [rsi + rbp]
adc byte [rsp + rcx], cl
jbe 0x4017b0
in al, dx
pop rdi
cmpsd dword [rsi], dword ptr [rdi]
add dword [rdi], edx
push rbx
sbb esp, ebp
mov byte [rdi + 0x7a], cl
xor byte [r13 + 9], r11b
xchg eax, ecx
and dword [rsi - 0x71365a69], eax
xor eax, dword [rdi + rdx*8 + 0x140827ac]
pushfq
sbb eax, 0x5f0dd832
int 0xb
cmpsd dword [rsi], dword ptr [rdi]
and byte [rbx + 0x61a5d8e4], al
sbb dword [rbp + 0x6c], esp
sub bl, dh
pop rdi
adc bh, byte [rdi]
ret 0x102e
add dword [rcx], eax
add byte [r15 - 0x28], r8b
xchg eax, ebp
adc dword [rbx], ebx
or eax, 0x4720b768
adc al, dh
scasb al, byte [rdi]
mov word [rdi], cs
adc al, 0x37
fcom dword [rax + rsi + 0x1f17479b]
pop rdx
sal byte [r8 - 0x51], 0x8c
xchg dword [rbx], esi
add ebx, dword [rdx + 0x57]
repne insb byte [rdi], dx
ret
sbb ebp, dword [rcx*4 + 0x4724c007]
jo 0x4017cd
ficom word [rbp - 0x129c8ccb]
add byte [rdi + 0x17], dh
leave
ror dword [rsi + 0x3e], 0x27
adc eax, dword [rdx]
add ebp, dword [rsi + 0x60e4ec19]
or ebp, dword [rdx]
xchg dword [rdx], esp
xor bl, al
leave
adc bl, sil
mov r15d, 0x9a400ce0
mov bl, 0x77
leave
ja 0x4017c2
and byte [rcx], ah
insb byte [rdi], dx
or byte [rbx], bl
xlatb
jmp 0x4017aa
cmp al, 0x7b
jb 0x4017b7
lcall [rdi]
adc byte [rcx], bh
add ch, byte [rdi]
or dword [rdx], eax
out 0x10, eax
jbe 0x401795
and al, 0x17
add dword [rcx], 0x595d8436
xchg eax, edi
movsxd rdx, dword [rdi]
adc byte [rdx + 0x1d00e87], al
loope 0x401810
and byte [rdi + 0x17], ah
mov word [rax - 0x2668f0f4], es
xchg eax, ebx
xchg eax, edx
add al, byte [rax + 0x28]
and byte [rdx + 0x30], bh
shl byte [rax + 0x43], 0xd8
xchg eax, esp
pop rdi
scasb al, byte [rdi]
adc bh, ch
add ah, cl
nop
push rdi
rol dword [rdx], cl
out dx, eax
pop rdi
jb 0x40183a
pop rax
add dl, byte [rdi - 0x55]
mov al, 0x17
movsxd rbp, dword [rax + 0x770304df]
je 0x4018c1
add ebx, dword [rdi + 0x31]
outsd dx, dword [rsi]
adc byte [rbp + 0x3e80393c], al
add eax, dword [rax + 0x21]
mov al, 0x21
cmp ecx, esp
add eax, dword [rdi]
jo 0x4018c8
cmp dword [rcx + 0x72], edi
shl byte [rax], 0x6e
add byte [rsi - 0x40], cl
mov al, 0x41
adc ebx, dword [rdi + 0x2f]
movabs byte [0x102f57426c1c9c61], al
or eax, 0x3e04a537
and dword [rdx + rax + 0x1a], 0x57
sbb edx, dword [rdx - 0x67e8c811]
jge 0x40190c
rol byte [rax + rsi + 0x3737b309], 1
jg 0x4018d5
ror dword [rsi + 0xe], 0x36
xchg eax, ebx
ja 0x4018dd
adc esp, dword [rbp + 0x2f]
add dl, byte [rcx]
xchg byte [rax - 0x18c8475d], dl
and byte [rcx], cl
push rdi
loopne 0x401907
and byte [rbx - 0x176f36f3], al
out dx, eax
push rax
and dword [rcx], edi
cmp eax, ebx
fstp xword [rdi - 0x732bfb72]
adc esi, edx
fld dword [rdx + 1]
ja 0x4018c9
movsd dword [rdi], dword ptr [rsi]
add ecx, dword [rdi]
leave
mov al, 0xc
clc
ja 0x401897
cmp byte [rip - 0x40aff425], ah
sbb al, byte [rdi]
add al, 5
jbe 0x40194b
lahf
sub byte [rdi + rdx*8], al
or ebp, dword [rbx + rax*2 + 0x53173bd8]
add al, 0x4f
pop rsi
mov cl, 0x8b
push rdi
xchg byte [rcx], al
cmpsd dword [rsi], dword ptr [rdi]
popfq
pop rsi
pop rcx
mov dil, 0xdc
add byte [rdi - 0x2e400a0], bh
movsxd rsi, dword [rdx + 0x74]
jae 0x401943
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
jle 0x4018de
std
push rdx
pop rdi
push r11
push rsp
or dword [rax], ebp
jb 0x4019ac
imul ebx, dword [edx], 0xeef6f606
lcall [rdi + 0x74]
insd dword [rdi], dx
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x40197b
outsd dx, dword fs:[rsi]
pop rdi
or esp, dword [edx + 0x61]
insb byte [rdi], dx
or ebp, edi
in eax, dx
mov bh, 0xff
je 0x4019d8
jb 0x4019de
pop rdi
jne 0x4019e7
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x4019e0
sub dword gs:[rsi + rbp + 0x37], esp
xor eax, 0x6fe83538
jg 0x401901
and al, 0x5f
imul bp, word [rsi + 0x69], 0x7208
jb 0x4019eb
jns 0x4019eb
jae 0x40196e
outsb dx, byte [rsi]
fild word [rbp + 0x66007972]
or ch, byte [rbp + 0x65]
and byte [rbp + 0x6d], dh
insd dword [rdi], dx
jns 0x4019d1
or eax, 0x1bac276
pop rdi
sub dword [rdx + rbp + 0x70], esi
movsxd rbx, dword [rbp - 0x12000901]
jo 0x401a21
and eax, 0x73355a5a
outsd dx, dword [rsi]
insb byte [rdi], dx
jbe 0x401a1f
jbe 0x401a01
xor dword [rcx], edi
xor dl, byte [rax + 0x52]
push r12
push rsp
pop rcx
pop rdi
sal esi, 1
ja 0x4019c9
push rbp
push r12
mov bl, 0x5f
or qword [rbx - 0x49], r14
ja 0x401a5e
mov ebx, 0x6495fea
pop rdx
xor bl, byte [rdi + 0x52]
push rdx
imul esi, dword [rdi], 0x384c7453
imul ebp, dword [rdi + 0x7b], 0x597bbfef
insb byte [rdi], dx
push rdx
pop r15
xor r14d, esp
or ebp, esp
rcl dword [rsi + 0x554e4727], 0x48
and byte [rax + 0x44], cl
push rdx
push rdx
out dx, eax
outsd dx, dword [rsi]
lahf
push rbx
outsb dx, byte [rsi]
pop rdi
push rsp
sub byte [r11 + 0x361615ae], r12b
adc byte fs:[rdi + rax], dh
in ax, dx
ret 0xe5ed
pop rcx
add r15b, dl
insd dword [rdi], dx
jae 0x401a56
sub rdi, r12
movabs eax, dword [0x12e325f434249fd]
and ebp, dword [rcx + rbp*2 + 0x62]
movsxd rdx, dword [rsi - 0x58]
fstp xword [rsi + 0x4ea21843]
movabs dword [0xbdb7da1b2f63d936], eax
push rbx
add eax, dword [rbp - 0x1d]
pop r12
pop rdx
movsxd rdi, dword [rbx + 0x190b6c3f]
add al, 0x6b
push r10
sbb rax, qword [r13 + 0x76]
mov al, 0xdb
mov esi, 0x4f7044ed
mov es, word [rax]
loop 0x401adc
adc dword [rax + 0x50], edi
insd dword [edi], dx
and byte [rdi + rbx*8 - 0x36855d54], dh
jbe 0x401a8e
mov edi, 0xdb87fb07
jae 0x401b10
mov esp, 0x506c645a
jbe 0x401a2b
pop rax
pop rax
or byte cs:[rsi - 0x2cca02c], ch
adc edx, dword [rcx + 0x40]
in eax, dx
xchg eax, ecx
mov ebp, 0x663c257b
imul ebp, dword [rsp + rbp*4 + 0x70], 0xd9baa472
mov dl, 0xdb
je 0x401b2a
scasb al, byte [rdi]
push -0x49c1e695
cmp byte [rbx + 0x5716e6e1], bh
jae 0x401a71
cmp al, 0x34
add rax, qword [r11 + 0x31]
movsxd r11, r9d
and bp, bx
insd dword [rdi], dx
pop rbp
outsb dx, byte [rsi]
mov al, 0xb5
push 0x21
xchg eax, edi
jb 0x401b4f
mov bh, 0xf6
ret
loope 0x401af4
scasd eax, dword [rdi]
movsxd r15, dword [rax + 0x61]
mov edx, 0x2b926978
sbb ecx, dword [rcx]
outsd dx, dword ss:[rsi]
insb byte [rdi], dx
retf
sub byte [rcx + rcx*2 + 0xcbe3754], bh
jmp 0x401b27
jg 0x401acb
push rsp
movabs dword [0x16d776fd6b884f1b], eax
sub dword [rbp + 0x3f], esi
imul ebx, dword [rdx + 0x31], 0x6373fa57
outsb dx, byte [rsi]
insw word [rdi], dx
cmp dword [rbp + 0x41436890], 0x20b6c15a
insb byte [rdi], dx
cdq
jrcxz 0x401b80
jae 0x401aef
neg byte [rip + 0x76810b66]
or ecx, dword [rsi - 0x3cc2ca36]
sbb eax, 0x787785b6
js 0x401ae9
insd dword [rdi], dx
jo 0x401bb6
push 0x714b6470
jp 0x401ba6
adc al, 0xda
je 0x401ba8
jg 0x401b80
mov dl, 0x42
loope 0x401b5a
push rsp
fisub dword [rdx + 0x5186f124]
cmp byte [rdx - 0x52], ah
imul eax, dword [rdi], 0xc1824360
sahf
mov ebp, 0x7ece9d34
fstp st(6), st(0)
movsxd rdx, dword [rax + 0x7475704c]
jbe 0x401b7e
push rdx
jbe 0x401ba5
push rax
sub esi, dword [rdi + rax*8 + 0x3ece656b]
test al, 0xe6
jmp 0x401b55
ror dword [rdx + 0x5b], 1
pushfq
outsb dx, byte [rsi]
mov dh, 0x74
jbe 0x401bd4
or r9b, byte [rbx + 0xd]
push r9
out dx, eax
xor r11d, r13d
pop rbx
sbb edx, dword [rdx]
out dx, al
outsb dx, byte [rsi]
ja 0x401c23
push rbp
adc dl, byte [rbx + 0x64]
neg ebx
sbb al, 0x67
test eax, 0x43439e6d
xor bl, cl
cmp eax, 0x4a103212
sbb cl, byte [rsi + 0x76]
fisttp dword [rbp + 0x68]
jae 0x401c4e
insd dword [rdi], dx
nop
je 0x401c4d
push -0x3ce3248e
or dword [rbx + 0x6e0770a0], eax
outsd dx, dword [rsi]
jrcxz 0x401b6c
insd dword [rdi], dx
cwde
sub eax, 0x670d6715
outsb dx, byte [rsi]
jne 0x401c23
lodsd eax, dword [rsi]
adc byte [rbx], ch
sbb al, 0x2d
imul edx, ebp, 0xb338620d
jae 0x401c73
or dword [rcx + rdi*2 + 0x6e], esp
sbb dword [r8 + 0x13], r14d
mov edx, 0xe669e576
or al, 0x5f
sbb edi, dword [rax + 0x5b]
mov al, 0x77
mov al, 0x28
or dword [rbx - 0x1e318d8c], ebp
mov dh, 0x67
or byte [rdx], 0x2c
outsd dx, dword [rsi]
or byte [rdx - 0x17b853fb], dl
mov cl, 0x24
outsd dx, dword [rsi]
cmp dword [rsi], ebp
push -0x348bd444
push 0x5d0d7264
movsxd rax, ebx
xchg eax, esi
jmp 0x401c61
pop rbx
out dx, al
jo 0x401c3f
mov ebp, 0xa22116c
sbb al, 0x36
pop rbx
or ebp, dword [r10 - 0x7d]
scasw ax, word [rdi]
mov al, 0xc5
movabs eax, dword [0x3340cd7b68906936]
int3
pop rsi
out 4, al
push rdx
mov esi, 0xfd6d955a
add byte [rax], al
fild word [rcx]
mov ebp, 0xd70cb049
iretd
or al, 0xc9
nop
pushfq
sbb al, 1
and ecx, eax
and byte [rbx], al
rol byte [rdi], cl
push rsp
push rsp
xor ah, byte [rbx + rax*2]
xor ah, byte [rax]
add al, 0x31
xor cl, al
and byte [rbx + 0x74], al
je 0x401cbb
cmp esp, esp
fst qword [rax + 0x44]
jg 0x401c94
ljmp [rdi - 0x68]
nop
cwde
sub byte [rip + 0x19219a40], al
or byte [rsi + 0xb], cl
sbb dword [rax + rax*8 + 0x3f], ebp
shl al, 1
sti
nop
leave
sbb byte [rsi - 0x10], dl
rcl word [rdx - 0x5bf868fd], -0x45
sahf
mov al, byte [rcx]
pop rsi
mov edi, 0x59bd81ff
mov al, 0xbf
mov edi, 0x76437480
add al, byte [rdi]
imul edi, dword [rdi], -2
sbb dword [rcx + rdi*4 - 0x58f8a737], -0x70
add eax, 0xff26ca61
jp 0x401d46
out 0x26, al
xchg dword [rdi], edi
call 0x764d0404
adc edi, dword gs:[rdi]
inc dword [rdi + rdi + 0x2cf27942]
pop rcx
call 0x68471d4c
add dword [rcx + 0x18], eax
sbb dword cs:[rsi + 0x459bc213], ecx
nop
cmpsd dword [rsi], dword ptr [rdi]
dec dword [rcx + rbx*8]
push rax
jb 0x401d3c
mov dword [rdi], edi
nop
fld dword [rip + 0x70079b82]
adc byte [rdi], al
xor eax, ecx
xchg eax, ecx
or eax, 0x9093f94
enter 0x6c8e, -0x7f
setge byte [rdi]
and bh, cl
fsub qword [rax + 7]
jg 0x401d37
or dword [rax + 0x48], eax
pop rbx
movabs dword [0x9ff076726e67250], eax
fisubr word [rdx + rax*2 - 0x3040562e]
fst dword [rdx]
jg 0x401d14
cmp dword [rbx - 0x6d], esi
and byte [rdi + 0x4dac7f07], dl
xchg byte [rax + rbp - 0x41], ch
loopne 0x401dea
xchg eax, ecx
cmp al, 0xc1
sub al, 3
leave
sub al, 0x37
and eax, dword [rdx - 0x61]
jg 0x401dee
mov edx, 0xdb10e4a1
add eax, dword [rcx + 0xf3059bd]
xor byte [rbx + rax*2], 0x72
or bh, ah
movhps qword [rax], xmm4
mov eax, 0xff07f8c9
sub al, 0x3b
mov bl, 0x25
pop rbp
cmp byte [rdi], 0xf8
wait
xchg eax, esi
pushfq
in eax, 0x66
jg 0x401daa
or ebx, dword [rcx]
ret 0x107f
cwde
pop rdx
and al, 0x83
insb byte [rdi], dx
mov edi, 0x15611f1f
mov dl, 0x49
add dword [rdi - 0x36bcdb49], edi
fldenv [rax]
nop
or al, byte [rip - 0x6fcd91f8]
jg 0x401dec
xor ah, byte [rax]
fst qword [rax]
or byte [rax - 0x37b36f60], ah
add dword [rax - 0x7b], 1
and bl, al
fcom dword ss:[rip + 0x3f17307f]
fldenv [rcx + 0x21]
xor al, 0x3f
adc dword [rbx - 0x37], edi
or dword [rdx + rsi*4 - 0x40d0a800], ebx
jp 0x401e72
xor eax, dword [rdx - 0x45]
add al, bl
and byte [rax - 0x30d8cc], al
lock or dword [rdi], ebx
xor esi, edx
in al, 0x10
or dword ss:[rdi - 0x38], edi
sub dl, byte [rax - 0x7ffffffc]
add al, byte [rax]
add bh, bh
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rip + 0x3c080216], ecx
pop rdx
sbb dh, byte [rdi + 0xb8aae56]
fcom dword [rdi]
add byte [rax], al
int 7
add byte [rax], al
js 0x401e8e
add byte [rax], al
add byte [r8], al
hlt
add byte [rax], al
add bh, bh
