xor ebp, ebp
mov r9, rdx
pop rsi
mov rdx, rsp
and rsp, 0xfffffffffffffff0
push rax
push rsp
mov r8, sym.__libc_csu_fini
mov rcx, sym.__libc_csu_init
mov rdi, sym.main
call sym.imp.__libc_start_main
hlt
nop word [rax + rax]
mov eax, 0x6030c7
push rbp
sub rax, obj.completed.7585
cmp rax, 0xe
mov rbp, rsp
jbe 0x400b40
mov eax, 0
test rax, rax
je 0x400b40
pop rbp
mov edi, obj.completed.7585
jmp rax
nop word [rax + rax]
pop rbp
ret
nop dword [rax]
nop word cs:[rax + rax]
mov esi, obj.completed.7585
push rbp
sub rsi, obj.completed.7585
sar rsi, 3
mov rbp, rsp
mov rax, rsi
shr rax, 0x3f
add rsi, rax
sar rsi, 1
je 0x400b88
mov eax, 0
test rax, rax
je 0x400b88
pop rbp
mov edi, obj.completed.7585
jmp rax
nop dword [rax]
pop rbp
ret
nop word [rax + rax]
cmp byte [rip + 0x202529], 0
jne 0x400baa
push rbp
mov rbp, rsp
call sym.deregister_tm_clones
pop rbp
mov byte [rip + 0x202516], 1
ret
nop dword [rax]
mov edi, obj.__JCR_LIST__
cmp qword [rdi], 0
jne 0x400bc0
jmp sym.register_tm_clones
nop dword [rax]
mov eax, 0
test rax, rax
je 0x400bbb
push rbp
mov rbp, rsp
call rax
pop rbp
jmp sym.register_tm_clones
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rsi, rax
mov edi, 0x401fe0
mov eax, 0
call sym.imp.scanf
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rsi, rax
mov edi, 0x401fe3
mov eax, 0
call sym.imp.scanf
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rsi, rax
mov edi, 0x401fe7
mov eax, 0
call sym.imp.scanf
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rsi, rax
mov edi, 0x401feb
mov eax, 0
call sym.imp.scanf
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rsi, rax
mov edi, 0x401fef
mov eax, 0
call sym.imp.scanf
nop
leave
ret
push rbp
mov rbp, rsp
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov eax, dword [rax]
mov esi, eax
mov edi, 0x401fe0
mov eax, 0
call sym.imp.printf
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rax
mov edi, 0x401fe3
mov eax, 0
call sym.imp.printf
nop
leave
ret
push rbp
mov rbp, rsp
nop
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], -1
je 0x400d41
cmp qword [rbp - 0x18], -1
je 0x400d41
mov rax, qword [rbp - 8]
mov rax, qword [rax]
cmp rax, -1
je 0x400d2d
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 0x18]
add rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
cmp rdx, rax
jge 0x400d42
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 0x18]
add rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax], rdx
jmp 0x400d42
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov esi, obj.q
mov edi, obj.n
call sym.R_int_int_
mov dword [rbp - 0xc], 1
mov eax, dword [rip + 0x202378]
cmp dword [rbp - 0xc], eax
jg 0x400d9d
mov eax, dword [rbp - 0xc]
cdqe
shl rax, 3
lea rdx, [rax + obj.s]
mov eax, dword [rbp - 0xc]
cdqe
shl rax, 3
add rax, obj.e
mov rsi, rdx
mov rdi, rax
call sym.R_longlong_double_
add dword [rbp - 0xc], 1
jmp 0x400d62
mov dword [rbp - 8], 1
mov eax, dword [rip + 0x202336]
cmp dword [rbp - 8], eax
jg 0x400df1
mov dword [rbp - 4], 1
mov eax, dword [rip + 0x202324]
cmp dword [rbp - 4], eax
jg 0x400deb
mov eax, dword [rbp - 4]
movsxd rdx, eax
mov eax, dword [rbp - 8]
cdqe
imul rax, rax, 0x6e
add rax, rdx
shl rax, 3
add rax, obj.d
mov rdi, rax
call sym.R_longlong_
add dword [rbp - 4], 1
jmp 0x400db6
add dword [rbp - 8], 1
jmp 0x400da4
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x40
mov dword [rbp - 0x34], edi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov dword [rbp - 0x24], 1
mov eax, dword [rip + 0x2022c5]
cmp dword [rbp - 0x24], eax
jg 0x400e3c
movsd xmm0, qword [rip + 0x1250]
mov eax, dword [rbp - 0x24]
cdqe
movsd qword [rax*8 + obj.dis], xmm0
add dword [rbp - 0x24], 1
jmp 0x400e15
mov dword [rbp - 0x20], 1
mov eax, dword [rip + 0x202297]
cmp dword [rbp - 0x20], eax
jg 0x400e60
mov eax, dword [rbp - 0x20]
cdqe
mov byte [rax + obj.vis], 0
add dword [rbp - 0x20], 1
jmp 0x400e43
mov eax, dword [rbp - 0x34]
cdqe
pxor xmm0, xmm0
movsd qword [rax*8 + obj.dis], xmm0
mov dword [rbp - 0x1c], 0xffffffff
mov dword [rbp - 0x18], 1
mov eax, dword [rip + 0x20225a]
cmp dword [rbp - 0x18], eax
jg 0x400ed2
mov eax, dword [rbp - 0x18]
cdqe
movzx eax, byte [rax + obj.vis]
xor eax, 1
test al, al
je 0x400ecc
cmp dword [rbp - 0x1c], -1
je 0x400ec6
mov eax, dword [rbp - 0x18]
cdqe
movsd xmm1, qword [rax*8 + obj.dis]
mov eax, dword [rbp - 0x1c]
cdqe
movsd xmm0, qword [rax*8 + obj.dis]
ucomisd xmm0, xmm1
jbe 0x400ecc
mov eax, dword [rbp - 0x18]
mov dword [rbp - 0x1c], eax
add dword [rbp - 0x18], 1
jmp 0x400e80
cmp dword [rbp - 0x1c], -1
je 0x400fc7
mov eax, dword [rbp - 0x1c]
cdqe
mov byte [rax + obj.vis], 1
mov dword [rbp - 0x14], 1
mov eax, dword [rip + 0x2021eb]
cmp dword [rbp - 0x14], eax
jg 0x400e72
mov eax, dword [rbp - 0x14]
cdqe
movzx eax, byte [rax + obj.vis]
xor eax, 1
test al, al
je 0x400fbe
mov eax, dword [rbp - 0x14]
cdqe
mov edx, dword [rbp - 0x1c]
movsxd rdx, edx
imul rdx, rdx, 0x6e
add rax, rdx
mov rdx, qword [rax*8 + obj.d]
mov eax, dword [rbp - 0x1c]
cdqe
mov rax, qword [rax*8 + obj.e]
cmp rdx, rax
jg 0x400fbe
mov eax, dword [rbp - 0x1c]
cdqe
movsd xmm1, qword [rax*8 + obj.dis]
mov eax, dword [rbp - 0x14]
cdqe
mov edx, dword [rbp - 0x1c]
movsxd rdx, edx
imul rdx, rdx, 0x6e
add rax, rdx
mov rax, qword [rax*8 + obj.d]
pxor xmm0, xmm0
cvtsi2sd xmm0, rax
mov eax, dword [rbp - 0x1c]
cdqe
movsd xmm2, qword [rax*8 + obj.s]
divsd xmm0, xmm2
addsd xmm0, xmm1
movsd qword [rbp - 0x10], xmm0
mov eax, dword [rbp - 0x14]
cdqe
shl rax, 3
lea rdx, [rax + obj.dis]
lea rax, [rbp - 0x10]
mov rsi, rax
mov rdi, rdx
call sym.std::min_double_
movsd xmm0, qword [rax]
mov eax, dword [rbp - 0x14]
cdqe
movsd qword [rax*8 + obj.dis], xmm0
add dword [rbp - 0x14], 1
jmp 0x400eef
nop
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x400fdd
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x58
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov dword [rbp - 0x44], 1
mov eax, dword [rip + 0x2020dc]
cmp dword [rbp - 0x44], eax
jg 0x4010a6
mov dword [rbp - 0x40], 1
mov eax, dword [rip + 0x2020c6]
cmp dword [rbp - 0x40], eax
jg 0x40109d
mov dword [rbp - 0x3c], 1
mov eax, dword [rip + 0x2020b4]
cmp dword [rbp - 0x3c], eax
jg 0x401094
mov eax, dword [rbp - 0x3c]
cdqe
mov edx, dword [rbp - 0x44]
movsxd rdx, edx
imul rdx, rdx, 0x6e
add rax, rdx
mov rdx, qword [rax*8 + obj.d]
mov eax, dword [rbp - 0x44]
cdqe
mov ecx, dword [rbp - 0x40]
movsxd rcx, ecx
imul rcx, rcx, 0x6e
add rax, rcx
mov rax, qword [rax*8 + obj.d]
mov ecx, dword [rbp - 0x3c]
movsxd rsi, ecx
mov ecx, dword [rbp - 0x40]
movsxd rcx, ecx
imul rcx, rcx, 0x6e
add rcx, rsi
shl rcx, 3
add rcx, obj.d
mov rsi, rax
mov rdi, rcx
call sym.relax
add dword [rbp - 0x3c], 1
jmp 0x401026
add dword [rbp - 0x40], 1
jmp 0x401014
add dword [rbp - 0x44], 1
jmp 0x400ffe
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::vector
mov dword [rbp - 0x38], 0
mov eax, dword [rip + 0x202025]
cmp dword [rbp - 0x38], eax
jge 0x401148
lea rdx, [rbp - 0x48]
lea rax, [rbp - 0x4c]
mov rsi, rdx
mov rdi, rax
call sym.R_int_int_
mov eax, dword [rbp - 0x4c]
mov edi, eax
call sym.build
mov eax, dword [rbp - 0x48]
cdqe
movsd xmm0, qword [rax*8 + obj.dis]
movsd xmm1, qword [rip + 0xf7d]
ucomisd xmm0, xmm1
jp 0x401120
ucomisd xmm0, xmm1
jne 0x401120
mov ecx, str.void_solve__
mov edx, 0x8f
mov esi, 0x402000
mov edi, str.dis_b___INF
call sym.imp.__assert_fail
mov eax, dword [rbp - 0x48]
cdqe
shl rax, 3
lea rdx, [rax + obj.dis]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::push_back
add dword [rbp - 0x38], 1
jmp 0x4010b9
mov dword [rbp - 0x34], 0
mov eax, dword [rip + 0x201f8f]
cmp dword [rbp - 0x34], eax
jge 0x4011ae
mov eax, dword [rbp - 0x34]
lea edx, [rax + 1]
mov eax, dword [rip + 0x201f7e]
cmp edx, eax
jne 0x401171
mov ebx, 0xa
jmp 0x401176
mov ebx, 0x20
mov eax, dword [rbp - 0x34]
movsxd rdx, eax
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::operator__
mov rax, qword [rax]
mov esi, ebx
mov qword [rbp - 0x58], rax
movsd xmm0, qword [rbp - 0x58]
mov edi, str._.14f_c
mov eax, 1
call sym.imp.printf
add dword [rbp - 0x34], 1
jmp 0x40114f
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::_vector
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x4011eb
jmp 0x4011e6
mov rbx, rax
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::_vector
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x58
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov dword [rbp - 0x14], edi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.R_int_
mov dword [rbp - 0xc], 1
mov eax, dword [rbp - 0x10]
cmp dword [rbp - 0xc], eax
jg 0x401270
call sym.input
cmp dword [rbp - 0x14], 2
jne 0x40124e
mov rax, qword [rbp - 0x20]
add rax, 8
mov rax, qword [rax]
mov rdi, rax
call sym.imp.atoi
cmp eax, dword [rbp - 0xc]
jne 0x401269
mov eax, dword [rbp - 0xc]
mov esi, eax
mov edi, str.Case___d:
mov eax, 0
call sym.imp.printf
call sym.solve
jmp 0x40126a
nop
add dword [rbp - 0xc], 1
jmp 0x401223
mov eax, 0
mov rdx, qword [rbp - 8]
xor rdx, qword fs:[0x28]
je 0x401289
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov dword [rbp - 4], edi
mov dword [rbp - 8], esi
cmp dword [rbp - 4], 1
jne 0x4012c6
cmp dword [rbp - 8], 0xffff
jne 0x4012c6
mov edi, obj.std::__ioinit
call sym.std::ios_base::Init::Init
mov edx, obj.__dso_handle
mov esi, obj.std::__ioinit
mov edi, sym.std::ios_base::Init::_Init
call sym.imp.__cxa_atexit
nop
leave
ret
push rbp
mov rbp, rsp
mov esi, 0xffff
mov edi, 1
call sym.__static_initialization_and_destruction_0
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym._R
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.R_int_
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call 0x400bfb
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.R_double_
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call 0x400bfb
call sym.R
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
movsd xmm1, qword [rax]
mov rax, qword [rbp - 8]
movsd xmm0, qword [rax]
ucomisd xmm0, xmm1
jbe 0x40138e
mov rax, qword [rbp - 0x10]
jmp 0x401392
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_Vector_base
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_double__double_
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
cmp rdx, rax
je 0x40144a
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_double__::construct_double_doubleconst__
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
jmp 0x40145d
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::_M_emplace_back_aux_doubleconst__
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 3
add rax, rdx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym._R
call sym.R
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call 0x400c20
call sym.R
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_double_::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_Vector_impl::_Vector_impl
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_Vector_impl::__Vector_impl
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_double__
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_doubleconst__
mov rdx, rax
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_double_::construct_double_doubleconst__
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov rax, qword [rbp - 0x38]
mov edx, str.vector::_M_emplace_back_aux
mov esi, 1
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::_M_check_len
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_allocate
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_doubleconst__
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::size
lea rdx, [rax*8]
mov rax, qword [rbp - 0x18]
lea rcx, [rdx + rax]
mov rax, qword [rbp - 0x38]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_double__::construct_double_doubleconst__
mov qword [rbp - 0x28], 0
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 0x38]
mov rsi, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__uninitialized_move_if_noexcept_a_double__double__std::allocator_double__
mov qword [rbp - 0x28], rax
add qword [rbp - 0x28], 8
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_double__double_
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax]
mov rax, qword [rbp - 0x38]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_deallocate
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x18]
mov qword [rax], rdx
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x28]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 0x20]
lea rdx, [rax*8]
mov rax, qword [rbp - 0x18]
add rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 0x10], rdx
jmp 0x4017ab
mov rdi, rax
call sym.imp.__cxa_begin_catch
cmp qword [rbp - 0x28], 0
jne 0x40175a
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::size
lea rdx, [rax*8]
mov rax, qword [rbp - 0x18]
add rdx, rax
mov rax, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_double__::destroy_double_
jmp 0x40177c
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_get_Tp_allocator
mov rdx, rax
mov rcx, qword [rbp - 0x28]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_double__double_
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_double_std::allocator_double__::_M_deallocate
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_double_::allocator
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_double_::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x40183e
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_double__::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_true_::__destroy_double__
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_doubleconst__
movsd xmm0, qword [rax]
movsd qword [rbp - 0x20], xmm0
mov rax, qword [rbp - 0x10]
mov rsi, rax
mov edi, 8
call 0x4012de
test rax, rax
je 0x4018b0
movsd xmm1, qword [rbp - 0x20]
movsd qword [rax], xmm1
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x48], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::max_size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::size
sub rbx, rax
mov rdx, rbx
mov rax, qword [rbp - 0x40]
cmp rdx, rax
setb al
test al, al
je 0x401913
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::__throw_length_error
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::size
mov qword [rbp - 0x28], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::max_unsignedlong_
mov rax, qword [rax]
add rax, rbx
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::size
cmp rax, qword [rbp - 0x20]
ja 0x401973
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::max_size
cmp rax, qword [rbp - 0x20]
jae 0x401981
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_double_std::allocator_double__::max_size
jmp 0x401985
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x401999
call sym.imp.__stack_chk_fail
add rsp, 0x48
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x4019cc
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_double__::allocate
jmp 0x4019d1
mov eax, 0
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_double__std::move_iterator_double___
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_double__std::move_iterator_double___
mov rdi, rax
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
mov rcx, rdx
mov rdx, rax
mov rsi, rbx
call sym.std::__uninitialized_copy_a_std::move_iterator_double___double__double_
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_double_::destroy_double_
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_double_::new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_double_::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Vector_base_double_std::allocator_double__._M_get_Tp_allocator
mov rdi, rax
call sym.std::allocator_traits_std::allocator_double__::max_size
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 0x10]
mov rax, qword [rax]
cmp rdx, rax
jae 0x401b1f
mov rax, qword [rbp - 0x10]
jmp 0x401b23
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_double_::allocate
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::move_iterator_double__::move_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x401b95
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 8], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_copy_std::move_iterator_double___double__
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_double_::max_size
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_double_::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x401c60
call sym.std::__throw_bad_alloc
mov rax, qword [rbp - 0x10]
shl rax, 3
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_copy_true_::__uninit_copy_std::move_iterator_double___double__
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0x1fffffffffffffff
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::copy_std::move_iterator_double___double__
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::__miter_base_std::move_iterator_double___
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__miter_base_std::move_iterator_double___
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::__copy_move_a2_true_double__double__
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Iter_base_std::move_iterator_double___true_::_S_base
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::__niter_base_double__
mov r12, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__niter_base_double__
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__niter_base_double__
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::__copy_move_a_true_double__double__
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.std::move_iterator_double__::base
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_double__false_::_S_base
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__copy_move_true_true_std::random_access_iterator_tag_::__copy_m_double_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov qword [rbp - 8], rax
cmp qword [rbp - 8], 0
je 0x401e91
mov rax, qword [rbp - 8]
lea rdx, [rax*8]
mov rcx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x28]
mov rsi, rcx
mov rdi, rax
call sym.imp.memmove
mov rax, qword [rbp - 8]
lea rdx, [rax*8]
mov rax, qword [rbp - 0x28]
add rax, rdx
leave
ret
nop word cs:[rax + rax]
push r15
push r14
mov r15d, edi
push r13
push r12
lea r12, [rip + 0x200f26]
push rbp
lea rbp, [rip + 0x200f2e]
push rbx
mov r14, rsi
mov r13, rdx
sub rbp, r12
sub rsp, 8
sar rbp, 3
call sym._init
test rbp, rbp
je 0x401f06
xor ebx, ebx
nop dword [rax + rax]
mov rdx, r13
mov rsi, r14
mov edi, r15d
call qword [r12 + rbx*8]
add rbx, 1
cmp rbx, rbp
jne 0x401ef0
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
nop word cs:[rax + rax]
ret
add byte [rax], al
sub rsp, 8
add rsp, 8
ret
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add al, 0
add byte [rax], al
or byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], 0
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add al, 0
add byte [rax], al
or byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, 0
add byte [rax], al
add eax, 0x6000000
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], cl
or byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
or al, byte [rax]
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
or al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
jmp qword [rip + 0x6c250064]
add byte fs:[rip + 0x2000666c], ah
and eax, 0x73250063
add byte [rax], al
add byte [rsi], ch
outsb dx, byte [rsi]
add byte [rax], al
add byte [rbp - 0x3d], bh
jge 0x401fbd
xchg eax, esp
and eax, 0x54b249ad
push rsp
jae 0x402071
jb 0x402078
pop rdi
movsxd rbp, dword [rdi + 0x64]
movsxd rbp, dword [rdi + 0x6e]
je 0x402083
outsd dx, dword [rsi]
insb byte [rdi], dx
jae 0x40207e
imul ebp, dword [rbx + 0x2f], 0x6b696873
pop rdi
xor bl, byte [rdi + 0x30]
jo 0x402087
movsxd rsi, dword cs:[rax + 0x70]
add byte [rcx + rbp*2 + 0x73], ah
imul esi, dword fs:[rbx + 0x5b], 0x3d215d62
add byte [rip + 0x6634312e], r12b
and eax, 0x6634312e
and eax, 0x61430063
jae 0x4020a6
and byte [rbx], ah
and eax, 0x203a64
jbe 0x4020af
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp bh, byte [rdx]
pop rdi
pop r15
insd dword [rdi], dx
jo 0x4020c3
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x4020db
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x6f], dh
jbe 0x4020d9
imul esp, dword [rax + 0x73], 0x65766c6f
sub byte [rcx], ch
add byte [rax], al
add byte [rax], al
jge str.Case___d:
xchg eax, esp
and eax, 0x54b249ad
add dword [rbx], ebx
add edi, dword [rbx]
je 0x402088
add byte [rax], al
add byte [r8], r8b
add byte [rax], dl
jmp 0x3012091
add byte [rax], al
call qword [rax + 0x56000002]
jmp 0x40209e
dec dword [rax]
add eax, dword [rax]
add byte [rbx - 0x15], bh
ljmp [rax]
add eax, dword [rax]
add byte [rax + 0x48ffffeb], ah
add eax, dword [rax]
add ch, al
jmp 0x4020b6
ljmp [rax + 3]
add byte [rax], al
jmp 0x4020be
dec dword [rax + 0xf000003]
in al, dx
ljmp [rax + 0x16000003]
in al, dx
dec eax
add eax, dword [rax]
add byte [rsp + rbp*8], bh
call 0x644020e0
in al, dx
dec dword [rax]
add al, 0
add byte [rbx - 0x14], ch
ljmp [rax]
add al, 0
add ah, al
in al, dx
dec dword [rax + 4]
add byte [rax], al
je 0x4020e3
ljmp [rax + 4]
add byte [rax], al
pop rdi
out dx, eax
ljmp [rax + 0x72000004]
int1
call rax
add al, 0
add byte [rbx], cl
push qword [rax]
or al, 0
add byte [rcx - 0xe], cl
call qword [rax + 0xc]
add byte [rax], al
pop rsi
call 0x70402127
push rax
add al, 0
add byte [rbx + 0x10fffff2], bl
add eax, 0xf2c60000
push qword [rax]
add eax, 0xf2e60000
call qword [rax + 5]
add byte [rax], al
adc al, 0xf3
push qword [rax + 5]
add byte [rax], al
xor bl, dh
lcall [rax + 0x74000005]
inc eax
add eax, 0xf3e00000
jmp rax
add eax, 0xf4000000
inc dword [rax]
add byte [rax], al
and ah, dh
jmp qword [rax]
add byte [rax], al
hlt
inc dword [rax + 6]
add byte [rax], al
pop rsp
hlt
jmp qword [rax + 6]
add byte [rax], al
js 0x40217a
inc dword [rax - 0x37fffffa]
hlt
ljmp [rax - 0x29fffffa]
hlt
dec eax
add byte [rax], al
add ch, dh
call 0xe4021ab
cmc
dec dword [rax]
add byte [rax], al
cmc
ljmp [rax]
add byte [rax], al
xor dh, bh
call qword [rax + 7]
add byte [rax], al
jo 0x4021b5
push qword [rax + 7]
add byte [rax], al
idiv edi
call qword [rax - 0x3efffff9]
idiv edi
push qword [rax - 0x17fffff9]
idiv edi
call rax
add byte [rax], al
xor al, 0xf8
push rax
add byte [rax], al
and cl, bh
lcall [rax]
or byte [rax], al
add byte [rcx + rdi*8 - 1], dl
cmp byte [rax], cl
add byte [rax], al
jp 0x4021ef
lcall [rax + 8]
add byte [rax], al
stc
inc dword [rax - 0xbfffff8]
stc
jmp qword [rax + 0x10000008]
cli
inc eax
or byte [rax], al
add byte [rbx], bl
cli
jmp rax
or byte [rax], al
add byte [rcx - 6], cl
inc dword [rax]
or dword [rax], eax
add byte [rax - 6], bl
jmp qword [rax]
or dword [rax], eax
add byte [rdx - 6], bh
inc dword [rax + 9]
add byte [rax], al
movsd dword [rdi], dword ptr [rsi]
cli
jmp qword [rax + 9]
add byte [rax], al
iretd
cli
inc dword [rax + 0x17000009]
sti
jmp qword [rax + 0x48000009]
sti
inc eax
or dword [rax], eax
add byte [rax - 5], bl
jmp rax
or dword [rax], eax
add byte [rbx + rdi*8 - 1], ah
inc dword [rax]
or al, byte [rax]
add byte [rdi + 0x20fffffb], al
or al, byte [rax]
add byte [rdx + 0x40fffffb], ah
or al, byte [rax]
add byte [rax + 0x60fffffb], dh
or al, byte [rax]
add dl, dh
sti
inc dword [rax + 0xc00000a]
cld
jmp qword [rax + 0x3e00000a]
cld
inc eax
or al, byte [rax]
add byte [rdx - 4], dl
jmp rax
or al, byte [rax]
add byte [rdi - 4], bh
inc dword [rax]
or eax, dword [rax]
add bl, cl
cld
ljmp [rax]
or eax, dword [rax]
add ch, ah
cld
dec dword [rax + 0xb]
add byte [rax], al
cmp eax, 0x70fffffd
or eax, dword [rax]
add byte [rdi - 3], dl
call qword [rax + 0x7100000b]
std
push qword [rax - 0x5dfffff5]
std
call rax
or eax, dword [rax]
add byte [rbx - 0xf000003], dh
or eax, dword [rax]
add cl, al
std
call qword [rax]
or al, 0
add byte [rax], dh
push qword [rax + 0xc]
add byte [rax], al
movabs al, byte [0xcb8fffffe]
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x402317
add dword [rbx], ebx
or al, 7
or byte [rax + 0x14100701], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
enter -0x19, -1
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x402347
add dword [rbx], ebx
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
out 0xff, al
inc dword [rax + 1]
add byte [rax], al
add byte [rsi], cl
adc byte [rsi + 0xe], al
sbb byte [rdx + 0xf], cl
or esi, dword [rdi + 8]
add byte [rax], 0x3f
sbb bh, byte [rbx]
sub dh, byte [rbx]
and al, 0x22
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], r8b
add byte [rsi - 0x11], ch
call qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte fs:[rax], al
add byte [rsi - 0x18], al
jmp qword [rip]
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rax], al
add byte [rax], al
call 0x6623b5
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
add byte [rax - 0x18], dl
jmp qword [rip]
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rbp - 0x18], dl
jmp qword [rip]
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0
add byte [rax], al
pop rdx
call 0x662415
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 1
add byte [rax], al
pop rdi
call 0x482435
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 1
add byte [rax], al
call 0x672455
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add dword [rax], r8d
add byte [rax + rbp*8 - 1], cl
ljmp [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
movsxd rcx, dword [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add dword fs:[rax], eax
add byte [rax + rbp*8 - 1], dl
inc dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rcx], al
add byte [rax], al
cmp ebp, eax
lcall [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add dword [rax], eax
add byte [rax + rbp*8 - 1], dh
push qword [rax]
adc byte [rsi + 0x60d4302], al
add ch, byte [rbx + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
add dword [rax], eax
add byte [rcx + rbp*8], al
jmp 0x4024f7
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add esp, esi
add dword [rdi + rax], ecx
or byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x50], edi
push rdx
add byte [rcx], al
js 0x402529
add esp, dword [rax + 0x300400a]
sbb ecx, dword [rdi + rax]
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
scasd eax, dword [rdi]
call qword [rbx]
add al, byte [rax]
add byte [rsp + rdx*2], al
sub eax, 0xe410040
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
or dword [rdx], eax
or al, 7
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sub al, 2
add byte [rax], al
in al, dx
lcall [rcx]
adc byte [rsi + 0x60d4302], al
add dl, byte [rsp + rcx + 0x807]
sbb al, 0
add byte [rax], al
add r8b, byte [rax]
add byte [rax - 0x13], bh
ljmp [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
add al, byte [rax]
add byte [rbx + 0x2bffffed], al
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rdx], es
add byte [rax], al
mov gs, ebp
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
add al, byte [rax]
add byte [rsi + 0x2effffed], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
and al, 0
add byte [rax], al
in al, dx
add byte [rax], al
add byte [rbp + rbp*8 + 0x1bffff], bl
add byte [rax], al
add al, 0x64
sub eax, 0xe410040
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
adc al, 1
add byte [rax], al
nop
in eax, dx
inc dword [rax + rax]
add byte [rax + rbp*2], al
sub eax, 0xe410040
adc byte [rsi + 0x60d4302], al
jg 0x402643
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 3
add byte [rax], al
lodsb al, byte [rsi]
in eax, dx
ljmp [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cmp al, 3
add byte [rax], al
clc
in eax, dx
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add eax, dword [rax]
add al, bh
in eax, dx
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x4026a9
add byte [rax], al
clc
in eax, dx
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add eax, dword [rax]
add al, bh
in eax, dx
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0xf4000003
in eax, dx
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
cld
add dword [rax], eax
add al, dh
in eax, dx
call qword [rax]
add byte [rax], al
add al, 0x6c
sub eax, 0xe410040
adc byte [rsi + 0x60d4302], al
add cl, byte [rbx + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add al, 4
add byte [rax], al
sbb dh, ch
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 4
add byte [rax], al
out dx, al
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0
add byte [rax], dl
out dx, al
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0
add dh, bh
in eax, dx
cmp dword [rax], eax
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
je 0x4027af
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add al, byte [rax]
add byte [rax], bl
out dx, al
add dword [rax], eax
add byte [rax + rsi*2], al
sub eax, 0xe410040
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
loopne 0x4027cc
or al, 7
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
lodsb al, byte [rsi]
add al, 0
add dl, bl
out dx, eax
add byte ds:[rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jns 0x4027f7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
add al, 0
add al, bh
out dx, eax
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
add al, 0
add ah, dh
out dx, eax
push qword [rip]
adc byte [rsi + 0x60d4302], al
jo 0x402837
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 5
add byte [rax], al
or eax, esi
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 5
add byte [rax], al
adc al, dh
dec dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add rax, -0xfc40000
in al, dx
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
loop 0x40289b
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x4028a3
add byte [rax], al
add cl, dh
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
add eax, 0xf1140000
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov ah, 5
add byte [rax], al
sbb dh, cl
call qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fadd qword [rip - 0xeba0000]
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
add eax, 0xf14c0000
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 6
add byte [rax], al
int1
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 6
add byte [rax], al
xor esi, ecx
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
pop rsp
add byte [rax], al
int1
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x4029ac
add byte [rax], al
xor cl, dh
jmp qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add byte [rax], al
xor dh, cl
ljmp [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x3d000006
int1
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fadd qword [rsi]
add byte [rax], al
int1
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cld
add byte [rax], al
outsd dx, dword [rsi]
int1
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 7
add byte [rax], al
xor cl, 0xff
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 7
add byte [rax], al
jo 0x402a5b
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add byte [rax], al
pop rsp
int1
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x402aad
add byte [rax], al
pop rdi
int1
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add byte [rax], al
pop rdx
int1
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x48000007
int1
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jge 0x402b07
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fadd qword [rdi]
add byte [rax], al
push -0xf
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
add byte [rax], al
int1
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 8
add byte [rax], al
jbe 0x402b3b
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 8
add byte [rax], al
push -0xf
ljmp [rip]
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
and al, 0
add byte [rax], al
pop rsp
or byte [rax], al
add byte [rdi - 0xf], dh
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rax], cl
add byte [rax], al
wait
int1
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
or byte [rax], al
add byte [rbp + 0x58fffff1], dl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x4c
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
or byte [rax], al
add ch, al
int1
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
or byte [rax], al
add byte [rdi + 0x1afffff1], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 9
add byte [rax], al
mov ecx, 0x31fffff1
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 9
add byte [rax], al
retf -0xf
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or qword [rax], r8
add byte [rbx + 0xefffff1], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
or dword [rax], eax
add byte [rcx + 0x65fffff1], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov word [rcx], cs
add byte [rax], al
shl ebp, cl
add byte ds:[rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jns 0x402cd7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
or dword [rax], eax
add cl, dh
in eax, 0xff
call qword [rip]
adc byte [rsi + 0x60d4302], al
push rax
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], r8b
add ah, cl
or dword [rax], eax
add byte [rax + 0x65fffff1], bh
add byte [rax], al
add byte [rax], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b8], es
cmp byte [rbx + 0x400e4d07], al
jb 0x402d32
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
adc al, 0
add byte [rax], al
adc al, 0xa
add byte [rax], al
loopne 0x402d33
inc dword [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
or al, 0xf7
add edx, edx
add ebp, ebp
add eax, dword [rax]
add al, 5
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
add esp, dword [rip + 0x1c221a01]
add byte [rax], al
mov ah, 1
add eax, 0xe60102d7
add dword [rdx], edi
add byte [rax], al
mov eax, dword [rbx]
rol byte [r11], 1
add dh, bl
add eax, dword [rip + 0x10000]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov al, 0xb
add byte [rax], al
add byte [rax], al
add cl, cl
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
nop
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rcx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
push 0x4009
add byte [rax], al
add byte [rip], cl
add byte [rax], al
add byte [rdi + rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
sub eax, 0x60
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
sub eax, 0x60
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], al
add eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rax], ah
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
enter 1, 0
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4007], ah
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4007], cl
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bh
ljmp [rdi]
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add bh, bh
ljmp [rdi]
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
ljmp [rdi]
add byte [rax], al
add dh, dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4009], ah
add byte [rax], al
add byte [rsi + 0x4009], dh
add byte [rax], al
add dh, al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
out 9, al
add byte [rax], al
add byte [rax], al
add dh, dh
or dword [rax], eax
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte es:[rax]
add byte [rax], al
add byte [rax], al
or al, byte ss:[rax]
add byte [rax], al
add byte [rax], al
or r8b, byte [rax]
add byte [rax], al
add byte [rax], al
push rsi
or al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
jbe 0x40308c
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x400a], al
add byte [rax], al
add byte [rsi + 0x400a], dl
add byte [rax], al
add byte [rsi + 0x400a], ah
add byte [rax], al
add byte [rsi + 0x400a], dh
add byte [rax], al
add dh, al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x403138
je 0x403141
and byte [rip + 0x302e342e], dh
sub eax, 0x75627536
outsb dx, byte [rsi]
je 0x40314f
xor dword [rsi + 0x31], edi
xor byte cs:[rsi + rbp], dh
xor al, 0x29
and byte [rip + 0x302e342e], dh
and byte [rdx], dh
xor byte [rcx], dh
xor byte ss:[rsi], dh
xor byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add al, byte [rax]
push rsp
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, dword [rax]
je 0x40314c
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], al
cwde
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, 0x4002c000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], al
add byte [rax], al
add eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add dh, dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], cl
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], cl
add byte [rax + 0x4007], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], cl
add byte [rax + 0x4007], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], cl
add byte [rax + 9], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], cl
nop
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or eax, 0x400ad000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], cl
add al, ah
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
verr word [rdi + rbx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], dl
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], dl
add byte [rax + 0x4020], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], dl
add al, bh
and al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc eax, dword [rax]
push rsp
sub eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc al, 0
call 0x409312
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x602df800], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], dl
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], bl
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], bl
add byte [rax], al
xor byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
sbb al, byte [rax]
mov al, 0x30
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], bl
add al, al
xor byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax], dl
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax + 0xb], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0x400b], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rcx], al
add byte [rbx], bl
add al, al
xor byte [rax], ah
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbx
add byte [rax], al
add byte [rcx], al
add byte [rip + 0x602df800], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, byte [rax]
add byte [rax + 0x400b], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], al
add byte [rax + rax], dl
call 0x4094aa
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x4000000], ah
add cl, dh
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x10000], ch
adc byte [rax], al
cmp byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, al
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bl
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, ch
add byte [rax], al
add byte [rcx], al
add byte [rbx], bl
add byte [rsi], cl
mov dh, 0x61
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rdi + rbx], bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x1f], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add dword [rax], eax
add byte [rcx], al
add byte [rax], dl
add byte [rcx + 0x1f], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rdx + 0x1f], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 1], dl
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jne 0x40357b
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, ebp
add dword [rax], eax
add byte [rcx], al
add byte [rax], dl
add byte [rdi + rbx + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov bh, 1
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fadd dword [rcx]
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
push rsp
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
std
add dword [rax], eax
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x1f], bl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 2
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
pop rsp
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte ds:[rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x1f], ah
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rbx
add al, byte [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rdi + rbx + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jns 0x40363c
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
push 0x401f
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cwde
add al, byte [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rdi + rbx + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rdx], 0
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x1f], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
call 0x1403687
add byte [rax], dl
add byte [rdi + rbx + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rbx], al
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
js 0x4036c1
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rbx], al
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
jl 0x4036d9
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x401f], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rbx], 0
add byte [rcx], al
add byte [rax], dl
add byte [rdi + rbx + 0x40], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
lodsb al, byte [rsi]
add eax, dword [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x401f], cl
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xlatb
add eax, dword [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rdi + rbx + 0x40], cl
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax + rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x401f], dl
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub eax, dword [rax + rax]
add byte [rcx], al
add byte [rax], dl
add byte [rdi + rbx + 0x40], dl
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
add al, 0
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x401f], bl
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jns 0x403776
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
pushfq
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsd dword [rdi], dword ptr [rsi]
add al, 0
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x401f], ah
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
int 4
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x401f], ch
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rip + 0x10000]
adc byte [rax], al
lodsb al, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x10000
adc byte [rax], al
mov al, 0x1f
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push 0x1000005
add byte [rax], dl
add byte [rdi + rbx + 0x40], dh
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov es, word [rip + 0x10000]
adc byte [rax], al
mov eax, 0x401f
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ah, 5
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
mov esp, 0x401f
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fld qword [rip + 0x10000]
adc byte [rax], al
rcr byte [rdi], 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rsi]
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub dword [rsi], eax
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
enter 0x401f, 0
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbx
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
int3
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jle 0x4038b0
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
rcr byte [rdi], 1
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
fcomp dword [rdi]
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, cl
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
hlt
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rsi], 1
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
clc
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
push 0x4020
add byte [rax], al
add byte [rip], cl
add byte [rax], al
add cl, bh
add byte [rax], al
add al, byte [rax]
add byte [rbx + 0x4012], cl
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add al, byte [rax]
add cl, cl
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
adc eax, 0
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 7], al
add byte [rax], al
add dword [rax], eax
adc al, byte [rax]
push rax
sub eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 7], bl
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
and byte [rax], 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 7], ch
add byte [rax], al
add dword [rax], eax
sbb dword [rax], eax
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 7], al
add byte [rax + rax], dl
clc
sub eax, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, esp
add byte [rax], al
add byte [rax], al
adc al, 0
call 0x409a32
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x1000007], ah
add byte [rdi], dl
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000007], dh
add byte [rsi], cl
add ah, dh
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
insb byte [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, dl
add byte [rax], al
and al, byte [rax]
add byte [rax + rbx + 0x40], dh
add byte [rax], al
in al, dx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0xe], ah
add byte [rax], al
and byte [rax], al
sbb al, byte [rax]
mov al, 0x30
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ch
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
movabs al, byte [0x70000000000061ae]
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add ah, bh
add byte [rax], al
and al, byte [rax]
add al, dh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + rbx + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add dl, dl
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add byte [rbp + 8], ch
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4015], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000008], ah
add byte [rsi], cl
add al, dh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x12000008], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bl
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add al, bh
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sti
or byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + 0x401a], bl
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 9], ah
add byte [rax], al
and al, byte [rax]
add al, dh
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
js 0x403b9b
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x1c], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000009], dl
add byte [rsi], cl
add byte [rdi], al
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, al
or dword [rax], eax
add byte [rdx], dl
add byte [rsi], cl
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, dl
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x4017], dh
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
or al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x4015], cl
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xe], ah
add byte [rax], al
adc al, byte [rax]
add al, ah
or al, byte [rax]
add byte [rax], al
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, byte [r8]
add byte [rdx], ah
add byte [rsi], cl
add al, al
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0xa], dh
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x13], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200000a], al
add byte [rsi], cl
add byte [rbx + 0x1d], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dl
or al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add al, cl
adc eax, 0x40
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
or eax, dword [rax]
add byte [rdx], dl
add byte [rsi], cl
add byte [rsp + rcx + 0x40], bh
add byte [rax], al
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
or eax, dword [rax]
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
or eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xb], cl
add byte [rax], al
adc al, byte [rax]
add bh, bl
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
adc eax, dword [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rax
or eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, cl
or dword [rax], eax
add byte [rdx], dl
add byte [rdi], cl
add byte [rdi + rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0xb], dh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
lea ecx, [rbx]
add byte [rax], al
and al, byte [rax]
add byte [rip + 0x401b], ah
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1200000b], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x15], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
or al, 0
add byte [rdx], ah
add byte [rsi], cl
add bh, dl
sbb eax, 0x40
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xc], bl
add byte [rax], al
adc al, byte [rax]
add ah, dh
or eax, 0x40
add byte [rax], al
jmp 0x403dcb
add byte [rax], al
add byte [rax], al
add byte [rax], al
push 0x2200000c
add byte [rsi], cl
add byte [rbp + 0x401d], bh
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1200000c], ah
add byte [rsi], cl
add byte [rax], ah
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rip], ah
add byte [rax], al
add cl, dl
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
xor byte [rax], 0
add byte [rax], al
add byte [rax], al
and byte [rdx + 1], bh
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2200000c], ch
add byte [rsi], cl
add byte [rax + 0x4013], dh
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add dl, al
or al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + rdx + 0x40], dl
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
fisttp dword [rax + rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x1d], ah
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and dword [rip + 0x220000], ecx
add dh, bl
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub dword [rip + 0x220000], ecx
add byte [rdx + 0x1c], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xd], cl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
and byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0xd], ch
add byte [rax], al
and al, byte [rax]
add al, cl
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
sldt word [rax]
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200000d], bl
add byte [rsi], cl
add byte [rbx], bl
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dl, 0xd
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, 0x220000
add ah, ah
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
dec byte [rip + 0x110000]
adc byte [rax], al
xor byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, 0x1200000e
add byte [rsi], cl
add ah, ah
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
and al, byte [rax]
add ah, bl
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
sbb al, byte [rax]
mov al, 0x30
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0xe], ch
add byte [rax], al
and al, byte [rax]
add byte [rax], dh
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
wait
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4014], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2200000e], ch
add byte [rsi], cl
add byte [rax + 0x4014], ah
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, al
add byte [rax], al
and al, byte [rax]
add al, bh
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jrcxz 0x404020
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
and byte [rdx + 0x61], dh
add byte [rax], al
jo 0x404025
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0xe, eax
add byte [rax], al
and al, byte [rax]
add byte [rbx + rdx + 0x40], dl
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
adc al, byte [rax]
add bl, bh
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
and eax, 0
add byte [rax], al
add byte [rax], cl
sldt word [rax]
adc dword [rax], eax
sbb eax, dword [rax]
movabs al, byte [0x6e000000000061b5]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rcx], cl
add byte [rax], al
and al, byte [rax]
add cl, dh
sbb eax, 0x40
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
sldt word [rax]
adc al, byte [rax]
add byte [rsi + 0x400c], dl
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xf], al
add byte [rax], al
and al, byte [rax]
add byte [rdx], ah
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rcx], dh
add byte [rdx], ah
add byte [rsi], cl
add dl, bh
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
push rsp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xe], bl
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax + 3], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov eax, 0x2200000f
add byte [rsi], cl
add bh, bh
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add bh, ah
sldt word [rax]
adc al, byte [rax]
add bl, ch
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
hlt
sldt word [rax]
and al, byte [rax]
add byte [rdx + 0x4017], dh
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
adc byte [rax], al
add byte [rcx], dl
add bl, byte [rdx]
add al, al
xor byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte cs:[rax], al
add byte [rdx], ah
add byte [rsi], cl
add ah, bl
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x10], cl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4015], cl
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x11000010], cl
add bl, byte [rdx]
add byte [rax + 0x6030], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x11000010], bl
add byte [rbx], bl
add ah, ah
xor byte [rax], ah
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
popfq
adc byte [rax], al
add byte [rdx], dl
add byte [rsi], cl
add byte [rax + 0x401e], dh
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
lodsd eax, dword [rsi]
adc byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000010], bh
add byte [rsi], cl
add ah, dl
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add ah, bl
adc byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x13], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
adc byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsp + rbx + 0x40], cl
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword cs:[rax], eax
add byte [rdx], ah
add byte [rsi], cl
add al, bl
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rdx
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add al, dh
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [eax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x18], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x11], bh
add byte [rax], al
and al, byte [rax]
add byte [rbx], bl
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, esp
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + rbx + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x12000011], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000011], dh
add byte [rsi], cl
add byte [rax + 0x14], ah
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, cl
adc dword [rax], eax
add byte [rax], dl
add byte [rbx], bl
add al, al
xor byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fist dword [rcx]
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
not dword [rcx]
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x401a], dl
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
adc al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + 0x1b], cl
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rdx], dl
add byte [rsi], cl
add byte [rbp + 0xc], al
add byte [rax], al
add byte [rax], al
add byte [rip], ah
add byte [rax], al
add byte [rcx + 0x12], ch
add byte [rax], al
and al, byte [rax]
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000012], cl
add byte [rsi], cl
add al, al
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000012], bh
add byte [rsi], cl
add byte [rsi + 0x13], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, dl
adc al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x18], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rbx], dl
add byte [rax], al
adc al, byte [rax]
add byte [rbp + rcx + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rdx], bl
adc eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4013], dh
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rdx + 0x110000], ah
sbb eax, dword [rax]
loopne 0x40440a
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor edx, dword [rbx]
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x1e], al
add byte [rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rbx], edx
add byte [rax], al
and al, byte [rax]
add dl, bh
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
lahf
adc eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x401c], bh
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop qword [rdi]
add byte [rax], al
adc byte [rax], al
sbb eax, dword [rax]
adc byte [rsi + 0x61], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
retf
adc eax, dword [rax]
add byte [rdx], dl
add byte [rsi], cl
add byte [rdi + 0x400c], cl
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, dl
adc eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ch
adc eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x15], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
adc al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x14], al
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4014], ah
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x14], bl
add byte [rax], al
adc al, byte [rax]
add byte [rdx + 0xc], ch
add byte [rax], al
add byte [rax], al
add byte [rip], ah
add byte [rax], al
add byte [rdx + 0x14], ah
add byte [rax], al
and al, byte [rax]
add cl, cl
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
sldt word [rax]
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x12000014], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x10000014], ch
add byte [rdx], bl
add al, al
xor byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dh, 0x14
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4014], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, cl
adc al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax + 0x400a], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ch
adc al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bh
adc al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
adc eax, 0x220000
add al, cl
adc eax, 0x40
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x15], cl
add byte [rax], al
and al, byte [rax]
add al, bl
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
outsd dx, dword [rsi]
adc eax, 0x220000
add byte [rax + rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rip], dh
add byte [rax], al
add byte [rsi + 0x22000015], bl
add byte [rsi], cl
add al, bl
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
ret 0x15
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x18], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
call qword [rip + 0x220000]
add byte [rax + 0x401a], dl
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x401b], dl
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x16], ch
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x1a], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x12000016], ah
add byte [rsi], cl
add dl, dh
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
cdq
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x12000010], ah
add byte [rbx], cl
add byte [rax + 9], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
adc al, byte [rax]
add dh, dl
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
and eax, 0
add byte [rax], al
add byte [rsi + 0x22000016], ah
add byte [rsi], cl
add byte [rax + 0x4019], ah
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsxd rsi, dword [rdx + 0x74]
jae 0x40471a
jne 0x40470e
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
pop rdi
pop rdi
add byte [rbp + 0x72], ah
imul esi, dword gs:[ebx + 0x74], 0x745f7265
insd dword [rdi], dx
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x4046ce
pop rdi
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x40474c
jb 0x404752
pop rdi
jne 0x40475b
add byte [rbx + 0x6f], ah
insd dword [rdi], dx
jo 0x404755
je 0x404751
xor eax, 0x5f003538
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x404771
jb 0x404777
pop rdi
jne 0x404780
pop rdi
imul bp, word [rsi + 0x69], 0x615f
jb 0x404783
jns 0x404773
outsb dx, byte gs:[rsi]
je 0x40478a
jns 0x40471a
jb 0x40477e
insd dword [rdi], dx
pop rdi
jne 0x404790
insd dword [rdi], dx
jns 0x404726
pop rdi
pop rdi
jb 0x40478c
insd dword [rdi], dx
pop rdi
jne 0x40479e
insd dword [rdi], dx
jns 0x404793
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40479e
jns 0x40479e
outsb dx, byte gs:[rsi]
je 0x4047b5
jns 0x404745
jo 0x4047aa
movsxd rsi, dword cs:[rax + 0x70]
add byte [rdi + 0x5a], bl
push rbx
je 0x40479d
xor dword [rcx], edi
jo 0x4047be
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x4047d6
jb 0x4047d9
movsxd rsi, dword [rax + rax + 0x5f]
pop rdx
push rbx
je 0x4047b8
xor dword [rbx], esi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4047d7
jb 0x4047e2
add byte [rdi + 0x5a], bl
push rbx
je 0x4047cd
imul esp, dword ss:[rdi + 0x6e], 0x65726f
pop rdi
pop rdx
push rbx
je 0x4047da
cmp byte [rdi + 0x5f], bl
imul ebp, dword [rdi + 0x69], 0x74696e
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x404801
movsxd rdi, dword [rax + 0x78]
xor r14b, byte [rcx]
pop rdi
pop rdi
jne 0x40481c
je 0x404811
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x404828
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x5a5f0045
push rbx
je 0x404810
xor dword [rax], esi
jb 0x40482b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx]
pop rdi
pop rdx
push rbx
je 0x404822
xor dword [rcx], esi
je 0x40484c
jns 0x40483b
je 0x40484d
pop rdi
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx]
pop rdi
pop rdx
push rbx
je 0x404835
xor dword [rax], esi
outsd dx, dword fs:[rsi]
jo 0x404864
pop rdi
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx]
pop rdi
pop rdx
push rbx
je 0x40482d
xor eax, 0x65676572
js 0x404862
movsxd rbp, dword [rdi + 0x6e]
jae 0x40487c
outsb dx, byte [rsi]
je 0x40487f
xor rax, 0x73616369
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x40484c
xor eax, 0x65676572
js 0x404881
movsxd rbp, dword [rdi + 0x6e]
jae 0x40489b
outsb dx, byte [rsi]
je 0x40489e
outsb dx, byte ss:[rsi]
outsd dx, dword [rsi]
jae 0x4048a6
jae 0x404879
add byte [rdi + 0x5a], bl
push rbx
je 0x40486c
xor eax, 0x65676572
js 0x4048a1
movsxd rbp, dword [rdi + 0x6e]
jae 0x4048bb
outsb dx, byte [rsi]
je 0x4048be
cmp byte [rdi + 0x70], r13b
je 0x4048ba
insd dword [rdi], dx
imul edi, dword [rdx + 0x65], 0x5a5f0045
push rbx
je 0x40488e
xor eax, 0x65676572
js 0x4048c3
movsxd rbp, dword [rdi + 0x6e]
jae 0x4048dd
outsb dx, byte [rsi]
je 0x4048e0
movsxd rbp, dword [rdi + 0x6c]
insb byte [rdi], dx
je 0x4048db
add byte [r15 + 0x5a], r11b
push rbx
je 0x4048af
xor eax, 0x65676572
js 0x4048e4
movsxd rbp, dword [rdi + 0x6e]
jae 0x4048fe
outsb dx, byte [rsi]
je 0x404901
xor qword [rax], r14
push r11
movsxd rsi, dword [rdx + 0x69]
jo 0x40490f
add byte [r15 + 0x5a], r11b
push rbx
je 0x4048d4
xor eax, 0x65676572
js 0x404909
movsxd rbp, dword [rdi + 0x6e]
jae 0x404923
outsb dx, byte [rsi]
je 0x404926
xor rax, 0x69736162
movsxd rax, dword [rbp]
pop rdi
pop rdx
push rbx
je 0x4048f3
xor eax, 0x65676572
js 0x404928
movsxd rbp, dword [rdi + 0x6e]
jae 0x404942
outsb dx, byte [rsi]
je 0x404945
cmp byte [rbp + 0x78], r12b
je 0x40493d
outsb dx, byte [rsi]
add byte fs:[r15 + 0x5a], r11b
push rbx
je 0x404915
xor eax, 0x65676572
js 0x40494a
movsxd rbp, dword [rdi + 0x6e]
jae 0x404964
outsb dx, byte [rsi]
je 0x404967
xor r12, qword [rcx + 0x77]
imul eax, dword [rbp], 0x5f
pop rdx
push rbx
je 0x404932
xor eax, 0x65676572
js 0x404967
movsxd rbp, dword [rdi + 0x6e]
jae 0x404981
outsb dx, byte [rsi]
je 0x404984
xor al, 0x67
jb 0x40497b
jo 0x40495d
add byte [rdi + 0x5a], bl
push rbx
je 0x404950
xor eax, 0x65676572
js 0x404985
movsxd rbp, dword [rdi + 0x6e]
jae 0x40499f
outsb dx, byte [rsi]
je 0x4049a2
xor rax, 0x65726765
jo 0x40497c
add byte [rdi + 0x5a], bl
push rbx
je 0x40496f
xor eax, 0x65676572
js 0x4049a4
movsxd rbp, dword [rdi + 0x6e]
jae 0x4049be
outsb dx, byte [rsi]
je 0x4049c1
xor qword [rbx], r14
insd dword [rdi], dx
je 0x4049b8
push 0x6665645f
jne 0x4049c9
je 0x4049a4
add byte [rdi + 0x5a], bl
push rbx
je 0x404997
xor eax, 0x65676572
js 0x4049cc
movsxd rbp, dword [rdi + 0x6e]
jae 0x4049e6
outsb dx, byte [rsi]
je 0x4049e9
xor qword [rbx], r14
insd dword [rdi], dx
je 0x4049e0
push 0x746f6e5f
pop rdi
outsd dx, dword [rsi]
insb byte [rdi], dx
add byte [r15 + 0x5a], r11b
push rbx
je 0x4049bf
xor eax, 0x65676572
js 0x4049f4
movsxd rbp, dword [rdi + 0x6e]
jae 0x404a0e
outsb dx, byte [rsi]
je 0x404a11
xor qword [rbx], r14
insd dword [rdi], dx
je 0x404a08
push 0x746f6e5f
pop rdi
outsd dx, dword gs:[rsi]
insb byte [rdi], dx
add byte [r15 + 0x5a], r11b
push rbx
je 0x4049e7
xor eax, 0x65676572
js 0x404a1c
movsxd rbp, dword [rdi + 0x6e]
jae 0x404a36
outsb dx, byte [rsi]
je 0x404a39
xor qword [rbx], r14
insd dword [rdi], dx
je 0x404a30
push 0x746f6e5f
pop rdi
outsd dx, dword [rsi]
ja 0x404a1c
add byte [rdi + 0x5a], bl
push rbx
je 0x404a0f
xor eax, 0x65676572
js 0x404a44
movsxd rbp, dword [rdi + 0x6e]
jae 0x404a5e
outsb dx, byte [rsi]
je 0x404a61
xor qword [rbx], r14
insd dword [rdi], dx
je 0x404a58
push 0x746f6e5f
pop rdi
outsd dx, dword gs:[rsi]
ja 0x404a44
add byte [rdi + 0x5a], bl
push rbx
je 0x404a37
xor eax, 0x65676572
js 0x404a6c
movsxd rbp, dword [rdi + 0x6e]
jae 0x404a86
outsb dx, byte [rsi]
je 0x404a89
cmp qword [rbp + 0x61], r13
je 0x404a7f
push 0x796e615f
add byte [r15 + 0x5a], r11b
push rbx
je 0x404a5a
xor eax, 0x65676572
js 0x404a8f
movsxd rbp, dword [rdi + 0x6e]
jae 0x404aa9
outsb dx, byte [rsi]
je 0x404aac
xor qword [rbp*2 + 0x68637461], r14
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
je 0x404aa5
outsb dx, byte [rsi]
jne 0x404ab5
insb byte [rdi], dx
add byte [r15 + 0x5a], r11b
push rbx
je 0x404a83
xor eax, 0x65676572
js 0x404ab8
movsxd rbp, dword [rdi + 0x6e]
jae 0x404ad2
outsb dx, byte [rsi]
je 0x404ad5
xor qword [rsi], r14
insd dword [rdi], dx
je 0x404acc
push 0x6e6f635f
je 0x404ad9
outsb dx, byte [rsi]
jne 0x404ae2
jne 0x404ae8
add byte [r15 + 0x5a], r11b
push rbx
je 0x404aae
xor eax, 0x65676572
js 0x404ae3
movsxd rbp, dword [rdi + 0x6e]
jae 0x404afd
outsb dx, byte [rsi]
je 0x404b00
xor qword [rsi], r14
insd dword [rdi], dx
je 0x404af7
push 0x6572705f
jbe 0x404afa
jbe 0x404aff
imul ebp, dword [rbp + rax*2], 0x534e5a5f
je 0x404ad9
xor eax, 0x65676572
js 0x404b0e
movsxd rbp, dword [rdi + 0x6e]
jae 0x404b28
outsb dx, byte [rsi]
je 0x404b2b
xor qword [rsi], r14
outsd dx, dword [rsi]
jb 0x404b2c
je 0x404b21
jne 0x404b34
je 0x404b0f
add byte [rdi + 0x5a], bl
push rbx
je 0x404b02
xor eax, 0x65676572
js 0x404b37
movsxd rbp, dword [rdi + 0x6e]
jae 0x404b51
outsb dx, byte [rsi]
je 0x404b54
xor qword [rax], r14
outsw dx, word [rsi]
jb 0x404b55
je 0x404b4a
jae 0x404b52
add byte fs:[r15 + 0x5a], r11b
push rbx
je 0x404b27
xor eax, 0x65676572
js 0x404b5c
movsxd rbp, dword [rdi + 0x6e]
jae 0x404b76
outsb dx, byte [rsi]
je 0x404b79
xor qword [rsi], r14
outsd dx, dword [rsi]
jb 0x404b7a
je 0x404b6f
outsb dx, byte [rsi]
outsd dx, dword [rsi]
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x404b5d
add byte [rdi + 0x5a], bl
push rbx
je 0x404b50
xor eax, 0x65676572
js 0x404b85
movsxd rbp, dword [rdi + 0x6e]
jae 0x404b9f
outsb dx, byte [rsi]
je 0x404ba2
xor qword [rdi], r14
outsw dx, word [rsi]
jb 0x404ba3
je 0x404b98
imul si, word [rdx + 0x73], 0x5f74
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
jns 0x404b89
add byte [rdi + 0x5a], bl
push rbx
je 0x404b7c
xor eax, 0x65676572
js 0x404bb1
movsxd rbp, dword [rdi + 0x6e]
jae 0x404bcb
outsb dx, byte [rsi]
je 0x404bce
xor qword [rbx], r14
jb 0x404bd3
outsd dx, dword [rsi]
jb 0x404bc3
movsxd rbp, dword [rdi + 0x6c]
insb byte [rdi], dx
je 0x404bd0
add byte [r15 + 0x5a], r11b
push rbx
je 0x404ba4
xor eax, 0x65676572
js 0x404bd9
movsxd rbp, dword [rdi + 0x6e]
jae 0x404bf3
outsb dx, byte [rsi]
je 0x404bf6
xor qword [rcx], r14
jb 0x404bfb
outsd dx, dword [rsi]
jb 0x404beb
movsxd rsi, dword [rcx + rdi*2 + 0x70]
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x404bca
xor eax, 0x65676572
js 0x404bff
movsxd rbp, dword [rdi + 0x6e]
jae 0x404c19
outsb dx, byte [rsi]
je 0x404c1c
xor qword [rdx], r14
jb 0x404c21
outsd dx, dword [rsi]
jb 0x404c11
jae 0x404c18
jo 0x404c1d
add byte [r15 + 0x5a], r11b
push rbx
je 0x404bf1
xor eax, 0x65676572
js 0x404c26
movsxd rbp, dword [rdi + 0x6e]
jae 0x404c40
outsb dx, byte [rsi]
je 0x404c43
xor qword [rbx], r14
jb 0x404c48
outsd dx, dword [rsi]
jb 0x404c38
movsxd rbp, dword [rbx + 0x72]
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x404c19
xor eax, 0x65676572
js 0x404c4e
movsxd rbp, dword [rdi + 0x6e]
jae 0x404c68
outsb dx, byte [rsi]
je 0x404c6b
xor qword [rcx], r14
jb 0x404c70
outsd dx, dword [rsi]
jb 0x404c60
jb 0x404c65
movsxd rbp, dword [rbx + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x404c3f
xor eax, 0x65676572
js 0x404c74
movsxd rbp, dword [rdi + 0x6e]
jae 0x404c8e
outsb dx, byte [rsi]
je 0x404c91
xor qword [rcx], r14
jb 0x404c96
outsd dx, dword [rsi]
jb 0x404c86
jo 0x404c8a
jb 0x404c90
outsb dx, byte [rsi]
add byte [r15 + 0x5a], r11b
push rbx
je 0x404c65
xor eax, 0x65676572
js 0x404c9a
movsxd rbp, dword [rdi + 0x6e]
jae 0x404cb4
outsb dx, byte [rsi]
je 0x404cb7
xor qword [rcx], r14
jb 0x404cbc
outsd dx, dword [rsi]
jb 0x404cac
jb 0x404cb1
movsxd rsp, dword [rbp + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x404c8b
xor eax, 0x65676572
js 0x404cc0
movsxd rbp, dword [rdi + 0x6e]
jae 0x404cda
outsb dx, byte [rsi]
je 0x404cdd
xor qword [0x726f7272], r14
pop rdi
jb 0x404cda
movsxd rsp, dword [rbp + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x404cb4
xor eax, 0x65676572
js 0x404ce9
movsxd rbp, dword [rdi + 0x6e]
jae 0x404d03
outsb dx, byte [rsi]
je 0x404d06
xor qword [rcx], r14
jb 0x404d0b
outsd dx, dword [rsi]
jb 0x404cfb
jb 0x404cff
outsb dx, byte [rsi]
add byte gs:[r15d + 0x5a], r11b
push rbx
je 0x404cda
xor eax, 0x65676572
js 0x404d0f
movsxd rbp, dword [rdi + 0x6e]
jae 0x404d29
outsb dx, byte [rsi]
je 0x404d2c
xor qword [rcx], r14
jb 0x404d31
outsd dx, dword [rsi]
jb 0x404d21
jae 0x404d34
movsxd rsp, dword [rbp + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x404d00
xor eax, 0x65676572
js 0x404d35
movsxd rbp, dword [rdi + 0x6e]
jae 0x404d4f
outsb dx, byte [rsi]
je 0x404d52
xor qword [rip + 0x6f727265], r14
jb 0x404d47
jb 0x404d52
jo 0x404d54
je 0x404d37
add byte [rdi + 0x5a], bl
push rbx
je 0x404d2a
xor eax, 0x65676572
js 0x404d5f
movsxd rbp, dword [rdi + 0x6e]
jae 0x404d79
outsb dx, byte [rsi]
je 0x404d7c
xor qword [rsi], r14
jb 0x404d81
outsd dx, dword [rsi]
jb 0x404d71
movsxd rbp, dword [rdi + 0x6d]
jo 0x404d83
js 0x404d83
je 0x404d95
add byte [r15 + 0x5a], r11b
push rbx
je 0x404d55
xor eax, 0x65676572
js 0x404d8a
movsxd rbp, dword [rdi + 0x6e]
jae 0x404da4
outsb dx, byte [rsi]
je 0x404da7
xor qword [rcx], r14
jb 0x404dac
outsd dx, dword [rsi]
jb 0x404d9c
jae 0x404db3
movsxd rbp, dword [rbx + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x404d82
pop rdi
pop rdi
je 0x404db1
imul ebp, dword [rsp + rcx*2 + 0x31], 0x5f535f39
imul ebp, dword [rsi + 0x76], 0x64696c61
pop rdi
jae 0x404dd6
je 0x404dca
pop rdi
imul esp, dword [rbp + rax*2], 0x314c5a5f
add byte [rdi + 0x5a], r11b
xor r9, qword [rcx + 0x4e]
add byte [rdi + 0x5a], r11b
pop rdx
xor eax, 0x766c6f73
jbe 0x404dc8
xor dword [rcx], edi
pop rdi
pop rdi
push rax
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
xor al, 0x31
pop rdi
pop rdi
jae 0x404e15
je 0x404e0d
movsxd rbx, dword [rdi + 0x69]
outsb dx, byte [rsi]
imul esi, dword [rcx + rbp*2 + 0x61], 0x617a696c
je 0x404e1b
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
outsb dx, byte [rsi]
pop rdi
jae 0x404e31
jb 0x404e34
movsxd rsi, dword [rcx + rbp*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
xor byte [rcx + 0x69], ch
add byte [rdi + 0x47], bl
pop rdi
pop rdi
jae 0x404e49
pop rdi
pop r15
pop rdi
pop rdx
xor bl, byte [rdi + 0x52]
push rdx
imul eax, dword [rax], 0x52465f5f
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push r10
pop rdi
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push rbp
pop rdi
pop rdi
push rdx
pop r15
push rdx
add byte [rdi + 0x47], bl
pop rdi
push rbx
push r12
pop rdi
push rsp
pop r15
add byte [rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x404e8f
jns 0x404e8f
outsb dx, byte gs:[rsi]
add byte fs:[rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x404ea0
jns 0x404ea0
jae 0x404eb7
jb 0x404eba
add byte [rdi + 0x44], bl
pop rcx
add byte [r15 + 0x5a], bl
push rbx
je 0x404e8c
jbe 0x404ebd
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
cmp dword fs:[r8 + 0x75], r14d
jae 0x404ed1
pop rdi
movsxd rbp, dword [rbx + 0x45]
push rdx
add byte fs:[rdi + 0x5a], bl
push r11
je 0x404eb0
jbe 0x404ee1
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r10], r14d
pop rdi
pop r15
movsxd rbp, dword [rax + 0x65]
movsxd rbp, dword [rbx + 0x5f]
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
insd dword [rdi], dx
push rax
movsxd rax, dword [r8]
pop rdi
pop rdx
push rbx
xor r8b, byte fs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
xor al, byte fs:[r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x404eee
xor byte [rdi + 0x5f], bl
jne 0x404f2f
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x404f4a
xor dword [rbp + 0x45], eax
xor dword [rbx], esi
pop rdi
pop rdi
jne 0x404f4b
imul ebp, dword [rsi + 0x69], 0x6f635f74
jo 0x404f5f
push r11
je 0x404f1b
xor ebp, dword [rbp + 0x6f]
jbe 0x404f54
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push r11
xor ebx, dword [rdi + 0x45]
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop rdi
push rbx
xor eax, 0x5a5f005f
push rbx
je 0x404f49
outsw dx, word [rsi]
jb 0x404f8d
jb 0x404f7d
push r10
push r12
pop rdi
push rdx
push rbx
je 0x404f57
jb 0x404f8e
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x404f92
pop rdi
jb 0x404f95
jb 0x404f99
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor bl, byte [rdi + 0x45]
xor al, 0x74
jns 0x404fb0
add byte gs:[r15 + 0x5a], r11b
push rbx
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x404f87
xor byte [rdi + 0x5f], bl
je 0x404fc2
jb 0x404fcb
ja 0x404fbd
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
je 0x404fcc
pop rdi
jb 0x404fda
outsd dx, dword [rsi]
jb 0x404fbb
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x404fb2
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x404ff3
push rbx
xor r8b, byte fs:[rbp + 0x76]
add byte [rax + 0x72], dh
imul ebp, dword [rsi + 0x74], 0x47404066
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push r11
je 0x404fe7
xor ebp, dword [rbp + 0x6f]
jbe 0x405020
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
xor al, 0x62
jae 0x405032
jbe 0x404fd0
pop rdi
pop rdx
push rbx
je 0x405007
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405040
je 0x405055
imul esi, dword [rbx + rsi*2 + 0x49], 0x64496153
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor byte [rdi + 0x50], bl
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
xor dword [rdx + 0x49], edx
imul ecx, dword [rdx + 0x69], 0x52764545
push rsp
pop rdi
jo 0x405066
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40504f
xor ebp, dword [rbp + 0x6f]
jbe 0x405088
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
xor al, byte fs:[r13 + 0x53]
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40506e
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4050a7
je 0x4050bc
imul esi, dword [rbx + rsi*2 + 0x49], 0x64496153
cmp byte [r13 + 0x61], r13b
js 0x4050b9
jae 0x4050c5
jp 0x4050c3
push r10
push r11
xor byte [rdi], bl
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul bp, word [rsi + 0x69], 0x5f00
pop rdx
push rbx
je 0x4050ac
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4050ed
push rbx
xor dword fs:[r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
jbe 0x4050a3
pop rdi
pop rdx
push rbx
je 0x4050da
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405113
je 0x405128
imul esi, dword [rbx + rsi*2 + 0x49], 0x64496153
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x40513b
jb 0x40513e
movsxd rsi, dword [rcx + rcx*2 + 0x64]
push rdx
jbe 0x405128
push rbx
xor byte [rdi + 0x50], bl
push rsp
pop rdi
jo 0x40512e
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40511a
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40515b
push rbx
xor dword fs:[r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x405111
pop rdi
pop rdx
xor dword [rdx + 0x49], edx
js 0x405161
jbe 0x40516e
push rsp
pop rdi
jo 0x405173
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40515b
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esi, dword [rbp + 0x72], 0x7361625f
push r11
je 0x40516c
xor ebp, dword [rbp + 0x6f]
jbe 0x4051a5
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x405183
xor dword [rdi + 0x4d], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x4051e8
jo 0x4051d6
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x4051b2
jbe 0x4051e3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x4051ff
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x405217
push r10
jbe 0x4051ed
jo 0x4051fa
push rsp
pop rdi
add byte [rdi + 0x5a], bl
xor bl, byte [rdi + 0x57]
push rdx
js 0x4051b7
pop rdi
pop rdi
insd dword [edi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x405234
jb 0x405237
pop rdi
pop rdi
add byte [rdi + 0x4a], bl
jbe 0x405229
push rdx
imul esi, dword gs:[ebx + 0x74], 0x6c437265
jae 0x40524a
jae 0x4051da
pop rdi
pop rdx
insb byte [rdi], dx
push rax
jbe 0x405221
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
xor eax, 0x766c6f73
jbe 0x4051f8
pop rdi
pop rdi
jae 0x405270
jb 0x405274
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x635f5f00
js 0x405279
pop rdi
jb 0x405280
je 0x405285
jb 0x40528e
ja 0x405261
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x405264
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40529d
je 0x4052b2
imul esi, dword [rbx + rsi*2 + 0x49], 0x64496153
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor byte [rdi + 0x6d], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x405299
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rbx + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x4052bd
pop rdi
jae 0x4052fe
jb 0x4052fb
jns 0x4052d7
push rax
jbe 0x4052e8
pop rdi
push rbx
xor dword [rdi + 0x52], ebx
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x4052d7
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
push rbx
je 0x4052ec
xor dword [rdi + 0x4e], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x405351
jo 0x40533f
push r11
xor bl, byte [rdi]
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x6174735f
jb 0x40535f
pop rdi
insd dword [rdi], dx
imul ebp, dword [rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x355a5f00
jne 0x40536d
insb byte [rdi], dx
imul eax, dword fs:[rax], 0x534e5a5f
je 0x40533f
xor byte [rdi + 0x49], bl
je 0x405378
jb 0x405374
jae 0x40537e
push r11
je 0x40534e
xor ebp, dword [rbp + 0x6f]
jbe 0x405387
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
xor dword [rbp + 0x45], eax
pop rdi
push rbx
pop rdi
jae 0x4053a1
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
xor bl, byte [rdi + 0x52]
push rdx
add byte fs:[rdi + 0x5a], bl
push rbx
je 0x405385
jbe 0x4053b6
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor r8b, byte fs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40539e
jbe 0x4053cf
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x4053b1
xor al, 0x5f
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x4053e7
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4053f1
pop rdi
xor cl, byte [rcx + 0x4c]
xor dword [rbp + 0x50], eax
push rbx
xor byte [rdi + 0x45], bl
push rsp
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
xor bl, byte [rdi + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
je 0x405415
js 0x40541b
je 0x4053f4
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x6e5a5f00
ja 0x405433
push rax
jbe 0x4053c9
pop rdi
pop rdx
push rbx
je 0x405400
xor ebp, dword [rbp + 0x6f]
jbe 0x405439
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
xor dword fs:[r13 + 0x53], eax
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x405426
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rsp + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405476
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40547f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405473
jae 0x4054a5
jb 0x4054a2
jns 0x40547e
jbe 0x40548a
push rsp
pop rdi
add byte [rdi + 0x5a], bl
xor dword [rdx + 0x49], edx
js 0x40548e
jbe 0x40549b
push rsp
pop rdi
jo 0x4054a0
push rsp
xor byte [rdi], bl
pop rdi
push r12
pop r15
jb 0x4054c0
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4054d7
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4054e0
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4054d4
xor dword fs:[r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
insd dword [rdi], dx
add byte [rdi + 0x49], bl
pop r15
jae 0x405518
imul ebp, dword fs:[rsi + 0x5f], 0x64657375
add byte [rdi + 0x5a], bl
xor dword [rdi + 0x76], edx
add byte [rdi + 0x5a], bl
push rbx
je 0x4054ea
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40552b
push rbx
xor dword fs:[r13 + 0x76], eax
add byte [rbx + 0x63], dh
outsb dx, byte [rsi]
pop r15w
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x54495f00
pop r15
jb 0x405552
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5f], bl
je 0x405567
pop rdi
jae 0x40557d
jb 0x405580
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405576
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40557f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405573
cmp byte fs:[r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x40553b
pop rdi
pop rdx
xor dword [rdx + 0x49], edx
imul ecx, dword [rdx + 0x45], 0x54527645
pop rdi
jo 0x40559d
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
xor dword [rdx + 0x49], edx
jbe 0x4055ac
push rsp
pop rdi
jo 0x4055b1
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40559a
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4055db
push rbx
xor dword fs:[rbp + 0x76], r8d
add byte [rcx + rbp*2 + 0x73], ah
add byte [rdi + 0x5a], bl
push rbx
je 0x4055c3
jbe 0x4055f4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, byte fs:[r13 + 0x76]
add byte [rdi + 0x5a], bl
xor bl, byte [rdi + 0x52]
push rdx
js 0x4055a8
jbe 0x405613
jae 0x4055ac
pop rdi
pop rdx
push rbx
je 0x4055e2
xor ebx, dword [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x405618
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x405622
pop rdi
xor dword [rbp + 0x50], eax
push rbx
xor byte [rdi + 0x45], bl
push rsp
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
xor bl, byte [rdi + 0x53]
xor dword [rdi], ebx
pop rdi
pop rdx
xor bl, byte [rdi + 0x57]
push rdx
imul rax, qword [r8], 0x4b4e5a5f
push rbx
je 0x405618
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x405659
push rbx
xor dword fs:[r9], r15d
pop rdi
pop r15
je 0x405664
push rsp
jo 0x405667
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405657
jbe 0x405614
pop rdi
pop rdx
push rbx
je 0x40564c
xor al, 0x5f
pop rdi
jne 0x40568c
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f6d5f64
jbe 0x405693
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x40569a
push r8
push rbx
xor byte [rdi + 0x53], bl
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor ebx, dword [rdi + 0x53]
xor bl, byte [rdi + 0x52]
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x405691
movsxd rbp, dword [rdi + 0x70]
jns 0x4056ab
push rbx
je 0x405696
xor ebp, dword [rbp + 0x6f]
jbe 0x4056cf
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push r11
xor dword [rdi + 0x45], ebx
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor al, 0x5f
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
xor eax, 0x616c6572
js 0x4056e2
js 0x40570a
js 0x405694
pop rdi
pop rdx
push rbx
je 0x4056cb
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40570c
push rbx
xor dword fs:[r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
jbe 0x4056c2
pop rdi
pop rdi
push rsp
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x405705
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x405746
push rbx
xor al, byte fs:[r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x405725
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40575e
je 0x405773
imul esi, dword [rbx + rsi*2 + 0x49], 0x64496153
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x405786
jb 0x405789
movsxd rsi, dword [rcx + rcx*2 + 0x64]
push r10
jbe 0x405773
push rbx
xor byte [rdi + 0x50], bl
push rsp
pop rdi
jo 0x405779
push rsp
xor byte [rdi], bl
pop rdi
pop rdi
jae 0x4057a2
pop rdi
push 0x6c646e61
add byte gs:[rcx], dh
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul ebp, dword [rsi + 0x69], 0x74610074
outsd dx, dword [rsi]
imul eax, dword [rax + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push r11
je 0x40579c
jbe 0x4057cd
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x5f007645
pop rdx
xor dword [rdx + 0x49], edx
js 0x4057cd
jbe 0x4057d9
push rsp
pop rdi
jo 0x4057de
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4057c6
cmp byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x405821
push r11
je 0x4057dd
xor ebp, dword [rbp + 0x6f]
jbe 0x405816
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push r11
xor dword [rdi + 0x45], ebx
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor al, 0x5f
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405837
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x405840
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405834
xor al, byte fs:[r13 + 0x76]
add byte [rdi + 0x5a], bl
xor dword [rdx + 0x49], edx
imul ecx, dword [rcx + 0x69], 0x52764545
push rsp
pop rdi
jo 0x405855
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x405844
pop rdi
jae 0x405885
jb 0x405882
jns 0x40585e
push rax
jbe 0x40586e
pop rdi
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
xor dword [rdx + 0x49], edx
js 0x40586f
jbe 0x40587d
push rsp
pop rdi
jo 0x405882
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
xor dword fs:[r13 + 0x76], eax
add byte [rbp + 0x65], ch
insd dword [rdi], dx
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4058ad
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x405892
jbe 0x4058c3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
imul r15d, dword fs:[r8 + 0x45], 0x5f5f006d
jae 0x4058e7
pop rdi
jae 0x4058eb
jb 0x4058ee
add byte [rdi + 0x5f], bl
jae 0x4058f3
movsxd rbp, dword [rbx + 0x5f]
movsxd rbp, dword [rax + 0x6b]
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405900
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x405909
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4058fd
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x4058f3
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x6d
outsd dx, dword [rsi]
jbe 0x405931
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x405938
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x405918
xor ebp, dword [rbp + 0x6f]
jbe 0x405951
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
xor byte [rdi + 0x45], bl
push r12
xor byte [rdi + 0x54], bl
pop rdi
add byte [rdi + 0x5a], bl
xor bl, byte [rdi + 0x52]
push rdx
movsxd rax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x405940
xor byte [rdi + 0x49], bl
je 0x405979
jb 0x405975
jae 0x40597f
push r8
xor byte [rbp + 0x45], al
pop rdi
push rbx
pop rdi
jae 0x40598f
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x405966
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4059a7
push rbx
xor dword fs:[r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x40595d
pop rdi
pop rdx
push rbx
je 0x405995
insd dword [rdi], dx
imul ebp, dword [rsi + 0x49], 0x4b524564
push rsp
pop rdi
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4059dc
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4059e5
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4059d9
cmp dword fs:[r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x405a0c
jb 0x405a0f
movsxd rsi, dword [rcx + rcx*2 + 0x64]
push r10
jbe 0x4059f7
push rsp
pop rdi
jo 0x4059fb
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
xor eax, 0x75706e69
je 0x405a2f
add byte [rdi + 0x5a], bl
push rbx
je 0x4059f6
jbe 0x405a27
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x405a0a
xor dword [rdi + 0x5f], ebx
movsxd rbp, dword [rdi + 0x70]
jns 0x405a40
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x405a4a
xor dword [rbp + 0x4c], eax
xor dword [rbp + 0x53], eax
je 0x405a23
jb 0x405a55
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x405a72
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x405a6c
cmp byte [r15d + 0x5f], r11b
movsxd rbp, dword [rdi + 0x70]
jns 0x405a74
insd dword [rdi], dx
push r8
push rsp
pop rdi
push rax
push r11
xor ebx, dword [rdi + 0x53]
pop rdi
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x405a61
insd dword [rdi], dx
js 0x405a7b
insd dword [rdi], dx
push r10
push r12
pop rdi
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x405aa9
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x405ab2
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405aa6
cmp byte fs:[r13 + 0x61], r13b
js 0x405ac3
jae 0x405acf
jp 0x405acd
jbe 0x405a6b
pop rdi
pop rdx
xor dword [rdx + 0x76], edx
add byte [rdi + 0x5f], bl
movsxd rdi, dword [rax + 0x61]
pop rdi
outsb dx, byte gs:[rsi]
pop rdi
movsxd rsp, dword [rcx + 0x74]
movsxd rbp, dword [rax + 0x40]
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x405ac4
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x405b05
push rbx
xor dword fs:[r9], r15d
pop rdi
pop r15
je 0x405b10
push rsp
jo 0x405b13
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405b03
jbe 0x405ac0
pop rdi
pop rdx
push rbx
je 0x405af6
pop rdi
pop rdi
je 0x405b32
jb 0x405b3b
ja 0x405b2d
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsi, dword [rsi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
xor dword [rdx + 0x49], edx
jbe 0x405b43
push rsp
pop rdi
jo 0x405b48
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
xor bl, byte [rdi + 0x52]
push rax
movsxd rax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x405b39
xor bl, byte [rdi + 0x44]
jae 0x405b82
jb 0x405b7f
jns 0x405b71
jne 0x405b8d
xor dword [rbp + 0x45], eax
cmp dword [rdi + 0x5f], ebx
jae 0x405b96
jb 0x405b93
jns 0x405b6f
push rax
jbe 0x405b80
pop rdi
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
imul ebp, dword gs:[esi + 0x5f], 0x63746163
push 0x58434040
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
je 0x405bb6
add byte [rdi + 0x5a], bl
xor dword [rdx + 0x49], edx
imul ecx, dword [rcx + 0x45], 0x54527645
pop rdi
jo 0x405bb8
push rsp
xor byte [rdi], bl
pop rdi
pop rdi
js 0x405be7
pop rdi
jo 0x405bd7
jb 0x405be7
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
imul esi, dword [rcx + rdi*2 + 0x5f], 0x40403076
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
outsb dx, byte [rsi]
ja 0x405bfd
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
push rbp
outsb dx, byte [rsi]
ja 0x405c0c
outsb dx, byte [rsi]
pop rdi
push rdx
jae 0x405c1f
insd dword [rdi], dx
pop r15
xor ebp, dword [rsi]
xor byte [rax], al
pop rdi
pop rdx
push rbx
je 0x405bf2
jbe 0x405c23
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
xor dword fs:[r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x405c3f
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x405c57
push rdx
jbe 0x405c2d
jo 0x405c3a
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push r11
je 0x405c2b
jbe 0x405c5c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
cmp byte fs:[r13 + 0x61], r13b
js 0x405c67
jae 0x405c73
jp 0x405c71
jbe 0x405c0f
pop rdi
pop rdx
push rbx
je 0x405c46
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x405c87
push rbx
xor dword fs:[r11], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405ca7
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x405cb0
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405ca4
xor dword fs:[r13 + 0x76], eax
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405ccb
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x405cd4
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405cc8
cmp dword fs:[r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x405cfb
jb 0x405cfe
movsxd rsi, dword [rcx + rcx*2 + 0x64]
push rdx
jbe 0x405ce6
push rsp
pop rdi
jo 0x405cea
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405d08
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x405d11
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405d05
xor r8b, byte fs:[rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x405cfa
xor bl, byte [rdi + 0x5f]
jne 0x405d3b
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x405d56
pop rdi
push r11
je 0x405d14
xor ebp, dword [rbp + 0x6f]
jbe 0x405d4d
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push r11
xor dword [rdi + 0x64], ebx
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor al, 0x5f
push rbx
xor ebx, dword [rdi + 0x52]
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x405d45
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405d7e
je 0x405d93
imul esi, dword [rbx + rsi*2 + 0x49], 0x64496153
jae 0x405da5
jb 0x405da2
jns 0x405d7e
jbe 0x405d8c
push rbx
xor byte [rdi + 0x50], bl
push rsp
pop rdi
add byte [rbp + 0x61], ch
imul ebp, dword [rsi], 0x534e5a5f
je 0x405d7d
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x405dbe
push rbx
xor dword fs:[r9], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rax], al
jae 0x405dee
insd dword [rdi], dx
je 0x405dd9
add byte [rsi], ch
jae 0x405df1
jb 0x405df3
add byte [rsi], ch
jae 0x405ded
jae 0x405dfb
jb 0x405dfd
add byte [rsi], ch
imul ebp, dword [rsi + 0x74], 0x707265
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x405dfe
sub rax, 0x676174
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x405e0c
outsb dx, byte cs:[esi]
jne 0x405dda
jne 0x405e18
insb byte [rdi], dx
sub eax, 0x2e006469
outsb dx, byte [esi]
jne 0x405de8
push 0x687361
jns 0x405e31
jae 0x405e3e
insd dword [rdi], dx
add byte [rsi], ch
jns 0x405e39
jae 0x405e41
jb 0x405dcf
outsb dx, byte cs:[esi]
jne 0x405e02
jbe 0x405e3b
jb 0x405e4b
imul ebp, dword [rdi + 0x6e], 0x6e672e00
jne 0x405e0f
jbe 0x405e48
jb 0x405e58
imul ebp, dword [rdi + 0x6e], 0x2e00725f
jb 0x405e53
insb byte [rdi], dx
jns 0x405e62
add byte [rsi], ch
jb 0x405e5d
insb byte [rdi], dx
jo 0x405e69
je 0x405dff
imul ebp, dword cs:[rsi + 0x69], 0x702e0074
insb byte [rdi], dx
je 0x405e38
outsd dx, dword [esi]
je 0x405e0e
je 0x405e76
js 0x405e87
add byte [rsi], ch
imul bp, word [rsi + 0x69], 0x2e00
jb 0x405e8c
je 0x405e82
add byte [rsi], ch
push 0x6172665f
insd dword [rdi], dx
pop rdi
push 0x2e007264
push 0x6172665f
insd dword [rdi], dx
add byte gs:[rsi], ch
movsxd rsp, dword [ebx + 0x5f]
js 0x405ea5
jo 0x405eb9
pop rdi
je 0x405ea9
insb byte [rdi], dx
add byte gs:[rsi], ch
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x405eb7
jns 0x405e58
imul bp, word cs:[rsi + 0x69], 0x615f
jb 0x405ed3
jns 0x405e64
push 0x63
jb 0x405e69
jns 0x405edb
insd dword [rdi], dx
imul esp, dword [rbx], 0x746f672e
jo 0x405ee5
je 0x405e7b
je 0x405ee1
add byte [rsi], ch
jae 0x405ef8
add byte [rsi], ch
movsxd rbp, dword [rdi + 0x6d]
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x405e8f
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add dh, dh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rax + 2], bl
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rdx], 0x40
add byte [rax], al
add byte [rax], al
add al, al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + 2], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x40], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dl
add byte [rax], al
add byte [rax], al
add dh, dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], 0
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, 0
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax + 7], cl
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x40000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4007], ah
add byte [rax], al
add byte [rax + 7], ah
add byte [rax], al
add al, cl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rip + 0x19000000], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 9], ch
add byte [rax], al
add byte [rax], al
add byte [rax + 9], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4009], dl
add byte [rax], al
add byte [rax + 9], dl
add byte [rax], al
add byte [rax + 1], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, esp
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
or al, byte [rax]
add byte [rax], al
add byte [rax], al
ror byte [rdx], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
popfq
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
or al, byte [rax]
add byte [rax], al
add byte [rax], al
loopne 0x406234
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000000], ah
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rdi + rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1000000], dh
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4020], al
add byte [rax], al
add byte [rax + 0x20], al
add byte [rax], al
add byte [rdx + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
and al, byte [rax]
add byte [rax], al
add byte [rax], al
clc
and al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx + rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + rbp + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rbp + rbp], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fild dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
sub eax, 0x60
add byte [rax], al
call 0x4063da
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ah
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
sub eax, 0x60
add byte [rax], al
clc
sub eax, 0
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte cs:[rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte cs:[rax], al
add byte [rax], al
add byte [rax], al
lock add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], bl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rcx], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add dword [rax], eax
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x6030], dh
add byte [rax], al
add byte [rax + 0x30], dh
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add dword [rax], eax
add byte [rax], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
xor byte [rax], ah
add byte [rax], al
add byte [rax], al
sal byte [rax], 0
add byte [rax], al
add byte [rax], al
add byte [rax - 0x7b], dl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x1000001
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
xor byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jno 0x406647
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
xor byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x15], ch
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs al, byte [0xd100000000000046]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
