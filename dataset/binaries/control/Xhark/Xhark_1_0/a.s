xor ebp, ebp
mov r9, rdx
pop rsi
mov rdx, rsp
and rsp, 0xfffffffffffffff0
push rax
push rsp
mov r8, sym.__libc_csu_fini
mov rcx, sym.__libc_csu_init
mov rdi, sym.main
call sym.imp.__libc_start_main
hlt
nop word [rax + rax]
mov eax, 0x607127
push rbp
sub rax, obj.stdin
cmp rax, 0xe
mov rbp, rsp
jbe 0x4011e0
mov eax, 0
test rax, rax
je 0x4011e0
pop rbp
mov edi, obj.stdin
jmp rax
nop word [rax + rax]
pop rbp
ret
nop dword [rax]
nop word cs:[rax + rax]
mov esi, obj.stdin
push rbp
sub rsi, obj.stdin
sar rsi, 3
mov rbp, rsp
mov rax, rsi
shr rax, 0x3f
add rsi, rax
sar rsi, 1
je 0x401228
mov eax, 0
test rax, rax
je 0x401228
pop rbp
mov edi, obj.stdin
jmp rax
nop dword [rax]
pop rbp
ret
nop word [rax + rax]
cmp byte [rip + 0x205f19], 0
jne 0x40124a
push rbp
mov rbp, rsp
call sym.deregister_tm_clones
pop rbp
mov byte [rip + 0x205f06], 1
ret
nop dword [rax]
mov edi, obj.__JCR_LIST__
cmp qword [rdi], 0
jne 0x401260
jmp sym.register_tm_clones
nop dword [rax]
mov eax, 0
test rax, rax
je 0x40125b
push rbp
mov rbp, rsp
call rax
pop rbp
jmp sym.register_tm_clones
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x110
mov qword [rbp - 0x108], rdi
mov dword [rbp - 0x10c], esi
mov dword [rbp - 0x110], edx
mov dword [rbp - 0x114], ecx
mov dword [rbp - 0x118], r8d
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
cmp dword [rbp - 0x10c], 1
jne 0x40139b
mov eax, dword [rbp - 0x110]
cmp eax, 1
jne 0x401309
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xe0]
mov rax, qword [rbp - 0x108]
mov esi, str.RYB____________Y______Rr_________
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x4018e5
mov eax, dword [rbp - 0x114]
cmp eax, 1
jne 0x401352
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xe0]
mov rax, qword [rbp - 0x108]
mov esi, 0x404b2b
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x4018e5
mov eax, dword [rbp - 0x118]
cmp eax, 1
jne 0x40139b
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xe0]
mov rax, qword [rbp - 0x108]
mov esi, 0x404b2d
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x4018e5
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::vector
lea rax, [rbp - 0x110]
mov esi, str.RYB____________Y______Rr_________
mov rdi, rax
call sym.std::make_pair_int__charconst____2__
mov ecx, eax
mov rax, rdx
mov dword [rbp - 0xf0], ecx
mov qword [rbp - 0xe8], rax
lea rdx, [rbp - 0xf0]
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::pair_int_charconst__void_
lea rdx, [rbp - 0xa0]
lea rax, [rbp - 0xe0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::push_back
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::_pair
lea rax, [rbp - 0x114]
mov esi, 0x404b2b
mov rdi, rax
call sym.std::make_pair_int__charconst____2__
mov ecx, eax
mov rax, rdx
mov dword [rbp - 0xf0], ecx
mov qword [rbp - 0xe8], rax
lea rdx, [rbp - 0xf0]
lea rax, [rbp - 0x70]
mov rsi, rdx
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::pair_int_charconst__void_
lea rdx, [rbp - 0x70]
lea rax, [rbp - 0xe0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::push_back
lea rax, [rbp - 0x70]
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::_pair
lea rax, [rbp - 0x118]
mov esi, 0x404b2d
mov rdi, rax
call sym.std::make_pair_int__charconst____2__
mov ecx, eax
mov rax, rdx
mov dword [rbp - 0xf0], ecx
mov qword [rbp - 0xe8], rax
lea rdx, [rbp - 0xf0]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::pair_int_charconst__void_
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0xe0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::push_back
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::_pair
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::end
mov rbx, rax
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::begin
mov rsi, rbx
mov rdi, rax
call sym.std::sort___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______
lea rax, [rbp - 0xf0]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xf0]
lea rax, [rbp - 0xc0]
mov esi, 0x404b2f
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xf0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
lea rax, [rbp - 0xe0]
mov esi, 2
mov rdi, rax
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::operator__
mov ebx, dword [rax]
lea rax, [rbp - 0xe0]
mov esi, 0
mov rdi, rax
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::operator__
mov r12d, dword [rax]
lea rax, [rbp - 0xe0]
mov esi, 1
mov rdi, rax
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::operator__
mov eax, dword [rax]
add eax, r12d
cmp ebx, eax
setg al
test al, al
je 0x4015bf
lea rax, [rbp - 0xf0]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xf0]
mov rax, qword [rbp - 0x108]
mov esi, 0x404b2f
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xf0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x4017dc
lea rax, [rbp - 0xe0]
mov esi, 2
mov rdi, rax
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::operator__
mov eax, dword [rax]
test eax, eax
setg al
test al, al
je 0x4017c3
lea rax, [rbp - 0xe0]
mov esi, 2
mov rdi, rax
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::operator__
lea rdx, [rax + 8]
lea rax, [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call 0x400ff0
lea rax, [rbp - 0xe0]
mov esi, 2
mov rdi, rax
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::operator__
mov edx, dword [rax]
sub edx, 1
mov dword [rax], edx
mov dword [rbp - 0xf8], 0
mov dword [rbp - 0xf4], 0
cmp dword [rbp - 0xf4], 1
jg 0x4016ed
mov eax, dword [rbp - 0xf4]
movsxd rdx, eax
lea rax, [rbp - 0xe0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::operator__
mov ebx, dword [rax]
lea rax, [rbp - 0xe0]
mov esi, 2
mov rdi, rax
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::operator__
mov eax, dword [rax]
cmp ebx, eax
setg al
test al, al
je 0x4016e1
mov eax, dword [rbp - 0xf4]
movsxd rdx, eax
lea rax, [rbp - 0xe0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::operator__
lea rdx, [rax + 8]
lea rax, [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call 0x400ff0
mov eax, dword [rbp - 0xf4]
movsxd rdx, eax
lea rax, [rbp - 0xe0]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::operator__
mov edx, dword [rax]
sub edx, 1
mov dword [rax], edx
mov dword [rbp - 0xf8], 1
add dword [rbp - 0xf4], 1
jmp 0x40163b
cmp dword [rbp - 0xf8], 0
jne 0x4015bf
lea rax, [rbp - 0xe0]
mov esi, 1
mov rdi, rax
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::operator__
mov ebx, dword [rax]
lea rax, [rbp - 0xe0]
mov esi, 0
mov rdi, rax
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::operator__
mov eax, dword [rax]
cmp ebx, eax
setle al
test al, al
je 0x401779
lea rax, [rbp - 0xe0]
mov esi, 0
mov rdi, rax
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::operator__
lea rdx, [rax + 8]
lea rax, [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call 0x400ff0
lea rax, [rbp - 0xe0]
mov esi, 0
mov rdi, rax
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::operator__
mov edx, dword [rax]
sub edx, 1
mov dword [rax], edx
jmp 0x4015bf
lea rax, [rbp - 0xe0]
mov esi, 1
mov rdi, rax
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::operator__
lea rdx, [rax + 8]
lea rax, [rbp - 0xc0]
mov rsi, rdx
mov rdi, rax
call 0x400ff0
lea rax, [rbp - 0xe0]
mov esi, 1
mov rdi, rax
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::operator__
mov edx, dword [rax]
sub edx, 1
mov dword [rax], edx
jmp 0x4015bf
lea rdx, [rbp - 0xc0]
mov rax, qword [rbp - 0x108]
mov rsi, rdx
mov rdi, rax
call 0x401000
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::_vector
jmp 0x4018e5
mov rbx, rax
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::_pair
jmp 0x4018cb
mov rbx, rax
lea rax, [rbp - 0x70]
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::_pair
jmp 0x4018cb
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::_pair
jmp 0x4018cb
mov rbx, rax
lea rax, [rbp - 0xf0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x4018cb
mov rbx, rax
lea rax, [rbp - 0xf0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x4018b7
mov rbx, rax
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x4018cb
mov rbx, rax
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::_vector
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rax, qword [rbp - 0x108]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x401900
call sym.imp.__stack_chk_fail
add rsp, 0x110
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0xd8
mov qword [rbp - 0xc8], rdi
mov dword [rbp - 0xcc], esi
mov dword [rbp - 0xd0], edx
mov dword [rbp - 0xd4], ecx
mov dword [rbp - 0xd8], r8d
mov dword [rbp - 0xdc], r9d
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
cmp dword [rbp - 0xcc], 1
jne 0x401b0b
mov eax, dword [rbp - 0xd0]
cmp eax, 1
jne 0x4019a4
lea rax, [rbp - 0xb6]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xb6]
mov rax, qword [rbp - 0xc8]
mov esi, str.RYB____________Y______Rr_________
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xb6]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x402203
mov eax, dword [rbp - 0xd8]
cmp eax, 1
jne 0x4019ed
lea rax, [rbp - 0xb6]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xb6]
mov rax, qword [rbp - 0xc8]
mov esi, 0x404b2b
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xb6]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x402203
mov eax, dword [rbp + 0x10]
cmp eax, 1
jne 0x401a33
lea rax, [rbp - 0xb6]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xb6]
mov rax, qword [rbp - 0xc8]
mov esi, 0x404b2d
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xb6]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x402203
mov eax, dword [rbp - 0xd4]
cmp eax, 1
jne 0x401a7c
lea rax, [rbp - 0xb6]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xb6]
mov rax, qword [rbp - 0xc8]
mov esi, 0x404b30
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xb6]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x402203
mov eax, dword [rbp - 0xdc]
cmp eax, 1
jne 0x401ac5
lea rax, [rbp - 0xb6]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xb6]
mov rax, qword [rbp - 0xc8]
mov esi, 0x404b32
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xb6]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x402203
mov eax, dword [rbp + 0x18]
cmp eax, 1
jne 0x401b0b
lea rax, [rbp - 0xb6]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xb6]
mov rax, qword [rbp - 0xc8]
mov esi, 0x404b34
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xb6]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x402203
lea rax, [rbp - 0xb6]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xb6]
lea rax, [rbp - 0x80]
mov esi, 0x404b2f
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xb6]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov dword [rbp - 0xb4], 0
cmp dword [rbp - 0xb4], 2
jg 0x401d82
lea rax, [rbp - 0xb6]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xb6]
lea rax, [rbp - 0x40]
mov esi, 0x404b2f
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xb6]
mov rdi, rax
call sym.std::allocator_char_::_allocator
cmp dword [rbp - 0xb4], 0
jne 0x401bc3
lea rax, [rbp + 0x18]
mov qword [rbp - 0xa0], rax
lea rax, [rbp - 0xd8]
mov qword [rbp - 0x98], rax
lea rax, [rbp - 0x40]
mov esi, 0x404b36
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator_
jmp 0x401c25
cmp dword [rbp - 0xb4], 1
jne 0x401bf8
lea rax, [rbp - 0xd4]
mov qword [rbp - 0xa0], rax
lea rax, [rbp + 0x10]
mov qword [rbp - 0x98], rax
lea rax, [rbp - 0x40]
mov esi, 0x404b39
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator_
jmp 0x401c25
lea rax, [rbp - 0xdc]
mov qword [rbp - 0xa0], rax
lea rax, [rbp - 0xd0]
mov qword [rbp - 0x98], rax
lea rax, [rbp - 0x40]
mov esi, 0x404b3c
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator_
mov rax, qword [rbp - 0xa0]
mov eax, dword [rax]
test eax, eax
jle 0x401d5b
mov rax, qword [rbp - 0x98]
mov edx, dword [rax]
mov rax, qword [rbp - 0xa0]
mov eax, dword [rax]
sub edx, eax
mov rax, qword [rbp - 0x98]
mov dword [rax], edx
mov rax, qword [rbp - 0x98]
mov eax, dword [rax]
test eax, eax
jne 0x401d0e
mov rax, qword [rbp - 0xa0]
mov eax, dword [rax]
add eax, eax
cmp eax, dword [rbp - 0xcc]
jne 0x401cce
mov dword [rbp - 0xb0], 0
mov rax, qword [rbp - 0xa0]
mov eax, dword [rax]
cmp eax, dword [rbp - 0xb0]
jle 0x401cae
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x80]
mov rsi, rdx
mov rdi, rax
call 0x400ff0
add dword [rbp - 0xb0], 1
jmp 0x401c81
lea rdx, [rbp - 0x80]
mov rax, qword [rbp - 0xc8]
mov rsi, rdx
mov rdi, rax
call 0x401000
mov ebx, 0
jmp 0x401d60
lea rax, [rbp - 0xb6]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xb6]
mov rax, qword [rbp - 0xc8]
mov esi, 0x404b2f
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xb6]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov ebx, 0
jmp 0x401d60
mov rax, qword [rbp - 0x98]
mov eax, dword [rax]
test eax, eax
jns 0x401d5b
lea rax, [rbp - 0xb6]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xb6]
mov rax, qword [rbp - 0xc8]
mov esi, 0x404b2f
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xb6]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov ebx, 0
jmp 0x401d60
mov ebx, 1
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
cmp ebx, 1
jne 0x402062
nop
add dword [rbp - 0xb4], 1
jmp 0x401b4b
mov edi, dword [rbp + 0x10]
mov ecx, dword [rbp - 0xd8]
mov edx, dword [rbp - 0xd0]
lea rax, [rbp - 0x40]
mov esi, dword [rbp - 0xcc]
mov r8d, edi
mov rdi, rax
call sym.solve2_abi:cxx11_
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x80]
mov rsi, rdx
mov rdi, rax
call 0x400fb0
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
test rax, rax
sete al
test al, al
je 0x401e19
lea rax, [rbp - 0xb6]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xb6]
mov rax, qword [rbp - 0xc8]
mov esi, 0x404b2f
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xb6]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x402062
mov dword [rbp - 0xac], 0
cmp dword [rbp - 0xac], 2
jg 0x40204c
lea rax, [rbp - 0xb6]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xb6]
lea rax, [rbp - 0x60]
mov esi, 0x404b2f
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xb6]
mov rdi, rax
call sym.std::allocator_char_::_allocator
cmp dword [rbp - 0xac], 0
jne 0x401e9b
lea rax, [rbp + 0x18]
mov qword [rbp - 0x90], rax
lea rax, [rbp - 0xd8]
mov qword [rbp - 0x88], rax
lea rax, [rbp - 0x60]
mov esi, 0x404b36
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator_
jmp 0x401efd
cmp dword [rbp - 0xac], 1
jne 0x401ed0
lea rax, [rbp - 0xd4]
mov qword [rbp - 0x90], rax
lea rax, [rbp + 0x10]
mov qword [rbp - 0x88], rax
lea rax, [rbp - 0x60]
mov esi, 0x404b39
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator_
jmp 0x401efd
lea rax, [rbp - 0xdc]
mov qword [rbp - 0x90], rax
lea rax, [rbp - 0xd0]
mov qword [rbp - 0x88], rax
lea rax, [rbp - 0x60]
mov esi, 0x404b3c
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator_
mov rax, qword [rbp - 0x90]
mov eax, dword [rax]
test eax, eax
jle 0x402034
lea rdx, [rbp - 0x80]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call 0x4010d0
mov byte [rbp - 0xb5], 1
lea rax, [rbp - 0x80]
mov esi, 0x404b2f
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator_
mov dword [rbp - 0xa8], 0
mov eax, dword [rbp - 0xa8]
movsxd rbx, eax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
cmp rbx, rax
setb al
test al, al
je 0x402028
mov eax, dword [rbp - 0xa8]
movsxd rdx, eax
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call 0x401140
movzx eax, byte [rax]
movsx edx, al
lea rax, [rbp - 0x80]
mov esi, edx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
cmp byte [rbp - 0xb5], 0
je 0x401fd5
mov eax, dword [rbp - 0xa8]
movsxd rdx, eax
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call 0x401140
movzx ebx, byte [rax]
lea rax, [rbp - 0x60]
mov esi, 1
mov rdi, rax
call 0x401140
movzx eax, byte [rax]
cmp bl, al
jne 0x401fd5
mov eax, 1
jmp 0x401fda
mov eax, 0
test al, al
je 0x40201c
mov dword [rbp - 0xa4], 0
mov rax, qword [rbp - 0x90]
mov eax, dword [rax]
cmp eax, dword [rbp - 0xa4]
jle 0x402015
lea rdx, [rbp - 0x60]
lea rax, [rbp - 0x80]
mov rsi, rdx
mov rdi, rax
call 0x400ff0
add dword [rbp - 0xa4], 1
jmp 0x401fe8
mov byte [rbp - 0xb5], 0
add dword [rbp - 0xa8], 1
jmp 0x401f43
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
add dword [rbp - 0xac], 1
jmp 0x401e23
lea rdx, [rbp - 0x80]
mov rax, qword [rbp - 0xc8]
mov rsi, rdx
mov rdi, rax
call 0x401000
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x402203
mov rbx, rax
lea rax, [rbp - 0xb6]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0xb6]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0xb6]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0xb6]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0xb6]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0xb6]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0xb6]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0xb6]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x4021ec
mov rbx, rax
lea rax, [rbp - 0xb6]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x402180
mov rbx, rax
lea rax, [rbp - 0xb6]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x402180
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x4021ec
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x4021ec
mov rbx, rax
lea rax, [rbp - 0xb6]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x4021ec
mov rbx, rax
lea rax, [rbp - 0xb6]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x4021ec
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x4021db
mov rbx, rax
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x4021ec
mov rbx, rax
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rax, qword [rbp - 0xc8]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x40221e
call sym.imp.__stack_chk_fail
add rsp, 0xd8
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x58
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rip + 0x204ed9]
mov rdx, rax
mov esi, 0x404b3f
mov edi, 0x404b41
call sym.imp.freopen
mov rax, qword [rip + 0x204ee8]
mov rdx, rax
mov esi, 0x404b55
mov edi, str.B_small_attempt0.out
call sym.imp.freopen
lea rax, [rbp - 0x60]
mov rsi, rax
mov edi, 0x404b6c
mov eax, 0
call sym.imp.scanf
mov eax, dword [rbp - 0x60]
lea edx, [rax - 1]
mov dword [rbp - 0x60], edx
test eax, eax
setg al
test al, al
je 0x4023ec
lea r8, [rbp - 0x4c]
lea rdi, [rbp - 0x50]
lea rcx, [rbp - 0x54]
lea rdx, [rbp - 0x58]
lea rax, [rbp - 0x5c]
lea rsi, [rbp - 0x44]
push rsi
lea rsi, [rbp - 0x48]
push rsi
mov r9, r8
mov r8, rdi
mov rsi, rax
mov edi, str._d__d__d__d__d__d__d
mov eax, 0
call sym.imp.scanf
add rsp, 0x10
mov r8d, dword [rbp - 0x44]
mov edi, dword [rbp - 0x48]
mov r9d, dword [rbp - 0x4c]
mov r10d, dword [rbp - 0x50]
mov ecx, dword [rbp - 0x54]
mov edx, dword [rbp - 0x58]
mov esi, dword [rbp - 0x5c]
lea rax, [rbp - 0x40]
push r8
push rdi
mov r8d, r10d
mov rdi, rax
call sym.solve_abi:cxx11_
add rsp, 0x10
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
test rax, rax
sete al
test al, al
je 0x40232f
lea rax, [rbp - 0x40]
mov esi, str.IMPOSSIBLE
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator_
jmp 0x4023a9
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
mov rdx, rax
mov eax, dword [rbp - 0x5c]
cdqe
cmp rdx, rax
setne al
test al, al
je 0x4023a9
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::c_str
mov rbx, rax
mov r9d, dword [rbp - 0x44]
mov r8d, dword [rbp - 0x48]
mov edi, dword [rbp - 0x4c]
mov esi, dword [rbp - 0x50]
mov r11d, dword [rbp - 0x54]
mov r10d, dword [rbp - 0x58]
mov ecx, dword [rbp - 0x5c]
mov edx, dword [rip + 0x204d9d]
mov rax, qword [rip + 0x204dbe]
sub rsp, 8
push rbx
push r9
push r8
push rdi
push rsi
mov r9d, r11d
mov r8d, r10d
mov esi, str.ERROR__d_:__d__d__d__d__d__d__d_____s_n
mov rdi, rax
mov eax, 0
call sym.imp.fprintf
add rsp, 0x30
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::c_str
mov rcx, rax
mov eax, dword [rip + 0x204d5a]
lea edx, [rax + 1]
mov dword [rip + 0x204d51], edx
mov rdx, rcx
mov esi, eax
mov edi, str.Case___d:__s_n
mov eax, 0
call sym.imp.printf
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x402288
mov eax, 0
mov rbx, qword [rbp - 0x18]
xor rbx, qword fs:[0x28]
je 0x402421
jmp 0x40241c
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
pop rbp
ret
push rbp
mov rbp, rsp
pop rbp
ret
push rbp
mov rbp, rsp
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov edx, 0x40
mov rax, qword [rbp - 8]
bsr rax, rax
xor rax, 0x3f
cdqe
sub rdx, rax
mov rax, rdx
sub rax, 1
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_int__
mov edx, dword [rax]
mov rax, qword [rbp - 8]
mov dword [rax], edx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov qword [rbp - 0x48], rdi
mov qword [rbp - 0x50], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x50]
mov rdi, rax
call sym.std::forward_charconst____2__
mov qword [rbp - 0x38], rax
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::forward_int__
mov rcx, rax
lea rdx, [rbp - 0x38]
lea rax, [rbp - 0x30]
mov rsi, rcx
mov rdi, rax
call sym.std::pair_int_charconst__::pair_int__void_
mov rax, qword [rbp - 0x30]
mov rdx, qword [rbp - 0x28]
mov rcx, rax
mov rbx, rdx
mov eax, ecx
mov rbx, qword [rbp - 0x18]
xor rbx, qword fs:[0x28]
je 0x40253e
call sym.imp.__stack_chk_fail
add rsp, 0x48
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::forward_int_
mov edx, dword [rax]
mov rax, qword [rbp - 0x28]
mov dword [rax], edx
lea rax, [rbp - 0x19]
mov rdi, rax
call sym.std::allocator_char_::allocator
mov rax, qword [rbp - 0x30]
add rax, 8
mov rdi, rax
call sym.std::forward_charconst__
mov rax, qword [rax]
mov rdx, qword [rbp - 0x28]
lea rcx, [rdx + 8]
lea rdx, [rbp - 0x19]
mov rsi, rax
mov rdi, rcx
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0x19]
mov rdi, rax
call sym.std::allocator_char_::_allocator
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x402609
jmp 0x402604
mov rbx, rax
lea rax, [rbp - 0x19]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
add rax, 8
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::_Vector_base
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::move_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::emplace_back_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______::__normal_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x402716
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
lea rdx, [rax + 8]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______::__normal_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x402762
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x30], rdi
mov qword [rbp - 0x40], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
call sym.__gnu_cxx::__ops::__iter_less_iter
mov rdx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x30]
sub rsp, 8
push rbx
mov rsi, rdx
mov rdi, rax
call sym.std::__sort___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x4027ba
call sym.imp.__stack_chk_fail
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rdx, qword [rbp - 0x10]
mov rax, rdx
shl rax, 2
add rax, rdx
shl rax, 3
add rax, rcx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::_Vector_impl::_Vector_impl
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
movabs rax, 0xcccccccccccccccd
imul rax, rdx
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::_Vector_impl::__Vector_impl
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
cmp rdx, rax
je 0x40292b
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::construct_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
lea rdx, [rax + 0x28]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
jmp 0x402949
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::_M_emplace_back_aux_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
lea rdx, [rbp - 0x30]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call 0x402d00
test al, al
je 0x4029eb
lea rdx, [rbp - 0x20]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator__std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______
mov rdi, rax
call sym.std::__lg
lea rdx, [rax + rax]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
sub rsp, 8
push r12
mov rsi, rcx
mov rdi, rax
call sym.std::__introsort_loop___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______long___gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
sub rsp, 8
push rbx
mov rsi, rdx
mov rdi, rax
call sym.std::__final_insertion_sort___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
nop
lea rsp, [rbp - 0x10]
pop rbx
pop r12
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::allocator
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x402a82
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_false_::__destroy_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rdx, rax
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::construct_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov rax, qword [rbp - 0x38]
mov edx, str.vector::_M_emplace_back_aux
mov esi, 1
mov rdi, rax
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::_M_check_len
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::_M_allocate
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::forward_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::size
mov rdx, rax
mov rax, rdx
shl rax, 2
add rax, rdx
shl rax, 3
mov rdx, rax
mov rax, qword [rbp - 0x18]
lea rcx, [rdx + rax]
mov rax, qword [rbp - 0x38]
mov rdx, rbx
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::construct_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
mov qword [rbp - 0x28], 0
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::_M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 0x38]
mov rsi, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__uninitialized_move_if_noexcept_a_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
mov qword [rbp - 0x28], rax
add qword [rbp - 0x28], 0x28
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
movabs rax, 0xcccccccccccccccd
imul rax, rdx
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax]
mov rax, qword [rbp - 0x38]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::_M_deallocate
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x18]
mov qword [rax], rdx
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x28]
mov qword [rax + 8], rdx
mov rdx, qword [rbp - 0x20]
mov rax, rdx
shl rax, 2
add rax, rdx
shl rax, 3
mov rdx, rax
mov rax, qword [rbp - 0x18]
add rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 0x10], rdx
jmp 0x402cf9
mov rdi, rax
call sym.imp.__cxa_begin_catch
cmp qword [rbp - 0x28], 0
jne 0x402ca8
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::size
mov rdx, rax
mov rax, rdx
shl rax, 2
add rax, rdx
shl rax, 3
mov rdx, rax
mov rax, qword [rbp - 0x18]
add rdx, rax
mov rax, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::destroy_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
jmp 0x402cca
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::_M_get_Tp_allocator
mov rdx, rax
mov rcx, qword [rbp - 0x28]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::_M_deallocate
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______::base
mov rbx, qword [rax]
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______::base
mov rax, qword [rax]
cmp rbx, rax
setne al
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______::base
mov rax, qword [rax]
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______::base
mov rax, qword [rax]
sub rbx, rax
mov rax, rbx
sar rax, 3
mov rdx, rax
movabs rax, 0xcccccccccccccccd
imul rax, rdx
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x38
mov qword [rbp - 0x40], rdi
mov qword [rbp - 0x50], rsi
mov qword [rbp - 0x48], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator__std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______
cmp rax, 0x10
setg al
test al, al
je 0x402e53
cmp qword [rbp - 0x48], 0
jne 0x402e00
mov rdx, qword [rbp - 0x50]
mov rcx, qword [rbp - 0x50]
mov rax, qword [rbp - 0x40]
sub rsp, 8
push r13
mov rsi, rcx
mov rdi, rax
call sym.std::__partial_sort___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
jmp 0x402e53
sub qword [rbp - 0x48], 1
mov rdx, qword [rbp - 0x50]
mov rax, qword [rbp - 0x40]
sub rsp, 8
push r12
mov rsi, rdx
mov rdi, rax
call sym.std::__unguarded_partition_pivot___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
mov qword [rbp - 0x30], rax
mov rdx, qword [rbp - 0x48]
mov rcx, qword [rbp - 0x50]
mov rax, qword [rbp - 0x30]
sub rsp, 8
push rbx
mov rsi, rcx
mov rdi, rax
call sym.std::__introsort_loop___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______long___gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
mov rax, qword [rbp - 0x30]
mov qword [rbp - 0x50], rax
jmp 0x402db8
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x402e67
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x18]
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x28
mov qword [rbp - 0x30], rdi
mov qword [rbp - 0x40], rsi
lea rdx, [rbp - 0x30]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator__std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______
cmp rax, 0x10
setg al
test al, al
je 0x402f01
lea rax, [rbp - 0x30]
mov esi, 0x10
mov rdi, rax
call 0x403368
mov rdx, rax
mov rax, qword [rbp - 0x30]
sub rsp, 8
push r13
mov rsi, rdx
mov rdi, rax
call sym.std::__insertion_sort___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
lea rax, [rbp - 0x30]
mov esi, 0x10
mov rdi, rax
call 0x403368
mov rdx, rax
mov rax, qword [rbp - 0x40]
sub rsp, 8
push r12
mov rsi, rax
mov rdi, rdx
call sym.std::__unguarded_insertion_sort___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
jmp 0x402f1d
mov rdx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x30]
sub rsp, 8
push rbx
mov rsi, rdx
mov rdi, rax
call sym.std::__insertion_sort___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
nop
lea rsp, [rbp - 0x18]
pop rbx
pop r12
pop r13
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
cmp rax, qword [rbp - 0x10]
je 0x402fb4
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__addressof_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rdi, rax
call sym.std::_Destroy_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
add qword [rbp - 8], 0x28
jmp 0x402f8f
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov edx, dword [rax]
mov rax, qword [rbp - 8]
mov dword [rax], edx
mov rax, qword [rbp - 0x10]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
add rax, 8
mov rsi, rdx
mov rdi, rax
call 0x401000
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rsi, rax
mov edi, 0x28
call 0x402460
test rax, rax
je 0x403037
mov rsi, rbx
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::pair
nop
add rsp, 0x28
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x48], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::max_size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::size
sub rbx, rax
mov rdx, rbx
mov rax, qword [rbp - 0x40]
cmp rdx, rax
setb al
test al, al
je 0x40309f
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::__throw_length_error
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::size
mov qword [rbp - 0x28], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::max_unsignedlong_
mov rax, qword [rax]
add rax, rbx
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::size
cmp rax, qword [rbp - 0x20]
ja 0x4030ff
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::max_size
cmp rax, qword [rbp - 0x20]
jae 0x40310d
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::max_size
jmp 0x403111
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x403125
call sym.imp.__stack_chk_fail
add rsp, 0x48
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x403158
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::allocate
jmp 0x40315d
mov eax, 0
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
movabs rax, 0xcccccccccccccccd
imul rax, rdx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::move_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::move_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______
mov rdi, rax
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
mov rcx, rdx
mov rdx, rax
mov rsi, rbx
call sym.std::__uninitialized_copy_a_std::move_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::destroy_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x40], rdx
mov rdx, qword [rbp - 0x40]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
sub rsp, 8
push r8
mov rsi, rcx
mov rdi, rax
call sym.std::__heap_select___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
sub rsp, 8
push rbx
mov rsi, rdx
mov rdi, rax
call sym.std::__sort_heap___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
nop
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x38
mov qword [rbp - 0x40], rdi
mov qword [rbp - 0x50], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator__std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
mov rdx, rax
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call 0x403368
mov qword [rbp - 0x30], rax
lea rax, [rbp - 0x50]
mov esi, 1
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______::operator_
mov rbx, rax
lea rax, [rbp - 0x40]
mov esi, 1
mov rdi, rax
call 0x403368
mov rsi, rax
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x40]
sub rsp, 8
push r13
mov rcx, rbx
mov rdi, rax
call sym.std::__move_median_to_first___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
lea rax, [rbp - 0x40]
mov esi, 1
mov rdi, rax
call 0x403368
mov rcx, rax
mov rdx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x50]
sub rsp, 8
push r12
mov rsi, rax
mov rdi, rcx
call sym.std::__unguarded_partition___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
mov rbx, qword [rbp - 0x28]
xor rbx, qword fs:[0x28]
je 0x40335d
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x18]
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rcx, qword [rax]
mov rdx, qword [rbp - 0x30]
mov rax, rdx
shl rax, 2
add rax, rdx
shl rax, 3
add rax, rcx
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4033d2
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x68
mov qword [rbp - 0x70], rdi
mov qword [rbp - 0x80], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
lea rdx, [rbp - 0x80]
lea rax, [rbp - 0x70]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator___std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______
test al, al
jne 0x403530
lea rax, [rbp - 0x70]
mov esi, 1
mov rdi, rax
call 0x403368
mov qword [rbp - 0x60], rax
lea rdx, [rbp - 0x80]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call 0x402d00
test al, al
je 0x403531
mov rdx, qword [rbp - 0x70]
mov rax, qword [rbp - 0x60]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator_____gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______
test al, al
je 0x4034e0
lea rax, [rbp - 0x60]
mov rdi, rax
call 0x403ba0
mov rdi, rax
call sym.std::move_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
mov rdx, rax
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::pair
lea rax, [rbp - 0x60]
mov esi, 1
mov rdi, rax
call 0x403368
mov rdx, rax
mov rcx, qword [rbp - 0x60]
mov rax, qword [rbp - 0x70]
mov rsi, rcx
mov rdi, rax
call sym.std::move_backward___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::move_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
mov rbx, rax
lea rax, [rbp - 0x70]
mov rdi, rax
call 0x403ba0
mov rsi, rbx
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::operator_
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::_pair
jmp 0x403505
sub rsp, 8
push r13
call sym.__gnu_cxx::__ops::__val_comp_iter
add rsp, 0x10
mov rax, qword [rbp - 0x60]
sub rsp, 8
push r12
mov rdi, rax
call sym.std::__unguarded_linear_insert___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__ops::_Val_less_iter_
add rsp, 0x10
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______::operator__
jmp 0x403428
mov rbx, rax
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::_pair
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
nop
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x403545
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x18]
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x30
mov qword [rbp - 0x30], rdi
mov qword [rbp - 0x40], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x30]
mov qword [rbp - 0x20], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call 0x402d00
test al, al
je 0x4035c3
sub rsp, 8
push r12
call sym.__gnu_cxx::__ops::__val_comp_iter
add rsp, 0x10
mov rax, qword [rbp - 0x20]
sub rsp, 8
push rbx
mov rdi, rax
call sym.std::__unguarded_linear_insert___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__ops::_Val_less_iter_
add rsp, 0x10
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______::operator__
jmp 0x40357a
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x4035d8
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x10]
pop rbx
pop r12
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::_pair
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Vector_base_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____._M_get_Tp_allocator
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::max_size
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 0x10]
mov rax, qword [rax]
cmp rdx, rax
jae 0x403681
mov rax, qword [rbp - 0x10]
jmp 0x403685
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::allocate
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::move_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::move_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4036f7
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 8], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_copy_std::move_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::_pair
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov qword [rbp - 0x30], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x50], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rdx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x30]
sub rsp, 8
push rcx
mov rsi, rdx
mov rdi, rax
call sym.std::__make_heap___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
mov rax, qword [rbp - 0x40]
mov qword [rbp - 0x20], rax
lea rdx, [rbp - 0x50]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call 0x403fc8
test al, al
je 0x4037ee
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator_____gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______
test al, al
je 0x4037e0
mov rdx, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x30]
sub rsp, 8
push rbx
mov rsi, rcx
mov rdi, rax
call sym.std::__pop_heap___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
lea rax, [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______::operator__
jmp 0x403791
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x403803
call sym.imp.__stack_chk_fail
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
lea rdx, [rbp - 0x20]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator__std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______
cmp rax, 1
setg al
test al, al
je 0x403866
lea rax, [rbp - 0x30]
mov rdi, rax
call 0x40414c
mov rdx, qword [rbp - 0x30]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
sub rsp, 8
push rbx
mov rsi, rcx
mov rdi, rax
call sym.std::__pop_heap___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
jmp 0x40381a
nop
mov rbx, qword [rbp - 8]
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rcx, qword [rax]
mov rdx, qword [rbp - 0x30]
mov rax, rdx
shl rax, 2
add rax, rdx
shl rax, 3
neg rax
add rax, rcx
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4038db
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x40
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x30], rdx
mov qword [rbp - 0x40], rcx
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator_____gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______
test al, al
je 0x403982
mov rdx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x30]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator_____gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______
test al, al
je 0x40393d
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______
jmp 0x4039ef
mov rdx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x20]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator_____gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______
test al, al
je 0x40396d
mov rdx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______
jmp 0x4039ef
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______
jmp 0x4039ef
mov rdx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x20]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator_____gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______
test al, al
je 0x4039af
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______
jmp 0x4039ef
mov rdx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x30]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator_____gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______
test al, al
je 0x4039dc
mov rdx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______
jmp 0x4039ef
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x30], rdx
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x10]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator_____gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______
test al, al
je 0x403a2c
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______::operator__
jmp 0x403a06
lea rax, [rbp - 0x20]
mov rdi, rax
call 0x40414c
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x30]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator_____gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______
test al, al
je 0x403a5e
lea rax, [rbp - 0x20]
mov rdi, rax
call 0x40414c
jmp 0x403a38
lea rdx, [rbp - 0x20]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call 0x403fc8
xor eax, 1
test al, al
je 0x403a7e
mov rax, qword [rbp - 0x10]
jmp 0x403aa2
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::iter_swap___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______::operator__
jmp 0x403a06
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______::base
mov rbx, qword [rax]
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______::base
mov rax, qword [rax]
cmp rbx, rax
sete al
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
lea rdx, [rax + 0x28]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov edx, dword [rax]
mov rax, qword [rbp - 0x10]
mov eax, dword [rax]
cmp edx, eax
jl 0x403b4f
mov rax, qword [rbp - 0x10]
mov edx, dword [rax]
mov rax, qword [rbp - 8]
mov eax, dword [rax]
cmp edx, eax
jl 0x403b56
mov rax, qword [rbp - 0x10]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
add rax, 8
mov rsi, rdx
mov rdi, rax
call sym.std::operator__char_std::char_traits_char__std::allocator_char__
test al, al
je 0x403b56
mov eax, 1
jmp 0x403b5b
mov eax, 0
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x30], rdx
lea rax, [rbp - 0x30]
mov rdi, rax
call 0x403ba0
mov rbx, rax
lea rax, [rbp - 0x20]
mov rdi, rax
call 0x403ba0
mov rsi, rbx
mov rdi, rax
call sym.std::operator__int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x40], rdx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::__miter_base___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__miter_base___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______
mov rcx, rax
mov rax, qword [rbp - 0x40]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::__copy_move_backward_a2_true___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::forward_int_
mov edx, dword [rax]
mov rax, qword [rbp - 8]
mov dword [rax], edx
mov rax, qword [rbp - 0x10]
add rax, 8
mov rdi, rax
call sym.std::forward_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
mov rdx, rax
mov rax, qword [rbp - 8]
add rax, 8
mov rsi, rdx
mov rdi, rax
call 0x400fb0
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x58
mov qword [rbp - 0x60], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
lea rax, [rbp - 0x60]
mov rdi, rax
call 0x403ba0
mov rdi, rax
call sym.std::move_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
mov rdx, rax
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::pair
mov rax, qword [rbp - 0x60]
mov qword [rbp - 0x50], rax
lea rax, [rbp - 0x50]
mov rdi, rax
call 0x40414c
mov rdx, qword [rbp - 0x50]
lea rax, [rbp - 0x40]
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Val_less_iter::operator___std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______
test al, al
je 0x403d0e
lea rax, [rbp - 0x50]
mov rdi, rax
call 0x403ba0
mov rdi, rax
call sym.std::move_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
mov rbx, rax
lea rax, [rbp - 0x60]
mov rdi, rax
call 0x403ba0
mov rsi, rbx
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::operator_
mov rax, qword [rbp - 0x50]
mov qword [rbp - 0x60], rax
lea rax, [rbp - 0x50]
mov rdi, rax
call 0x40414c
jmp 0x403cb2
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::move_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
mov rbx, rax
lea rax, [rbp - 0x60]
mov rdi, rax
call 0x403ba0
mov rsi, rbx
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::operator_
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::_pair
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x403d71
jmp 0x403d6c
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::_pair
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x58
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::max_size
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x403dd0
call sym.std::__throw_bad_alloc
mov rdx, qword [rbp - 0x10]
mov rax, rdx
shl rax, 2
add rax, rdx
shl rax, 3
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_copy_false_::__uninit_copy_std::move_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0xa0
mov qword [rbp - 0xa0], rdi
mov qword [rbp - 0xb0], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
lea rdx, [rbp - 0xa0]
lea rax, [rbp - 0xb0]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator__std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______
cmp rax, 1
setle al
test al, al
jne 0x403faa
lea rdx, [rbp - 0xa0]
lea rax, [rbp - 0xb0]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator__std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______
mov qword [rbp - 0x78], rax
mov rax, qword [rbp - 0x78]
sub rax, 2
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
mov qword [rbp - 0x80], rax
mov rdx, qword [rbp - 0x80]
lea rax, [rbp - 0xa0]
mov rsi, rdx
mov rdi, rax
call 0x403368
mov qword [rbp - 0x90], rax
lea rax, [rbp - 0x90]
mov rdi, rax
call 0x403ba0
mov rdi, rax
call sym.std::move_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
mov rdx, rax
lea rax, [rbp - 0x70]
mov rsi, rdx
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::pair
lea rax, [rbp - 0x70]
mov rdi, rax
call sym.std::move_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
mov rdx, rax
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::pair
lea rcx, [rbp - 0x40]
mov rdx, qword [rbp - 0x78]
mov rsi, qword [rbp - 0x80]
mov rax, qword [rbp - 0xa0]
sub rsp, 8
push r12
mov rdi, rax
call sym.std::__adjust_heap___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______long_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::_pair
cmp qword [rbp - 0x80], 0
jne 0x403f63
mov ebx, 0
jmp 0x403f6d
sub qword [rbp - 0x80], 1
mov ebx, 1
lea rax, [rbp - 0x70]
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::_pair
cmp ebx, 1
jne 0x403fab
nop
jmp 0x403ec0
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::_pair
lea rax, [rbp - 0x70]
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::_pair
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x403fbf
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x10]
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______::base
mov rbx, qword [rax]
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______::base
mov rax, qword [rax]
cmp rbx, rax
setb al
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x90
mov qword [rbp - 0x80], rdi
mov qword [rbp - 0x90], rsi
mov qword [rbp - 0xa0], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
lea rax, [rbp - 0xa0]
mov rdi, rax
call 0x403ba0
mov rdi, rax
call sym.std::move_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
mov rdx, rax
lea rax, [rbp - 0x70]
mov rsi, rdx
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::pair
lea rax, [rbp - 0x80]
mov rdi, rax
call 0x403ba0
mov rdi, rax
call sym.std::move_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
mov rbx, rax
lea rax, [rbp - 0xa0]
mov rdi, rax
call 0x403ba0
mov rsi, rbx
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::operator_
lea rax, [rbp - 0x70]
mov rdi, rax
call sym.std::move_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
mov rdx, rax
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::pair
lea rdx, [rbp - 0x80]
lea rax, [rbp - 0x90]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator__std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______
mov rsi, rax
lea rdx, [rbp - 0x40]
mov rax, qword [rbp - 0x80]
sub rsp, 8
push r12
mov rcx, rdx
mov rdx, rsi
mov esi, 0
mov rdi, rax
call sym.std::__adjust_heap___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______long_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______gnu_cxx::__ops::_Iter_less_iter_
add rsp, 0x10
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::_pair
lea rax, [rbp - 0x70]
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::_pair
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x404143
jmp 0x40413e
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::_pair
jmp 0x404127
mov rbx, rax
lea rax, [rbp - 0x70]
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::_pair
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x10]
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
lea rdx, [rax - 0x28]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
lea rax, [rbp - 0x30]
mov rdi, rax
call 0x403ba0
mov rbx, rax
lea rax, [rbp - 0x20]
mov rdi, rax
call 0x403ba0
mov rsi, rbx
mov rdi, rax
call sym.std::swap_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
nop
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::compare
shr eax, 0x1f
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Iter_base___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______false_::_S_base
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x50
mov qword [rbp - 0x40], rdi
mov qword [rbp - 0x50], rsi
mov qword [rbp - 0x60], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x60]
mov rdi, rax
call sym.std::__niter_base___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______
mov r12, rax
mov rax, qword [rbp - 0x50]
mov rdi, rax
call sym.std::__niter_base___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______
mov rbx, rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::__niter_base___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::__copy_move_backward_a_true_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
mov qword [rbp - 0x20], rax
lea rdx, [rbp - 0x20]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______::__normal_iterator
mov rax, qword [rbp - 0x30]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x40427a
call sym.imp.__stack_chk_fail
add rsp, 0x50
pop rbx
pop r12
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x20], rdx
lea rax, [rbp - 0x20]
mov rdi, rax
call 0x403ba0
mov rdx, rax
mov rax, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::operator__int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0x666666666666666
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x30], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword [rbp - 0x38]
mov qword [rbp - 0x18], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::operator___std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
test al, al
je 0x404339
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::operator_
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__addressof_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rsi, rbx
mov rdi, rax
call sym.std::_Construct_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::operator__
add qword [rbp - 0x18], 0x28
jmp 0x4042e9
mov rax, qword [rbp - 0x18]
jmp 0x404372
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x88
mov qword [rbp - 0x90], rdi
mov qword [rbp - 0x88], rsi
mov qword [rbp - 0x98], rdx
mov qword [rbp - 0xa0], rcx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
mov rax, qword [rbp - 0x88]
mov qword [rbp - 0x58], rax
mov rax, qword [rbp - 0x88]
mov qword [rbp - 0x60], rax
mov rax, qword [rbp - 0x98]
sub rax, 1
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
cmp rax, qword [rbp - 0x60]
jle 0x4044bb
mov rax, qword [rbp - 0x60]
add rax, 1
add rax, rax
mov qword [rbp - 0x60], rax
mov rax, qword [rbp - 0x60]
lea rdx, [rax - 1]
lea rax, [rbp - 0x90]
mov rsi, rdx
mov rdi, rax
call 0x403368
mov rbx, rax
mov rdx, qword [rbp - 0x60]
lea rax, [rbp - 0x90]
mov rsi, rdx
mov rdi, rax
call 0x403368
mov rdx, rbx
mov rsi, rax
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_iter::operator_____gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______
test al, al
je 0x404446
sub qword [rbp - 0x60], 1
mov rdx, qword [rbp - 0x60]
lea rax, [rbp - 0x90]
mov rsi, rdx
mov rdi, rax
call 0x403368
mov qword [rbp - 0x70], rax
lea rax, [rbp - 0x70]
mov rdi, rax
call 0x403ba0
mov rdi, rax
call sym.std::move_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
mov rbx, rax
mov rdx, qword [rbp - 0x88]
lea rax, [rbp - 0x90]
mov rsi, rdx
mov rdi, rax
call 0x403368
mov qword [rbp - 0x80], rax
lea rax, [rbp - 0x80]
mov rdi, rax
call 0x403ba0
mov rsi, rbx
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::operator_
mov rax, qword [rbp - 0x60]
mov qword [rbp - 0x88], rax
jmp 0x4043ca
mov rax, qword [rbp - 0x98]
and eax, 1
test rax, rax
jne 0x404577
mov rax, qword [rbp - 0x98]
sub rax, 2
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
cmp rax, qword [rbp - 0x60]
jne 0x404577
mov rax, qword [rbp - 0x60]
add rax, 1
add rax, rax
mov qword [rbp - 0x60], rax
mov rax, qword [rbp - 0x60]
lea rdx, [rax - 1]
lea rax, [rbp - 0x90]
mov rsi, rdx
mov rdi, rax
call 0x403368
mov qword [rbp - 0x70], rax
lea rax, [rbp - 0x70]
mov rdi, rax
call 0x403ba0
mov rdi, rax
call sym.std::move_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
mov rbx, rax
mov rdx, qword [rbp - 0x88]
lea rax, [rbp - 0x90]
mov rsi, rdx
mov rdi, rax
call 0x403368
mov qword [rbp - 0x80], rax
lea rax, [rbp - 0x80]
mov rdi, rax
call 0x403ba0
mov rsi, rbx
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::operator_
mov rax, qword [rbp - 0x60]
sub rax, 1
mov qword [rbp - 0x88], rax
sub rsp, 8
push r13
call sym.__gnu_cxx::__ops::__iter_comp_val
add rsp, 0x10
mov rax, qword [rbp - 0xa0]
mov rdi, rax
call sym.std::move_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
mov rdx, rax
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::pair
lea rcx, [rbp - 0x50]
mov rdx, qword [rbp - 0x58]
mov rsi, qword [rbp - 0x88]
mov rax, qword [rbp - 0x90]
sub rsp, 8
push r12
mov rdi, rax
call sym.std::__push_heap___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______long_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______gnu_cxx::__ops::_Iter_less_val_
add rsp, 0x10
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::_pair
nop
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x40460c
jmp 0x404607
mov rbx, rax
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::_pair
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
lea rsp, [rbp - 0x18]
pop rbx
pop r12
pop r13
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::swap
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Iter_base___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______true_::_S_base
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 0
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__copy_move_backward_true_false_std::random_access_iterator_tag_::__copy_move_b_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call 0x404975
xor eax, 1
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
lea rdx, [rax + 0x28]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rax
mov edi, 0x28
call 0x402460
test rax, rax
je 0x404730
mov rsi, rbx
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::pair
nop
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x58
mov qword [rbp - 0x50], rdi
mov qword [rbp - 0x48], rsi
mov qword [rbp - 0x58], rdx
mov qword [rbp - 0x60], rcx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x48]
sub rax, 1
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x48]
cmp rax, qword [rbp - 0x58]
jle 0x4047b7
mov rdx, qword [rbp - 0x20]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call 0x403368
mov rcx, rax
mov rax, qword [rbp - 0x60]
mov rdx, rax
mov rsi, rcx
lea rdi, [rbp + 0x10]
call sym.__gnu_cxx::__ops::_Iter_less_val::operator_____gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
test al, al
je 0x4047b7
mov eax, 1
jmp 0x4047bc
mov eax, 0
test al, al
je 0x404846
mov rdx, qword [rbp - 0x20]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call 0x403368
mov qword [rbp - 0x30], rax
lea rax, [rbp - 0x30]
mov rdi, rax
call 0x403ba0
mov rdi, rax
call sym.std::move_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
mov rbx, rax
mov rdx, qword [rbp - 0x48]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call 0x403368
mov qword [rbp - 0x40], rax
lea rax, [rbp - 0x40]
mov rdi, rax
call 0x403ba0
mov rsi, rbx
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::operator_
mov rax, qword [rbp - 0x20]
mov qword [rbp - 0x48], rax
mov rax, qword [rbp - 0x48]
sub rax, 1
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
mov qword [rbp - 0x20], rax
jmp 0x404779
mov rax, qword [rbp - 0x60]
mov rdi, rax
call sym.std::move_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
mov rbx, rax
mov rdx, qword [rbp - 0x48]
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call 0x403368
mov qword [rbp - 0x30], rax
lea rax, [rbp - 0x30]
mov rdi, rax
call 0x403ba0
mov rsi, rbx
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::operator_
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x404898
call sym.imp.__stack_chk_fail
add rsp, 0x58
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::swap_int_
mov rax, qword [rbp - 0x10]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
add rax, 8
mov rsi, rdx
mov rdi, rax
call sym.std::swap_char_std::char_traits_char__std::allocator_char__
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______::base
mov rax, qword [rax]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov rdx, rax
movabs rax, 0xcccccccccccccccd
imul rax, rdx
mov qword [rbp - 8], rax
cmp qword [rbp - 8], 0
jle 0x40496f
sub qword [rbp - 0x20], 0x28
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____
mov rdx, rax
sub qword [rbp - 0x28], 0x28
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___::operator_
sub qword [rbp - 8], 1
jmp 0x404939
mov rax, qword [rbp - 0x28]
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::base
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::base
cmp rbx, rax
sete al
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
lea rax, [rbp - 0x10]
mov rdi, rax
call 0x403ba0
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rax
mov rdi, rdx
call sym.std::operator__int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char___
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_int__
mov eax, dword [rax]
mov dword [rbp - 0xc], eax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_int__
mov edx, dword [rax]
mov rax, qword [rbp - 0x18]
mov dword [rax], edx
lea rax, [rbp - 0xc]
mov rdi, rax
call sym.std::move_int__
mov edx, dword [rax]
mov rax, qword [rbp - 0x20]
mov dword [rax], edx
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x404a5d
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
nop word [rax + rax]
push r15
push r14
mov r15d, edi
push r13
push r12
lea r12, [rip + 0x20233e]
push rbp
lea rbp, [rip + 0x20233e]
push rbx
mov r14, rsi
mov r13, rdx
sub rbp, r12
sub rsp, 8
sar rbp, 3
call sym._init
test rbp, rbp
je 0x404af6
xor ebx, ebx
nop dword [rax + rax]
mov rdx, r13
mov rsi, r14
mov edi, r15d
call qword [r12 + rbx*8]
add rbx, 1
cmp rbx, rbp
jne 0x404ae0
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
nop word cs:[rax + rax]
ret
add byte [rax], al
sub rsp, 8
add rsp, 8
ret
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
push rdx
add byte [rcx], bl
add byte [rax], al
add byte [r15], r8b
push rsi
add byte [rsi + 0x59], dl
add byte [rdi + 0x42], cl
add byte [rdi + 0x52], al
add byte [rdx], dh
sub eax, 0x6c616d73
insb byte [rdi], dx
sub eax, 0x65747461
je 0x404bc0
insd dword [rdi], dx
jo 0x404bc4
xor byte [rsi], ch
imul ebp, dword [rsi], 0x2d420077
sub eax, 0x6c616d73
insb byte [rdi], dx
sub eax, 0x65747461
insd dword [rdi], dx
jo 0x404bda
xor byte [rsi], ch
outsd dx, dword [rsi]
jne 0x404bdf
add byte [rip + 0x64250064], ah
and eax, 0x64252064
and byte [rip + 0x64252064], ah
and byte [rip + 0x64252064], ah
and byte [rip + 0x4d490064], ah
push r8
push r11
push rbx
add byte [r8], r8b
push r10
push rdx
push r10
and byte [rip + 0x203a2064], ah
and eax, 0x64252064
and byte [rip + 0x64252064], ah
and byte [rip + 0x64252064], ah
and byte [rip + 0x3e3d2064], ah
and byte [rip + 0x43000a73], ah
jae 0x404c20
and byte [rbx], ah
and eax, 0x25203a64
jae 0x404bce
add byte [rsi + 0x65], dh
jbe 0x404c2c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp bh, byte [rdx]
pop rdi
pop r15
insd dword [rdi], dx
jo 0x404c40
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x404c58
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add dword [rbx], ebx
add edi, dword [rbx]
loopne 0x404bed
add byte [rax], al
jnp 0x404bee
add byte [rax], al
pushfq
ret
ljmp [rsp + rax]
add byte [rax], al
pushfq
cld
add eax, dword [rax]
add byte [rdx + 0x24ffffc6], dl
add byte [rax], al
sub ch, cl
dec dword [rsi + rax]
add byte [rsi + rdx*8 - 1], al
push qword [rsi + rax]
add byte [rbx - 0x28], al
call qword [rsp + rax]
add byte [rcx - 0x28], cl
push qword [rsp + rax]
add byte [rdi - 0x28], cl
call qword [rsp + rax - 0x27ab0000]
push qword [rsp + rax - 0x27840000]
call rsp
add al, 0
add byte [rsi - 0xb000028], cl
add al, 0
add byte [rax + rbx*8 + 0x514ffff], bl
add byte [rax], al
stosb byte [rdi], al
fdivr st(7)
push qword [rax - 0x271c0000]
call qword [rbp + rax]
add byte [rcx - 0x27], ah
jl 0x404c6b
add byte [rax], al
outsd dx, dword [rsi]
fcos
lcall [rbp + rax - 0x26820000]
fadd qword [rip - 0x25d40000]
inc dword [rsi + rax]
add byte [rax], al
jmp qword [rsi + rax - 0x25980000]
dec esp
add byte [rax], al
lodsb al, byte [rsi]
push rsp
add byte [rax], al
mov edx, 0x14ffffda
add byte [rax], al
in al, dx
push qword [rdi + rax]
add byte [rax], al
xor al, 0xdb
call qword [rdi + rax]
add byte [rax + 0x74ffffdb], al
add byte [rax], al
fcomp st(0), st(3)
lcall [rdi + rax - 0x23fa0000]
mov esp, 0x22000007
fdiv st(7), st(0)
fadd qword [rdi]
add byte [rax], al
fdiv st(7), st(0)
cld
add byte [rax], al
movabs al, byte [0xae00000824ffffdc]
fdiv st(7), st(0)
inc dword [rax + rcx]
add al, bl
fdiv st(7), st(0)
jmp qword [rax + rcx]
add dh, ah
fdiv st(7), st(0)
inc dword [rax + rcx - 0x22980000]
jmp qword [rax + rcx - 0x227b0000]
inc esp
or byte [rax], al
add byte [rdx], dl
fdivp st(7)
in al, dx
or byte [rax], al
add byte [rax - 0x22], dl
dec dword [rcx + rcx]
add byte [rax], al
insb byte [rdi], dx
fdivp st(7)
ljmp [rcx + rcx]
add byte [rax], al
movabs eax, dword [0xc70000094cffffde]
fdivp st(7)
ljmp [rcx + rcx]
add byte [rax], al
dec dword [rcx + rcx - 0x1ee40000]
push qword [rcx + rcx - 0x1ea80000]
call rsp
or dword [rax], eax
add byte [rcx + 0x9fcffff], ch
add byte [rax], al
mov fs, edx
jmp qword [rdx + rcx]
add byte [rax], al
jrcxz 0x404d5a
dec dword [rdx + rcx]
add byte [rdx - 0x1d], ah
ljmp [rdx + rcx]
add byte [rbp - 0x1d], ch
dec dword [rdx + rcx - 0x1c650000]
ljmp [rdx + rcx - 0x1c2c0000]
dec esp
or al, byte [rax]
add byte [rsi], cl
in al, 0xff
in al, dx
or al, byte [rax]
add byte [rsp - 1], bl
call qword [rbx + rcx]
add byte [rax], al
in eax, 0xff
cmp al, 0xb
add byte [rax], al
jl 0x404d7f
lcall [rbx + rcx]
add byte [rbx + 0x7cffffe5], dh
or eax, dword [rax]
add byte [rdi], al
out 0xff, al
jmp qword [rbx + rcx - 0x19d20000]
inc esp
or eax, dword [rax]
add byte [rsi], bh
jmp rsp
or eax, dword [rax]
add byte [rbp + 0xcffffe6], dl
or al, 0
add byte [rdi + 0xc34ffff], al
add byte [rax], al
out 0xff, eax
call qword [rsp + rcx]
add byte [rcx + rbp*8 - 1], ch
inc dword [rsp + rcx - 0x16020000]
ljmp [rsp + rcx - 0x15f60000]
dec esp
or al, 0
add byte [rip - 0x13000016], ch
or al, 0
add byte [rbx], bh
dec dword [rcx - 0x15aa0000]
ljmp [rcx - 0x15880000]
dec dword [rbp + rcx]
add byte [rbx + 0x6cffffea], ah
or eax, 0xeacd0000
dec dword [rbp + rcx - 0x14eb0000]
ljmp [rbp + rcx - 0x14ba0000]
dec esp
or eax, 0xeb650000
in al, dx
or eax, 0xec250000
call qword [rsi + rcx]
add byte [rax], al
mov ch, ah
cmp al, 0xe
add byte [rax], al
stc
in al, dx
lcall [rsi + rcx]
add byte [rsi], cl
out dx, al
jl 0x404e64
add byte [rax], al
shr dh, 0xff
lcall [rsi + rcx - 0x11040000]
mov esp, 0x1c00000e
out dx, eax
fmul qword [rsi]
add byte [rax], al
jp 0x404e61
cld
add byte [rax], al
mov esp, 0x1cffffef
sldt word [rax]
int 0xef
cmp al, 0xf
add byte [rax], al
sbb eax, esi
jmp qword [rdi + rcx]
add byte [rax], ch
inc dword [rdi + rcx - 0xf880000]
jmp qword [rdi + rcx - 0xe6c0000]
dec esp
sldt word [rax]
scasb al, byte [rdi]
int1
in al, dx
sldt word [rax]
mov esp, 0xcfffff1
adc byte [rax], al
add byte [rax], cl
ljmp [rax + rdx]
add byte [rax], al
and dh, dl
dec dword [rax + rdx]
add byte [rbx - 0xe], dl
ljmp [rax + rdx]
add ah, ah
lcall [rax + rdx - 0xbe00000]
mov esp, 0x68000010
cmc
in al, dx
adc byte [rax], al
add byte [rax + 0xcfffff5], cl
adc dword [rax], eax
add bh, al
cmc
ljmp [rcx + rdx]
add byte [rax], al
out dx, eax
cmc
dec dword [rcx + rdx]
add byte [rcx], cl
idiv bh
ljmp [rcx + rdx]
add byte [rax - 0x6b00000a], ah
adc dword [rax], eax
add ah, dl
idiv bh
push qword [rcx + rdx - 0x9180000]
call rsp
adc dword [rax], eax
add byte [rbp - 0x3000009], dl
adc dword [rax], eax
add byte [rbx], dh
cli
ljmp [rdx + rdx]
add byte [rax], al
pop rcx
cli
dec dword [rdx + rdx]
add byte [rdi - 6], ah
ljmp [rdx + rdx]
add byte [rcx - 0x73000006], al
adc al, byte [rax]
add byte [rdx - 0x53000006], dh
adc al, byte [rax]
add dl, bl
cli
dec esp
adc al, byte [rax]
add dl, bh
cli
in al, dx
adc al, byte [rax]
add byte [rbx], cl
sti
dec dword [rbx + rdx]
add byte [rax], al
push rsp
sti
ljmp [rbx + rdx]
add byte [rax], al
mov esp, 0x54fffffc
adc eax, dword [rax]
add ch, bh
cld
push qword [rbx + rdx]
add byte [rdx], bl
std
call qword [rbx + rdx - 0x26f0000]
push qword [rbx + rdx - 0x2360000]
call rsp
adc eax, dword [rax]
add dh, bh
std
push rsp
adc eax, dword [rax]
add byte [rsi + rdi*8], cl
call qword [rsp + rdx]
add byte [rax], al
jnp 0x404fa8
push qword [rsp + rdx]
add byte [rax], al
movabs byte [0xbc00001454fffffe], al
push qword [rsp + rdx]
add byte [rdi + rdi*8], ch
mov esp, 0x14000014
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x404fe7
add dword [rbx], ebx
or al, 7
or byte [rax + 0x14100701], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cwde
sar edi, -1
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x405017
add dword [rbx], ebx
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
push -0xf000041
add dword [rax], eax
add byte [rax], al
adc byte [rsi + 0xe], al
sbb byte [rdx + 0xf], cl
or esi, dword [rdi + 8]
add byte [rax], 0x3f
sbb bh, byte [rbx]
sub dh, byte [rbx]
and al, 0x22
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], r8b
add bh, ah
sar edi, cl
inc dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte fs:[rax], al
add ch, cl
sar edi, cl
inc dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rax], al
add byte [rax], al
mov bl, 0xd3
inc dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
add byte [rcx + 0x27ffffd3], bl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax + 0x12ffffd3], ah
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0
add byte [rax], al
xchg eax, edx
sar edi, cl
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 1
add byte [rax], al
adc bl, 0xff
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 1
add byte [rax], al
outsb dx, byte [rsi]
sar edi, cl
cmp al, byte [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jne 0x40513f
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add dword [rax], r8d
add byte [rax + 0x7dffffd3], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
jae 0x405163
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
add dword [rax], eax
add ch, bl
sar edi, cl
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rcx], es
add byte [rax], al
retf
sar edi, cl
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x50], edi
push rdx
add byte [rcx], al
js 0x4051c1
add eax, dword [rax]
adc dword [rax], eax
add ebx, dword [rbx]
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
sar edi, cl
ljmp [rsi + 0x4000000]
mov esp, 0x41004060
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
movsb byte [rdi], byte ptr [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
add dword [rax], eax
add byte [rax], ah
lcall [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rdx
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
insb byte [rdi], dx
add byte [rax], al
add byte [rsi - 0x40], ah
call qword [rsi + 0x4000006]
int3
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rbx + rax], -0x79
or al, 7
or byte [rax + rax], ah
add byte [rax], al
xchg eax, esp
add byte [rax], al
add ah, dl
lcall [rcx + rcx]
add byte [rax], al
add al, 0x24
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add qword [rbx], 3
wbinvd
or al, 7
or byte [rax], al
add byte [rax + rax], ch
add byte [rax], al
mov esp, 0xc8000000
iretd
inc dword [rcx]
add byte [rax], al
add al, 0x96
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
outsd dx, dword [rsi]
add dword [rsi], ebp
xor byte [rsi + 0x2e], dh
add byte [rdx], al
push rax
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
in al, dx
add byte [rax], al
add byte [rax + 0x1bffffd3], ah
add byte [rax], al
add byte [rbx + rbp*4], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
adc al, 1
add byte [rax], al
xchg eax, esp
sar edi, cl
inc dword [rax + rax]
add byte [rdi + rbp*4], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jg 0x4052db
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 2
add byte [rax], al
mov al, 0xd3
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 3
add byte [rax], al
sahf
sar edi, cl
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 3
add byte [rax], al
mov al, 0xd3
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add r8d, dword [rax]
add al, bl
sar edi, cl
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add eax, dword fs:[rax]
add byte [rsp + rdx*8], al
lcall [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rdx
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rbx], es
add byte [rax], al
cmp ah, dl
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
add eax, dword [rax]
add byte [rdx - 0x2c], al
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
add eax, dword [rax]
add byte [rsi], bh
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add r8b, byte [rax]
add byte [rdx], bh
jmp qword [rcx]
add byte [rax], al
add al, 0xb3
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
adc al, 4
add byte [rax], al
je 0x4053e6
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 4
add byte [rax], al
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
add al, 0
add byte [rsp + rdx*8 - 1], ch
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x405472
add byte [rax], al
pop rdx
inc dword [rdx]
adc byte [rsi + 0x60d4302], al
add bh, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xchg eax, esp
add al, 0
add byte [rsp + rdx*8 + 0x1dffff], bh
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov ah, 4
add byte [rax], al
mov ecx, 0x8cffffd4
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -0x80
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fadd qword [rax + rax]
add byte [rsi], bl
add byte ds:[rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jns 0x4054f7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
add al, 0
add byte [rdx*8 + 0x1bffff], bh
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 5
add byte [rax], al
cmp ch, dl
push qword [rip]
adc byte [rsi + 0x60d4302], al
jo 0x405537
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 5
add byte [rax], al
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add eax, 0xd5530000
cmp dword [rax], eax
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
je 0x405577
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add eax, dword [rax]
add byte [rbp + rdx*8 - 1], ch
lcall [rdx + rax]
add byte [rax], al
add al, 0xb8
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
adc al, byte [rdx]
or al, 7
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add eax, 0xd7600000
cmp al, 0
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x72
or al, 7
or byte [rax + rax], ah
add byte [rax], al
add eax, 0xd77c0000
call qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
in al, dx
add eax, 0xd7a80000
jmp rdx
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0x70cd402
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
adc al, 6
add byte [rax], al
fdivr st(7)
push qword [rdi]
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0x70ca902
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 6
add byte [rax], al
fdivr st(7)
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add byte [rax], al
out dx, al
fdivr st(7)
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40567c
add byte [rax], al
fstpnce st(0), st(0)
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
pushfq
add byte [rax], al
out 0xd8, eax
cmp byte [rax], al
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jae 0x4056b7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 6
fcos
cmp al, byte [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jne 0x4056d7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
fadd qword [rsi]
add byte [rax], al
sbb bl, cl
dec dword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add al, 7
add byte [rax], al
fcos
in al, dx
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
loop 0x405723
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 7
add byte [rax], al
add al, 0xda
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
sbb dl, bl
push qword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jb 0x405767
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
insb byte [rdi], dx
add byte [rax], al
call qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
add byte [rax], al
pop rbx
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 7
add byte [rax], al
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add byte [rax], al
push rax
lcall [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
cld
add byte [rax], al
sbb edx, 0xefffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0x70ce102
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 8
add byte [rax], al
ljmp [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], ch
add byte [rax], al
pushfq
add byte [rax], al
xchg eax, esp
jl 0x405847
add byte [rax], al
add al, 0xe0
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0xc016e03
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
je 0x405876
add byte [rax], al
loopne 0x40584e
call qword [rcx]
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -0x7b
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
or byte [rax], al
add byte [rdx - 0x23], cl
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x36000008
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fmul qword [rax]
add byte [rax], al
cmp ebp, ebx
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
or byte [rax], al
add byte [rdi], ah
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 9
add byte [rax], al
and bl, ch
jmp qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 9
add byte [rax], al
and al, 0xdd
ljmp [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
or dword [rax], eax
add byte [rdi], ch
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40597f
add byte [rax], al
cmp ebp, ebx
dec dword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
pushfq
or dword [rax], eax
add byte [rcx - 0x23], ah
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x72000009
lcall [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rdx
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
fmul qword [rcx]
add byte [rax], al
jno 0x4059b7
inc eax
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
mov dh, 0xc
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add al, 0xa
add byte [rax], al
or esi, ebx
jmp qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
pop rdx
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 0xa
add byte [rax], al
fdivp st(7)
ljmp [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ch, byte [rdx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
or r8b, byte [rax]
add byte [rbp + 0x15ffffde], dl
add dword [rax], eax
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add edx, dword [rax]
add dword [rdi + rax], ecx
or byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
or al, byte [rax]
add byte [rdx - 0x4d000021], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add ch, byte [rbp + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
mov word [rdx], cs
add byte [rax], al
sbb al, 0xe0
cmp al, 0
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x72
or al, 7
or byte [rax + rax], bl
add byte [rax], al
lodsb al, byte [rsi]
or al, byte [rax]
add byte [rax], bh
loopne 0x405aaa
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
or al, byte [rax]
add byte [rax], bh
loopne 0x405aca
lcall [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
in al, dx
or al, byte [rax]
add byte [rsi - 0x20], dh
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x78
or al, 7
or byte [rax + rax], bl
add byte [rax], al
or al, 0xb
add byte [rax], al
cwde
loopne 0x405b0a
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sub al, 0xb
add byte [rax], al
mov eax, esp
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
or eax, dword [rax]
add byte [rbp + 0xeffffe0], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x405b79
add byte [rax], al
pushfq
loopne 0x405b72
call qword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
in al, dx
or dword [rax], eax
add ah, cl
loopne 0x405b92
lcall [rcx + rax]
add byte [rax], al
add al, 0xf3
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
adc al, byte [rcx]
or al, 7
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov esp, 0xc000000b
loope 0x405bba
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fmul qword [rbx]
add byte [rax], al
mov edx, 0xeffffe1
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
or eax, dword [rax]
add byte [rax + 0x4cffffe1], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sbb al, 0xc
add byte [rax], al
loope 0x405c1a
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0xc
add byte [rax], al
loope 0x405c3a
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
mov ah, 0xa
add byte [rax], al
loope 0x405c5a
call qword [rcx + 0x4000001]
add dword [rdx + 0x40], esp
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -5
adc byte cs:[rdx], al
xchg dword [rdi + rax], ecx
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rax + rax], cs
add byte [rax - 0x1d], al
cmp al, 0
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x72
or al, 7
or byte [rax + rax], ch
add byte [rax], al
add al, 0xb
add byte [rax], al
pop rsp
jrcxz 0x405caa
dec dword [rax + 1]
add byte [rax], al
add al, 0x10
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -0x32
adc byte cs:[rdx], al
imul ecx, dword [rdi + rax], 8
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
fmul qword [rax + rax]
add byte [rsp - 1], dh
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
or al, 0
add byte [rsp - 1], dh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x75
or al, 7
or byte [rax + rax], bl
add byte [rax], al
sbb al, 0xd
add byte [rax], al
xchg eax, ebx
in al, 0xff
ljmp [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
movsxd rcx, dword [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0xd
add byte [rax], al
wait
in al, 0xff
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
pop rsp
or eax, 0xe4950000
call qword [rsi]
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], -0x76
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rip - 0x1afc0000], cl
push qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
outsd dx, dword [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
or eax, 0xe5180000
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sbb al, 0xc
add byte [rax], al
or al, 0xe5
ljmp [rbp + 0x4000000]
sub byte [rdx + 0x40], ah
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
movabs dword [0x2c00000008070c], eax
add byte [rax], al
or al, 0
add byte [rcx - 0x6100001b], dl
add al, byte [rax]
add byte [rsp + rax*2], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea r8, [rbx]
mov word [rbx + rax*4], es
add eax, 0x2e023d03
adc byte [rdx], al
push rax
or al, 7
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sbb al, 0xe
add byte [rax], al
jmp rdi
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 0xe
add byte [rax], al
add eax, 0xeffffe8
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add byte [rax], al
out 0xff, eax
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x405e84
add byte [rax], al
in eax, dx
out 0xff, eax
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add byte [rax], al
out 0xff, eax
ljmp [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
movsxd rcx, dword [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x600000e
call 0x615ebd
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fmul qword [rsi]
add byte [rax], al
call 0x525edd
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
add byte [rax], al
mul edi
dec dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x7f
or al, 7
or byte [rax + rax], ah
add byte [rax], al
sbb al, 0xf
add byte [rax], al
and al, ch
jmp qword [rdi + 1]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
pop rbp
add dword [rdi + rax], ecx
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sldt word [rax]
jmp 0x825f45
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jl 0x405f5f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sldt word fs:[rax]
sub ecx, 0x1dffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rdi], cl
add byte [rax], al
jle 0x405f6b
push qword [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dh, byte [rdx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
sldt word [rax]
jmp 0x7a5fa5
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x6f
or al, 7
or byte [rax + rax], bl
add byte [rax], al
sldt word [rax]
out dx, al
jmp 0x755fc5
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
outsd dx, dword [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 0xf
add byte [rax], al
add ch, dl
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0x10
add byte [rax], al
jmp 0xb06005
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ch, byte [rdx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
and al, 0x10
add byte [rax], al
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc byte [rax], r8b
add byte [rsi - 0x16], al
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax + rdx], ah
add byte [rax - 0x16], al
jmp qword [rbp]
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b8], es
cmp byte [rbx + 0x400e4d07], al
jb 0x40609a
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
adc al, 0
add byte [rax], al
lodsb al, byte [rsi]
adc byte [rax], al
add byte [rax - 0x16], ch
inc dword [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
or ah, byte [rbp + 5]
mov byte [rcx], al
add byte [rbp + 0x501], bl
add byte [rax], al
inc dword [rcx]
push rsp
jp 0x4060d7
mov dword [rbx], ecx
add bl, al
add dword [rip - 0x73fff45a], eax
add al, byte [rip - 0x11fff43d]
add al, byte [rip - 0x78fff32e]
add eax, dword [rip - 0x2dfff420]
add eax, dword [rip - 0x17fff32e]
add eax, dword [rip - 0x4ffff40c]
add al, 5
ror byte [rax + rax], cl
mov byte [rax - 0x1fff37b], 4
add eax, 0xa8000cd2
add eax, 0xc9605
mov al, 6
add eax, 0x91000caa
pushfq
add edi, dword [rsi + 0xba1000c]
add dword [rax], eax
add bh, bh
inc dword [rcx]
outsb dx, byte [rsi]
jg 0x40612f
out 0xe, eax
add al, cl
add dword [rip - 0x71fff07c], eax
add al, byte [rip - 0x28fff05f]
add al, byte [rip - 0x5ffff042]
add eax, dword [rip - 0x19fff025]
add eax, dword [rip - 0x5efff008]
add al, 5
xchg eax, ebp
adc byte [rax], al
out dx, al
add al, 5
mov dl, 0x10
add byte [rax - 0xefe16fb], dh
adc byte [rax], al
out 7, eax
add eax, 0xb40010c9
or byte [rip - 0x6affef23], al
or dword [rip - 0x57ffee23], eax
or dword [rip - 0xbffee7e], eax
or dword [rip - 0x39ffee6d], eax
or al, byte [rip - 0x77ffee59]
or ecx, dword [rbp + 0x11cc01]
test al, 0xc
fadd dword [rcx]
mov ebx, 0xeff0011
clc
add al, byte [rax]
add bh, bh
inc dword [rcx]
adc dword [rsi + rbp*4], ebp
add dword [rax], eax
add byte [rax - 0x25fe4cfe], al
add eax, dword [rax]
out dx, eax
add eax, dword [rip - 0x10000]
add dword [rax], eax
inc dword [rcx]
add bh, bh
inc dword [rcx]
add byte [rax], al
inc dword [rbx]
and eax, 0x1c221a01
add byte [rax], al
rol byte [rcx], 5
std
add al, byte [rcx]
add dword [rbx], ecx
add byte [rbp + 0x4824503], bh
add byte [rax + 0x504], dl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
inc dword [rcx]
movd dword [rip + 0x1d30000], mm0
sub eax, edx
add al, byte [rax]
test al, 2
xor al, 0
add bh, bh
inc dword [rcx]
or ah, byte [rbp + 0x73]
test byte [rcx], 0
mov eax, dword [rdx]
add eax, 0xffff0000
add dword [rbx], ecx
mov dword [rdx], eax
add eax, 0xee0002cd
add al, byte [rip - 0x10000]
add dword [rcx], edx
test byte [rcx], al
add eax, 0xdc0002a0
add dword [rip - 0x4afffd71], eax
add al, byte [rip]
add bh, bh
add ebx, dword [rcx]
add dword [rdi], ecx
sub eax, dword [rip + 0x1890173]
or dl, byte [rbx + 0x1a10001]
add eax, 0x10000
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
adc dword [rdi + 0x2b001], edi
add ch, cl
add al, 5
hlt
add al, 0
mov dword [rip + 5], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x12], dl
add byte [rax], al
add byte [rax], al
add byte [rax], dh
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rax
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
or eax, 0
add byte [rax], al
add byte [rbx + rcx*2], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
insd dword [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
insd dword [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax + 6], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 4, eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jo 0x406f63
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x400c], cl
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ch
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x400b], bl
add byte [rax], al
add bh, bh
ljmp [rdi]
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
ljmp [rdi]
add byte [rax], al
add byte [rax + 0xb], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
outsb dx, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x400f], dl
add byte [rax], al
add byte [rsi + 0x400f], ah
add byte [rax], al
add byte [rsi + 0x400f], dh
add byte [rax], al
add dh, al
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
out 0xf, al
add byte [rax], al
add byte [rax], al
add dh, dh
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte es:[rax], al
add byte [rax], al
add byte [rax], al
adc byte ss:[rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], r8b
add byte [rax], al
add byte [rax], al
push rsi
adc byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
jbe 0x40709a
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4010], al
add byte [rax], al
add byte [rsi + 0x4010], dl
add byte [rax], al
add byte [rsi + 0x4010], ah
add byte [rax], al
add byte [rsi + 0x4010], dh
add byte [rax], al
add dh, al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
out 0x10, al
add byte [rax], al
add byte [rax], al
add dh, dh
adc byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
adc dword es:[rax], eax
add byte [rax], al
add byte [rax], al
adc dword ss:[rax], eax
add byte [rax], al
add byte [rax], al
adc dword [rax], r8d
add byte [rax], al
add byte [rax], al
push rsi
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
adc word [rax], ax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x407194
je 0x40719d
and byte [rip + 0x302e342e], dh
sub eax, 0x75627536
outsb dx, byte [rsi]
je 0x4071ab
xor dword [rsi + 0x31], edi
xor byte cs:[rsi + rbp], dh
xor al, 0x29
and byte [rip + 0x302e342e], dh
and byte [rdx], dh
xor byte [rcx], dh
xor byte ss:[rsi], dh
xor byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add al, byte [rax]
push rsp
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, dword [rax]
je 0x4071a4
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], al
cwde
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, 0x4002d000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], al
add byte [rax + 6], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], al
add byte [rax + 0xb], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], cl
add byte [rax + 0x400b], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], cl
add byte [rax], ch
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], cl
add byte [rax + 0x400c], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], cl
add byte [rax + 0xf], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], cl
or byte [rdi], 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x40117000], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], cl
add byte [rax + 0x4011], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], cl
add byte [rbx + rcx*2], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], dl
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], dl
add ah, ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], dl
add al, cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], dl
add byte [rax + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc al, 0
insd dword [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x606df800], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], dl
add byte [rax], al
outsb dx, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], dl
add byte [rax], cl
outsb dx, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], bl
add al, bh
outsd dx, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], bl
add byte [rax], al
jo 0x407413
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], bl
add byte [rax], cl
jno 0x40742b
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], bl
add byte [rax], ah
jno 0x407443
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add dword [rax], eax
add byte [rax], al
outsb dx, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0x4011], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add al, dh
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte cs:[rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax], dh
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rcx], al
add byte [rbx], bl
add byte [rax + 0x71], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add dword [rax], eax
adc eax, 0x606df800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, byte [rax]
add byte [rax + 0x12], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], al
add byte [rax + rax], dl
insd dword [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x4000000], ah
add cl, dh
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], dh
add byte [rax], dl
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, cl
add byte [rax], al
add byte [rcx], al
add byte [rdx], bl
add byte [rax], bl
jno 0x40757b
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
add byte [rax], al
add byte [rcx], al
add byte [rdx], dl
add byte [rax + 0x4060], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, ah
add byte [rax], al
add byte [rcx], al
add byte [rsi], dl
add byte [rax], al
outsb dx, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dh
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add ah, ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x1000001], al
add byte [rcx], bl
add byte [rax], al
jo 0x40760b
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add dword [rax], eax
add byte [rax], al
add byte [rax + rax], dl
clc
insd dword [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rax], ch
add byte [rax], al
add byte [rax], al
adc al, 0
insd dword [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bh
add dword [rax], eax
add byte [rcx], al
add byte [rdi], dl
add byte [rax], cl
outsb dx, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 1], cl
add byte [rax], al
and al, byte [rax]
add byte [rdx], ah
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000001], ah
add byte [rsi], cl
add byte [rax], dh
add byte es:[rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x19], bl
add byte [rax], al
and byte [rax], al
sbb al, byte [rax]
or byte [rcx + 0x60], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
add dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rip + 0x4024], ch
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
add al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x4026], bl
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x12000002], bl
add byte [rsi], cl
add byte [rcx + rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rcx + rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ch, 2
add byte [rax], al
and al, byte [rax]
add byte [rsi], al
sub byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 3
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x29], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
out 3, eax
add byte [rax], al
and al, byte [rax]
add ah, ah
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
sbb al, 2
add byte [rax], al
add byte [rax], al
add byte [rax], al
test dword [rip + 0x120000], edi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsi
add al, 0
add byte [rdx], dl
add byte [rsi], cl
add byte [rsi + 0x12], dh
add byte [rax], al
add byte [rax], al
add byte [rsi + 6], dl
add byte [rax], al
add byte [rbx + 4], dh
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x4a], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
add al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add eax, 0x220000
add byte [rsi + 0x3b], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ecx, 0x22000005
add byte [rsi], cl
add byte [rax + 0x31], ah
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x12000006], dl
add byte [rsi], cl
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000006], ah
add byte [rsi], cl
add byte [rsi + 0x404a], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000006], al
add byte [rsi], cl
add byte [rsp + rdi + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rcx + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp eax, dword [rdi]
add byte [rax], al
and al, byte [rax]
add byte [rax], ah
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
pop rcx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x19], ah
add byte [rax], al
adc al, byte [rax]
add byte [rax + 0x4011], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ch
add byte [rax], al
and al, byte [rax]
add byte [rcx], cl
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
add byte fs:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000008], bl
add byte [rsi], cl
add byte [rax], dl
add byte es:[rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ah
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx], dh
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + 0x4036], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000009], cl
add byte [rsi], cl
add dl, ch
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dh
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add bl, ch
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0xa], ch
add byte [rax], al
and al, byte [rax]
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1200000a], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
or eax, dword [rax]
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x2f], al
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rcx + 0x220000], al
add byte [rax], al
sub eax, 0x40
add byte [rax], al
cmp al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 0
add byte [rdx], ah
add byte [rsi], cl
add ah, dl
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
jl 0x40792b
add byte [rax], al
add byte [rax], al
add byte [rax], al
ret 0xc
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dl
or al, 0
add byte [rdx], ah
add byte [rsi], cl
add ah, ah
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
sbb al, 2
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
lldt word [rbx + rcx*2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0xd], cl
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x46], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2200000d], bh
add byte [rsi], cl
add byte [rsi], al
sub byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, 0x2200000e
add byte [rsi], cl
add byte [rdi + 0x2f], bh
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1200000e], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2200000e], ah
add byte [rsi], cl
add dl, cl
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
sldt word [rax]
and al, byte [rax]
add dh, dh
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte ds:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2200000f], al
add byte [rsi], cl
add byte [rax + 0x35], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rip + 0x12000010], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rdx], bl
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x402f], bh
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000010], ah
add byte [rsi], cl
add ah, ch
cmp eax, 0x40
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rcx], edx
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x402d], dl
add byte [rax], al
add dl, ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000011], bh
add byte [rsi], cl
add ch, bh
cmp eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
adc al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add dh, ch
xor eax, 0x40
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ss, word [rdx]
add byte [rax], al
and al, byte [rax]
add dh, bh
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rbx], edx
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x3d], bh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rdx + 0x220000], bl
add byte [rax + 0x24], ah
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rdx + 0x220000], ah
add byte [rax + rax*2], al
add byte [rax], al
add byte [rax], al
add byte [rax + 1], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rsp
adc al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x12000014], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x220000], cl
add byte [rdi + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000015], dl
add byte [rsi], cl
add byte [rax + 0x4024], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, cl
adc eax, 0x220000
add byte [rax + 0x33], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax + 0x16], cl
add byte [rax], al
and al, byte [rax]
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000016], dh
add byte [rsi], cl
add dl, dh
cmp dword [rax], eax
add byte [rax], al
add byte [rax], al
mov dl, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
je 0x407bd1
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4026], dl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ah
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
call qword [rdi]
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x25], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rbp + 0x18], dl
add byte [rax], al
adc dword [rax], eax
adc byte [rax], al
and byte [rbx + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte fs:[rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x12000018], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, al
sbb byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + rbp + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rbx + 0x19], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rbp
sbb dword [rax], eax
add byte [rax], dl
add byte [rdx], bl
add byte [rax], cl
jno 0x407ce3
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x19], ch
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x37], cl
add byte [rax], al
add byte [rax], al
add al, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x1200001a], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x1a], ah
add byte [rax], al
and al, byte [rax]
add byte [rcx + rbp + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add dh, ah
sbb al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
sbb eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4048], ah
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg dword [rbx], ebx
add byte [rax], al
and al, byte [rax]
add byte [rdi], ah
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2200001b], ch
add byte [rsi], cl
add byte [rdx], ah
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
sbb al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + 0x25], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rbx], al
add byte [rdx], ah
add byte [rsi], cl
add al, cl
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbp], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs eax, dword [0x20001b001100001c]
jno 0x407dd3
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rbx + 0x220000], dh
add byte [rbx + 0x46], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x1d], ah
add byte [rax], al
and al, byte [rax]
add byte [rax], dl
add byte es:[rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2200001d], ch
add byte [rsi], cl
add byte [rax], dh
add byte es:[rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
and al, byte [rax]
add bl, dl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rbx + 0x220000], dh
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4046], bh
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x1f], ah
add byte [rax], al
and al, byte [rax]
add byte [rcx + rax*2 + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, bl
add byte [rax], al
and al, byte [rax]
add byte [rdx], dl
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x2e], dh
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
add byte [rax], al
add byte [rip + 0x22000021], dl
add byte [rsi], cl
add byte [rcx + 0x32], bh
add byte [rax], al
add byte [rax], al
add bh, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, dl
and dword [rax], eax
add byte [rcx], dl
add bl, byte [rdx]
add byte [rax], ah
jno 0x407edb
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, ah
and dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add al, dl
add byte es:[rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp eax, 0x22000022
add byte [rsi], cl
add byte [rdx + rdi + 0x40], ah
add byte [rax], al
cmp al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
enter 0x22, 0
and al, byte [rax]
add cl, bh
add byte ss:[rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x23], dl
add byte [rax], al
adc dword [rdx], eax
sbb al, byte [rax]
adc byte [rcx + 0x60], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x23], bl
add byte [rax], al
and al, byte [rax]
add byte [rdi], bl
add byte ss:[rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000023], dh
add byte [rsi], cl
add al, cl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp al, 0x24
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x403d], ah
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x12000024], ah
add byte [rsi], cl
add byte [rax + 0x404a], ah
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov bh, 0x24
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, 0x220000
add byte [rdx + rax*2 + 0x40], al
add byte [rax], al
xor al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
test al, 0x25
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x49], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte es:[rax], al
and al, byte [rax]
add dl, dh
add byte [rax], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg dword [rsi], esp
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4042], bh
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
lock add byte es:[rax], al
and al, byte [rax]
add byte [rdx + rbp], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
and al, byte [rax]
add dl, dh
add byte [rax], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dh, 0x27
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4049], ch
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rdi
sub byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add cl, ah
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add al, dh
sub byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x29], cl
add byte [rax], al
and al, byte [rax]
add ch, bl
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 1
add byte [rax], al
add byte [rcx], cl
sub al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x402f], bh
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2a], dl
add byte [rax], al
and al, byte [rax]
add dl, ah
xor eax, 0x40
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov bl, 0x2a
add byte [rax], al
adc byte [rax], al
sbb eax, dword [rax]
sbb al, 0x71
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2200002a], bh
add byte [rsi], cl
add byte [rbx + 0x4041], ch
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
sub eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + rbp + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2b], bh
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x403b], ah
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dh
sub eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add ch, ch
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add byte [rdi + 0x1200002c], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2200002c], bh
add byte [rsi], cl
add byte [rsi + 0x4024], cl
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bl
sub al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + 0x4031], dl
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2d], bl
add byte [rax], al
and al, byte [rax]
add dl, ah
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1200002d], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2200002d], ch
add byte [rsi], cl
add byte [rcx + rax*2 + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rdi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte cs:[rax], al
and al, byte [rax]
add byte [rdx + 0x4028], dl
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2200002e], bl
add byte [rsi], cl
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rdi + 1], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rcx
add byte [rax], al
and al, byte [rax]
add dl, ch
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2200002f], bh
add byte [rsi], cl
add dh, dh
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte ds:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
xor byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + 0x402a], ch
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000030], ch
add byte [rsi], cl
add byte [rdx + 0x403d], dl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000031], bl
add byte [rsi], cl
add ah, cl
add byte [rax], al
add byte [rax], al
add byte [rbp], ch
add byte [rax], al
add byte [rcx + 0x12000031], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
xor dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + rsi + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000032], dl
add byte [rsi], cl
add byte [rdx], bh
add byte ss:[rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x32], dh
add byte [rax], al
and al, byte [rax]
add dl, cl
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ah
add dword [rax], eax
add byte [rax], dl
add byte [rbx], bl
add byte [rax + 0x71], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ah
xor al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], al
cmp eax, dword [rax]
add byte [rax], al
add byte [rax], al
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
xor eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rsi], cl
add byte [rdx], ah
add byte [rsi], cl
add byte [rsp + rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, ebp
xor eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x30], al
add byte [rax], al
add byte [rax], al
add ah, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, bh
xor eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi], dh
add byte ds:[rax], al
add byte [rax], al
add byte [rcx + 1], dl
add byte [rax], al
add byte [rbx + 0x22000034], ch
add byte [rsi], cl
add bh, ch
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or esi, dword [rip + 0x220000]
add byte [rbx + 0x402a], ch
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x12000035], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x12000035], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, cl
xor eax, 0x220000
add byte [rcx], bh
and al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dl
xor eax, 0x220000
add byte [rbp + 0x25], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte ss:[rax], al
and al, byte [rax]
add byte [rsi + 0x38], ch
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg dword [rsi], esi
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
jno 0x408433
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000036], bl
add byte [rsi], cl
add byte [rcx + 0x43], bh
add byte [rax], al
add byte [rax], al
add byte [rsi + 2], bl
add byte [rax], al
add byte [rbp + 0x37], dl
add byte [rax], al
and al, byte [rax]
add al, ah
cmp al, byte [rax]
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sal byte [rdi], 1
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x40], bh
add byte [rax], al
push rsp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x38], ch
add byte [rax], al
and al, byte [rax]
add al, al
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, al
cmp byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x2f], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
cmp dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x24], dh
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x39], ch
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov esp, 0x22000039
add byte [rsi], cl
add byte [rsi], al
add byte ds:[rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
cmp al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rip + 0x4046], bh
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
cmp al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x2f], al
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
cmp eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add dl, ah
xor eax, 0x40
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, edx
cmp eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x2a], dl
add byte [rax], al
add byte [rax], al
add byte [rip], dh
add byte [rax], al
add byte [rdx], al
cmp al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
cmp al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x3c], ch
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000003c
add byte [rdx], bl
add byte [rcx + rsi*2], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, al
cmp al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
cmp al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rip + 0x220000], edi
add byte [rcx + 0x4036], dh
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
test byte [rip + 0x120000], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cdq
cmp eax, 0x220000
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ah
cmp eax, 0x220000
add byte [rdx + rbp], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x1200003e], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x3e], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rax
add byte ds:[rax], al
and al, byte [rax]
add byte [rsi + 0x4046], dl
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2200003e], bh
add byte [rsi], cl
add al, dh
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
iretd
add byte ds:[rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb dword [rdi], edi
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x3f], dh
add byte [rax], al
and al, byte [rax]
add byte [rcx], dl
add byte ss:[rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, cl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0x40
add byte [rax], al
and al, byte [rax]
add byte [rax + rbp + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000040], al
add byte [rsi], cl
add byte [rcx + 0x403b], dh
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [r8], al
and al, byte [rax]
add bh, ch
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jg 0x40873b
add byte [rax], al
and al, byte [rax]
add ah, ch
cmp eax, 0x40
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
fild dword [rcx]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x402a], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
jno 0x408793
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax*2], al
add byte [rdx], dl
add byte [rsi], cl
add byte [rax], ch
and al, byte [rax]
add byte [rax], al
add byte [rax], al
inc dword [rcx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add dh, bl
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x12000024], dh
add byte [rbx], cl
add byte [rax + 0xf], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax*2 + 0x120000], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x72], ah
je 0x408818
je 0x40881c
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
pop rdi
pop rdi
add byte [rbp + 0x72], ah
imul esi, dword gs:[ebx + 0x74], 0x745f7265
insd dword [rdi], dx
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x4087ce
pop rdi
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x40884c
jb 0x408852
pop rdi
jne 0x40885b
add byte [rbx + 0x6f], ah
insd dword [rdi], dx
jo 0x408855
je 0x408851
xor eax, 0x5f003538
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x408871
jb 0x408877
pop rdi
jne 0x408880
pop rdi
imul bp, word [rsi + 0x69], 0x615f
jb 0x408883
jns 0x408873
outsb dx, byte gs:[rsi]
je 0x40888a
jns 0x40881a
jb 0x40887e
insd dword [rdi], dx
pop rdi
jne 0x408890
insd dword [rdi], dx
jns 0x408826
pop rdi
pop rdi
jb 0x40888c
insd dword [rdi], dx
pop rdi
jne 0x40889e
insd dword [rdi], dx
jns 0x408893
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40889e
jns 0x40889e
outsb dx, byte gs:[rsi]
je 0x4088b5
jns 0x408845
push rbx
outsd dx, dword [rsi]
jne 0x4088bb
movsxd rsp, dword [rbp + 0x2e]
movsxd rsi, dword [rax + 0x70]
add byte [rdi + 0x5a], bl
push rbx
je 0x4088a1
xor dword [rcx], edi
jo 0x4088c2
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x4088da
jb 0x4088dd
movsxd rsi, dword [rax + rax + 0x5f]
pop rdx
pop rdx
xor al, 0x6d
imul ebp, dword [rsi + 0x45], 0x736332
pop rdi
pop rdi
push rdx
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push r10
pop rdi
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push rbp
pop rdi
pop rdi
push rdx
pop r15
push rdx
add byte [rdi + 0x47], bl
pop rdi
push rbx
push r12
pop rdi
push rsp
pop r15
add byte [rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x408927
jns 0x408927
outsb dx, byte gs:[rsi]
add byte fs:[rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x408938
jns 0x408938
jae 0x40894f
jb 0x408952
add byte [rdi + 0x44], bl
pop rcx
add byte [r15 + 0x5a], bl
push rbx
je 0x40891f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x408960
push r11
je 0x408933
jo 0x408962
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40897f
movsxd rbx, dword [rdi + 0x73]
je 0x40898d
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408988
je 0x40899d
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
pop rdi
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x408983
jbe 0x4089b4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40898b
jo 0x4089ba
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4089d7
movsxd rbx, dword [rdi + 0x73]
je 0x4089e5
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4089e0
je 0x4089f5
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
pop rdi
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408a08
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x4089e4
xor eax, 0x74695f5f
jb 0x408a1a
movsxd rbp, dword [rdi + 0x6d]
jo 0x408a1f
jbe 0x408a23
insb byte [rdi], dx
push rbx
xor byte [rdi + 0x31], bl
xor eax, 0x6574495f
jb 0x408a2f
insb byte [rdi], dx
jae 0x408a47
pop rdi
imul esi, dword [rbp + 0x72], 0x5a5f0045
push rbx
je 0x408a17
jbe 0x408a48
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x408a1f
jo 0x408a4e
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408a6b
movsxd rbx, dword [rdi + 0x73]
je 0x408a79
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408a74
je 0x408a89
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
pop rdi
cmp dword [r8 + 0x75], r14d
jae 0x408a9b
pop rdi
movsxd rbp, dword [rbx + 0x45]
push r11
pop rdi
add byte [rdi + 0x5a], bl
xor eax, 0x766c6f73
xor eax, 0x31787863
xor dword [rcx + 0x69], ebp
imul ebp, dword [rcx + 0x69], 0x5f006969
pop rdx
push rbx
je 0x408a8c
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x408acd
push r11
je 0x408aa0
jo 0x408acf
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408aec
movsxd rbx, dword [rdi + 0x73]
je 0x408afa
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408af5
je 0x408b0a
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
pop rdi
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x408aeb
xor byte [rdi + 0x5f], bl
je 0x408b26
jb 0x408b2f
ja 0x408b21
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
je 0x408b30
pop rdi
jb 0x408b3e
outsd dx, dword [rsi]
jb 0x408b1f
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x408b1a
pop rdi
pop rdi
jae 0x408b57
jb 0x408b5e
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408b52
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x408b6b
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x408b42
jo 0x408b71
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408b8e
movsxd rbx, dword [rdi + 0x73]
je 0x408b9c
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408b97
je 0x408bac
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x408b82
jbe 0x408bb3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp dword [rdi + 0x53], ebx
push r11
cmp dword [rdi + 0x45], ebx
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x408bdd
xor dword [rip + 0x6574495f], esi
jb 0x408bd1
insb byte [rdi], dx
jae 0x408be9
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x408bc3
jbe 0x408bf4
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x408bcb
jo 0x408bfa
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408c17
movsxd rbx, dword [rdi + 0x73]
je 0x408c25
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408c20
je 0x408c35
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
pop rdi
xor dword [r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x408c4f
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x408c67
push rbx
pop rdi
jbe 0x408c3d
jo 0x408c4a
push rsp
pop rdi
add byte [rdi + 0x5a], bl
jae 0x408c72
insb byte [rdi], dx
jbe 0x408c6b
xor al, byte [rdx + 0x35]
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
imul ebp, dword [rcx + 0x69], 0x5a5f0069
push rbx
je 0x408c4c
jae 0x408c91
jo 0x408c66
movsxd rdx, dword [rbx + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408c86
je 0x408c9b
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x408c8a
push rbx
je 0x408c73
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408cb2
movsxd rbx, dword [rdi + 0x73]
je 0x408cc0
imul ebp, dword [rsi + 0x67], 0x545f5449
xor byte [rdi + 0x54], bl
xor dword [rdi + 0x45], ebx
push r11
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x408c9c
jbe 0x408ccd
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x408ca4
jo 0x408cd3
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408cf0
movsxd rbx, dword [rdi + 0x73]
je 0x408cfe
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408cf9
je 0x408d0e
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
pop rdi
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x408d22
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x408cfe
xor eax, 0x6574495f
jb 0x408d33
insb byte [rdi], dx
jae 0x408d4b
pop rdi
imul esi, dword [rbp + 0x72], 0x4e496c63
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x408d58
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x408d2f
jo 0x408d5e
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408d7b
movsxd rbx, dword [rdi + 0x73]
je 0x408d89
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408d84
je 0x408d99
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x408d6f
jbe 0x408da0
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
pop rdi
push r11
pop r15
push rsp
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push r11
je 0x408d96
jbe 0x408dc7
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x408d9e
jo 0x408dcd
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408dea
movsxd rbx, dword [rdi + 0x73]
je 0x408df8
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408df3
je 0x408e08
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
pop rdi
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x5f007645
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul bp, word [rsi + 0x69], 0x5f00
pop rdx
push r11
je 0x408dfd
xor ebp, dword [rbp + 0x6f]
jbe 0x408e36
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x408e13
jo 0x408e42
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408e5f
movsxd rbx, dword [rdi + 0x73]
je 0x408e6d
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408e68
je 0x408e7d
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x62
jae 0x408e85
jbe 0x408e23
pop rdi
pop rdx
push rbx
je 0x408e5a
xor eax, 0x6e755f5f
jne 0x408e91
jb 0x408e96
pop rdi
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x695f7261
outsb dx, byte [rsi]
jae 0x408ea5
jb 0x408eb6
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408eaa
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x408ec3
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x408e9a
jo 0x408ec9
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408ee6
movsxd rbx, dword [rdi + 0x73]
je 0x408ef4
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408eef
je 0x408f04
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x408eda
jbe 0x408f0b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp dword [rdi + 0x53], ebx
push r11
cmp dword [rdi + 0x45], ebx
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x408f35
xor dword [rdi + rbx*2], esi
push rsi
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
jae 0x408f40
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x408f11
xor al, 0x5f
pop rdi
jo 0x408f46
jb 0x408f5b
imul esp, dword [rcx + 0x6c], 0x726f735f
je 0x408f39
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408f57
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x408f70
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x408f47
jo 0x408f76
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408f93
movsxd rbx, dword [rdi + 0x73]
je 0x408fa1
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408f9c
je 0x408fb1
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x408f87
jbe 0x408fb8
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp dword [rdi + 0x53], ebx
push r11
cmp dword [rdi + 0x45], ebx
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x408fe2
xor dword [rip + 0x6574495f], esi
jb 0x408fd6
insb byte [rdi], dx
jae 0x408fee
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x408fc5
xor dword [rdi + 0x5f], ebx
jae 0x409008
jb 0x40900f
pop rdi
push 0x49706165
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409008
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409021
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x408ff8
jo 0x409027
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409044
movsxd rbx, dword [rdi + 0x73]
je 0x409052
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40904d
je 0x409062
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x409038
jbe 0x409069
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp dword [rdi + 0x53], ebx
push r11
cmp dword [rdi + 0x45], ebx
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x409093
xor dword [rip + 0x6574495f], esi
jb 0x409087
insb byte [rdi], dx
jae 0x40909f
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x409077
jo 0x4090a6
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4090c3
movsxd rbx, dword [rdi + 0x73]
je 0x4090d1
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4090cc
je 0x4090e1
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4090ec
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x4090c8
xor eax, 0x61765f5f
insb byte [rdi], dx
pop rdi
movsxd rbp, dword [rdi + 0x6d]
jo 0x409102
imul esi, dword [rbp + 0x72], 0x30534e45
pop rdi
xor dword [rip + 0x6574495f], esi
jb 0x409113
insb byte [rdi], dx
jae 0x40912b
pop rdi
imul esi, dword [rbp + 0x72], 0x5a5f0045
push rbx
je 0x4090f6
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40912f
je 0x409144
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x409111
jo 0x409140
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40915d
movsxd rbx, dword [rdi + 0x73]
je 0x40916b
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409166
je 0x40917b
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
cmp byte [rdi + 0x6d], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x409161
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4091a2
push r11
je 0x409175
jo 0x4091a4
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4091c1
movsxd rbx, dword [rdi + 0x73]
je 0x4091cf
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4091ca
je 0x4091df
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
pop rdi
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x409197
pop rdi
pop rdx
push rbx
je 0x4091ce
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409207
je 0x40921c
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x4091e9
jo 0x409218
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409235
movsxd rbx, dword [rdi + 0x73]
je 0x409243
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40923e
je 0x409253
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jae 0x40926b
jb 0x409268
jns 0x409244
push rbx
pop rdi
jbe 0x409254
push rbx
cmp byte [rdi + 0x50], bl
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
push r11
je 0x409246
jo 0x409275
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409292
movsxd rbx, dword [rdi + 0x73]
je 0x4092a0
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40929b
je 0x4092b0
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x409290
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4092cf
movsxd rbx, dword [rdi + 0x73]
je 0x4092dd
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4092d8
je 0x4092ed
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
push r11
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5f], bl
insd dword [edi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x40931d
jb 0x409320
pop rdi
pop rdi
add byte [rdi + 0x4a], bl
jbe 0x409312
push rdx
imul esi, dword gs:[ebx + 0x74], 0x6c437265
jae 0x409333
jae 0x4092c3
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40932c
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x409335
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409329
push rbx
je 0x409317
jo 0x409346
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409363
movsxd rbx, dword [rdi + 0x73]
je 0x409371
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40936c
je 0x409381
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40938d
movsxd rdi, dword [rax + 0x78]
outsb dx, byte [rsi]
push r8
push rbx
je 0x40936c
jo 0x40939b
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4093b8
movsxd rbx, dword [rdi + 0x73]
je 0x4093c6
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4093c1
je 0x4093d6
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x4093ac
jbe 0x4093dd
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp byte [rdi + 0x53], bl
push r11
cmp byte [rdi + 0x45], bl
push rdx
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409405
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push r11
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x4093e5
pop rdi
pop rdi
imul ebp, dword [rsi + 0x73], 0x69747265
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x409432
jb 0x409439
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40942d
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409446
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40941d
jo 0x40944c
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409469
movsxd rbx, dword [rdi + 0x73]
je 0x409477
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409472
je 0x409487
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40945d
jbe 0x40948e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp dword [rdi + 0x53], ebx
push r11
cmp dword [rdi + 0x45], ebx
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x4094b8
xor dword [rip + 0x6574495f], esi
jb 0x4094ac
insb byte [rdi], dx
jae 0x4094c4
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
insb byte [rdi], dx
push rax
jbe 0x4094a9
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x4094b2
jbe 0x4094e3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x4094ba
jo 0x4094e9
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409506
movsxd rbx, dword [rdi + 0x73]
je 0x409514
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40950f
je 0x409524
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
pop rdi
xor dword [r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x40953e
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x409556
push r11
pop rdi
jbe 0x40952c
jo 0x409539
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x409524
xor bl, byte [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x409559
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x409563
pop rdi
movsxd rbp, dword [rbx + 0x77]
jb 0x40956b
pop rdi
xor dword [rbp + 0x50], eax
push rbx
je 0x409546
jo 0x409575
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409592
movsxd rbx, dword [rdi + 0x73]
je 0x4095a0
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40959b
je 0x4095b0
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
cmp byte [rdi + 0x45], bl
push rsp
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
pop r15
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x409595
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4095d6
push r11
je 0x4095a9
jo 0x4095d8
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4095f5
movsxd rbx, dword [rdi + 0x73]
je 0x409603
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4095fe
je 0x409613
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
pop rdi
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x4095f4
xor bl, byte [rdi + 0x44]
jae 0x40963d
jb 0x40963a
jns 0x40962c
jne 0x409648
xor byte [rbp + 0x45], al
cmp dword [rdi + 0x5f], ebx
jae 0x409651
jb 0x40964e
jns 0x40962a
push rax
push rbx
je 0x409619
jo 0x409648
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409665
movsxd rbx, dword [rdi + 0x73]
je 0x409673
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40966e
je 0x409683
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x409678
pop rdi
push rbx
pop rdi
add byte [rdi + 0x5f], bl
movsxd rdi, dword [rax + 0x61]
pop rdi
jb 0x409696
je 0x40969b
jb 0x4096a4
ja 0x409677
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40967f
jbe 0x4096b0
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x409687
jo 0x4096b6
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4096d3
movsxd rbx, dword [rdi + 0x73]
je 0x4096e1
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4096dc
je 0x4096f1
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
pop rdi
xor dword [r10], r14d
insd dword [rdi], dx
jo 0x409708
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x49]
push rbx
pop rdi
jbe 0x4096f2
jo 0x4096ff
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4096ea
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40972b
push r11
je 0x4096fe
jo 0x40972d
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40974a
movsxd rbx, dword [rdi + 0x73]
je 0x409758
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409753
je 0x409768
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
pop rdi
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
jbe 0x409720
pop rdi
pop rdx
push rbx
je 0x409757
pop rdi
pop rdi
jne 0x409798
jne 0x40978e
jb 0x409793
pop rdi
imul ebp, dword [rsi + 0x73], 0x69747265
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x4097ad
jb 0x4097b4
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4097a8
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4097c1
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409798
jo 0x4097c7
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4097e4
movsxd rbx, dword [rdi + 0x73]
je 0x4097f2
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4097ed
je 0x409802
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x4097d8
jbe 0x409809
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp dword [rdi + 0x53], ebx
push r11
cmp dword [rdi + 0x45], ebx
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x409833
xor dword [rip + 0x6574495f], esi
jb 0x409827
insb byte [rdi], dx
jae 0x40983f
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x6174735f
jb 0x40985d
pop rdi
insd dword [rdi], dx
imul ebp, dword [rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x409836
jo 0x409865
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409882
movsxd rbx, dword [rdi + 0x73]
je 0x409890
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40988b
je 0x4098a0
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, byte [r13 + 0x4f]
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40987c
xor ebp, dword [rbp + 0x6f]
jbe 0x4098b5
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409892
jo 0x4098c1
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4098de
movsxd rbx, dword [rdi + 0x73]
je 0x4098ec
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4098e7
je 0x4098fc
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x53], eax
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4098d7
pop rdi
pop rdi
imul ebp, dword [rsi + 0x74], 0x6f736f72
jb 0x409926
pop rdi
insb byte [rdi], dx
outsd dx, dword [rsi]
outsd dx, dword [rsi]
jo 0x409901
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40991f
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409938
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40990f
jo 0x40993e
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40995b
movsxd rbx, dword [rdi + 0x73]
je 0x409969
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409964
je 0x409979
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40994f
jbe 0x409980
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp dword [rdi + 0x53], ebx
push r11
cmp dword [rdi + 0x45], ebx
insb byte [rdi], dx
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x4099ab
xor dword [rip + 0x6574495f], esi
jb 0x40999f
insb byte [rdi], dx
jae 0x4099b7
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi + 0x54], bl
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x409994
outsw dx, word [rsi]
jb 0x4099d8
jb 0x4099c8
push rbx
je 0x4099a0
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4099df
movsxd rbx, dword [rdi + 0x73]
je 0x4099ed
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4099e8
je 0x4099fd
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r12
pop rdi
push rdx
push rbx
je 0x4099d3
jb 0x409a0a
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x409a0e
pop rdi
jb 0x409a11
jb 0x409a15
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
pop rdi
xor al, 0x74
jns 0x409a2c
add byte gs:[r15 + 0x5a], r11b
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409a28
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x409a31
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409a25
push rbx
je 0x409a13
jo 0x409a42
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409a5f
movsxd rbx, dword [rdi + 0x73]
je 0x409a6d
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409a68
je 0x409a7d
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
cmp byte [rdi + 0x6d], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x409a66
xor byte [rdi + 0x5f], bl
movsxd rbp, dword [rdi + 0x70]
jns 0x409a9b
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x409aa5
pop rdi
movsxd rbp, dword [rbx + 0x77]
jb 0x409aad
xor dword [rbp + 0x4c], eax
xor byte [rbp + 0x53], al
je 0x409a87
jb 0x409ab9
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x409ad6
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x409ad0
xor dword [r11d], r14d
pop rdi
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x409ad9
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x409ae3
pop rdi
push r8
push rbx
je 0x409ab9
jo 0x409ae8
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409b05
movsxd rbx, dword [rdi + 0x73]
je 0x409b13
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409b0e
je 0x409b23
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
pop rdi
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop rdi
push rbx
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x409b08
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409b41
je 0x409b56
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x409b23
jo 0x409b52
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409b6f
movsxd rbx, dword [rdi + 0x73]
je 0x409b7d
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409b78
je 0x409b8d
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp byte [r13 + 0x61], r13b
js 0x409b90
jae 0x409b9c
jp 0x409b9a
push r10
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
outsb dx, byte [rsi]
ja 0x409bae
push rax
jbe 0x409b44
pop rdi
pop rdx
push rbx
je 0x409b7a
xor byte [rdi + 0x5f], bl
jo 0x409bbd
jo 0x409baf
push 0x49706165
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409bbc
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409bd5
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409bac
jo 0x409bdb
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409bf8
movsxd rbx, dword [rdi + 0x73]
je 0x409c06
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409c01
je 0x409c16
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x409bec
jbe 0x409c1d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp dword [rdi + 0x53], ebx
push r11
cmp dword [rdi + 0x45], ebx
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x409c47
xor dword [rip + 0x6574495f], esi
jb 0x409c3b
insb byte [rdi], dx
jae 0x409c53
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x409c2b
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x409c6c
push r11
je 0x409c3f
jo 0x409c6e
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409c8b
movsxd rbx, dword [rdi + 0x73]
je 0x409c99
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409c94
je 0x409ca9
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
pop rdi
xor dword [r9], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x409c9b
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409cda
movsxd rbx, dword [rdi + 0x73]
je 0x409ce8
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409ce3
je 0x409cf8
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jo 0x409ce1
push r10
push r11
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x409ce5
jae 0x409d22
jb 0x409d29
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409d1d
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409d36
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409d0d
jo 0x409d3c
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409d59
movsxd rbx, dword [rdi + 0x73]
je 0x409d67
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409d62
je 0x409d77
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x409d4d
jbe 0x409d7e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp dword [rdi + 0x53], ebx
push r11
cmp dword [rdi + 0x45], ebx
jbe 0x409d82
pop rdi
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x409d6f
outsw dx, word [rsi]
jb 0x409db3
jb 0x409da3
push r10
xor bl, byte [r15 + 0x4b]
movsxd rax, dword [rbp + 0x4f]
push rsp
pop rdi
push rdx
push rbx
je 0x409d80
jb 0x409db7
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x409dbb
pop rdi
jb 0x409dbe
jb 0x409dc2
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor ebx, dword [rdi + 0x45]
xor al, 0x74
jns 0x409dd9
add byte gs:[r15 + 0x5a], r11b
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x409dd6
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409def
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409dc6
jo 0x409df5
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409e12
movsxd rbx, dword [rdi + 0x73]
je 0x409e20
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409e1b
je 0x409e30
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x409e06
jbe 0x409e37
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp byte [rdi + 0x53], bl
push r11
cmp byte [rdi + 0x45], bl
jo 0x409e51
insb byte [rdi], dx
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409e51
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x409e5a
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x409e4e
push rbx
je 0x409e3c
jo 0x409e6b
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409e88
movsxd rbx, dword [rdi + 0x73]
je 0x409e96
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409e91
je 0x409ea6
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jae 0x409ebd
jb 0x409eba
jns 0x409e96
push rbx
cmp byte [rdi + 0x45], bl
jbe 0x409ea4
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x409e8e
xor dword [rdi + 0x5f], ebx
jne 0x409ecf
jne 0x409ec5
jb 0x409eca
pop rdi
jo 0x409ecc
jb 0x409ee1
imul esi, dword [rcx + rbp*2 + 0x6f], 0x394e496e
pop rdi
pop rdi
outsb dx, byte [esi]
jne 0x409eda
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x409ef3
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x409eca
jo 0x409ef9
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409f16
movsxd rbx, dword [rdi + 0x73]
je 0x409f24
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409f1f
je 0x409f34
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x409f0a
jbe 0x409f3b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp dword [rdi + 0x53], ebx
push r11
cmp dword [rdi + 0x45], ebx
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x409f65
xor dword [rip + 0x6574495f], esi
jb 0x409f59
insb byte [rdi], dx
jae 0x409f71
pop rdi
imul esi, dword [rbp + 0x72], 0x5f544545
push rbx
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x409f4d
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x409f82
push r10
push rbx
je 0x409f56
jo 0x409f85
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x409fa2
movsxd rbx, dword [rdi + 0x73]
je 0x409fb0
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x409fab
je 0x409fc0
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
je 0x409f94
jb 0x409fcb
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x409fcf
pop rdi
jb 0x409fd2
jb 0x409fd6
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x409fec
push r11
pop r15
add byte [rdi + 0x49], bl
push rsp
pop r15
jb 0x409ff1
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x409fd9
jo 0x40a008
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a025
movsxd rbx, dword [rdi + 0x73]
je 0x40a033
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a02e
je 0x40a043
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r9 + 0x69], ecx
push rax
movsxd rsi, dword [r14 + 0x45]
push r11
pop rdi
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
add byte [rdi + 0x49], bl
pop r15
jae 0x40a06f
imul ebp, dword fs:[rsi + 0x5f], 0x64657375
add byte [rdi + 0x5a], bl
push rbx
je 0x40a041
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a080
movsxd rbx, dword [rdi + 0x73]
je 0x40a08e
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a089
je 0x40a09e
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x4f], eax
push rbx
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rbx + 0x63], dh
outsb dx, byte [rsi]
pop r15w
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x40a0cd
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a0e6
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40a0bd
jo 0x40a0ec
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a109
movsxd rbx, dword [rdi + 0x73]
je 0x40a117
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a112
je 0x40a127
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40a0fd
jbe 0x40a12e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp byte [rdi + 0x53], bl
push r11
cmp byte [rdi + 0x45], bl
xor al, byte [r13 + 0x52]
push r11
cmp dword [rdi], ebx
pop rdi
push r12
pop r15
jb 0x40a14f
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5f], bl
je 0x40a164
pop rdi
jae 0x40a17a
jb 0x40a17d
add byte [rdi + 0x5a], bl
push rbx
je 0x40a140
xor ebx, dword [rdi + 0x5f]
push 0x5f706165
jae 0x40a17e
insb byte [rdi], dx
movsxd rsi, dword gs:[rcx + rcx*2 + 0x4e]
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x40a185
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a19e
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40a175
jo 0x40a1a4
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a1c1
movsxd rbx, dword [rdi + 0x73]
je 0x40a1cf
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a1ca
je 0x40a1df
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40a1b5
jbe 0x40a1e6
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp dword [rdi + 0x53], ebx
push r11
cmp dword [rdi + 0x45], ebx
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x40a210
xor dword [rip + 0x6574495f], esi
jb 0x40a204
insb byte [rdi], dx
jae 0x40a21c
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40a1fa
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a239
movsxd rbx, dword [rdi + 0x73]
je 0x40a247
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a242
je 0x40a257
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [rbp + 0x76], r8d
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a270
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a289
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40a260
jo 0x40a28f
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a2ac
movsxd rbx, dword [rdi + 0x73]
je 0x40a2ba
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a2b5
je 0x40a2ca
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40a2a0
jbe 0x40a2d1
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp byte [rdi + 0x53], bl
push r11
cmp byte [rdi + 0x45], bl
xor dword [r13 + 0x52], eax
push r11
cmp dword [rdi], ebx
pop rdi
pop rdx
push r11
je 0x40a2c4
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a303
movsxd rbx, dword [rdi + 0x73]
je 0x40a311
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a30c
je 0x40a321
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
movsxd rbp, dword [rdi + 0x6d]
jo 0x40a323
jb 0x40a329
push r10
push r11
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x40a315
jo 0x40a344
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a361
movsxd rbx, dword [rdi + 0x73]
je 0x40a36f
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a36a
je 0x40a37f
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x73
ja 0x40a381
jo 0x40a367
push rdx
push rbx
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a390
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x40a36c
pop rdi
pop rdi
imul esi, dword [rbp + 0x72], 0x73656c5f
jae 0x40a3a7
imul esi, dword [rbp + 0x72], 0x5f007645
pop rdx
push rbx
je 0x40a386
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40a3c7
push r11
je 0x40a39a
jo 0x40a3c9
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a3e6
movsxd rbx, dword [rdi + 0x73]
je 0x40a3f4
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a3ef
je 0x40a404
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
pop rdi
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40a3ea
outsw dx, word [rsi]
jb 0x40a42e
jb 0x40a41e
push r8
movsxd rax, dword [r13 + 0x4f]
push rsp
pop rdi
push rdx
push rbx
je 0x40a3f8
jb 0x40a42f
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40a433
pop rdi
jb 0x40a436
jb 0x40a43a
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor bl, byte [rdi + 0x45]
xor al, 0x74
jns 0x40a451
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x40a422
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x70
imul esi, dword [rdx + 0x49], 0x41526952
xor bl, byte [rdi + 0x4b]
movsxd rax, dword [rbp + 0x53]
je 0x40a433
jo 0x40a462
imul esi, dword [rdx + 0x49], 0x3174534e
pop rdi
pop rdi
movsxd rsp, dword gs:[rcx + 0x79]
pop rdi
outsb dx, byte [rsi]
pop rdi
jae 0x40a48b
jb 0x40a482
jo 0x40a464
push rsp
pop rdi
pop rdi
pop rdi
je 0x40a49c
jo 0x40a48a
push rbx
xor eax, 0x3054495f
pop rdi
pop rdi
pop rdi
je 0x40a4ad
jo 0x40a49b
push r11
pop rdi
push r11
cmp dword [rdi], ebx
jae 0x40a4b7
imul ebp, dword fs:[rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x40a48a
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
cmp qword gs:[rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a4ce
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a4e7
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40a4be
jo 0x40a4ed
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a50a
movsxd rbx, dword [rdi + 0x73]
je 0x40a518
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a513
je 0x40a528
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40a4fe
jbe 0x40a52f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp dword [rdi + 0x53], ebx
push r11
cmp dword [rdi + 0x45], ebx
push rbx
je 0x40a512
xor dword [rdi + 0x4e], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40a577
jo 0x40a565
push r11
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x40a53f
jo 0x40a56e
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a58b
movsxd rbx, dword [rdi + 0x73]
je 0x40a599
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a594
je 0x40a5a9
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40a587
jbe 0x40a5b8
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40a58f
jo 0x40a5be
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a5db
movsxd rbx, dword [rdi + 0x73]
je 0x40a5e9
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a5e4
je 0x40a5f9
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
pop rdi
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x40a5d9
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esi, dword [rbp + 0x72], 0x7361625f
cmp qword gs:[rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a61d
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a636
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40a60d
jo 0x40a63c
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a659
movsxd rbx, dword [rdi + 0x73]
je 0x40a667
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a662
je 0x40a677
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40a64d
jbe 0x40a67e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp dword [rdi + 0x53], ebx
push r11
cmp dword [rdi + 0x45], ebx
push rbx
je 0x40a661
xor dword [rdi + 0x4d], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40a6c6
jo 0x40a6b4
push r11
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x40a68d
jae 0x40a6d2
jo 0x40a6a7
imul ecx, dword [rsi + 0x53], 0x5f5f3774
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a6d9
movsxd rbx, dword [rdi + 0x73]
je 0x40a6e7
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a6e2
je 0x40a6f7
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x40a6e8
push rbx
je 0x40a6cd
jo 0x40a6fc
imul esi, dword [rdx + 0x49], 0x30545f54
pop rdi
push r11
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x40a6df
xor ebp, dword [rbp + 0x6f]
jbe 0x40a718
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40a6f5
jo 0x40a724
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a741
movsxd rbx, dword [rdi + 0x73]
je 0x40a74f
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a74a
je 0x40a75f
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jo 0x40a76f
jbe 0x40a702
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a76b
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a784
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40a75b
jo 0x40a78a
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a7a7
movsxd rbx, dword [rdi + 0x73]
je 0x40a7b5
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a7b0
je 0x40a7c5
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40a79b
jbe 0x40a7cc
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp byte [rdi + 0x53], bl
push r11
cmp byte [rdi + 0x45], bl
insd dword [rdi], dx
insd dword [rdi], dx
jbe 0x40a77d
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40a7e7
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a800
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40a7d7
jo 0x40a806
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a823
movsxd rbx, dword [rdi + 0x73]
je 0x40a831
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a82c
je 0x40a841
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40a817
jbe 0x40a848
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp byte [rdi + 0x53], bl
push r11
cmp byte [rdi + 0x45], bl
xor al, 0x62
jae 0x40a85e
jbe 0x40a7fc
pop rdi
pop rdx
push rbx
je 0x40a833
xor bl, byte [rdi + 0x5f]
imul bp, word [rsi + 0x61], 0x5f6c
imul ebp, dword [rsi + 0x73], 0x69747265
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x40a885
jb 0x40a88c
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a880
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a899
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40a870
jo 0x40a89f
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a8bc
movsxd rbx, dword [rdi + 0x73]
je 0x40a8ca
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a8c5
je 0x40a8da
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40a8b0
jbe 0x40a8e1
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp dword [rdi + 0x53], ebx
push r11
cmp dword [rdi + 0x45], ebx
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x40a90b
xor dword [rip + 0x6574495f], esi
jb 0x40a8ff
insb byte [rdi], dx
jae 0x40a917
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40a8ec
pop rdi
pop rdi
jne 0x40a92d
jne 0x40a923
jb 0x40a928
pop rdi
jo 0x40a92a
jb 0x40a93f
imul esi, dword [rcx + rbp*2 + 0x6f], 0x69705f6e
jbe 0x40a944
je 0x40a920
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40a93e
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40a957
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40a92e
jo 0x40a95d
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40a97a
movsxd rbx, dword [rdi + 0x73]
je 0x40a988
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40a983
je 0x40a998
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40a96e
jbe 0x40a99f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp dword [rdi + 0x53], ebx
push r11
cmp dword [rdi + 0x45], ebx
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x40a9c9
xor dword [rip + 0x6574495f], esi
jb 0x40a9bd
insb byte [rdi], dx
jae 0x40a9d5
pop rdi
imul esi, dword [rbp + 0x72], 0x5f544545
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdi
push rsp
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40a9bd
jbe 0x40a9ee
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40a9c5
jo 0x40a9f4
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40aa11
movsxd rbx, dword [rdi + 0x73]
je 0x40aa1f
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40aa1a
je 0x40aa2f
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
pop rdi
xor eax, 0x69676562
outsb dx, byte [rsi]
jbe 0x40a9dd
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40aa46
movsxd rdi, dword [rax + 0x78]
jno 0x40aa36
push rax
push rbx
je 0x40aa25
jo 0x40aa54
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40aa71
movsxd rbx, dword [rdi + 0x73]
je 0x40aa7f
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40aa7a
je 0x40aa8f
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40aa65
jbe 0x40aa96
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp byte [rdi + 0x53], bl
push r11
cmp byte [rdi + 0x45], bl
push rdx
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40aabe
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push r11
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x40aa9f
xor bl, byte [rdi + 0x5f]
jne 0x40aae0
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x40aafb
pop rdi
push r11
je 0x40aab9
xor ebp, dword [rbp + 0x6f]
jbe 0x40aaf2
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40aacf
jo 0x40aafe
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40ab1b
movsxd rbx, dword [rdi + 0x73]
je 0x40ab29
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40ab24
je 0x40ab39
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
cmp dword [rdi + 0x53], ebx
cmp byte [rdi + 0x45], bl
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
pop rdi
push rdx
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5f], bl
jae 0x40ab66
pop rdi
push 0x6c646e61
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x40ab3c
pop rdi
jae 0x40ab7d
jb 0x40ab7a
jns 0x40ab56
push rbx
je 0x40ab44
jo 0x40ab73
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40ab90
movsxd rbx, dword [rdi + 0x73]
je 0x40ab9e
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40ab99
je 0x40abae
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x40ab9e
push rsp
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40abba
movsxd rdi, dword [rax + 0x78]
insb byte [rdi], dx
je 0x40abaa
push rax
push rbx
je 0x40ab99
jo 0x40abc8
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40abe5
movsxd rbx, dword [rdi + 0x73]
je 0x40abf3
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40abee
je 0x40ac03
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40abd9
jbe 0x40ac0a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp byte [rdi + 0x53], bl
push r11
cmp byte [rdi + 0x45], bl
push rdx
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40ac32
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push r11
pop r15
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40ac45
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40ac4e
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40ac42
push rbx
je 0x40ac30
jo 0x40ac5f
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40ac7c
movsxd rbx, dword [rdi + 0x73]
je 0x40ac8a
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40ac85
je 0x40ac9a
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x40ac47
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul ebp, dword [rsi + 0x69], 0x5a5f0074
push rbx
je 0x40ac94
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40acd3
movsxd rbx, dword [rdi + 0x73]
je 0x40ace1
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40acdc
je 0x40acf1
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x73
ja 0x40acf1
jo 0x40acd7
push rdx
push rbx
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40ad11
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x40aced
xor al, 0x5f
push rsi
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
jae 0x40ad39
pop rdi
imul esi, dword [rbp + 0x72], 0x53496c63
je 0x40ad05
jo 0x40ad34
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40ad51
movsxd rbx, dword [rdi + 0x73]
je 0x40ad5f
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40ad5a
je 0x40ad6f
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40ad84
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
pop r15
push rbx
je 0x40ad60
jbe 0x40ad91
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop r15
push rbx
push r11
pop r15
push rdx
push rsp
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40adb2
jno 0x40ad98
push rax
push rbx
je 0x40ad87
jo 0x40adb6
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40add3
movsxd rbx, dword [rdi + 0x73]
je 0x40ade1
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40addc
je 0x40adf1
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rdx
push r11
je 0x40adc6
xor ebp, dword [rbp + 0x6f]
jbe 0x40adff
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push r11
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40ae14
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40ae1d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40ae11
push rbx
je 0x40adff
jo 0x40ae2e
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40ae4b
movsxd rbx, dword [rdi + 0x73]
je 0x40ae59
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40ae54
je 0x40ae69
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x40ae81
jb 0x40ae84
movsxd rsi, dword [rcx + rcx*2 + 0x53]
cmp byte [rdi + 0x49], bl
push rbx
cmp byte [rdi + 0x45], bl
jbe 0x40ae6e
push rsp
pop rdi
jo 0x40ae72
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40ae91
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40ae9a
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40ae8e
push rbx
je 0x40ae7c
jo 0x40aeab
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40aec8
movsxd rbx, dword [rdi + 0x73]
je 0x40aed6
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40aed1
je 0x40aee6
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp byte [r13 + 0x61], r13b
js 0x40aee8
jae 0x40aef4
jp 0x40aef2
jbe 0x40ae90
pop rdi
pop rdx
push rbx
push r11
je 0x40aecd
jo 0x40aefc
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40af19
movsxd rbx, dword [rdi + 0x73]
je 0x40af27
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40af22
je 0x40af37
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40af43
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40af4c
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40af40
push rbx
je 0x40af2e
jo 0x40af5d
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40af7a
movsxd rbx, dword [rdi + 0x73]
je 0x40af88
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40af83
je 0x40af98
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x40afb0
jb 0x40afb3
movsxd rsi, dword [rcx + rcx*2 + 0x53]
cmp byte [rdi + 0x4a], bl
push rbx
cmp byte [rdi + 0x45], bl
jbe 0x40af9d
push rsp
pop rdi
jo 0x40afa1
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40afc0
movsxd rdi, dword [rax + 0x78]
xor eax, 0x706f5f5f
jae 0x40af9c
xor al, 0x5f
je 0x40afd5
jb 0x40afd1
insb byte [rdi], dx
jae 0x40afe9
pop rdi
jbe 0x40afda
insb byte [rdi], dx
movsxd rbp, dword [rcx + rcx*2 + 0x4e]
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40aff5
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40afcc
jo 0x40affb
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b018
movsxd rbx, dword [rdi + 0x73]
je 0x40b026
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b021
je 0x40b036
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40b00c
jbe 0x40b03d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
pop rdi
push rbx
push r11
pop rdi
push r11
pop rdi
push rsp
pop rdi
push rdx
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40b02e
xor byte [rdi + 0x49], bl
je 0x40b067
jb 0x40b063
jae 0x40b06d
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40b070
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40b089
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40b060
jo 0x40b08f
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b0ac
movsxd rbx, dword [rdi + 0x73]
je 0x40b0ba
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b0b5
je 0x40b0ca
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40b0a0
jbe 0x40b0d1
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp dword [rdi + 0x53], ebx
push r11
cmp dword [rdi + 0x45], ebx
xor dword [rbp + 0x45], eax
pop rdi
push rbx
pop rdi
jae 0x40b0f0
push r11
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x40b0cc
jbe 0x40b0fd
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40b0d4
jo 0x40b103
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b120
movsxd rbx, dword [rdi + 0x73]
je 0x40b12e
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b129
je 0x40b13e
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
pop rdi
xor r12d, dword [r13 + 0x6e]
jbe 0x40b0ea
pop rdi
pop rdx
push rbx
je 0x40b121
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40b15b
pop rdi
insd dword [rdi], dx
imul esp, dword fs:[rcx + 0x6e], 0x5f6f745f
imul si, word [rdx + 0x73], 0x4974
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40b16e
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40b187
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40b15e
jo 0x40b18d
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b1aa
movsxd rbx, dword [rdi + 0x73]
je 0x40b1b8
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b1b3
je 0x40b1c8
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40b19e
jbe 0x40b1cf
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp dword [rdi + 0x53], ebx
push r11
cmp dword [rdi + 0x45], ebx
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x40b1f9
xor dword [rip + 0x6574495f], esi
jb 0x40b1ed
insb byte [rdi], dx
jae 0x40b205
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40b1e3
jo 0x40b212
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b22f
movsxd rbx, dword [rdi + 0x73]
je 0x40b23d
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b238
je 0x40b24d
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x4f], eax
push rbx
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40b25b
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40b264
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40b258
push rbx
je 0x40b246
jo 0x40b275
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b292
movsxd rbx, dword [rdi + 0x73]
je 0x40b2a0
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b29b
je 0x40b2b0
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5f], bl
jae 0x40b2cb
pop rdi
jae 0x40b2cf
jb 0x40b2d2
add byte [rdi + 0x5a], bl
push rbx
je 0x40b2d0
je 0x40b2af
movsxd rdx, dword [rbx + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b2cf
je 0x40b2e4
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rdx
push rbx
je 0x40b2bd
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b2fc
movsxd rbx, dword [rdi + 0x73]
je 0x40b30a
imul ebp, dword [rsi + 0x67], 0x545f5449
xor byte [rdi + 0x54], bl
xor dword [rdi + 0x45], ebx
push r11
pop r15
add byte [rdi + 0x5a], bl
push rbx
je 0x40b2e6
outsw dx, word [rsi]
jb 0x40b32a
jb 0x40b31a
push r11
je 0x40b2ee
jo 0x40b31d
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b33a
movsxd rbx, dword [rdi + 0x73]
je 0x40b348
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b343
je 0x40b358
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r12
pop rdi
push rdx
push rbx
je 0x40b32f
jb 0x40b366
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40b36a
pop rdi
jb 0x40b36d
jb 0x40b371
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
cmp byte [rdi + 0x45], bl
xor al, 0x74
jns 0x40b388
add byte gs:[r15 + 0x5a], r11b
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40b385
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40b39e
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40b375
jo 0x40b3a4
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b3c1
movsxd rbx, dword [rdi + 0x73]
je 0x40b3cf
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b3ca
je 0x40b3df
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40b3b5
jbe 0x40b3e6
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp byte [rdi + 0x53], bl
push r11
cmp byte [rdi + 0x45], bl
jbe 0x40b397
pop rdi
pop rdx
push rbx
je 0x40b3ce
xor ebx, dword [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x40b403
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40b40d
pop rdi
movsxd rbp, dword [rbx + 0x77]
jb 0x40b415
pop rdi
xor cl, byte [rcx + 0x4c]
xor dword [rbp + 0x4e], eax
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x40b420
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40b439
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40b410
jo 0x40b43f
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b45c
movsxd rbx, dword [rdi + 0x73]
je 0x40b46a
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b465
je 0x40b47a
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40b450
jbe 0x40b481
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp dword [rdi + 0x53], ebx
push r11
cmp dword [rdi + 0x45], ebx
push r11
pop r15
push r12
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x53], bl
pop r15
push rbx
pop rdi
add byte [rdi + 0x5f], bl
jae 0x40b4b7
movsxd rbp, dword [rbx + 0x5f]
movsxd rbp, dword [rax + 0x6b]
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40b495
jo 0x40b4c4
imul esi, dword [rdx + 0x49], 0x634b5069
xor dword [r9 + 0x52], ecx
imul esi, dword [rsi + 0x45], 0x5f544f45
push rdx
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40b4b4
xor al, 0x5f
pop rdi
jne 0x40b4f4
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f6d5f64
jbe 0x40b4fb
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x40b502
push r8
push rbx
je 0x40b4dd
jo 0x40b50c
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b529
movsxd rbx, dword [rdi + 0x73]
je 0x40b537
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b532
je 0x40b547
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
cmp byte [rdi + 0x53], bl
push r11
pop rdi
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop rdi
push rbx
pop r15
push rdx
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40b538
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40b56d
push r10
imul eax, dword [rbp + 0x4f], 0x3174534e
jb 0x40b579
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40b57d
pop rdi
jb 0x40b580
jb 0x40b584
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x40b59a
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
movsxd rax, dword [r13 + 0x44]
xor dword [rbp + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40b589
imul esi, dword [rbp + 0x72], 0x6177735f
jo 0x40b5a3
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40b5c1
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40b5da
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40b5b1
jo 0x40b5e0
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b5fd
movsxd rbx, dword [rdi + 0x73]
je 0x40b60b
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b606
je 0x40b61b
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40b5f1
jbe 0x40b622
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp dword [rdi + 0x53], ebx
push r11
cmp dword [rdi + 0x45], ebx
push r11
pop r15
jbe 0x40b629
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40b617
pop rdi
jae 0x40b658
jb 0x40b655
jns 0x40b631
push rax
push rbx
je 0x40b620
jo 0x40b64f
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b66c
movsxd rbx, dword [rdi + 0x73]
je 0x40b67a
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b675
je 0x40b68a
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
pop rdi
jbe 0x40b681
pop rdi
push rbx
cmp dword [rdi + 0x52], ebx
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x40b670
xor dword [rdi + 0x5f], ebx
jo 0x40b6b9
jae 0x40b6ae
pop rdi
push 0x49706165
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40b6b3
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40b6cc
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40b6a3
jo 0x40b6d2
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b6ef
movsxd rbx, dword [rdi + 0x73]
je 0x40b6fd
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b6f8
je 0x40b70d
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40b6e3
jbe 0x40b714
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp dword [rdi + 0x53], ebx
push r11
cmp dword [rdi + 0x45], ebx
insb byte [rdi], dx
push rbx
cmp dword [rdi + 0x4e], ebx
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x40b742
xor dword [rdi + rbx*2], esi
je 0x40b73a
jb 0x40b736
insb byte [rdi], dx
jae 0x40b74e
pop rdi
jbe 0x40b73f
insb byte [rdi], dx
jbe 0x40b737
pop rdi
push rsp
xor byte [rdi + 0x53], bl
pop r15
push rsp
xor dword [rdi + 0x54], ebx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40b728
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40b769
push r11
je 0x40b73c
jo 0x40b76b
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b788
movsxd rbx, dword [rdi + 0x73]
je 0x40b796
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b791
je 0x40b7a6
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
pop rdi
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x40b75e
pop rdi
pop rdx
push rbx
je 0x40b795
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40b7d6
push r11
je 0x40b7a9
jo 0x40b7d8
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b7f5
movsxd rbx, dword [rdi + 0x73]
je 0x40b803
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b7fe
je 0x40b813
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
pop rdi
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
jbe 0x40b7cb
pop rdi
pop rdx
push rbx
je 0x40b802
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40b83b
je 0x40b850
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x40b81d
jo 0x40b84c
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b869
movsxd rbx, dword [rdi + 0x73]
je 0x40b877
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b872
je 0x40b887
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x40b8a0
jb 0x40b8a3
movsxd rsi, dword [rcx + rcx*2 + 0x53]
pop rdi
push r11
pop rdi
jbe 0x40b88f
push rbx
cmp byte [rdi + 0x50], bl
push rsp
pop rdi
jo 0x40b895
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push r11
je 0x40b882
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40b8c3
push r11
je 0x40b896
jo 0x40b8c5
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b8e2
movsxd rbx, dword [rdi + 0x73]
je 0x40b8f0
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b8eb
je 0x40b900
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
pop rdi
xor dword [r9], r15d
pop rdi
pop r15
je 0x40b90d
push rsp
jo 0x40b910
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40b900
jbe 0x40b8bd
pop rdi
pop rdx
push rbx
je 0x40b8f5
xor byte [rdi + 0x5f], bl
jne 0x40b936
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x40b951
xor byte [rbp + 0x45], al
xor dword [rbx], esi
pop rdi
pop rdi
jne 0x40b952
imul ebp, dword [rsi + 0x69], 0x6f635f74
jo 0x40b966
push r11
je 0x40b922
xor ebp, dword [rbp + 0x6f]
jbe 0x40b95b
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40b938
jo 0x40b967
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b984
movsxd rbx, dword [rdi + 0x73]
je 0x40b992
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b98d
je 0x40b9a2
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
pop rdi
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push r11
je 0x40b98f
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40b9ce
movsxd rbx, dword [rdi + 0x73]
je 0x40b9dc
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40b9d7
je 0x40b9ec
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x40b9d7
insd dword [rdi], dx
js 0x40b9f1
insd dword [rdi], dx
push r10
push r12
pop rdi
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdx
push r11
je 0x40b9f2
jbe 0x40ba23
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40b9fa
jo 0x40ba29
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40ba46
movsxd rbx, dword [rdi + 0x73]
je 0x40ba54
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40ba4f
je 0x40ba64
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
pop rdi
cmp byte [r13 + 0x61], r13b
js 0x40ba6d
jae 0x40ba79
jp 0x40ba77
jbe 0x40ba15
pop rdi
pop rdx
push rbx
je 0x40ba51
jbe 0x40ba82
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40ba59
jo 0x40ba88
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40baa5
movsxd rbx, dword [rdi + 0x73]
je 0x40bab3
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40baae
je 0x40bac3
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
pop rdi
xor dword [r10], r14d
insd dword [rdi], dx
jo 0x40bada
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x49]
push r11
pop rdi
jbe 0x40bac4
jo 0x40bad1
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40baf6
je 0x40bad5
imul ecx, dword [rsi + 0x53], 0x5f5f3774
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40bb07
movsxd rbx, dword [rdi + 0x73]
je 0x40bb15
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40bb10
je 0x40bb25
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rdx
push r11
je 0x40bafc
jo 0x40bb2b
imul esi, dword [rdx + 0x49], 0x30545f54
pop rdi
push r11
pop rdi
add byte [rsi + 0x72], ah
outsd dx, dword gs:[rsi]
jo 0x40bb42
outsb dx, byte [rsi]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x40bb26
jo 0x40bb55
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40bb72
movsxd rbx, dword [rdi + 0x73]
je 0x40bb80
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40bb7b
je 0x40bb90
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
push r11
pop rdi
add byte [rdi + 0x5a], bl
push r11
je 0x40bb72
jbe 0x40bba3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40bb7a
jo 0x40bba9
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40bbc6
movsxd rbx, dword [rdi + 0x73]
je 0x40bbd4
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40bbcf
je 0x40bbe4
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
pop rdi
xor dword [r10], r14d
pop rdi
pop r15
movsxd rbp, dword [rax + 0x65]
movsxd rbp, dword [rbx + 0x5f]
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
insd dword [rdi], dx
push rax
movsxd rax, dword [r8]
pop rdi
pop rdx
push rbx
je 0x40bbd3
xor dword [rdi + 0x5f], ebx
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x68
jo 0x40bbf8
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40bc16
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40bc2f
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40bc06
jo 0x40bc35
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40bc52
movsxd rbx, dword [rdi + 0x73]
je 0x40bc60
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40bc5b
je 0x40bc70
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40bc46
jbe 0x40bc77
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp dword [rdi + 0x53], ebx
push r11
cmp dword [rdi + 0x45], ebx
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x40bca1
xor dword [rip + 0x6574495f], esi
jb 0x40bc95
insb byte [rdi], dx
jae 0x40bcad
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40bc81
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x40bccb
jb 0x40bcce
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x40bc93
jo 0x40bcc2
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40bcdf
movsxd rbx, dword [rdi + 0x73]
je 0x40bced
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40bce8
je 0x40bcfd
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
pop rdi
jbe 0x40bcf2
push rsp
pop rdi
jo 0x40bcf6
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40bce2
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40bd1b
je 0x40bd30
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x40bcfd
jo 0x40bd2c
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40bd49
movsxd rbx, dword [rdi + 0x73]
je 0x40bd57
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40bd52
je 0x40bd67
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x40bd80
jb 0x40bd83
movsxd rsi, dword [rcx + rcx*2 + 0x53]
pop rdi
push rbx
pop rdi
jbe 0x40bd6f
push rbx
cmp byte [rdi + 0x50], bl
push rsp
pop rdi
jo 0x40bd75
push rsp
xor byte [rdi], bl
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
outsb dx, byte gs:[rsi]
pop rdi
movsxd rsp, dword [rcx + 0x74]
movsxd rbp, dword [rax + 0x40]
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40bd7c
pop rdi
pop rdi
je 0x40bdb8
jb 0x40bdc1
ja 0x40bdb3
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsi, dword [rsi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40bda5
pop rdi
pop rdi
insb byte [rdi], dx
insb byte [edi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x40bdb3
outsw dx, word [rsi]
jb 0x40bdf7
jb 0x40bde7
imul rax, qword [r13 + 0x4f], 0x4e525f54
push rbx
je 0x40bdbf
jb 0x40bdf6
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40bdfa
pop rdi
jb 0x40bdfd
jb 0x40be01
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor byte [rdi + 0x45], bl
xor al, 0x74
jns 0x40be18
add byte gs:[r15 + 0x5a], r11b
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40be15
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40be2e
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40be05
jo 0x40be34
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40be51
movsxd rbx, dword [rdi + 0x73]
je 0x40be5f
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40be5a
je 0x40be6f
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40be45
jbe 0x40be76
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp byte [rdi + 0x53], bl
push r11
cmp byte [rdi + 0x45], bl
insd dword [rdi], dx
imul eax, dword [rbp + 0x6c], 0x64747300
jb 0x40be9f
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x40be71
xor ebx, dword [rdi + 0x5f]
push 0x75
jae 0x40bebd
pop rdi
push 0x49706165
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40beb6
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40becf
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40bea6
jo 0x40bed5
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40bef2
movsxd rbx, dword [rdi + 0x73]
je 0x40bf00
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40befb
je 0x40bf10
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40bee6
jbe 0x40bf17
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp dword [rdi + 0x53], ebx
push r11
cmp dword [rdi + 0x45], ebx
insb byte [rdi], dx
push rbx
cmp dword [rdi + 0x4e], ebx
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x40bf45
xor dword [rip + 0x6574495f], esi
jb 0x40bf39
insb byte [rdi], dx
jae 0x40bf51
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rsp
xor byte [rdi + 0x53], bl
pop r15
push rsp
xor dword [rdi + 0x54], ebx
xor bl, byte [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40bf5e
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40bf77
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40bf4e
jo 0x40bf7d
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40bf9a
movsxd rbx, dword [rdi + 0x73]
je 0x40bfa8
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40bfa3
je 0x40bfb8
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40bf8e
jbe 0x40bfbf
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp byte [rdi + 0x53], bl
push r11
cmp byte [rdi + 0x45], bl
jo 0x40bfdd
jbe 0x40bf70
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40bfd9
movsxd rdi, dword [rax + 0x78]
insd dword [rdi], dx
imul ecx, dword [rcx + 0x50], 0x70347453
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40c004
movsxd rbx, dword [rdi + 0x73]
je 0x40c012
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40c00d
je 0x40c022
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40bff8
jbe 0x40c029
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp byte [rdi + 0x53], bl
push r11
cmp byte [rdi + 0x45], bl
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40c04e
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
xor dword [rip + 0x66666964], esi
jb 0x40c061
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x5f]
je 0x40c07b
jo 0x40c069
push r10
push r11
pop r15
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40c04a
jbe 0x40c07b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40c052
jo 0x40c081
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40c09e
movsxd rbx, dword [rdi + 0x73]
je 0x40c0ac
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40c0a7
je 0x40c0bc
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
pop rdi
imul r15d, dword [r8 + 0x45], 0x5a5f006d
push rbx
je 0x40c09d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40c0d6
je 0x40c0eb
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x40c0b8
jo 0x40c0e7
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40c104
movsxd rbx, dword [rdi + 0x73]
je 0x40c112
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40c10d
je 0x40c122
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
cmp byte [rdi + 0x50], bl
push rbx
pop rdi
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x40c114
outsw dx, word [rsi]
jb 0x40c158
jb 0x40c148
push r10
imul eax, dword [rbp + 0x4f], 0x4e525f54
push rbx
je 0x40c121
jb 0x40c158
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40c15c
pop rdi
jb 0x40c15f
jb 0x40c163
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor dword [rdi + 0x45], ebx
xor al, 0x74
jns 0x40c17a
add byte gs:[r15 + 0x5a], r11b
push r11
je 0x40c14b
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40c18a
movsxd rbx, dword [rdi + 0x73]
je 0x40c198
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40c193
je 0x40c1a8
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor eax, 0x74735f63
jb 0x40c18f
jbe 0x40c18c
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x40c192
cmp byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x40c1ed
push r11
je 0x40c1a9
xor ebp, dword [rbp + 0x6f]
jbe 0x40c1e2
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40c1bf
jo 0x40c1ee
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40c20b
movsxd rbx, dword [rdi + 0x73]
je 0x40c219
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40c214
je 0x40c229
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
cmp dword [rdi + 0x45], ebx
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40c20e
xor byte [rdi + 0x49], bl
je 0x40c247
jb 0x40c243
jae 0x40c24d
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40c250
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40c269
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40c240
jo 0x40c26f
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40c28c
movsxd rbx, dword [rdi + 0x73]
je 0x40c29a
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40c295
je 0x40c2aa
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40c280
jbe 0x40c2b1
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp dword [rdi + 0x53], ebx
push r11
cmp dword [rdi + 0x45], ebx
xor byte [rbp + 0x45], al
pop rdi
push rbx
pop rdi
jae 0x40c2d0
push r11
pop r15
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40c2d9
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40c2e2
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40c2d6
push rbx
je 0x40c2c4
jo 0x40c2f3
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40c310
movsxd rbx, dword [rdi + 0x73]
je 0x40c31e
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40c319
je 0x40c32e
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40c33a
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40c343
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40c337
push rbx
je 0x40c325
jo 0x40c354
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40c371
movsxd rbx, dword [rdi + 0x73]
je 0x40c37f
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40c37a
je 0x40c38f
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x40c369
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40c3aa
push r11
je 0x40c37d
jo 0x40c3ac
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40c3c9
movsxd rbx, dword [rdi + 0x73]
je 0x40c3d7
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40c3d2
je 0x40c3e7
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
pop rdi
xor dword [r11], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
pop rdi
insd dword [rdi], dx
add byte [rdi + 0x5f], bl
movsxd rdi, dword [rax + 0x61]
pop rdi
imul ebp, dword gs:[esi + 0x5f], 0x63746163
push 0x58434040
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40c3fd
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40c43c
movsxd rbx, dword [rdi + 0x73]
je 0x40c44a
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40c445
je 0x40c45a
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x52], eax
push r11
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x40c44b
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40c48a
movsxd rbx, dword [rdi + 0x73]
je 0x40c498
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40c493
je 0x40c4a8
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x50], eax
movsxd rdx, dword [r10 + 0x4b]
push rbx
xor ebx, dword [rdi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x65], bl
je 0x40c4c6
add byte [rdi + 0x5a], bl
push rbx
movsxd rax, dword [r13 + 0x43]
xor dword [rbp + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdi
js 0x40c4fd
pop rdi
jo 0x40c4ed
jb 0x40c4fd
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
imul esi, dword [rcx + rdi*2 + 0x5f], 0x40403076
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40c4d9
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x6d
outsd dx, dword [rsi]
jbe 0x40c517
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x40c51e
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40c500
jo 0x40c52f
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40c54c
movsxd rbx, dword [rdi + 0x73]
je 0x40c55a
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40c555
je 0x40c56a
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40c53b
xor ebp, dword [rbp + 0x6f]
jbe 0x40c574
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
cmp byte [rdi + 0x45], bl
push r12
xor byte [rdi + 0x54], bl
pop rdi
add byte [rsi + 0x70], ah
jb 0x40c591
outsb dx, byte [rsi]
je 0x40c591
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
push r11
je 0x40c576
jo 0x40c5a5
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40c5c2
movsxd rbx, dword [rdi + 0x73]
je 0x40c5d0
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40c5cb
je 0x40c5e0
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
push r11
je 0x40c5c0
jo 0x40c5ef
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40c60c
movsxd rbx, dword [rdi + 0x73]
je 0x40c61a
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40c615
je 0x40c62a
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
outsb dx, byte [rsi]
ja 0x40c63f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
push rbp
outsb dx, byte [rsi]
ja 0x40c64e
outsb dx, byte [rsi]
pop rdi
push rdx
jae 0x40c661
insd dword [rdi], dx
pop r15
xor ebp, dword [rsi]
xor byte [rax], al
pop rdi
pop rdx
push rbx
je 0x40c66b
push r8
push rbx
je 0x40c637
jo 0x40c666
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40c683
movsxd rbx, dword [rdi + 0x73]
je 0x40c691
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40c68c
je 0x40c6a1
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rdx
push r11
je 0x40c676
xor ebp, dword [rbp + 0x6f]
jbe 0x40c6af
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40c694
jae 0x40c6d9
jo 0x40c6ae
imul eax, dword [rbp + 0x76], 0x535f5452
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40c6ac
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40c6eb
movsxd rbx, dword [rdi + 0x73]
je 0x40c6f9
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40c6f4
je 0x40c709
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
imul edi, dword [rax + 0x45], 0x4740406d
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x40c6f5
jbe 0x40c726
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40c6fd
jo 0x40c72c
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40c749
movsxd rbx, dword [rdi + 0x73]
je 0x40c757
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40c752
je 0x40c767
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
pop rdi
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40c747
xor dword [rdi + 0x5f], ebx
jb 0x40c783
jae 0x40c793
outsd dx, dword [rsi]
push r11
je 0x40c75a
jo 0x40c789
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40c7a6
movsxd rbx, dword [rdi + 0x73]
je 0x40c7b4
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40c7af
je 0x40c7c4
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r8
push rsp
pop rdi
push rdx
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40c7a7
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40c7e6
movsxd rbx, dword [rdi + 0x73]
je 0x40c7f4
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40c7ef
je 0x40c804
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jo 0x40c7ed
movsxd r8, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x40c7eb
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40c82c
push r11
je 0x40c7ff
jo 0x40c82e
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40c84b
movsxd rbx, dword [rdi + 0x73]
je 0x40c859
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40c854
je 0x40c869
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
pop rdi
xor dword [r9], r15d
pop rdi
pop r15
je 0x40c876
push rsp
jo 0x40c879
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40c869
jbe 0x40c826
pop rdi
pop rdx
push rbx
je 0x40c85c
xor ebp, dword [rbp + 0x6f]
jbe 0x40c895
pop rdi
movsxd rbp, dword [rbx + 0x77]
jb 0x40c89d
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40c8a1
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40c8ba
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40c891
jo 0x40c8c0
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40c8dd
movsxd rbx, dword [rdi + 0x73]
je 0x40c8eb
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40c8e6
je 0x40c8fb
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40c8d1
jbe 0x40c902
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp dword [rdi + 0x53], ebx
push r11
cmp dword [rdi + 0x45], ebx
push r11
pop r15
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40c8f5
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x40c93f
jb 0x40c942
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x40c907
jo 0x40c936
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40c953
movsxd rbx, dword [rdi + 0x73]
je 0x40c961
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40c95c
je 0x40c971
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
pop rdi
jbe 0x40c966
push rsp
pop rdi
jo 0x40c96a
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40c956
xor ebp, dword [rbp + 0x6f]
jbe 0x40c98f
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40c96c
jo 0x40c99b
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40c9b8
movsxd rbx, dword [rdi + 0x73]
je 0x40c9c6
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40c9c1
je 0x40c9d6
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, byte [r13 + 0x53]
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40c9b8
pop rdi
jae 0x40c9f9
jb 0x40c9f6
jns 0x40c9d2
push rax
push rbx
je 0x40c9c1
jo 0x40c9f0
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40ca0d
movsxd rbx, dword [rdi + 0x73]
je 0x40ca1b
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40ca16
je 0x40ca2b
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x40ca1f
pop rdi
push rbx
cmp dword [rdi], ebx
jae 0x40ca46
outsd dx, dword fs:[rsi]
jne 0x40ca4a
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x69616d00
outsb dx, byte [rsi]
add byte [rdi + 0x5a], bl
push r11
je 0x40ca21
xor ebp, dword [rbp + 0x6f]
jbe 0x40ca5a
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40ca37
jo 0x40ca66
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40ca83
movsxd rbx, dword [rdi + 0x73]
je 0x40ca91
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40ca8c
je 0x40caa1
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jbe 0x40ca44
pop rdi
pop rdx
push rbx
je 0x40ca81
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40cac0
movsxd rbx, dword [rdi + 0x73]
je 0x40cace
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40cac9
je 0x40cade
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
push r8
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rax], al
jae 0x40cb0d
insd dword [rdi], dx
je 0x40caf8
add byte [rsi], ch
jae 0x40cb10
jb 0x40cb12
add byte [rsi], ch
jae 0x40cb0c
jae 0x40cb1a
jb 0x40cb1c
add byte [rsi], ch
imul ebp, dword [rsi + 0x74], 0x707265
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x40cb1d
sub rax, 0x676174
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x40cb2b
outsb dx, byte cs:[esi]
jne 0x40caf9
jne 0x40cb37
insb byte [rdi], dx
sub eax, 0x2e006469
outsb dx, byte [esi]
jne 0x40cb07
push 0x687361
jns 0x40cb50
jae 0x40cb5d
insd dword [rdi], dx
add byte [rsi], ch
jns 0x40cb58
jae 0x40cb60
jb 0x40caee
outsb dx, byte cs:[esi]
jne 0x40cb21
jbe 0x40cb5a
jb 0x40cb6a
imul ebp, dword [rdi + 0x6e], 0x6e672e00
jne 0x40cb2e
jbe 0x40cb67
jb 0x40cb77
imul ebp, dword [rdi + 0x6e], 0x2e00725f
jb 0x40cb72
insb byte [rdi], dx
jns 0x40cb81
add byte [rsi], ch
jb 0x40cb7c
insb byte [rdi], dx
jo 0x40cb88
je 0x40cb1e
imul ebp, dword cs:[rsi + 0x69], 0x702e0074
insb byte [rdi], dx
je 0x40cb57
outsd dx, dword [esi]
je 0x40cb2d
je 0x40cb95
js 0x40cba6
add byte [rsi], ch
imul bp, word [rsi + 0x69], 0x2e00
jb 0x40cbab
je 0x40cba1
add byte [rsi], ch
push 0x6172665f
insd dword [rdi], dx
pop rdi
push 0x2e007264
push 0x6172665f
insd dword [rdi], dx
add byte gs:[rsi], ch
movsxd rsp, dword [ebx + 0x5f]
js 0x40cbc4
jo 0x40cbd8
pop rdi
je 0x40cbc8
insb byte [rdi], dx
add byte gs:[rsi], ch
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40cbd6
jns 0x40cb77
imul bp, word cs:[rsi + 0x69], 0x615f
jb 0x40cbf2
jns 0x40cb83
push 0x63
jb 0x40cb88
jns 0x40cbfa
insd dword [rdi], dx
imul esp, dword [rbx], 0x746f672e
jo 0x40cc04
je 0x40cb9a
je 0x40cc00
add byte [rsi], ch
jae 0x40cc17
add byte [rsi], ch
movsxd rbp, dword [rdi + 0x6d]
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x40cbae
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add dh, dh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rax + 2], bl
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rdx], 1
add byte [rax], al
add byte [rax], al
add al, dl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + 3], dl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 6], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 4, eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsi
add byte [rax], al
add bh, bh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xb], cl
add byte [rax], al
add byte [rax], al
add byte [rax + 0xb], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x400b], bl
add byte [rax], al
add byte [rax + 0xb], bl
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, 0
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub byte [rax + rax*2], cl
add byte [rax], al
add byte [rax], al
add byte [rax], ch
or al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x40000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x400c], cl
add byte [rax], al
add byte [rax + 0xc], cl
add byte [rax], al
add al, dl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rip + 0x19000000], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xf], bl
add byte [rax], al
add byte [rax], al
add byte [rax + 0xf], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x400f], al
add byte [rax], al
add byte [rax + 0xf], al
add byte [rax], al
add al, dh
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x10000], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x11], dh
add byte [rax], al
add byte [rax], al
add byte [rax + 0x11], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
popfq
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4011], al
add byte [rax], al
add byte [rax + 0x11], al
add byte [rax], al
add byte [rdx + 0x39], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000000], ah
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rcx*2], dl
add byte [rax], al
add byte [rax], al
add byte [rbx + rcx*2], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [r8], al
add byte [rax], al
add byte [rax], al
rol dword [rax], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1000000], dh
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ah
add byte [rax], al
add byte [rax], al
add ah, ah
add byte [r8], al
add byte [rax], al
add byte [rax], al
in al, 3
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
add byte [rax], al
add byte [rax], al
add al, cl
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
hlt
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x40], bh
add byte [rax], al
mov esp, 0x60
add byte [rax], al
add byte [rbp + 1], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fild dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
insd dword [rdi], dx
add byte [rax], al
add byte [rax], al
add al, dh
insd dword [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0, eax
add byte [rax], al
sldt word [rax]
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
insd dword [rdi], dx
add byte [rax], al
add byte [rax], al
add al, bh
insd dword [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
outsb dx, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
outsb dx, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
outsb dx, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], cl
outsb dx, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
lock add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], bl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
outsd dx, dword [rsi]
add byte [rax], al
add byte [rax], al
add al, bh
outsd dx, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rcx], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x60], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
jo 0x40d20b
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add dword [rax], eax
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
jno 0x40d2a3
add byte [rax], al
add byte [rax], al
add byte [rax], cl
jno 0x40d24b
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rcx], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rcx + 0x60], dh
add byte [rax], al
add byte [rax], al
add byte [rcx + rsi*2], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x1000001
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rsi*2], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
retf 0
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x71], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x87], ah
add byte [rax], al
add al, dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
