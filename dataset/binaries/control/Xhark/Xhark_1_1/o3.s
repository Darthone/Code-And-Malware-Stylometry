xor ebp, ebp
mov r9, rdx
pop rsi
mov rdx, rsp
and rsp, 0xfffffffffffffff0
push rax
push rsp
mov r8, sym.__libc_csu_fini
mov rcx, sym.__libc_csu_init
mov rdi, sym.main
call sym.imp.__libc_start_main
hlt
nop word [rax + rax]
mov eax, 0x6040cf
push rbp
sub rax, obj.__TMC_END__
cmp rax, 0xe
mov rbp, rsp
jbe 0x400f30
mov eax, 0
test rax, rax
je 0x400f30
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop word [rax + rax]
pop rbp
ret
nop dword [rax]
nop word cs:[rax + rax]
mov esi, obj.__TMC_END__
push rbp
sub rsi, obj.__TMC_END__
sar rsi, 3
mov rbp, rsp
mov rax, rsi
shr rax, 0x3f
add rsi, rax
sar rsi, 1
je 0x400f78
mov eax, 0
test rax, rax
je 0x400f78
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop dword [rax]
pop rbp
ret
nop word [rax + rax]
cmp byte [rip + 0x203189], 0
jne 0x400f9a
push rbp
mov rbp, rsp
call sym.deregister_tm_clones
pop rbp
mov byte [rip + 0x203176], 1
ret
nop dword [rax]
mov edi, obj.__JCR_LIST__
cmp qword [rdi], 0
jne 0x400fb0
jmp sym.register_tm_clones
nop dword [rax]
mov eax, 0
test rax, rax
je 0x400fab
push rbp
mov rbp, rsp
call rax
pop rbp
jmp sym.register_tm_clones
nop word cs:[rax + rax]
push r15
push r14
push r13
push r12
push rbp
push rbx
mov rbx, rsi
mov rcx, rbx
sub rsp, 0xb8
sub rcx, rdi
mov rax, qword fs:[0x28]
mov qword [rsp + 0xa8], rax
xor eax, eax
cmp rcx, 0x2a7
mov qword [rsp + 0x30], rdx
mov qword [rsp + 0x28], rbx
jle 0x401458
test rdx, rdx
mov r15, rdi
je 0x40161b
lea rcx, [rdi + 8]
mov rax, rbx
mov qword [rsp + 0x38], rcx
lea rcx, [rdi + 0x50]
mov qword [rsp + 0x40], rcx
lea rcx, [rdi + 0x30]
mov qword [rsp + 0x48], rcx
sub rax, r15
movabs rcx, 0xcccccccccccccccd
mov r12d, dword [r15 + 0x28]
sar rax, 3
sub qword [rsp + 0x30], 1
imul rax, rcx
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
lea rax, [rax + rax*4]
lea rbx, [r15 + rax*8]
mov ebp, dword [rbx]
cmp r12d, ebp
jl 0x401321
jg 0x4010b7
mov r14, qword [r15 + 0x38]
mov r13, qword [rbx + 0x10]
cmp r14, r13
mov rdx, r13
cmovbe rdx, r14
test rdx, rdx
je 0x401303
mov rsi, qword [rbx + 8]
mov rdi, qword [r15 + 0x30]
call sym.imp.memcmp
test eax, eax
je 0x401303
test eax, eax
js 0x401321
mov rax, qword [rsp + 0x28]
mov r13d, dword [rax - 0x28]
cmp r12d, r13d
jl 0x4013b5
jg 0x40110b
mov rcx, qword [r15 + 0x38]
mov r14, qword [rax - 0x18]
cmp rcx, r14
mov rdx, r14
cmovbe rdx, rcx
test rdx, rdx
je 0x401435
mov rsi, qword [rax - 0x20]
mov rdi, qword [r15 + 0x30]
mov qword [rsp], rcx
call sym.imp.memcmp
test eax, eax
mov rcx, qword [rsp]
je 0x401435
test eax, eax
js 0x4013b5
cmp ebp, r13d
jl 0x4013f1
jg 0x401153
mov rax, qword [rsp + 0x28]
mov r14, qword [rbx + 0x10]
mov r12, qword [rax - 0x18]
cmp r14, r12
mov rdx, r12
cmovbe rdx, r14
test rdx, rdx
je 0x4013d3
mov rsi, qword [rax - 0x20]
mov rdi, qword [rbx + 8]
call sym.imp.memcmp
test eax, eax
je 0x4013d3
test eax, eax
js 0x4013f1
mov eax, dword [r15]
mov rdi, qword [rsp + 0x38]
lea rsi, [rbx + 8]
mov dword [r15], ebp
mov dword [rbx], eax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
mov r8d, dword [r15]
mov r14, qword [rsp + 0x40]
mov r11, r15
mov r13, qword [rsp + 0x28]
mov r15, r13
mov r13, r14
mov r14d, r8d
jmp 0x401203
nop dword [rax]
jg 0x4011ca
mov rbp, qword [r11 + 0x10]
mov r14, qword [rbx + 0x10]
cmp rbp, r14
mov rdx, r14
cmovbe rdx, rbp
test rdx, rdx
je 0x401278
mov rdi, qword [r11 + 8]
mov rsi, qword [rbx + 8]
mov qword [rsp], r11
call sym.imp.memcmp
test eax, eax
mov r11, qword [rsp]
je 0x401278
test eax, eax
js 0x40126f
cmp rbx, qword [rsp + 8]
mov r15, r13
mov r13, qword [rsp + 0x20]
jbe 0x4012bd
mov eax, dword [rsp + 0x14]
lea rsi, [rbx + 8]
lea rdi, [r13 - 0x20]
mov dword [r13 - 0x28], r12d
mov qword [rsp], r11
mov dword [rbx], eax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
mov r11, qword [rsp]
mov r14d, dword [r11]
add r13, 0x28
lea rax, [r13 - 0x28]
mov qword [rsp + 8], rax
mov qword [rsp + 0x18], rax
mov eax, dword [r13 - 0x28]
cmp r14d, eax
mov dword [rsp + 0x14], eax
jg 0x4011ff
jl 0x401254
mov rbx, qword [r13 - 0x18]
mov rbp, qword [r11 + 0x10]
cmp rbx, rbp
mov rdx, rbp
cmovbe rdx, rbx
test rdx, rdx
je 0x4012a0
mov rsi, qword [r11 + 8]
mov rdi, qword [r13 - 0x20]
mov qword [rsp], r11
call sym.imp.memcmp
test eax, eax
mov r11, qword [rsp]
je 0x4012a0
test eax, eax
js 0x4011ff
lea rbx, [r15 - 0x28]
mov qword [rsp + 0x20], r13
mov r15d, r14d
mov r12d, dword [rbx]
mov r13, rbx
cmp r15d, r12d
jge 0x401188
sub rbx, 0x28
jmp 0x401260
nop dword [rax]
sub rbp, r14
cmp rbp, 0x7fffffff
jg 0x4011ca
cmp rbp, -0x80000000
jl 0x40126f
mov eax, ebp
jmp 0x4011c2
nop dword [rax + rax]
sub rbx, rbp
cmp rbx, 0x7fffffff
jg 0x401254
cmp rbx, -0x80000000
jl 0x4011ff
mov eax, ebx
jmp 0x401250
mov rbx, qword [rsp + 8]
mov rdx, qword [rsp + 0x30]
mov r15, r11
mov rsi, qword [rsp + 0x28]
mov rdi, rbx
call sym.std::__introsort_loop___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______long___gnu_cxx::__ops::_Iter_less_iter_
mov rdx, rbx
mov rax, rbx
sub rdx, r15
cmp rdx, 0x2a7
jle 0x401458
cmp qword [rsp + 0x30], 0
je 0x4014a4
mov qword [rsp + 0x28], rax
jmp 0x40103e
mov rax, r14
sub rax, r13
cmp rax, 0x7fffffff
jg 0x4010b7
cmp rax, -0x80000000
jge 0x4010af
mov rax, qword [rsp + 0x28]
mov r13d, dword [rax - 0x28]
cmp ebp, r13d
jl 0x401153
jg 0x401375
mov rcx, qword [rbx + 0x10]
mov r14, qword [rax - 0x18]
cmp rcx, r14
mov rdx, r14
cmovbe rdx, rcx
test rdx, rdx
je 0x401412
mov rsi, qword [rax - 0x20]
mov rdi, qword [rbx + 8]
mov qword [rsp], rcx
call sym.imp.memcmp
test eax, eax
mov rcx, qword [rsp]
je 0x401412
test eax, eax
js 0x401153
cmp r12d, r13d
jl 0x4013f1
jg 0x4013b5
mov rax, qword [rsp + 0x28]
mov rbp, qword [r15 + 0x38]
mov rbx, qword [rax - 0x18]
cmp rbp, rbx
mov rdx, rbx
cmovbe rdx, rbp
test rdx, rdx
je 0x401481
mov rsi, qword [rax - 0x20]
mov rdi, qword [r15 + 0x30]
call sym.imp.memcmp
test eax, eax
je 0x401481
test eax, eax
js 0x4013f1
mov eax, dword [r15]
mov rsi, qword [rsp + 0x48]
mov rdi, qword [rsp + 0x38]
mov dword [r15], r12d
mov dword [r15 + 0x28], eax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
jmp 0x401169
mov rax, r14
sub rax, r12
cmp rax, 0x7fffffff
jg 0x401153
cmp rax, -0x80000000
jge 0x40114b
mov rcx, qword [rsp + 0x28]
mov eax, dword [r15]
mov rdi, qword [rsp + 0x38]
mov dword [r15], r13d
lea rsi, [rcx - 0x20]
mov dword [rcx - 0x28], eax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
jmp 0x401169
mov rax, rcx
sub rax, r14
cmp rax, 0x7fffffff
jg 0x401375
cmp rax, -0x80000000
jl 0x401153
jmp 0x40136d
mov rax, rcx
sub rax, r14
cmp rax, 0x7fffffff
jg 0x40110b
cmp rax, -0x80000000
jl 0x4013b5
jmp 0x401103
mov rax, qword [rsp + 0xa8]
xor rax, qword fs:[0x28]
jne 0x401641
add rsp, 0xb8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
mov rax, rbp
sub rax, rbx
cmp rax, 0x7fffffff
jg 0x4013b5
cmp rax, -0x80000000
jl 0x4013f1
jmp 0x4013b1
sub rsp, 8
mov rdi, r15
push 0
mov rsi, qword [rsp + 0x18]
call sym.std::__make_heap___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__ops::_Iter_less_iter_
pop rax
pop rdx
mov r14, qword [rsp + 0x18]
sub r14, 0x10
lea rbp, [rsp + 0x68]
lea r12, [rsp + 0x98]
movabs r13, 0xcccccccccccccccd
jmp 0x4015cc
mov qword [rsp + 0x58], rax
mov rax, qword [r14]
mov qword [rsp + 0x68], rax
mov rax, qword [r14 - 8]
mov rsi, qword [rsp + 0x38]
lea rdi, [r14 - 0x10]
mov qword [rsp + 0x60], rax
mov byte [r14], 0
mov eax, dword [r15]
mov qword [r14 - 0x10], r14
mov qword [r14 - 8], 0
mov dword [r14 - 0x18], eax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
mov eax, dword [rsp + 0x50]
mov qword [rsp + 0x88], r12
mov dword [rsp + 0x80], eax
mov rax, qword [rsp + 0x58]
cmp rax, rbp
je 0x4015fc
mov qword [rsp + 0x88], rax
mov rax, qword [rsp + 0x68]
mov qword [rsp + 0x98], rax
lea rbx, [r14 - 0x18]
mov rax, qword [rsp + 0x60]
mov qword [rsp + 0x58], rbp
mov qword [rsp + 0x60], 0
mov byte [rsp + 0x68], 0
sub rsp, 8
sub rbx, r15
xor esi, esi
mov rdi, r15
mov rdx, rbx
mov qword [rsp + 0x98], rax
push 0
sar rdx, 3
imul rdx, r13
lea rcx, [rsp + 0x90]
call sym.std::__adjust_heap___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______long_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______gnu_cxx::__ops::_Iter_less_iter_
mov rdi, qword [rsp + 0x98]
pop r8
pop r9
cmp rdi, r12
je 0x4015af
call sym.operatordelete
mov rdi, qword [rsp + 0x58]
cmp rdi, rbp
je 0x4015be
call sym.operatordelete
sub r14, 0x28
cmp rbx, 0x4f
jle 0x401458
mov eax, dword [r14 - 0x18]
mov qword [rsp + 0x58], rbp
mov dword [rsp + 0x50], eax
mov rax, qword [r14 - 0x10]
cmp rax, r14
jne 0x4014de
mov rax, qword [r14]
mov rdx, qword [r14 + 8]
mov qword [rsp + 0x68], rax
mov qword [rsp + 0x70], rdx
jmp 0x4014eb
mov rax, qword [rsp + 0x68]
mov rdx, qword [rsp + 0x70]
mov qword [rsp + 0x98], rax
mov qword [rsp + 0xa0], rdx
jmp 0x40154f
sub rsp, 8
mov rsi, rbx
mov r14, rbx
push 0
call sym.std::__make_heap___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__ops::_Iter_less_iter_
pop rcx
pop rsi
lea rax, [r15 + 8]
mov qword [rsp + 0x18], rbx
mov qword [rsp + 0x38], rax
jmp 0x4014be
call sym.imp.__stack_chk_fail
nop word cs:[rax + rax]
push r14
push r13
push r12
push rbp
mov r12d, ecx
push rbx
mov rbp, rdi
mov ebx, r8d
sub rsp, 0x50
mov rax, qword fs:[0x28]
mov qword [rsp + 0x48], rax
xor eax, eax
cmp esi, 1
je 0x401a20
lea rax, [rsp + 0x38]
lea rsi, [rsp + 0x20]
mov rdi, rsp
mov qword [rsp], 0
mov qword [rsp + 8], 0
mov qword [rsp + 0x10], 0
mov dword [rsp + 0x20], edx
mov qword [rsp + 0x28], rax
mov byte [rsp + 0x38], 0x52
mov qword [rsp + 0x30], 1
mov byte [rsp + 0x39], 0
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::_M_emplace_back_aux_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rdi, qword [rsp + 0x28]
lea rax, [rsp + 0x38]
cmp rdi, rax
je 0x4016da
call sym.operatordelete
mov rax, qword [rsp + 8]
cmp rax, qword [rsp + 0x10]
lea rdx, [rsp + 0x38]
mov dword [rsp + 0x20], r12d
mov byte [rsp + 0x38], 0x59
mov qword [rsp + 0x28], rdx
mov qword [rsp + 0x30], 1
mov byte [rsp + 0x39], 0
je 0x401acd
test rax, rax
je 0x401ac6
lea rcx, [rax + 0x18]
mov dword [rax], r12d
mov qword [rax + 8], rcx
mov rcx, qword [rsp + 0x28]
cmp rcx, rdx
je 0x401a74
mov qword [rax + 8], rcx
mov rdx, qword [rsp + 0x38]
mov qword [rax + 0x18], rdx
mov rdx, qword [rsp + 8]
mov qword [rax + 0x10], 1
lea rax, [rdx + 0x28]
mov qword [rsp + 8], rax
mov rax, qword [rsp + 8]
cmp rax, qword [rsp + 0x10]
lea rdx, [rsp + 0x38]
mov dword [rsp + 0x20], ebx
mov byte [rsp + 0x38], 0x42
mov qword [rsp + 0x28], rdx
mov qword [rsp + 0x30], 1
mov byte [rsp + 0x39], 0
je 0x401af7
test rax, rax
je 0x401abf
lea rcx, [rax + 0x18]
mov dword [rax], ebx
mov qword [rax + 8], rcx
mov rcx, qword [rsp + 0x28]
cmp rcx, rdx
je 0x401a8e
mov qword [rax + 8], rcx
mov rdx, qword [rsp + 0x38]
mov qword [rax + 0x18], rdx
mov rdx, qword [rsp + 8]
mov qword [rax + 0x10], 1
lea rax, [rdx + 0x28]
mov qword [rsp + 8], rax
mov r13, qword [rsp + 8]
mov r14, qword [rsp]
cmp r13, r14
mov rbx, r13
je 0x401865
mov r12, r13
movabs rax, 0xcccccccccccccccd
mov rsi, r13
sub r12, r14
mov rdi, r14
mov rdx, r12
sar rdx, 3
imul rax, rdx
mov edx, 0x3f
bsr rax, rax
xor rax, 0x3f
cdqe
sub rdx, rax
add rdx, rdx
call sym.std::__introsort_loop___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______long___gnu_cxx::__ops::_Iter_less_iter_
cmp r12, 0x2a7
jle 0x4019e0
sub rsp, 8
lea r12, [r14 + 0x280]
mov rdi, r14
push 0
mov rsi, r12
call sym.std::__insertion_sort___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__ops::_Iter_less_iter_
cmp r13, r12
pop rdi
pop r8
je 0x401861
nop dword [rax + rax]
sub rsp, 8
mov rdi, r12
add r12, 0x28
push 0
call sym.std::__unguarded_linear_insert___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__ops::_Val_less_iter_
cmp r13, r12
pop rcx
pop rsi
jne 0x401848
mov rbx, qword [rsp]
lea rax, [rsp + 0x30]
mov byte [rsp + 0x30], 0
mov edx, dword [rbx + 0x28]
add edx, dword [rbx]
mov qword [rsp + 0x28], 0
mov qword [rsp + 0x20], rax
mov eax, dword [rbx + 0x50]
cmp eax, edx
jg 0x401a58
nop dword [rax]
test eax, eax
jle 0x4018e9
mov rdx, qword [rbx + 0x60]
mov rsi, qword [rbx + 0x58]
lea rdi, [rsp + 0x20]
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
mov rbx, qword [rsp]
mov eax, dword [rbx + 0x50]
mov edx, dword [rbx]
sub eax, 1
cmp eax, edx
mov dword [rbx + 0x50], eax
jl 0x401988
mov ecx, dword [rbx + 0x28]
cmp eax, ecx
jge 0x4019b8
mov rdx, qword [rbx + 0x38]
mov rsi, qword [rbx + 0x30]
lea rdi, [rsp + 0x20]
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
mov rbx, qword [rsp]
mov eax, dword [rbx + 0x50]
sub dword [rbx + 0x28], 1
test eax, eax
jg 0x401894
lea rax, [rbp + 0x10]
lea rdx, [rsp + 0x30]
mov qword [rbp], rax
mov rax, qword [rsp + 0x20]
cmp rax, rdx
je 0x401aa8
mov qword [rbp], rax
mov rax, qword [rsp + 0x30]
mov qword [rbp + 0x10], rax
mov rax, qword [rsp + 0x28]
mov r12, rbx
mov qword [rbp + 8], rax
mov r13, qword [rsp + 8]
cmp rbx, r13
je 0x401956
nop word [rax + rax]
mov rdi, qword [r12 + 8]
lea rax, [r12 + 0x18]
cmp rdi, rax
je 0x401944
call sym.operatordelete
add r12, 0x28
cmp r13, r12
jne 0x401930
mov r13, qword [rsp]
test r13, r13
je 0x40195e
mov rdi, r13
call sym.operatordelete
mov rcx, qword [rsp + 0x48]
xor rcx, qword fs:[0x28]
mov rax, rbp
jne 0x401b59
add rsp, 0x50
pop rbx
pop rbp
pop r12
pop r13
pop r14
ret
nop word [rax + rax]
mov rdx, qword [rbx + 0x10]
mov rsi, qword [rbx + 8]
lea rdi, [rsp + 0x20]
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
mov rbx, qword [rsp]
sub dword [rbx], 1
mov eax, dword [rbx + 0x50]
cmp dword [rbx + 0x28], eax
jle 0x401890
jmp 0x4018c8
nop word [rax + rax]
cmp edx, ecx
jge 0x401a00
mov rdx, qword [rbx + 0x38]
mov rsi, qword [rbx + 0x30]
lea rdi, [rsp + 0x20]
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
mov rbx, qword [rsp]
sub dword [rbx + 0x28], 1
mov eax, dword [rbx + 0x50]
jmp 0x401890
nop
sub rsp, 8
mov rsi, r13
mov rdi, r14
push 0
call sym.std::__insertion_sort___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__ops::_Iter_less_iter_
mov rbx, qword [rsp + 0x10]
pop rax
pop rdx
jmp 0x401865
nop dword [rax]
mov rdx, qword [rbx + 0x10]
mov rsi, qword [rbx + 8]
lea rdi, [rsp + 0x20]
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
mov rbx, qword [rsp]
sub dword [rbx], 1
jmp 0x4019d6
nop dword [rax + rax]
cmp edx, 1
je 0x401b21
cmp ecx, 1
je 0x401b3d
cmp r8d, 1
jne 0x40167e
lea rax, [rdi + 0x10]
mov byte [rdi + 0x10], 0x42
mov qword [rdi + 8], 1
mov byte [rdi + 0x11], 0
mov qword [rdi], rax
jmp 0x40195e
lea rax, [rbp + 0x10]
mov qword [rbp + 8], 0
mov byte [rbp + 0x10], 0
mov r12, rbx
mov qword [rbp], rax
jmp 0x40191d
mov rsi, qword [rsp + 0x38]
mov rdi, qword [rsp + 0x40]
mov rdx, rax
mov qword [rax + 0x18], rsi
mov qword [rax + 0x20], rdi
jmp 0x401740
mov rcx, qword [rsp + 0x38]
mov rbx, qword [rsp + 0x40]
mov rdx, rax
mov qword [rax + 0x18], rcx
mov qword [rax + 0x20], rbx
jmp 0x4017b5
mov rax, qword [rsp + 0x30]
mov rdx, qword [rsp + 0x38]
mov qword [rbp + 0x10], rax
mov qword [rbp + 0x18], rdx
jmp 0x401911
xor edx, edx
jmp 0x4017bd
xor edx, edx
jmp 0x401748
lea rsi, [rsp + 0x20]
mov rdi, rsp
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::_M_emplace_back_aux_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rdi, qword [rsp + 0x28]
lea rax, [rsp + 0x38]
cmp rdi, rax
je 0x401751
call sym.operatordelete
jmp 0x401751
lea rsi, [rsp + 0x20]
mov rdi, rsp
call sym.std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____::_M_emplace_back_aux_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rdi, qword [rsp + 0x28]
lea rax, [rsp + 0x38]
cmp rdi, rax
je 0x4017c6
call sym.operatordelete
jmp 0x4017c6
lea rax, [rdi + 0x10]
mov byte [rdi + 0x10], 0x52
mov qword [rdi + 8], 1
mov byte [rdi + 0x11], 0
mov qword [rdi], rax
jmp 0x40195e
lea rax, [rdi + 0x10]
mov byte [rdi + 0x10], 0x59
mov qword [rdi + 8], 1
mov byte [rdi + 0x11], 0
mov qword [rdi], rax
jmp 0x40195e
call sym.imp.__stack_chk_fail
mov rdi, qword [rsp + 0x28]
mov rbx, rax
lea rax, [rsp + 0x38]
cmp rdi, rax
je 0x401b75
call sym.operatordelete
mov r12, qword [rsp + 8]
mov rbp, qword [rsp]
cmp r12, rbp
je 0x401ba2
mov rdi, qword [rbp + 8]
lea rax, [rbp + 0x18]
cmp rdi, rax
je 0x401b95
call sym.operatordelete
add rbp, 0x28
cmp r12, rbp
jne 0x401b83
mov r12, qword [rsp]
test r12, r12
je 0x401baf
mov rdi, r12
call sym.operatordelete
mov rdi, rbx
call sym.imp._Unwind_Resume
jmp 0x401b5e
jmp 0x401b5e
mov rdi, qword [rsp + 0x20]
mov rbx, rax
lea rax, [rsp + 0x30]
cmp rdi, rax
jne 0x401b70
jmp 0x401b75
nop
push r15
push r14
push r13
push r12
mov r13d, esi
push rbp
push rbx
sub rsp, 0xc8
mov rax, qword fs:[0x28]
mov qword [rsp + 0xb8], rax
xor eax, eax
cmp esi, 1
mov qword [rsp + 0x18], rdi
mov dword [rsp + 0x3c], edx
mov dword [rsp + 0x38], ecx
mov dword [rsp + 0x34], r8d
mov dword [rsp + 0x30], r9d
jne 0x401c59
cmp edx, 1
je 0x4020a2
cmp dword [rsp + 0x34], 1
je 0x402188
cmp dword [rsp + 0x100], 1
je 0x402169
cmp dword [rsp + 0x38], 1
je 0x40214a
cmp dword [rsp + 0x30], 1
je 0x40212b
cmp dword [rsp + 0x108], 1
je 0x4020c1
lea rax, [rsp + 0x60]
mov qword [rsp + 0x58], 0
mov byte [rsp + 0x60], 0
xor ebx, ebx
mov qword [rsp + 0x50], rax
lea rax, [rsp + 0x90]
lea r12, [rax + 0x10]
test ebx, ebx
mov qword [rsp + 0x90], r12
mov qword [rsp + 0x98], 0
mov byte [rsp + 0xa0], 0
je 0x4021dd
cmp ebx, 1
je 0x402220
lea rdi, [rsp + 0x90]
mov r8d, 2
mov ecx, 0x402eea
xor edx, edx
xor esi, esi
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_replace
lea rdx, [rsp + 0x3c]
lea rax, [rsp + 0x30]
mov ebp, dword [rax]
test ebp, ebp
jle 0x401ce6
sub dword [rdx], ebp
je 0x4020e0
js 0x4020ed
mov rdi, qword [rsp + 0x90]
cmp rdi, r12
je 0x401cf8
call sym.operatordelete
add ebx, 1
cmp ebx, 3
jne 0x401c7f
mov r8d, dword [rsp + 0x100]
mov ecx, dword [rsp + 0x34]
lea rdi, [rsp + 0x90]
mov edx, dword [rsp + 0x3c]
mov esi, r13d
call sym.solve2_abi:cxx11_
lea rdi, [rsp + 0x50]
lea rsi, [rsp + 0x90]
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
mov rdi, qword [rsp + 0x90]
lea rax, [rsp + 0xa0]
cmp rdi, rax
je 0x401d50
call sym.operatordelete
cmp qword [rsp + 0x58], 0
mov dword [rsp + 0x14], 0
je 0x40204e
lea rax, [rsp + 0x80]
mov qword [rsp + 0x20], rax
lea rax, [rsp + 0xa0]
mov qword [rsp + 0x28], rax
lea rax, [rsp + 0x60]
mov qword [rsp + 8], rax
mov rax, qword [rsp + 0x20]
mov qword [rsp + 0x78], 0
mov byte [rsp + 0x80], 0
mov qword [rsp + 0x70], rax
mov eax, dword [rsp + 0x14]
test eax, eax
je 0x40225d
cmp dword [rsp + 0x14], 1
je 0x402244
lea rdi, [rsp + 0x70]
mov r8d, 2
mov ecx, 0x402eea
xor edx, edx
xor esi, esi
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_replace
lea rax, [rsp + 0x30]
mov ebx, dword [rax]
test ebx, ebx
jle 0x401e20
mov rax, qword [rsp + 0x28]
mov r12, qword [rsp + 0x50]
mov rbp, qword [rsp + 0x58]
mov qword [rsp + 0x90], rax
mov rax, r12
add rax, rbp
je 0x401ead
test r12, r12
jne 0x401ead
mov edi, str.basic_string::_M_construct_null_not_valid
call sym.std::__throw_logic_error
cmp rdi, qword [rsp + 0x28]
je 0x401e20
call sym.operatordelete
mov rdi, qword [rsp + 0x70]
cmp rdi, qword [rsp + 0x20]
je 0x401e31
call sym.operatordelete
add dword [rsp + 0x14], 1
mov eax, dword [rsp + 0x14]
cmp eax, 3
jne 0x401d88
mov rcx, qword [rsp + 0x18]
lea rdx, [rsp + 0x60]
mov rax, rcx
add rax, 0x10
mov qword [rcx], rax
mov rax, qword [rsp + 0x50]
cmp rax, rdx
je 0x402086
mov rcx, qword [rsp + 0x18]
mov qword [rcx], rax
mov rax, qword [rsp + 0x60]
mov qword [rcx + 0x10], rax
mov rax, qword [rsp + 0x58]
mov qword [rcx + 8], rax
mov rcx, qword [rsp + 0xb8]
xor rcx, qword fs:[0x28]
mov rax, qword [rsp + 0x18]
jne 0x402279
add rsp, 0xc8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
cmp rbp, 0xf
mov qword [rsp + 0x48], rbp
ja 0x402005
cmp rbp, 1
je 0x401fab
test rbp, rbp
mov rax, qword [rsp + 0x28]
jne 0x40202e
mov qword [rsp + 0x98], rbp
mov byte [rax + rbp], 0
lea rdi, [rsp + 0x50]
mov rdx, qword [rsp + 0x58]
xor r8d, r8d
mov ecx, 0x402f35
xor esi, esi
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_replace
cmp qword [rsp + 0x98], 0
mov rdi, qword [rsp + 0x90]
je 0x401e14
xor ebp, ebp
mov r15d, 1
jmp 0x401f65
nop word [rax + rax]
mov byte [rax + r12], r14b
mov rax, qword [rsp + 0x50]
test r15b, r15b
mov qword [rsp + 0x58], r13
mov byte [rax + r12 + 1], 0
mov rdi, qword [rsp + 0x90]
je 0x401f53
mov rsi, qword [rsp + 0x70]
movzx eax, byte [rsi + 1]
cmp byte [rdi + rbp], al
je 0x401fd0
add rbp, 1
cmp qword [rsp + 0x98], rbp
jbe 0x401e14
mov rax, qword [rsp + 0x50]
cmp rax, qword [rsp + 8]
mov r12, qword [rsp + 0x58]
movzx r14d, byte [rdi + rbp]
lea r13, [r12 + 1]
je 0x401fc8
mov rdx, qword [rsp + 0x60]
cmp r13, rdx
jbe 0x401f20
lea rdi, [rsp + 0x50]
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, r12
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rax, qword [rsp + 0x50]
jmp 0x401f20
movzx eax, byte [r12]
mov byte [rsp + 0xa0], al
mov rax, qword [rsp + 0x28]
jmp 0x401ed4
nop dword [rax]
mov edx, 0xf
jmp 0x401f85
nop
xor r12d, r12d
jmp 0x401fdd
nop dword [rax]
mov rsi, qword [rsp + 0x70]
mov rdx, qword [rsp + 0x78]
lea rdi, [rsp + 0x50]
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
add r12d, 1
cmp ebx, r12d
jne 0x401fd8
mov rdi, qword [rsp + 0x90]
xor r15d, r15d
jmp 0x401f53
lea rsi, [rsp + 0x48]
lea rdi, [rsp + 0x90]
xor edx, edx
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_create
mov rdx, qword [rsp + 0x48]
mov qword [rsp + 0x90], rax
mov qword [rsp + 0xa0], rdx
mov rdx, rbp
mov rsi, r12
mov rdi, rax
call sym.imp.memcpy
mov rbp, qword [rsp + 0x48]
mov rax, qword [rsp + 0x90]
jmp 0x401ed4
mov rcx, qword [rsp + 0x18]
mov rax, rcx
mov qword [rcx + 8], 0
mov byte [rcx + 0x10], 0
add rax, 0x10
mov qword [rcx], rax
mov rdi, qword [rsp + 0x50]
lea rax, [rsp + 0x60]
cmp rdi, rax
je 0x401e7f
call sym.operatordelete
jmp 0x401e7f
mov rcx, qword [rsp + 0x18]
mov rax, qword [rsp + 0x60]
mov rdx, qword [rsp + 0x68]
mov qword [rcx + 0x10], rax
mov qword [rcx + 0x18], rdx
jmp 0x401e76
mov rax, rdi
mov byte [rdi + 0x10], 0x52
mov qword [rdi + 8], 1
add rax, 0x10
mov byte [rdi + 0x11], 0
mov qword [rdi], rax
jmp 0x401e7f
mov rax, rdi
mov byte [rdi + 0x10], 0x56
mov qword [rdi + 8], 1
add rax, 0x10
mov byte [rdi + 0x11], 0
mov qword [rdi], rax
jmp 0x401e7f
lea eax, [rbp + rbp]
cmp r13d, eax
je 0x4022a4
mov rcx, qword [rsp + 0x18]
mov rax, rcx
mov qword [rcx + 8], 0
mov byte [rcx + 0x10], 0
add rax, 0x10
mov qword [rcx], rax
mov rdi, qword [rsp + 0x90]
lea rax, [rsp + 0xa0]
cmp rdi, rax
je 0x402069
call sym.operatordelete
jmp 0x402069
mov rax, rdi
mov byte [rdi + 0x10], 0x47
mov qword [rdi + 8], 1
add rax, 0x10
mov byte [rdi + 0x11], 0
mov qword [rdi], rax
jmp 0x401e7f
mov rax, rdi
mov byte [rdi + 0x10], 0x4f
mov qword [rdi + 8], 1
add rax, 0x10
mov byte [rdi + 0x11], 0
mov qword [rdi], rax
jmp 0x401e7f
mov rax, rdi
mov byte [rdi + 0x10], 0x42
mov qword [rdi + 8], 1
add rax, 0x10
mov byte [rdi + 0x11], 0
mov qword [rdi], rax
jmp 0x401e7f
mov rax, rdi
mov byte [rdi + 0x10], 0x59
mov qword [rdi + 8], 1
add rax, 0x10
mov byte [rdi + 0x11], 0
mov qword [rdi], rax
jmp 0x401e7f
mov rbx, rax
mov rdi, qword [rsp + 0x70]
lea rax, [rsp + 0x80]
cmp rdi, rax
je 0x4021c1
call sym.operatordelete
mov rdi, qword [rsp + 0x50]
lea rax, [rsp + 0x60]
cmp rdi, rax
je 0x4021d5
call sym.operatordelete
mov rdi, rbx
call sym.imp._Unwind_Resume
lea rdi, [rsp + 0x90]
mov esi, 0x402ee4
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::assign
lea rdx, [rsp + 0x34]
lea rax, [rsp + 0x108]
jmp 0x401cd2
mov rbx, rax
jmp 0x4021c1
mov rdi, qword [rsp + 0x90]
mov rbx, rax
lea rax, [rsp + 0xa0]
cmp rdi, rax
jne 0x4021bc
jmp 0x4021c1
lea rdi, [rsp + 0x90]
mov esi, 0x402ee7
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::assign
lea rdx, [rsp + 0x100]
lea rax, [rsp + 0x38]
jmp 0x401cd2
lea rdi, [rsp + 0x70]
mov esi, 0x402ee7
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::assign
lea rax, [rsp + 0x38]
jmp 0x401dd8
lea rdi, [rsp + 0x70]
mov esi, 0x402ee4
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::assign
lea rax, [rsp + 0x108]
jmp 0x401dd8
call sym.imp.__stack_chk_fail
mov rdi, qword [rsp + 0x90]
mov rbx, rax
lea rax, [rsp + 0xa0]
cmp rdi, rax
je 0x4021aa
call sym.operatordelete
jmp 0x4021aa
xor ebx, ebx
mov rdx, qword [rsp + 0x98]
mov rsi, qword [rsp + 0x90]
lea rdi, [rsp + 0x50]
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
add ebx, 1
cmp ebp, ebx
jg 0x4022a6
mov rcx, qword [rsp + 0x18]
lea rdx, [rsp + 0x60]
mov rax, rcx
add rax, 0x10
mov qword [rcx], rax
mov rax, qword [rsp + 0x50]
cmp rax, rdx
je 0x40231c
mov rcx, qword [rsp + 0x18]
mov qword [rcx], rax
mov rax, qword [rsp + 0x60]
mov qword [rcx + 0x10], rax
mov rax, qword [rsp + 0x58]
mov byte [rsp + 0x60], 0
mov qword [rsp + 0x58], 0
mov qword [rcx + 8], rax
lea rax, [rsp + 0x60]
mov qword [rsp + 0x50], rax
jmp 0x402108
mov rcx, qword [rsp + 0x18]
mov rax, qword [rsp + 0x60]
mov rdx, qword [rsp + 0x68]
mov qword [rcx + 0x10], rax
mov qword [rcx + 0x18], rdx
jmp 0x4022f6
nop word cs:[rax + rax]
nop
push r15
push r14
movabs rcx, 0xcccccccccccccccd
push r13
push r12
push rbp
push rbx
mov rbx, rsi
mov rbp, rdi
sub rsp, 8
mov rdx, qword [rdi + 8]
mov r15, qword [rdi]
mov rax, rdx
sub rax, r15
mov rsi, rax
sar rsi, 3
imul rcx, rsi
test rcx, rcx
je 0x402510
lea rsi, [rcx + rcx]
cmp rcx, rsi
jbe 0x402535
mov r13, -0x10
mov rdi, r13
call sym.operatornew
mov rdx, qword [rbp + 8]
mov r15, qword [rbp]
mov r12, rax
add r13, rax
lea r14, [r12 + 0x28]
mov rax, rdx
sub rax, r15
add rax, r12
je 0x402402
mov edx, dword [rbx]
mov rcx, qword [rbx + 8]
mov dword [rax], edx
lea rdx, [rax + 0x18]
mov qword [rax + 8], rdx
lea rdx, [rbx + 0x18]
cmp rcx, rdx
je 0x402520
mov qword [rax + 8], rcx
mov rcx, qword [rbx + 0x18]
mov qword [rax + 0x18], rcx
mov rcx, qword [rbx + 0x10]
mov qword [rbx + 8], rdx
mov byte [rbx + 0x18], 0
mov rdx, qword [rbp + 8]
mov r15, qword [rbp]
mov qword [rbx + 0x10], 0
mov qword [rax + 0x10], rcx
cmp rdx, r15
je 0x4024df
lea rcx, [r15 + 0x28]
movabs rdi, 0x1fffffffffffffff
lea rax, [r15 + 0x18]
sub rdx, rcx
movabs rcx, 0xccccccccccccccd
shr rdx, 3
imul rdx, rcx
and rdi, rdx
lea rdx, [rdi + rdi*4]
lea rsi, [r15 + rdx*8 + 0x40]
mov rdx, r12
jmp 0x402477
nop dword [rax + rax]
mov qword [rdx + 8], rcx
mov rcx, qword [rax]
mov qword [rdx + 0x18], rcx
mov rcx, qword [rax - 8]
mov qword [rdx + 0x10], rcx
mov qword [rax - 0x10], rax
mov qword [rax - 8], 0
mov byte [rax], 0
add rax, 0x28
add rdx, 0x28
cmp rax, rsi
je 0x4024a8
test rdx, rdx
je 0x40246a
mov ecx, dword [rax - 0x18]
mov dword [rdx], ecx
lea rcx, [rdx + 0x18]
mov qword [rdx + 8], rcx
mov rcx, qword [rax - 0x10]
cmp rcx, rax
jne 0x402448
mov rcx, qword [rax]
mov rbx, qword [rax + 8]
mov qword [rdx + 0x18], rcx
mov qword [rdx + 0x20], rbx
jmp 0x402453
nop dword [rax + rax]
mov r15, qword [rbp + 8]
mov rbx, qword [rbp]
lea rax, [rdi + rdi*4 + 5]
lea r14, [r12 + rax*8 + 0x28]
cmp r15, rbx
je 0x4024df
nop
mov rdi, qword [rbx + 8]
lea rax, [rbx + 0x18]
cmp rdi, rax
je 0x4024d2
call sym.operatordelete
add rbx, 0x28
cmp rbx, r15
jne 0x4024c0
mov r15, qword [rbp]
test r15, r15
je 0x4024ec
mov rdi, r15
call sym.operatordelete
mov qword [rbp], r12
mov qword [rbp + 8], r14
mov qword [rbp + 0x10], r13
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop word [rax + rax]
mov r13d, 0x28
jmp 0x402393
nop dword [rax + rax]
mov rsi, qword [rbx + 0x18]
mov rdi, qword [rbx + 0x20]
mov qword [rax + 0x18], rsi
mov qword [rax + 0x20], rdi
jmp 0x4023e2
movabs rdi, 0x666666666666666
cmp rsi, rdi
ja 0x40238c
test rsi, rsi
jne 0x40255e
mov r14d, 0x28
xor r13d, r13d
xor r12d, r12d
jmp 0x4023b4
lea r13, [rsi + rcx*8]
shl r13, 3
jmp 0x402393
nop dword [rax + rax]
push r15
push r14
push r13
push r12
mov r13, rdi
push rbp
push rbx
sub rsp, 0x48
mov rdx, qword [rdi + 8]
mov r15d, dword [rdi]
mov rax, qword fs:[0x28]
mov qword [rsp + 0x38], rax
xor eax, eax
lea rax, [rsp + 0x28]
mov dword [rsp + 0x10], r15d
mov qword [rsp + 0x18], rax
lea rax, [rdi + 0x18]
cmp rax, rdx
je 0x4026e0
mov qword [rsp + 0x18], rdx
mov rdx, qword [rdi + 0x18]
mov qword [rsp + 0x28], rdx
mov rdx, qword [r13 + 0x10]
lea r12, [r13 + 8]
mov r14, -0x20
mov qword [r13 + 8], rax
mov qword [r13 + 0x10], 0
mov rbp, r13
mov byte [r13 + 0x18], 0
sub r14, r12
mov qword [rsp + 0x20], rdx
nop dword [rax]
mov ebx, dword [rbp - 0x28]
cmp r15d, ebx
jl 0x402690
jg 0x402646
mov rcx, qword [rsp + 0x20]
mov r8, qword [rbp - 0x18]
cmp rcx, r8
mov rdx, r8
cmovbe rdx, rcx
test rdx, rdx
je 0x4026c0
mov rsi, qword [rbp - 0x20]
mov rdi, qword [rsp + 0x18]
mov qword [rsp + 8], r8
mov qword [rsp], rcx
call sym.imp.memcmp
test eax, eax
mov rcx, qword [rsp]
mov r8, qword [rsp + 8]
je 0x4026c0
test eax, eax
js 0x402690
lea rsi, [rsp + 0x18]
mov rdi, r12
mov dword [rbp], r15d
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
mov rdi, qword [rsp + 0x18]
lea rax, [rsp + 0x28]
cmp rdi, rax
je 0x40266b
call sym.operatordelete
mov rax, qword [rsp + 0x38]
xor rax, qword fs:[0x28]
jne 0x4026f7
add rsp, 0x48
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop word [rax + rax]
mov dword [rbp], ebx
lea rbx, [r12 + r14]
mov rdi, r12
sub rbp, 0x28
add rbx, r13
mov rsi, rbx
mov r12, rbx
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
mov r15d, dword [rsp + 0x10]
jmp 0x4025f0
nop word cs:[rax + rax]
sub rcx, r8
cmp rcx, 0x7fffffff
jg 0x402646
cmp rcx, -0x80000000
jl 0x402690
mov eax, ecx
jmp 0x402642
mov rcx, qword [rdi + 0x18]
mov rbx, qword [rdi + 0x20]
mov qword [rsp + 0x28], rcx
mov qword [rsp + 0x30], rbx
jmp 0x4025c2
call sym.imp.__stack_chk_fail
nop dword [rax]
push r15
push r14
push r13
push r12
push rbp
push rbx
sub rsp, 0x58
mov rax, qword fs:[0x28]
mov qword [rsp + 0x48], rax
xor eax, eax
cmp rsi, rdi
je 0x402891
mov rbp, rdi
lea rdi, [rdi + 0x28]
mov r14, rsi
cmp rdi, rsi
je 0x402891
lea rax, [rsp + 0x28]
mov r15, rdi
lea r13, [rsp + 0x38]
mov qword [rsp], rax
lea rax, [rbp + 8]
mov qword [rsp + 8], rax
jmp 0x4027cd
nop word cs:[rax + rax]
jg 0x4027ad
mov rbx, qword [r15 + 0x10]
mov r9, qword [rbp + 0x10]
mov r12, qword [r15 + 8]
cmp rbx, r9
mov rdx, r9
cmovbe rdx, rbx
test rdx, rdx
je 0x4028b0
mov rsi, qword [rbp + 8]
mov rdi, r12
mov dword [rsp + 0x1c], r8d
mov qword [rsp + 0x10], r9
call sym.imp.memcmp
test eax, eax
mov r9, qword [rsp + 0x10]
mov r8d, dword [rsp + 0x1c]
je 0x4028b0
test eax, eax
js 0x4027de
sub rsp, 8
mov rdi, r15
lea r12, [r15 + 0x28]
push 0
call sym.std::__unguarded_linear_insert___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_________gnu_cxx::__ops::_Val_less_iter_
pop rax
pop rdx
cmp r14, r12
mov r15, r12
je 0x402891
mov r8d, dword [r15]
cmp r8d, dword [rbp]
jge 0x402760
mov r12, qword [r15 + 8]
mov rbx, qword [r15 + 0x10]
lea rax, [r15 + 0x18]
mov dword [rsp + 0x20], r8d
mov qword [rsp + 0x28], r13
cmp rax, r12
je 0x4028d8
mov rdx, qword [r15 + 0x18]
mov qword [rsp + 0x28], r12
mov qword [rsp + 0x38], rdx
mov qword [rsp + 0x30], rbx
mov rbx, r15
mov qword [r15 + 8], rax
sub rbx, rbp
movabs rax, 0xcccccccccccccccd
mov qword [r15 + 0x10], 0
sar rbx, 3
mov byte [r15 + 0x18], 0
lea r12, [r15 + 0x28]
imul rbx, rax
test rbx, rbx
jle 0x402860
lea rdi, [r15 + 8]
nop
mov eax, dword [rdi - 0x30]
lea r15, [rdi - 0x28]
mov rsi, r15
mov dword [rdi - 8], eax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
sub rbx, 1
mov rdi, r15
jne 0x402840
mov r8d, dword [rsp + 0x20]
mov rdi, qword [rsp + 8]
mov rsi, qword [rsp]
mov dword [rbp], r8d
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
mov rdi, qword [rsp + 0x28]
cmp rdi, r13
je 0x4027c1
call sym.operatordelete
cmp r14, r12
mov r15, r12
jne 0x4027cd
mov rax, qword [rsp + 0x48]
xor rax, qword fs:[0x28]
jne 0x4028ef
add rsp, 0x58
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
mov rax, rbx
sub rax, r9
cmp rax, 0x7fffffff
jg 0x4027ad
cmp rax, -0x80000000
jl 0x4027de
jmp 0x4027a9
nop dword [rax + rax]
mov rsi, qword [r15 + 0x18]
mov rdi, qword [r15 + 0x20]
mov qword [rsp + 0x38], rsi
mov qword [rsp + 0x40], rdi
jmp 0x402803
call sym.imp.__stack_chk_fail
nop word cs:[rax + rax]
nop
push r15
push r14
mov rax, rdx
push r13
push r12
sub rax, 1
push rbp
push rbx
mov r12, rdi
mov rdi, rsi
sub rsp, 0x88
mov qword [rsp + 0x48], rdx
mov rdx, rax
mov qword [rsp + 0x40], rsi
shr rdx, 0x3f
mov qword [rsp + 0x18], rcx
add rax, rdx
sar rax, 1
mov rsi, qword fs:[0x28]
mov qword [rsp + 0x78], rsi
xor esi, esi
cmp rdi, rax
mov qword [rsp + 0x10], rax
jge 0x402ca4
lea rax, [rdi + rdi*4]
mov r13, rdi
mov rcx, r12
lea r10, [r12 + rax*8 + 8]
jmp 0x402a11
nop dword [rax]
mov r9, qword [r12 + 0x10]
mov r11, qword [rbp + 0x10]
cmp r9, r11
mov rdx, r11
cmovbe rdx, r9
test rdx, rdx
je 0x402a50
mov rsi, qword [rbp + 8]
mov rdi, qword [r12 + 8]
mov qword [rsp + 0x38], rcx
mov qword [rsp + 0x30], r10
mov qword [rsp + 0x28], r11
mov qword [rsp + 0x20], r9
mov dword [rsp + 8], r8d
call sym.imp.memcmp
test eax, eax
mov r8d, dword [rsp + 8]
mov r9, qword [rsp + 0x20]
mov r11, qword [rsp + 0x28]
mov r10, qword [rsp + 0x30]
mov rcx, qword [rsp + 0x38]
je 0x402a50
test eax, eax
cmovns rbp, r12
cmovns r14d, r8d
cmovns rbx, r15
lea rax, [r13 + r13*4]
lea r13, [rbp + 8]
mov rdi, r10
mov qword [rsp + 8], rcx
mov dword [rcx + rax*8], r14d
mov rsi, r13
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
cmp rbx, qword [rsp + 0x10]
mov rcx, qword [rsp + 8]
jge 0x402a78
mov r10, r13
mov r13, rbx
lea rax, [r13 + 1]
lea r15, [rax + rax]
lea rbx, [r15 - 1]
lea rax, [r15 + rax*8]
lea rdx, [rbx + rbx*4]
lea r12, [rcx + rax*8]
lea rbp, [rcx + rdx*8]
mov r8d, dword [r12]
mov r14d, dword [rbp]
cmp r8d, r14d
jl 0x4029e2
jle 0x402970
mov rbp, r12
mov r14d, r8d
mov rbx, r15
jmp 0x4029e2
nop dword [rax + rax]
sub r9, r11
cmp r9, 0x7fffffff
jg 0x402a40
cmp r9, -0x80000000
jl 0x4029e2
mov eax, r9d
jmp 0x4029d4
nop dword [rax]
mov r12, rcx
mov rax, qword [rsp + 0x48]
test al, 1
jne 0x402a9e
sub rax, 2
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
cmp rax, rbx
je 0x402c58
mov rdi, qword [rsp + 0x18]
lea rax, [rsp + 0x68]
mov qword [rsp + 0x58], rax
mov rdx, qword [rdi + 8]
mov ecx, dword [rdi]
mov rax, rdi
add rax, 0x18
cmp rdx, rax
mov dword [rsp + 0x50], ecx
je 0x402c88
mov qword [rsp + 0x58], rdx
mov rdx, qword [rdi + 0x18]
mov rsi, rdi
mov qword [rsp + 0x68], rdx
mov r15, qword [rsp + 0x40]
mov rdx, qword [rsi + 0x10]
mov qword [rsi + 8], rax
mov qword [rsi + 0x10], 0
mov byte [rsi + 0x18], 0
cmp rbx, r15
mov qword [rsp + 0x60], rdx
jle 0x402b99
lea rax, [rbx - 1]
mov r8, r13
mov r14, rax
shr r14, 0x3f
add r14, rax
sar r14, 1
nop dword [rax + rax]
lea rax, [r14 + r14*4]
lea rbp, [r12 + rax*8]
mov r9d, dword [rbp]
cmp r9d, ecx
jl 0x402c00
jg 0x402b91
mov r10, qword [rbp + 0x10]
mov r11, qword [rsp + 0x60]
cmp r10, r11
mov rdx, r11
cmovbe rdx, r10
test rdx, rdx
je 0x402be8
mov rdi, qword [rbp + 8]
mov rsi, qword [rsp + 0x58]
mov qword [rsp + 0x28], r8
mov dword [rsp + 0x20], ecx
mov qword [rsp + 0x18], r11
mov qword [rsp + 0x10], r10
mov dword [rsp + 8], r9d
call sym.imp.memcmp
test eax, eax
mov r9d, dword [rsp + 8]
mov r10, qword [rsp + 0x10]
mov r11, qword [rsp + 0x18]
mov ecx, dword [rsp + 0x20]
mov r8, qword [rsp + 0x28]
je 0x402be8
test eax, eax
js 0x402c00
lea rax, [rbx + rbx*4]
lea rbp, [r12 + rax*8]
lea rsi, [rsp + 0x58]
mov rdi, r13
mov dword [rbp], ecx
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
mov rdi, qword [rsp + 0x58]
lea rax, [rsp + 0x68]
cmp rdi, rax
je 0x402bbd
call sym.operatordelete
mov rax, qword [rsp + 0x78]
xor rax, qword fs:[0x28]
jne 0x402cb8
add rsp, 0x88
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop dword [rax + rax]
sub r10, r11
cmp r10, 0x7fffffff
jg 0x402b91
cmp r10, -0x80000000
jge 0x402c50
nop dword [rax]
lea rax, [rbx + rbx*4]
lea r13, [rbp + 8]
mov rdi, r8
mov dword [r12 + rax*8], r9d
mov rsi, r13
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
cmp r15, r14
jl 0x402c28
mov ecx, dword [rsp + 0x50]
jmp 0x402b99
nop dword [rax]
lea rax, [r14 - 1]
mov rbx, r14
mov ecx, dword [rsp + 0x50]
mov r8, r13
mov rdx, rax
shr rdx, 0x3f
add rax, rdx
sar rax, 1
mov r14, rax
jmp 0x402b18
nop dword [rax + rax]
mov eax, r10d
jmp 0x402b8d
lea rbx, [rbx + rbx + 1]
mov rdi, r13
lea rax, [rbx + rbx*4]
lea r14, [r12 + rax*8]
mov eax, dword [r14]
mov dword [rbp], eax
lea rbp, [r14 + 8]
mov rsi, rbp
mov r13, rbp
mov rbp, r14
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
jmp 0x402a9e
nop dword [rax]
mov rsi, qword [rdi + 0x18]
mov rdi, qword [rdi + 0x20]
mov qword [rsp + 0x68], rsi
mov qword [rsp + 0x70], rdi
mov rsi, qword [rsp + 0x18]
jmp 0x402ad8
lea rax, [rdi + rdi*4]
mov rbx, rdi
lea rbp, [r12 + rax*8]
lea r13, [rbp + 8]
jmp 0x402a7b
call sym.imp.__stack_chk_fail
nop dword [rax]
sub rsi, rdi
push r15
push r14
sar rsi, 3
movabs r14, 0xcccccccccccccccd
push r13
imul r14, rsi
push r12
push rbp
push rbx
sub rsp, 0x68
mov rax, qword fs:[0x28]
mov qword [rsp + 0x58], rax
xor eax, eax
cmp r14, 1
jle 0x402e34
lea rbp, [r14 - 2]
mov r15, rdi
lea r12, [rsp + 0x18]
lea r13, [rsp + 0x48]
sar rbp, 1
lea rax, [rbp + rbp*4]
lea rbx, [rdi + rax*8 + 0x18]
jmp 0x402dba
mov rcx, qword [rbx]
cmp rax, r12
mov rsi, qword [rbx - 8]
mov qword [rsp + 8], rax
mov qword [rbx - 0x10], rbx
mov qword [rbx - 8], 0
mov byte [rbx], 0
mov qword [rsp + 0x18], rcx
mov dword [rsp + 0x30], edx
mov qword [rsp + 0x38], r13
je 0x402dff
mov qword [rsp + 0x38], rax
mov qword [rsp + 0x48], rcx
mov qword [rsp + 0x40], rsi
mov qword [rsp + 8], r12
sub rsp, 8
mov qword [rsp + 0x18], 0
mov byte [rsp + 0x20], 0
mov rdx, r14
push 0
mov rdi, r15
mov rsi, rbp
lea rcx, [rsp + 0x40]
call sym.std::__adjust_heap___gnu_cxx::__normal_iterator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_____std::vector_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____std::allocator_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char_______long_std::pair_int_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char______gnu_cxx::__ops::_Iter_less_iter_
mov rdi, qword [rsp + 0x48]
pop rax
pop rdx
cmp rdi, r13
je 0x402d9e
call sym.operatordelete
test rbp, rbp
je 0x402e20
mov rdi, qword [rsp + 8]
sub rbp, 1
cmp rdi, r12
je 0x402db6
call sym.operatordelete
sub rbx, 0x28
mov rax, qword [rbx - 0x10]
mov edx, dword [rbx - 0x18]
mov qword [rsp + 8], r12
cmp rbx, rax
mov dword [rsp], edx
jne 0x402d20
mov rsi, qword [rbx]
mov rdi, qword [rbx + 8]
mov qword [rbx - 0x10], rbx
mov byte [rbx], 0
mov dword [rsp + 0x30], edx
mov qword [rsp + 0x38], r13
mov qword [rsp + 0x18], rsi
mov qword [rsp + 0x20], rdi
mov rsi, qword [rbx - 8]
mov qword [rbx - 8], 0
mov rax, qword [rsp + 0x18]
mov rdx, qword [rsp + 0x20]
mov qword [rsp + 0x48], rax
mov qword [rsp + 0x50], rdx
jmp 0x402d5c
nop dword [rax + rax]
mov rdi, qword [rsp + 8]
lea rax, [rsp + 0x18]
cmp rdi, rax
je 0x402e34
call sym.operatordelete
mov rax, qword [rsp + 0x58]
xor rax, qword fs:[0x28]
jne 0x402e53
add rsp, 0x68
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
call sym.imp.__stack_chk_fail
nop dword [rax + rax]
push r15
push r14
mov r15d, edi
push r13
push r12
lea r12, [rip + 0x200f7e]
push rbp
lea rbp, [rip + 0x200f7e]
push rbx
mov r14, rsi
mov r13, rdx
sub rbp, r12
sub rsp, 8
sar rbp, 3
call sym._init
test rbp, rbp
je 0x402eb6
xor ebx, ebx
nop dword [rax + rax]
mov rdx, r13
mov rsi, r14
mov edi, r15d
call qword [r12 + rbx*8]
add rbx, 1
cmp rbx, rbp
jne 0x402ea0
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
nop word cs:[rax + rax]
ret
add byte [rax], al
sub rsp, 8
add rsp, 8
ret
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add al, byte [rax]
push rsi
pop rcx
add byte [rdi + 0x42], cl
add byte [rdi + 0x52], al
add byte [rdx], dh
sub eax, 0x6772616c
imul ebp, dword cs:[rsi], 0x2d420077
sub eax, 0x6772616c
outsd dx, dword cs:[rsi]
jne 0x402f7b
add byte [rip + 0x64252064], ah
and eax, 0x64252064
and byte [rip + 0x64252064], ah
and byte [rip + 0x64252064], ah
and byte [rip + 0x4d490064], ah
push r8
push r11
push rbx
add byte [r11 + 0x61], r8b
jae 0x402f91
and byte [rbx], ah
and eax, 0x25203a64
jae 0x402f3f
add byte [rax], al
add byte [rdx + 0x61], ah
jae 0x402fa5
movsxd rbx, dword [rdi + 0x73]
je 0x402fb3
imul ebp, dword [rsi + 0x67], 0x4d5f3a3a
pop rdi
movsxd rbp, dword [rdi + 0x6e]
jae 0x402fc2
jb 0x402fc5
movsxd rsi, dword [rax + 0x6e]
jne 0x402fc2
insb byte [rdi], dx
and byte [rsi + 0x6f], ch
je 0x402f7c
jbe 0x402fbf
insb byte [rdi], dx
imul esp, dword [rax + rax], 0
add byte [rbp + 0x52], al
push r10
push rdx
push r10
and byte [rip + 0x203a2064], ah
and eax, 0x64252064
and byte [rip + 0x64252064], ah
and byte [rip + 0x64252064], ah
and byte [rip + 0x3e3d2064], ah
and byte [rip + 0xa73], ah
add dword [rbx], ebx
add edi, dword [rbx]
je 0x402f96
add byte [rax], al
or eax, 0x30000000
fdiv st(7), st(0)
inc eax
add byte [rax], al
add byte [rax + 0x10ffffdd], al
add al, 0
add byte [rax - 0x21], al
call qword [rax + 0x40000000]
loopne 0x402fb6
lcall [rax - 0x3ffffffe]
out 0xff, al
cmp byte [rbx], al
add byte [rax], al
in al, dx
mov eax, 0xb0000003
call 0xffffffffe0402fd5
cmc
cmp byte [rcx], al
add byte [rax], al
jo 0x402fd5
dec dword [rax + 0x70000001]
stc
call 0x30402fee
std
cmp byte [rdx], al
add byte [rax], al
sar dh, 1
dec dword [rax + 4]
add byte [rax], al
call qword [rax + 4]
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x403027
add dword [rbx], ebx
or al, 7
or byte [rax + 0x14100701], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
test al, 0xde
ljmp [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x403057
add dword [rbx], ebx
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
push 0x40ffffdb
add dword [rax], eax
add byte [rax], al
adc byte [rsi + 0xe], al
sbb byte [rdx + 0xf], cl
or esi, dword [rdi + 8]
add byte [rax], 0x3f
sbb bh, byte [rbx]
sub dh, byte [rbx]
and al, 0x22
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax + rax], al
add al, al
ljmp [rbx]
add al, byte [rax]
add byte [rax], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bf], es
cmp byte [rbx + 0x400e4a07], al
add ebx, dword [rsi + 0x380e0a01]
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rdx + 0xb], cl
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax + rax - 0xb600000], dl
dec dword [rcx + rax + 0x42000000]
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bc], es
cmp byte [rbx - 0x7ff1bbf9], al
add dword [rdx], eax
dec byte [rdx]
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rdi + 0xb], al
add byte [rax], al
add byte [rax], al
pop rsp
add byte [rax], al
add ah, ah
add byte [rax], al
add al, ah
cmc
push rsp
add dword [rax], eax
add byte [rax], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bf], es
cmp byte [rbx - 0x6ff1bbf9], al
add dword [rdx], eax
movabs dword [0x4601a00e4901980e], eax
cwde
add dword [rcx + 0xe], eax
nop
add dword [rdx], eax
in al, 0xa
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rcx + 0xb], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rcx + rax], al
add byte [rax - 0x42000009], al
add eax, dword [rax]
add byte [rax], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bb], es
cmp byte [rbx - 0x3ff1b2f9], al
add dword [rbx], eax
mov edx, 0x380e0a02
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rsi + 0xb], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rcx + rax - 0x5100000], dl
lcall [rax + 1]
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
push rax
and byte [rbp + 0x280e4604], cl
mov word [rip - 0x79cff1bf], es
cmp byte [rbx - 0x5ff1bbf9], al
add dword [rdx], eax
xchg dword [rsi], ecx
test al, 1
push rbx
mov al, 1
push rsi
test al, 1
movabs al, byte [0xe41380e0ab40201]
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rcx + 0xb], al
add byte [rax], al
add byte [rax + rax], bh
add ah, dh
add dword [rax], eax
add byte [rax + 0x76ffffdd], ah
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bf], es
cmp byte [rbx - 0xff1b2f9], al
add dword [rbx], eax
pop qword [rdx + rcx]
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rcx + 0xb], al
clc
add dword [rbp + 0xe], eax
add byte [rdx], 0x4b
clc
add dword [rcx + 0xe], eax
lock add dword [rdx], eax
mov dh, 0xe
clc
add dword [rbp + 0xe], edx
add byte [rdx], 0x5f
clc
add dword [rdx + 0xe], eax
lock add dword [rdx], eax
jp 0x4032a7
clc
add dword [rax + 0xe], ecx
add byte [rdx], 0x46
clc
add dword [rcx + 0xe], eax
lock add dword [rax], eax
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x50], edi
push rdx
add byte [rcx], al
js 0x4032c9
add eax, eax
or al, 0x40
add byte [rbx], al
sbb ecx, dword [rdi + rax]
or byte [rax + 0x7c000001], dl
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
and bl, 0xff
jg 0x4032db
add byte [rax], al
add al, 0x3c
xor al, 0x40
add byte [rdx + 0xe], al
adc byte [rsi + 0x180e4202], cl
lea eax, [rbx]
and byte [rsp + rax - 0x79d7f1bf], cl
add eax, 0x83300e44
add byte [rcx], 3
ret 0xe01
mov byte [rcx], al
nop
add dword [rsi + rcx - 0x78], ecx
add dword [rdx + 0xe], eax
add byte [rcx], 0x4b
mov byte [rcx], al
nop
add dword [rcx + 0xe], ecx
mov byte [rcx], al
add byte [rcx], 3
sbb al, byte [rcx]
or cl, byte [rsi]
xor byte [rcx + 0xe], al
sub byte [rcx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rdi + 0xb], al
add bl, byte [rsi + rcx - 0x78]
add dword [rax + 0xe], ecx
nop
add dword [rbx + 0xe], ecx
mov byte [rcx], al
add byte [rcx], 0
add byte [rax], al
add byte [rax + rax], dl
add byte [rax + rax - 0x17800000], ah
jmp qword [rbp + 7]
add byte [rax], al
add al, 0x5d
xor al, 0x40
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bc], es
cmp byte [rbx - 0x7ff1b8f9], al
add al, byte [rbx]
mov esi, 0x380e0a02
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rcx + 0xb], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
cld
add byte [rax], al
add byte [rax - 0x27], ch
inc eax
add dword [rax], eax
add byte [rdi + rdx*4], al
xor al, 0x40
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4d02], al
mov word [rbx], es
add dword [rdx + rax], -0x55
xor byte cs:[rax + 0x2e], ch
add byte [rdx], al
mov cl, 0xa
or al, 7
or byte [rcx + 0xb], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rbx + rax - 0x5800000], ah
jmp qword [rbp]
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b8], es
cmp byte [rbx + 0x400e4d07], al
jb 0x40341a
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
adc al, 0
add byte [rax], al
in al, dx
add eax, dword [rax]
add byte [rax + 0x2fffffa], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
sbb eax, 0xa8e0571
add cl, dl
add al, 0xf1
add ch, bl
or al, byte [rax]
test dword [rcx], ecx
add eax, 0xaf000ae9
or dword [rip - 0x1dfff519], eax
or al, byte [rip - 0x10000]
add dword [rsi], esi
add dword [rip - 0x30fff34a], eax
add al, byte [rip - 0x1fff34f]
add eax, dword [rsi - 0x29]
or eax, dword [rax]
movsb byte [rdi], byte ptr [rsi]
clc
add dword [rsi + 0x8c4000d], ebp
add eax, 0x88000bd7
or al, 5
add byte [rax], al
or al, 0x48
mov dh, 0xc
add dh, bh
or al, 0x1e
xlatb
or eax, dword [rax]
jmp 0x4034a0
add eax, 0xff000cb6
inc dword [rcx]
sbb ch, byte [rbx]
sub eax, dword [rax]
add al, al
add dword [rip - 0x56fffc66], ebp
add ch, byte [rcx]
add byte [rax], al
hlt
add al, byte [rip - 0x49fffc66]
add eax, dword [rip]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x400f], ah
add byte [rax], al
add byte [rax + 0x400f], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 2], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rdi
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
cwde
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
or eax, 0
add byte [rax], al
add ah, dl
add byte cs:[rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
cmp eax, 0x60
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
cmp eax, 0x60
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax + 5], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, byte [rbx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 9], dh
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ljmp [rdi]
add byte [rax], al
add al, al
or byte [rax], al
add byte [rax], al
add byte [rax], al
ljmp [rdi]
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
ljmp [rdi]
add byte [rax], al
add byte [rdx + 0x4008], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dl
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
out 0xb, al
add byte [rax], al
add byte [rax], al
add dh, dh
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], dh
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xc], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xc], dl
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xc], ah
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xc], dh
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x400c], al
add byte [rax], al
add byte [rsi + 0x400c], dl
add byte [rax], al
add byte [rsi + 0x400c], ah
add byte [rax], al
add byte [rsi + 0x400c], dh
add byte [rax], al
add dh, al
or al, 0x40
add byte [rax], al
add byte [rax], al
add dh, dl
or al, 0x40
add byte [rax], al
add byte [rax], al
add dh, ah
or al, 0x40
add byte [rax], al
add byte [rax], al
add dh, dh
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdi + 0x43], al
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x40413c
je 0x404145
and byte [rip + 0x302e342e], dh
sub eax, 0x75627536
outsb dx, byte [rsi]
je 0x404153
xor dword [rsi + 0x31], edi
xor byte cs:[rsi + rbp], dh
xor al, 0x29
and byte [rip + 0x302e342e], dh
and byte [rdx], dh
xor byte [rcx], dh
xor byte ss:[rsi], dh
xor byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add al, byte [rax]
push rsp
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, dword [rax]
je 0x40414c
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], al
cwde
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, 0x4002d000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], al
add byte [rax + 5], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], al
add byte [rdx + 0x4008], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], cl
add al, al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or dword [rax], eax
jo 0x4041e3
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], cl
add al, dl
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or eax, dword [rax]
cwde
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or al, 0
ror byte [rbx], 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x400d0000], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], cl
add byte [rax], dl
or eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
lldt sp
add byte cs:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], dl
add al, ah
add byte cs:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], dl
add byte [rax + 0x402f], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], dl
add byte [rax], cl
xor byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc eax, dword [rax]
cmp al, 0x34
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], dl
cmp eax, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc eax, 0x603df800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], dl
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], bl
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], bl
add byte [rax + 0x6040], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], bl
add al, ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax], al
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax + 0xf], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0x400f], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rcx], al
add byte [rbx], bl
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add dword [rax], eax
adc eax, 0x603df800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, byte [rax]
add byte [rax + 0x400f], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], al
add byte [rax + rax], dl
cmp eax, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsd dword [rdi], dword ptr [rsi]
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2000000], dh
add byte [rsi], cl
add al, dl
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
jbe 0x4044b8
add byte [rax], al
add byte [rax], al
add byte [rax], al
outsd dx, dword [rsi]
add dword [rax], eax
add byte [rcx], al
add byte [rdx], bl
add al, al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rax], bh
add byte [rcx], al
add byte [rdx], dl
add byte [rax], bh
xor al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x1000001], cl
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 1], dl
add byte [rcx], dl
add byte [rax + 0x402f], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1000001], ch
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 1], bh
add byte [rax + rax], dl
clc
cmp eax, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rcx], 1
add byte [rax], al
add byte [rax], al
adc al, 0
cmp eax, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jrcxz 0x404593
add byte [rax], al
add dword [rax], eax
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
and byte [rax], al
sbb al, byte [rax]
mov al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ch
add dword [rax], eax
add byte [rdx], dl
add byte [rsi], cl
add al, dl
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rdx]
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x23], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx + 2], bh
add byte [rax], al
adc al, byte [rax]
add byte [rax + 0x16], dl
add byte [rax], al
add byte [rax], al
add byte [rdi + 5], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop qword [rdx]
add byte [rax], al
adc al, byte [rax]
add al, dl
add byte cs:[rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000002], bl
add byte [rsi], cl
add byte [rax + 0x25], dh
add byte [rax], al
add byte [rax], al
add byte [rcx + rax], cl
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add al, dl
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 3], dl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jb 0x40466d
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rbx], 0x200000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, ebp
add eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dh
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax + 4], cl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsp
add al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 4], dh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
retf 4
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x23], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x12000002], bl
add byte [rdi], cl
add ah, dl
add byte cs:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 5], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ecx, 0x20000005
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, dl
add eax, 0x110000
adc byte [rax], al
loopne 0x4047a8
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
in al, 5
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test dword [rip + 0x200000], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rsi], eax
add byte [rax], al
adc byte [rax], al
sbb al, byte [rax]
mov al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
loopne 0x40481a
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rdx], eax
sbb al, byte [rax]
enter 0x6040, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov es, word [rsi]
add byte [rax], al
adc dword [rdx], eax
sbb al, byte [rax]
mov eax, 0x6040
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x12000006], bl
add byte [rsi], cl
add byte [rax + 0x2e], ah
add byte [rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
stosd dword [rdi], eax
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sti
add byte [rax], al
adc byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rdi]
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
retf
add dword [rax], eax
add byte [rax], dl
add byte [rbx], bl
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x12000007], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, cl
add byte [rax], al
and al, byte [rax]
add al, al
sub al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + 1], bl
add byte [rax], al
add byte [rcx + 8], bh
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
add byte [rcx + 0x60], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000008], cl
add byte [rsi], cl
add byte [rax], al
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
mov ebp, 3
add byte [rax], al
add byte [rdi + 9], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sahf
or dword [rax], eax
add byte [rax], dl
add byte [rdx], bl
add ah, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x12000009], ah
add byte [rax], al
add al, al
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, al
or dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bl
or dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, dh
or dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rcx], al
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
or byte [rcx + 0x60], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
or al, byte [rax]
add byte [rdx], dl
add byte [rsi], cl
add byte [rax], dl
or eax, 0x40
add byte [rax], al
rol byte [rcx], 0
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x12000006], ah
add byte [rbx], cl
add byte [rax + 0x400b], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsxd rsi, dword [rdx + 0x74]
jae 0x404aa2
jne 0x404a96
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
pop rdi
pop rdi
add byte [rbp + 0x72], ah
imul esi, dword gs:[ebx + 0x74], 0x745f7265
insd dword [rdi], dx
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x404a56
pop rdi
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x404ad4
jb 0x404ada
pop rdi
jne 0x404ae3
add byte [rbx + 0x6f], ah
insd dword [rdi], dx
jo 0x404add
je 0x404ad9
xor eax, 0x5f003538
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x404af9
jb 0x404aff
pop rdi
jne 0x404b08
pop rdi
imul bp, word [rsi + 0x69], 0x615f
jb 0x404b0b
jns 0x404afb
outsb dx, byte gs:[rsi]
je 0x404b12
jns 0x404aa2
jb 0x404b06
insd dword [rdi], dx
pop rdi
jne 0x404b18
insd dword [rdi], dx
jns 0x404aae
pop rdi
pop rdi
jb 0x404b14
insd dword [rdi], dx
pop rdi
jne 0x404b26
insd dword [rdi], dx
jns 0x404b1b
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x404b26
jns 0x404b26
outsb dx, byte gs:[rsi]
je 0x404b3d
jns 0x404acd
push rbx
outsd dx, dword [rsi]
jne 0x404b43
movsxd rsp, dword [rbp + 0x2e]
movsxd rsi, dword [rax + 0x70]
add byte [rdi + 0x5a], bl
push rbx
je 0x404b0e
pop rdi
pop rdi
imul ebp, dword [rsi + 0x74], 0x6f736f72
jb 0x404b5d
pop rdi
insb byte [rdi], dx
outsd dx, dword [rsi]
outsd dx, dword [rsi]
jo 0x404b38
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x404b56
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x404b6f
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x404b46
jo 0x404b75
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x404b92
movsxd rbx, dword [rdi + 0x73]
je 0x404ba0
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x404b9b
je 0x404bb0
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x404b86
jbe 0x404bb7
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp dword [rdi + 0x53], ebx
push r11
cmp dword [rdi + 0x45], ebx
insb byte [rdi], dx
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x404be2
xor dword [rip + 0x6574495f], esi
jb 0x404bd6
insb byte [rdi], dx
jae 0x404bee
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi + 0x54], bl
xor dword [rdi + 0x2e], ebx
imul esi, dword [rbx + 0x72], 0x39342e61
add byte [rdi + 0x5a], bl
pop rdx
xor al, 0x6d
imul ebp, dword [rsi + 0x45], 0x736332
pop rdi
pop rdi
push rdx
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push r10
pop rdi
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push rbp
pop rdi
pop rdi
push rdx
pop r15
push rdx
add byte [rdi + 0x47], bl
pop rdi
push rbx
push r12
pop rdi
push rsp
pop r15
add byte [rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x404c53
jns 0x404c53
outsb dx, byte gs:[rsi]
add byte fs:[rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x404c64
jns 0x404c64
jae 0x404c7b
jb 0x404c7e
add byte [rdi + 0x44], bl
pop rcx
add byte [r15 + 0x5a], bl
xor eax, 0x766c6f73
xor eax, 0x31787863
xor dword [rcx + 0x69], ebp
imul ebp, dword [rcx + 0x69], 0x5f006969
pop rdx
push rbx
je 0x404c67
jbe 0x404c98
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x404c6f
jo 0x404c9e
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x404cbb
movsxd rbx, dword [rdi + 0x73]
je 0x404cc9
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x404cc4
je 0x404cd9
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
pop rdi
xor dword [r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x404cf3
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x404d0b
push rbx
pop rdi
jbe 0x404ce1
jo 0x404cee
push rsp
pop rdi
add byte [rdi + 0x5a], bl
jae 0x404d16
insb byte [rdi], dx
jbe 0x404d0f
xor al, byte [rdx + 0x35]
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
imul ebp, dword [rcx + 0x69], 0x5f5f0069
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul bp, word [rsi + 0x69], 0x5f00
pop rdx
push rbx
je 0x404cfe
xor eax, 0x6e755f5f
jne 0x404d35
jb 0x404d3a
pop rdi
insb byte [rdi], dx
imul ebp, dword [rsi + 0x65], 0x695f7261
outsb dx, byte [rsi]
jae 0x404d49
jb 0x404d5a
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x404d4e
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x404d67
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x404d3e
jo 0x404d6d
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x404d8a
movsxd rbx, dword [rdi + 0x73]
je 0x404d98
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x404d93
je 0x404da8
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x404d7e
jbe 0x404daf
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp dword [rdi + 0x53], ebx
push r11
cmp dword [rdi + 0x45], ebx
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x404dd9
xor dword [rdi + rbx*2], esi
push rsi
insb byte [rdi], dx
pop rdi
insb byte [rdi], dx
jae 0x404de4
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdi
jo 0x404df6
imul ebp, dword [rsi + 0x74], 0x68635f66
imul eax, dword [rax + 0x40], 0x47
pop r15
xor ch, byte [rsi]
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdi
insd dword [edi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x404e17
jb 0x404e1a
pop rdi
pop rdi
add byte [rdi + 0x4a], bl
jbe 0x404e0c
push rdx
imul esi, dword gs:[ebx + 0x74], 0x6c437265
jae 0x404e2d
jae 0x404dbd
pop rdi
pop rdx
push rbx
je 0x404df3
pop rdi
pop rdi
imul ebp, dword [rsi + 0x73], 0x69747265
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x404e40
jb 0x404e47
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x404e3b
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x404e54
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x404e2b
jo 0x404e5a
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x404e77
movsxd rbx, dword [rdi + 0x73]
je 0x404e85
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x404e80
je 0x404e95
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x404e6b
jbe 0x404e9c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp dword [rdi + 0x53], ebx
push r11
cmp dword [rdi + 0x45], ebx
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x404ec6
xor dword [rip + 0x6574495f], esi
jb 0x404eba
insb byte [rdi], dx
jae 0x404ed2
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
insb byte [rdi], dx
push rax
jbe 0x404eb7
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdi
jo 0x404efa
imul ebp, dword [rsi + 0x74], 0x68635f66
imul eax, dword [rax + 0x40], 0x47
pop r15
xor ch, byte [rsi]
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x404edb
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x404f1a
movsxd rbx, dword [rdi + 0x73]
je 0x404f28
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x404f23
je 0x404f38
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp dword [rdi + 0x4d], ebx
pop rdi
movsxd rsi, dword [rdx + 0x65]
je 0x404f42
push r10
insd dword [rdi], dx
insd dword [rdi], dx
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x404f2e
jbe 0x404f5f
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x404f36
jo 0x404f65
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x404f82
movsxd rbx, dword [rdi + 0x73]
je 0x404f90
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x404f8b
je 0x404fa0
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
pop rdi
xor dword [r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x404fba
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x404fd2
push r11
pop rdi
jbe 0x404fa8
jo 0x404fb5
push rsp
pop rdi
add byte [rdi + 0x5f], bl
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x6174735f
jb 0x404fe9
pop rdi
insd dword [rdi], dx
imul ebp, dword [rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x404fc5
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x405004
movsxd rbx, dword [rdi + 0x73]
je 0x405012
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40500d
je 0x405022
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [rax], esi
pop rdi
pop r15
jb 0x405029
jo 0x405032
movsxd rsp, dword [rbp + 0x45]
insd dword [rdi], dx
insd dword [rdi], dx
push rax
movsxd rbp, dword [r13 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x49], bl
push rsp
pop r15
jb 0x40504f
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x49], bl
pop r15
jae 0x405077
imul ebp, dword fs:[rsi + 0x5f], 0x64657375
add byte [rbx + 0x63], dh
outsb dx, byte [rsi]
pop r15w
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x54495f00
pop r15
jb 0x40508b
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5f], bl
je 0x4050a0
pop rdi
jae 0x4050b6
jb 0x4050b9
add byte [rbx + 0x74], dh
imul ebp, dword fs:[rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x405096
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4050d5
movsxd rbx, dword [rdi + 0x73]
je 0x4050e3
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4050de
je 0x4050f3
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jae 0x405105
imul esp, dword [rdi + 0x6e], 0x634b5045
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5f], bl
push rsp
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
jae 0x40512a
pop rdi
push 0x6c646e61
add byte gs:[rdi + 0x5f], bl
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul ebp, dword [rsi + 0x69], 0x5a5f0074
push rbx
je 0x405110
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40514f
movsxd rbx, dword [rdi + 0x73]
je 0x40515d
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405158
je 0x40516d
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x73
ja 0x40516d
jo 0x405153
push rdx
push rbx
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5f], bl
jae 0x40519b
pop rdi
jae 0x40519f
jb 0x4051a2
add byte [rdi + 0x5f], bl
jae 0x4051a7
movsxd rbp, dword [rbx + 0x5f]
movsxd rbp, dword [rax + 0x6b]
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x405181
cmp dword [rdi + 0x5f], ebx
je 0x4051bd
jb 0x4051c6
ja 0x4051b8
insb byte [rdi], dx
outsd dx, dword [rsi]
imul esp, dword [ebx + 0x5f], 0x6f727265
jb 0x4051b5
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
insd dword [rdi], dx
insd dword [rdi], dx
movsxd rbp, dword [rbp + 0x70]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x4051c6
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x405205
movsxd rbx, dword [rdi + 0x73]
je 0x405213
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40520e
je 0x405223
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp dword [rdi + 0x4d], ebx
pop rdi
jo 0x405235
outsb dx, byte gs:[rsi]
push r8
movsxd rbp, dword [r13 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rsi + 0x72], ah
outsd dx, dword gs:[rsi]
jo 0x405249
outsb dx, byte [rsi]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x405229
xor dword [rdi + 0x5f], ebx
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x68
jo 0x40524e
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40526c
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x405285
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40525c
jo 0x40528b
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4052a8
movsxd rbx, dword [rdi + 0x73]
je 0x4052b6
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4052b1
je 0x4052c6
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x40529c
jbe 0x4052cd
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp dword [rdi + 0x53], ebx
push r11
cmp dword [rdi + 0x45], ebx
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x4052f7
xor dword [rip + 0x6574495f], esi
jb 0x4052eb
insb byte [rdi], dx
jae 0x405303
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rbx
pop rdi
push rsp
xor byte [rdi], bl
jae 0x405317
jb 0x405319
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x4052eb
xor ebx, dword [rdi + 0x5f]
push 0x75
jae 0x405337
pop rdi
push 0x49706165
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405330
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x405349
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x405320
jo 0x40534f
imul esi, dword [rdx + 0x49], 0x74534e69
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40536c
movsxd rbx, dword [rdi + 0x73]
je 0x40537a
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405375
je 0x40538a
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
je 0x405360
jbe 0x405391
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
cmp dword [rdi + 0x53], ebx
push r11
cmp dword [rdi + 0x45], ebx
insb byte [rdi], dx
push rbx
cmp dword [rdi + 0x4e], ebx
push rbx
xor byte [rdi + 0x35], bl
pop rdi
pop rdi
outsd dx, dword [rsi]
jo 0x4053bf
xor dword [rip + 0x6574495f], esi
jb 0x4053b3
insb byte [rdi], dx
jae 0x4053cb
pop rdi
imul esi, dword [rbp + 0x72], 0x54764545
pop rdi
push rsp
xor byte [rdi + 0x53], bl
pop r15
push rsp
xor dword [rdi + 0x54], ebx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x4053ac
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4053eb
movsxd rbx, dword [rdi + 0x73]
je 0x4053f9
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4053f4
je 0x405409
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp dword [rdi + 0x4d], ebx
pop rdi
insd dword [rdi], dx
jne 0x40541f
je 0x405413
insd dword [rdi], dx
insd dword [rdi], dx
push rax
movsxd rbp, dword [r13 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x65], bl
je 0x40542d
add byte [rdi + 0x5f], bl
js 0x40544a
pop rdi
jo 0x40543a
jb 0x40544a
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
imul esi, dword [rcx + rdi*2 + 0x5f], 0x40403076
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
outsb dx, byte [rsi]
ja 0x405460
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
push rbp
outsb dx, byte [rsi]
ja 0x40546f
outsb dx, byte [rsi]
pop rdi
push rdx
jae 0x405482
insd dword [rdi], dx
pop r15
xor ebp, dword [rsi]
xor byte [rax], al
insd dword [rdi], dx
insd dword [rdi], dx
movsxd rsi, dword [rax + 0x79]
pop r15
xor ch, byte [rsi]
xor dword [rax + rax], esi
jae 0x4054a2
outsd dx, dword fs:[rsi]
jne 0x4054a6
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x69616d00
outsb dx, byte [rsi]
add byte [rax], al
jae 0x4054c2
insd dword [rdi], dx
je 0x4054ad
add byte [rsi], ch
jae 0x4054c5
jb 0x4054c7
add byte [rsi], ch
jae 0x4054c1
jae 0x4054cf
jb 0x4054d1
add byte [rsi], ch
imul ebp, dword [rsi + 0x74], 0x707265
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x4054d2
sub rax, 0x676174
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x4054e0
outsb dx, byte cs:[esi]
jne 0x4054ae
jne 0x4054ec
insb byte [rdi], dx
sub eax, 0x2e006469
outsb dx, byte [esi]
jne 0x4054bc
push 0x687361
jns 0x405505
jae 0x405512
insd dword [rdi], dx
add byte [rsi], ch
jns 0x40550d
jae 0x405515
jb 0x4054a3
outsb dx, byte cs:[esi]
jne 0x4054d6
jbe 0x40550f
jb 0x40551f
imul ebp, dword [rdi + 0x6e], 0x6e672e00
jne 0x4054e3
jbe 0x40551c
jb 0x40552c
imul ebp, dword [rdi + 0x6e], 0x2e00725f
jb 0x405527
insb byte [rdi], dx
jns 0x405536
add byte [rsi], ch
jb 0x405531
insb byte [rdi], dx
jo 0x40553d
je 0x4054d3
imul ebp, dword cs:[rsi + 0x69], 0x702e0074
insb byte [rdi], dx
je 0x40550c
outsd dx, dword [esi]
je 0x4054e2
je 0x40554a
js 0x40555b
add byte [rsi], ch
imul bp, word [rsi + 0x69], 0x2e00
jb 0x405560
je 0x405556
add byte [rsi], ch
push 0x6172665f
insd dword [rdi], dx
pop rdi
push 0x2e007264
push 0x6172665f
insd dword [rdi], dx
add byte gs:[rsi], ch
movsxd rsp, dword [ebx + 0x5f]
js 0x405579
jo 0x40558d
pop rdi
je 0x40557d
insb byte [rdi], dx
add byte gs:[rsi], ch
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40558b
jns 0x40552c
imul bp, word cs:[rsi + 0x69], 0x615f
jb 0x4055a7
jns 0x405538
push 0x63
jb 0x40553d
jns 0x4055af
insd dword [rdi], dx
imul esp, dword [rbx], 0x746f672e
jo 0x4055b9
je 0x40554f
je 0x4055b5
add byte [rsi], ch
jae 0x4055cc
add byte [rsi], ch
movsxd rbp, dword [rdi + 0x6d]
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x405563
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add dh, dh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rax + 2], bl
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rdx], 1
add byte [rax], al
add byte [rax], al
add al, dl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + 2], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rax
add eax, 0x40
add byte [rax], al
pop rax
add eax, 0
add byte [rax], al
xor al, byte [rbx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsi
add byte [rax], al
add bh, bh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x4008], cl
add byte [rax], al
add byte [rdx + 8], cl
add byte [rax], al
add byte [rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
or byte [rax], al
add byte [rax], al
add byte [rax], al
ror byte [rax], 0
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, 0
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
jo 0x4057c3
add byte [rax], al
add byte [rax], al
add byte [rax + 9], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x40000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
or dword [rax], eax
add byte [rax], al
add byte [rax], al
ror byte [rcx], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
enter 1, 0
add byte [rax], al
add byte [rax], al
add eax, 0x19000000
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x400b], bl
add byte [rax], al
add byte [rax + 0xb], bl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
ror byte [rbx], 0
add byte [rax], al
add byte [rax], al
add byte [rax + 1], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, esp
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, 0x40
add byte [rax], al
add byte [rip], cl
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
popfq
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
or eax, 0x40
add byte [rax], al
adc byte [rip], cl
add byte [rax], al
ret 0x21
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000000], ah
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dl
add byte cs:[rax], al
add byte [rax], al
add ah, dl
add byte cs:[rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
add byte cs:[rax], al
add byte [rax], al
add al, ah
add byte cs:[rax], al
add byte [rax], al
add byte [rax], al
mov al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov cl, 0
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2f], dl
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
xor byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, 4
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
leave
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rsp + rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
jns 0x405a4a
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fild dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
cmp eax, 0x60
add byte [rax], al
cmp eax, 0
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0, eax
add byte [rax], al
sldt word [rax]
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
cmp eax, 0x60
add byte [rax], al
clc
cmp eax, 0
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte ds:[rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte ds:[rax], al
add byte [rax], al
add byte [rax], al
lock add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], bl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rcx], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x60], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, byte [rcx]
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + 0x40], dh
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rcx], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x405c7a
add byte [rax], al
add byte [rax], al
add ah, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x1000001
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push r12
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, 0xa
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
