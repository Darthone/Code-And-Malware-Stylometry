xor ebp, ebp
mov r9, rdx
pop rsi
mov rdx, rsp
and rsp, 0xfffffffffffffff0
push rax
push rsp
mov r8, sym.__libc_csu_fini
mov rcx, sym.__libc_csu_init
mov rdi, sym.main
call sym.imp.__libc_start_main
hlt
nop word [rax + rax]
mov eax, 0x60b16f
push rbp
sub rax, obj.__TMC_END__
cmp rax, 0xe
mov rbp, rsp
jbe 0x401a00
mov eax, 0
test rax, rax
je 0x401a00
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop word [rax + rax]
pop rbp
ret
nop dword [rax]
nop word cs:[rax + rax]
mov esi, obj.__TMC_END__
push rbp
sub rsi, obj.__TMC_END__
sar rsi, 3
mov rbp, rsp
mov rax, rsi
shr rax, 0x3f
add rsi, rax
sar rsi, 1
je 0x401a48
mov eax, 0
test rax, rax
je 0x401a48
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop dword [rax]
pop rbp
ret
nop word [rax + rax]
cmp byte [rip + 0x2097f1], 0
jne 0x401a6a
push rbp
mov rbp, rsp
call sym.deregister_tm_clones
pop rbp
mov byte [rip + 0x2097de], 1
ret
nop dword [rax]
mov edi, obj.__JCR_LIST__
cmp qword [rdi], 0
jne 0x401a80
jmp sym.register_tm_clones
nop dword [rax]
mov eax, 0
test rax, rax
je 0x401a7b
push rbp
mov rbp, rsp
call rax
pop rbp
jmp sym.register_tm_clones
nop word cs:[rax + rax]
mov eax, edi
ret
nop dword [rax]
nop word cs:[rax + rax]
mov eax, edi
ret
nop dword [rax]
nop word cs:[rax + rax]
lea eax, [rdi - 2]
cmp eax, 0x22
ja 0x401acb
mov eax, edi
ret
push rax
mov ecx, str.Detail::Base_setBase_uint_
mov edx, 0x5f
mov esi, str.sorted_code_control_Al.Cash_Al.Cash_1_1_source.cpp
mov edi, str.2____value____value____36
call sym.imp.__assert_fail
nop
nop word cs:[rax + rax]
cmp edi, 0x7f
ja 0x401af8
mov eax, edi
ret
push rax
mov ecx, str.Detail::Precision_setPrecision_uint_
mov edx, 0x60
mov esi, str.sorted_code_control_Al.Cash_Al.Cash_1_1_source.cpp
mov edi, str.value___MAX_LENGTH
call sym.imp.__assert_fail
nop dword [rax]
nop word cs:[rax + rax]
mov rax, rdi
ret
nop
nop word cs:[rax + rax]
push r15
push r14
push r13
push r12
lea r13d, [rdi + 1]
push rbp
push rbx
mov rbp, rsi
sub rsp, 0x28
mov r12, qword [rip + 0x209764]
mov r15d, dword [r12 + 0x109c]
mov byte [r12 + 0x1098], 0
cmp r15d, 6
ja 0x401eb0
mov r14, qword [r12 + 0x1088]
lea rbx, [r12 + 0x1008]
lea rax, [r14 + 0x86]
cmp qword [r12 + 0x1090], rax
jbe 0x402290
mov edx, 0x2320
mov dword [r14], 0x65736143
add r14, 6
mov word [r14 - 2], dx
mov qword [r12 + 0x1088], r14
test r13d, r13d
mov rsi, qword [r12 + 0x1090]
mov ecx, r13d
js 0x4020a0
je 0x402410
mov r8d, dword [r12 + 0x10a4]
mov edi, 0xcccccccd
cmp r8d, 0xa
jne 0x401db0
nop word [rax + rax]
mov eax, ecx
sub rsi, 1
mul edi
shr edx, 3
lea eax, [rdx + rdx*4]
add eax, eax
sub ecx, eax
add ecx, 0x30
test edx, edx
mov byte [rsi], cl
mov ecx, edx
jne 0x401be0
mov r15, rsi
cmp byte [r12 + 0x1098], 0
jne 0x401f08
mov rcx, qword [r12 + 0x1088]
mov rax, qword [r12 + 0x1090]
mov edx, dword [r12 + 0x109c]
mov r13, rax
mov byte [r12 + 0x1098], 1
sub r13, r15
cmp r13d, edx
jb 0x402190
xor eax, eax
test r13, r13
je 0x401c5a
mov rdi, rcx
mov rdx, r13
mov rsi, r15
call sym.imp.memmove
mov rcx, rax
mov rax, r13
add rcx, rax
cmp rcx, rbx
mov qword [r12 + 0x1088], rcx
jae 0x402150
mov r13d, dword [r12 + 0x109c]
mov byte [r12 + 0x1098], 0
cmp r13d, 2
ja 0x401e60
lea rax, [rcx + 0x82]
cmp qword [r12 + 0x1090], rax
jbe 0x402360
mov eax, 0x203a
add rcx, 2
mov word [rcx - 2], ax
mov qword [r12 + 0x1088], rcx
mov r13, qword [rbp + 8]
mov r8d, dword [r12 + 0x109c]
mov r15, qword [rbp]
mov byte [r12 + 0x1098], 0
cmp r13d, r8d
mov r14d, r13d
jb 0x401e10
mov ebp, r13d
mov rax, qword [r12 + 0x1090]
lea rdx, [rcx + rbp + 0x80]
cmp rax, rdx
jbe 0x4021e8
cmp r13d, 1
je 0x402120
test r13d, r13d
jne 0x401de8
add rcx, rbp
mov qword [r12 + 0x1088], rcx
mov ebp, dword [r12 + 0x109c]
mov byte [r12 + 0x1098], 0
cmp ebp, 1
ja 0x401f70
lea rdx, [rcx + 0x81]
cmp rax, rdx
jbe 0x401fc8
lea rax, [rcx + 1]
mov qword [r12 + 0x1088], rax
mov byte [rcx], 0xa
mov rbx, qword [rip + 0x20955e]
mov rax, qword [rbx]
mov rsi, qword [rbx + 0x1088]
lea rbp, [rbx + 8]
mov rax, qword [rax]
sub rsi, rbp
cmp rax, sym.OutputFile::writeToDevice
jne 0x402068
mov rcx, qword [rbx + 0x10d8]
mov edx, esi
mov rdi, rbp
mov esi, 1
call sym.imp.fwrite
mov rdi, qword [rbx + 0x10d8]
call sym.imp.fflush
mov qword [rbx + 0x1088], rbp
add rsp, 0x28
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop word [rax + rax]
mov eax, ecx
xor edx, edx
sub rsi, 1
div r8d
lea eax, [rdx + 0x30]
lea edi, [rdx + 0x37]
cmp edx, 9
cmova eax, edi
xor edx, edx
mov byte [rsi], al
mov r8d, dword [r12 + 0x10a4]
mov eax, ecx
div r8d
test eax, eax
mov ecx, eax
jne 0x401db0
jmp 0x401bfd
nop dword [rax + rax]
mov rdi, rcx
mov rdx, rbp
mov rsi, r15
call sym.imp.memmove
mov rcx, rax
mov rax, qword [r12 + 0x1090]
jmp 0x401d07
nop word cs:[rax + rax]
sub r8d, r13d
mov edx, r8d
lea rax, [rcx + rdx + 0x80]
cmp qword [r12 + 0x1090], rax
mov rbp, rdx
jbe 0x40273b
cmp edx, 1
je 0x4024b0
movzx esi, byte [r12 + 0x10a0]
lea rbp, [rcx + rdx]
mov rdi, rcx
call sym.imp.memset
mov qword [r12 + 0x1088], rbp
mov rcx, rbp
jmp 0x401cd8
nop dword [rax]
lea edx, [r13 - 2]
lea rax, [rcx + rdx + 0x80]
cmp qword [r12 + 0x1090], rax
mov r13, rdx
jbe 0x4027f5
cmp edx, 1
je 0x40248c
movzx esi, byte [r12 + 0x10a0]
lea r13, [rcx + rdx]
mov rdi, rcx
call sym.imp.memset
mov qword [r12 + 0x1088], r13
mov rcx, r13
jmp 0x401c89
nop dword [rax + rax]
mov rdi, qword [r12 + 0x1088]
lea edx, [r15 - 6]
mov r15, rdx
lea rax, [rdi + rdx + 0x80]
cmp qword [r12 + 0x1090], rax
jbe 0x40254b
cmp edx, 1
je 0x402444
movzx esi, byte [r12 + 0x10a0]
lea r14, [rdi + rdx]
lea rbx, [r12 + 0x1008]
call sym.imp.memset
mov qword [r12 + 0x1088], r14
jmp 0x401b77
nop dword [rax]
mov rdx, qword [r12 + 0x10c0]
mov rcx, qword [r12 + 0x1088]
mov rax, qword [r12 + 0x1090]
mov r9, qword [r12 + 0x10b8]
mov byte [r12 + 0x1098], 0
mov r13d, edx
mov r14d, edx
lea rsi, [rcx + r13 + 0x80]
cmp rax, rsi
jbe 0x40268c
cmp edx, 1
je 0x40241d
test edx, edx
jne 0x402078
add rcx, r13
mov qword [r12 + 0x1088], rcx
jmp 0x401c1f
nop dword [rax]
lea edx, [rbp - 1]
lea rsi, [rcx + rdx + 0x80]
mov rbp, rdx
cmp rax, rsi
jbe 0x4025fc
cmp edx, 1
je 0x402460
movzx esi, byte [r12 + 0x10a0]
lea rbp, [rcx + rdx]
mov rdi, rcx
call sym.imp.memset
mov rax, qword [r12 + 0x1090]
mov rcx, rbp
mov qword [r12 + 0x1088], rbp
lea rdx, [rcx + 0x81]
cmp rax, rdx
ja 0x401d3c
mov eax, ebx
mov ebp, 1
mov r15d, 0x409257
sub eax, ecx
lea r13, [r12 + 8]
jmp 0x40200b
nop
test eax, eax
mov r14d, eax
jne 0x402a01
add rcx, r14
cmp rcx, rbx
mov qword [r12 + 0x1088], rcx
jae 0x402035
test ebp, ebp
je 0x401d4b
add r15, r14
mov eax, 0x1000
cmp ebp, eax
jae 0x401fe0
mov r14d, ebp
xor ebp, ebp
mov rdi, rcx
mov rdx, r14
mov rsi, r15
call sym.imp.memmove
mov rcx, rax
add rcx, r14
cmp rcx, rbx
mov qword [r12 + 0x1088], rcx
jb 0x401ffb
mov rax, qword [r12]
mov esi, 0x1000
mov rdi, r12
call qword [rax]
mov rax, qword [r12 + 0x1088]
xor ecx, ecx
sub rax, rbx
jne 0x4024d4
add rcx, r13
mov qword [r12 + 0x1088], rcx
jmp 0x401ffb
nop dword [rax + rax]
mov rdi, rbx
call rax
jmp 0x401d94
nop word [rax + rax]
mov rdi, rcx
mov rdx, r13
mov rsi, r9
call sym.imp.memmove
mov rcx, rax
mov rax, qword [r12 + 0x1090]
jmp 0x401f59
nop word cs:[rax + rax]
mov edi, r13d
neg edi
je 0x40287c
mov r8d, dword [r12 + 0x10a4]
mov ecx, 0xcccccccd
cmp r8d, 0xa
jne 0x4020f0
nop
mov eax, edi
sub rsi, 1
mul ecx
shr edx, 3
lea eax, [rdx + rdx*4]
add eax, eax
sub edi, eax
add edi, 0x30
test edx, edx
mov byte [rsi], dil
mov edi, edx
jne 0x4020c0
mov byte [rsi - 1], 0x2d
lea r15, [rsi - 1]
jmp 0x401c00
nop dword [rax + rax]
mov eax, edi
xor edx, edx
sub rsi, 1
div r8d
lea eax, [rdx + 0x30]
lea ecx, [rdx + 0x37]
cmp edx, 9
cmova eax, ecx
xor edx, edx
mov byte [rsi], al
mov r8d, dword [r12 + 0x10a4]
mov eax, edi
div r8d
test eax, eax
mov edi, eax
jne 0x4020f0
jmp 0x4020de
lea rax, [rcx + 1]
mov qword [r12 + 0x1088], rax
movzx eax, byte [r15]
mov byte [rcx], al
mov rcx, qword [r12 + 0x1088]
mov rax, qword [r12 + 0x1090]
jmp 0x401d12
nop word [rax + rax]
mov rax, qword [r12]
mov esi, 0x1000
mov rdi, r12
xor r13d, r13d
call qword [rax]
mov rax, qword [r12 + 0x1088]
lea rcx, [r12 + 8]
sub rax, rbx
jne 0x4027dc
add rcx, r13
mov qword [r12 + 0x1088], rcx
jmp 0x401c6e
nop word [rax + rax]
sub edx, r13d
mov edx, edx
lea rsi, [rcx + rdx + 0x80]
mov r14, rdx
cmp rax, rsi
jbe 0x4028ad
cmp edx, 1
je 0x402889
movzx esi, byte [r12 + 0x10a0]
lea r13, [rcx + rdx]
mov rdi, rcx
call sym.imp.memset
mov qword [r12 + 0x1088], r13
mov rcx, r13
mov r13, qword [r12 + 0x1090]
sub r13, r15
jmp 0x401c3f
nop word [rax + rax]
lea rax, [r12 + 8]
mov ebp, ebx
sub ebp, ecx
mov qword [rsp], rax
jmp 0x40221d
nop word [rax + rax]
add rcx, r13
cmp rcx, rbx
mov qword [r12 + 0x1088], rcx
jae 0x40224c
sub r14d, ebp
je 0x402280
add r15, r13
mov ebp, 0x1000
cmp r14d, ebp
cmovbe ebp, r14d
test ebp, ebp
mov r13d, ebp
je 0x402200
mov rdi, rcx
mov rdx, r13
mov rsi, r15
call sym.imp.memmove
mov rcx, rax
add rcx, r13
cmp rcx, rbx
mov qword [r12 + 0x1088], rcx
jb 0x402210
mov rax, qword [r12]
mov esi, 0x1000
mov rdi, r12
call qword [rax]
mov rax, qword [r12 + 0x1088]
xor ecx, ecx
sub rax, rbx
jne 0x40252d
add rcx, qword [rsp]
sub r14d, ebp
mov qword [r12 + 0x1088], rcx
jne 0x402215
nop
mov rax, qword [r12 + 0x1090]
jmp 0x401d12
nop dword [rax]
lea rdi, [r12 + 8]
mov eax, ebx
mov ecx, 6
sub eax, r14d
mov r15d, str.Case__
mov qword [rsp + 0x10], rdi
jmp 0x4022db
nop dword [rax]
test eax, eax
mov r8d, eax
jne 0x402a10
add r14, r8
cmp r14, rbx
mov qword [r12 + 0x1088], r14
jae 0x402312
test ecx, ecx
je 0x401ba9
add r15, r8
mov eax, 0x1000
cmp ecx, eax
jae 0x4022b0
mov r8d, ecx
xor ecx, ecx
mov rdx, r8
mov rdi, r14
mov rsi, r15
mov dword [rsp + 8], ecx
mov qword [rsp], r8
call sym.imp.memmove
mov r8, qword [rsp]
mov ecx, dword [rsp + 8]
add r14, r8
cmp r14, rbx
mov qword [r12 + 0x1088], r14
jb 0x4022cb
mov rax, qword [r12]
mov qword [rsp + 8], r8
mov esi, 0x1000
mov dword [rsp], ecx
mov rdi, r12
xor r14d, r14d
call qword [rax]
mov rax, qword [r12 + 0x1088]
mov ecx, dword [rsp]
mov r8, qword [rsp + 8]
sub rax, rbx
jne 0x40250d
add r14, qword [rsp + 0x10]
mov qword [r12 + 0x1088], r14
jmp 0x4022cb
nop word cs:[rax + rax]
lea rdi, [r12 + 8]
mov eax, ebx
mov r13d, 2
sub eax, ecx
mov r14d, 0x4092a4
mov qword [rsp], rdi
jmp 0x4023ac
nop dword [rax + rax]
test eax, eax
mov r15d, eax
jne 0x402a08
add rcx, r15
cmp rcx, rbx
mov qword [r12 + 0x1088], rcx
jae 0x4023d8
test r13d, r13d
je 0x401cb3
add r14, r15
mov eax, 0x1000
cmp r13d, eax
jae 0x402380
mov r15d, r13d
xor r13d, r13d
mov rdi, rcx
mov rdx, r15
mov rsi, r14
call sym.imp.memmove
mov rcx, rax
add rcx, r15
cmp rcx, rbx
mov qword [r12 + 0x1088], rcx
jb 0x40239b
mov rax, qword [r12]
mov esi, 0x1000
mov rdi, r12
call qword [rax]
mov rax, qword [r12 + 0x1088]
xor ecx, ecx
sub rax, rbx
jne 0x4024ef
add rcx, qword [rsp]
mov qword [r12 + 0x1088], rcx
jmp 0x40239b
nop word [rax + rax]
mov byte [rsi - 1], 0x30
lea r15, [rsi - 1]
jmp 0x401c00
lea rax, [rcx + 1]
mov qword [r12 + 0x1088], rax
movzx eax, byte [r9]
mov byte [rcx], al
mov rcx, qword [r12 + 0x1088]
mov rax, qword [r12 + 0x1090]
jmp 0x401c1f
lea rax, [rdi + 1]
mov qword [r12 + 0x1088], rax
movzx eax, byte [r12 + 0x10a0]
mov byte [rdi], al
jmp 0x401b67
lea rax, [rcx + 1]
mov qword [r12 + 0x1088], rax
movzx eax, byte [r12 + 0x10a0]
mov byte [rcx], al
mov rcx, qword [r12 + 0x1088]
mov rax, qword [r12 + 0x1090]
jmp 0x401d2c
lea rax, [rcx + 1]
mov qword [r12 + 0x1088], rax
movzx eax, byte [r12 + 0x10a0]
mov byte [rcx], al
mov rcx, qword [r12 + 0x1088]
jmp 0x401c89
lea rax, [rcx + 1]
mov qword [r12 + 0x1088], rax
movzx eax, byte [r12 + 0x10a0]
mov byte [rcx], al
mov rcx, qword [r12 + 0x1088]
jmp 0x401cd8
mov rdx, rax
mov rsi, rbx
mov rdi, r13
mov qword [rsp], rax
call sym.imp.memmove
mov rcx, qword [rsp]
jmp 0x402056
mov rdi, qword [rsp]
mov rdx, rax
mov rsi, rbx
mov qword [rsp + 8], rax
call sym.imp.memmove
mov rcx, qword [rsp + 8]
jmp 0x4023f9
mov rdi, qword [rsp + 0x10]
mov rdx, rax
mov rsi, rbx
mov r14, rax
call sym.imp.memmove
mov r8, qword [rsp + 8]
mov ecx, dword [rsp]
jmp 0x402344
mov rdi, qword [rsp]
mov rdx, rax
mov rsi, rbx
mov qword [rsp + 8], rax
call sym.imp.memmove
mov rcx, qword [rsp + 8]
jmp 0x40226d
lea rbx, [r12 + 0x1008]
mov r14, rdi
mov eax, ebx
sub eax, edi
lea rdi, [r12 + 8]
mov qword [rsp + 0x10], rdi
jmp 0x40258e
nop word cs:[rax + rax]
cmp rbx, r8
mov qword [r12 + 0x1088], r8
mov r14, r8
jbe 0x4025c5
sub r15d, ecx
mov eax, 0x1000
je 0x401b77
cmp r15d, eax
cmovbe eax, r15d
mov edx, eax
test edx, edx
mov rcx, rdx
lea r8, [r14 + rdx]
je 0x402570
movzx esi, byte [r12 + 0x10a0]
mov rdi, r14
mov qword [rsp], r8
mov dword [rsp + 8], edx
call sym.imp.memset
mov ecx, dword [rsp + 8]
mov r8, qword [rsp]
jmp 0x402570
mov rax, qword [r12]
mov dword [rsp], ecx
mov esi, 0x1000
mov rdi, r12
xor r14d, r14d
call qword [rax]
mov rax, qword [r12 + 0x1088]
mov ecx, dword [rsp]
sub rax, rbx
jne 0x40293d
add r14, qword [rsp + 0x10]
mov qword [r12 + 0x1088], r14
jmp 0x402580
mov eax, ebx
lea r14, [r12 + 8]
sub eax, ecx
jmp 0x40262a
nop word [rax + rax]
cmp r15, rbx
mov qword [r12 + 0x1088], r15
mov rcx, r15
jae 0x40264f
sub ebp, r13d
mov eax, 0x1000
je 0x40267f
cmp ebp, eax
cmovbe eax, ebp
mov edx, eax
test edx, edx
mov r13, rdx
lea r15, [rcx + rdx]
je 0x402610
movzx esi, byte [r12 + 0x10a0]
mov rdi, rcx
call sym.imp.memset
jmp 0x402610
mov rax, qword [r12]
mov esi, 0x1000
mov rdi, r12
xor r15d, r15d
call qword [rax]
mov rax, qword [r12 + 0x1088]
sub rax, rbx
jne 0x4029ce
lea rcx, [r14 + r15]
mov qword [r12 + 0x1088], rcx
jmp 0x402620
mov rax, qword [r12 + 0x1090]
jmp 0x401d2c
lea rax, [r12 + 8]
mov r13d, ebx
sub r13d, ecx
mov qword [rsp + 0x10], rax
jmp 0x4026c2
nop
add rcx, r10
cmp rcx, rbx
mov qword [r12 + 0x1088], rcx
jae 0x4026f6
sub r14d, r13d
je 0x401c17
add r9, r10
mov r13d, 0x1000
cmp r14d, r13d
cmovbe r13d, r14d
test r13d, r13d
mov r10d, r13d
je 0x4026a0
mov rdx, r10
mov rsi, r9
mov rdi, rcx
mov qword [rsp + 8], r10
mov qword [rsp], r9
call sym.imp.memmove
mov r10, qword [rsp + 8]
mov r9, qword [rsp]
mov rcx, rax
jmp 0x4026a0
mov rax, qword [r12]
mov qword [rsp + 8], r9
mov esi, 0x1000
mov qword [rsp], r10
mov rdi, r12
call qword [rax]
mov rax, qword [r12 + 0x1088]
xor ecx, ecx
mov r10, qword [rsp]
mov r9, qword [rsp + 8]
sub rax, rbx
jne 0x402958
add rcx, qword [rsp + 0x10]
mov qword [r12 + 0x1088], rcx
jmp 0x4026b0
lea rdi, [r12 + 8]
mov eax, ebx
sub eax, ecx
mov qword [rsp + 0x10], rdi
jmp 0x40276e
nop dword [rax + rax]
cmp r9, rbx
mov qword [r12 + 0x1088], r9
mov rcx, r9
jae 0x4027a4
sub ebp, r10d
mov eax, 0x1000
je 0x401cd8
cmp ebp, eax
cmovbe eax, ebp
mov edx, eax
test edx, edx
mov r10, rdx
lea r9, [rcx + rdx]
je 0x402750
movzx esi, byte [r12 + 0x10a0]
mov rdi, rcx
mov qword [rsp + 8], r9
mov dword [rsp], edx
call sym.imp.memset
mov r9, qword [rsp + 8]
mov r10d, dword [rsp]
jmp 0x402750
mov rax, qword [r12]
mov dword [rsp], r10d
mov esi, 0x1000
mov rdi, r12
call qword [rax]
mov rax, qword [r12 + 0x1088]
xor ecx, ecx
mov r10d, dword [rsp]
sub rax, rbx
jne 0x402989
add rcx, qword [rsp + 0x10]
mov qword [r12 + 0x1088], rcx
jmp 0x402760
mov rdi, rcx
mov rdx, rax
mov rsi, rbx
mov r13, rax
call sym.imp.memmove
mov rcx, rax
jmp 0x402177
lea rdi, [r12 + 8]
mov eax, ebx
sub eax, ecx
mov qword [rsp], rdi
jmp 0x402826
nop dword [rax]
cmp r14, rbx
mov qword [r12 + 0x1088], r14
mov rcx, r14
jae 0x40284d
sub r13d, r15d
mov eax, 0x1000
je 0x401c89
cmp r13d, eax
cmovbe eax, r13d
mov edx, eax
test edx, edx
mov r15, rdx
lea r14, [rcx + rdx]
je 0x402808
movzx esi, byte [r12 + 0x10a0]
mov rdi, rcx
call sym.imp.memset
jmp 0x402808
mov rax, qword [r12]
mov esi, 0x1000
mov rdi, r12
call qword [rax]
mov rax, qword [r12 + 0x1088]
xor ecx, ecx
sub rax, rbx
jne 0x4029b0
add rcx, qword [rsp]
mov qword [r12 + 0x1088], rcx
jmp 0x402818
mov byte [rsi - 1], 0x30
sub rsi, 1
jmp 0x4020de
lea rax, [rcx + 1]
mov qword [r12 + 0x1088], rax
movzx eax, byte [r12 + 0x10a0]
mov byte [rcx], al
mov rcx, qword [r12 + 0x1088]
jmp 0x4021d2
lea rdi, [r12 + 8]
mov eax, ebx
sub eax, ecx
mov qword [rsp + 8], rdi
jmp 0x4028de
nop dword [rax]
cmp r9, rbx
mov qword [r12 + 0x1088], r9
mov rcx, r9
jae 0x40290d
sub r14d, r13d
mov eax, 0x1000
je 0x4021d2
cmp r14d, eax
cmovbe eax, r14d
mov edx, eax
test edx, edx
mov r13, rdx
lea r9, [rcx + rdx]
je 0x4028c0
movzx esi, byte [r12 + 0x10a0]
mov rdi, rcx
mov qword [rsp], r9
call sym.imp.memset
mov r9, qword [rsp]
jmp 0x4028c0
mov rax, qword [r12]
mov esi, 0x1000
mov rdi, r12
call qword [rax]
mov rax, qword [r12 + 0x1088]
xor ecx, ecx
sub rax, rbx
jne 0x4029e4
add rcx, qword [rsp + 8]
mov qword [r12 + 0x1088], rcx
jmp 0x4028d0
mov rdi, qword [rsp + 0x10]
mov rdx, rax
mov rsi, rbx
mov r14, rax
call sym.imp.memmove
mov ecx, dword [rsp]
jmp 0x4025ed
mov rdi, qword [rsp + 0x10]
mov rdx, rax
mov rsi, rbx
mov qword [rsp + 0x18], r9
mov qword [rsp + 8], r10
mov qword [rsp], rax
call sym.imp.memmove
mov r9, qword [rsp + 0x18]
mov r10, qword [rsp + 8]
mov rcx, qword [rsp]
jmp 0x402729
mov rdi, qword [rsp + 0x10]
mov rdx, rax
mov rsi, rbx
mov dword [rsp + 8], r10d
mov qword [rsp], rax
call sym.imp.memmove
mov r10d, dword [rsp + 8]
mov rcx, qword [rsp]
jmp 0x4027cd
mov rdi, qword [rsp]
mov rdx, rax
mov rsi, rbx
mov qword [rsp + 8], rax
call sym.imp.memmove
mov rcx, qword [rsp + 8]
jmp 0x40286e
mov rdx, rax
mov rsi, rbx
mov rdi, r14
mov r15, rax
call sym.imp.memmove
jmp 0x402671
mov rdi, qword [rsp + 8]
mov rdx, rax
mov rsi, rbx
mov qword [rsp], rax
call sym.imp.memmove
mov rcx, qword [rsp]
jmp 0x40292e
sub ebp, eax
jmp 0x402014
sub r13d, eax
jmp 0x4023b7
sub ecx, eax
jmp 0x4022e4
nop word [rax + rax]
push r15
push r14
push r13
push r12
push rbp
push rbx
sub rsp, 0xc8
mov rax, qword fs:[0x28]
mov qword [rsp + 0xb8], rax
xor eax, eax
lea rax, [rsp + 0x80]
mov qword [rsp + 8], rax
lea rax, [rsp + 0x60]
mov qword [rsp + 0x20], rax
nop dword [rax + rax]
mov eax, sym.imp.__pthread_key_create
test rax, rax
je 0x402a7c
mov edi, obj.inputMutex
call sym.imp.pthread_mutex_lock
test eax, eax
jne 0x404b18
mov eax, dword [rip + 0x2087fa]
cmp eax, dword [rip + 0x2087f0]
mov dword [rsp + 0x14], eax
jge 0x403b3e
mov rbp, qword [rip + 0x20880f]
lea r12d, [rax + 1]
mov dword [rip + 0x2087d8], r12d
mov r15d, dword [rbp + 0x109c]
mov byte [rbp + 0x1098], 0
cmp r15d, 5
ja 0x403320
mov r13, qword [rbp + 0x1088]
lea r14, [rbp + 0x1008]
lea rax, [r13 + 0x85]
cmp qword [rbp + 0x1090], rax
jbe 0x40337e
mov dword [r13], 0x65736143
mov byte [r13 + 4], 0x20
add r13, 5
test r12d, r12d
mov qword [rbp + 0x1088], r13
mov rbx, qword [rbp + 0x1090]
mov ecx, r12d
js 0x403450
je 0x403706
mov edi, dword [rbp + 0x10a4]
mov esi, 0xcccccccd
cmp edi, 0xa
jne 0x402dd0
nop dword [rax + rax]
mov eax, ecx
sub rbx, 1
mul esi
shr edx, 3
lea eax, [rdx + rdx*4]
add eax, eax
sub ecx, eax
add ecx, 0x30
test edx, edx
mov byte [rbx], cl
mov ecx, edx
jne 0x402b28
cmp byte [rbp + 0x1098], 0
jne 0x4032a8
mov rcx, qword [rbp + 0x1088]
mov rsi, qword [rbp + 0x1090]
mov r12d, dword [rbp + 0x109c]
mov rax, rsi
mov byte [rbp + 0x1098], 1
sub rax, rbx
cmp eax, r12d
jb 0x4036b9
xor r12d, r12d
test rax, rax
je 0x402b99
mov rdi, rcx
mov rdx, rax
mov rsi, rbx
mov r12, rax
call sym.imp.memmove
mov rcx, rax
add rcx, r12
cmp rcx, r14
mov qword [rbp + 0x1088], rcx
jae 0x403686
mov r12d, dword [rbp + 0x109c]
mov byte [rbp + 0x1098], 0
cmp r12d, 8
ja 0x403190
lea rax, [rcx + 0x88]
cmp qword [rbp + 0x1090], rax
jbe 0x4031e7
movabs rax, 0x6465747261747320
add rcx, 8
mov qword [rcx - 8], rax
lea rax, [rcx + 1]
mov byte [rbp + 0x1098], 0
mov qword [rbp + 0x1088], rax
mov byte [rcx], 0xa
cmp qword [rbp + 0x1088], r14
jae 0x403653
mov rbx, qword [rip + 0x208695]
mov rax, qword [rbx]
mov rsi, qword [rbx + 0x1088]
lea rbp, [rbx + 8]
mov rax, qword [rax]
sub rsi, rbp
cmp rax, sym.OutputFile::writeToDevice
jne 0x4034c0
mov rcx, qword [rbx + 0x10d8]
mov edx, esi
mov rdi, rbp
mov esi, 1
call sym.imp.fwrite
mov rdi, qword [rbx + 0x10d8]
call sym.imp.fflush
mov qword [rbx + 0x1088], rbp
mov edi, 0x48
call sym.operatornew
lea rbx, [rax + 0x30]
mov qword [rax + 0x28], 0
mov byte [rax + 0x30], 0
mov edi, 0x10e0
mov r14, rax
mov qword [rax + 0x20], rbx
call sym.operatornew
lea rdx, [rax + 8]
mov rbx, qword [rip + 0x208626]
mov byte [rax + 0x1098], 0
mov dword [rax + 0x109c], 0
mov byte [rax + 0x10a0], 0x20
mov qword [rax + 0x1088], rdx
lea rdx, [rax + 0x1088]
mov dword [rax + 0x10a4], 0xa
mov dword [rax + 0x10a8], 9
mov byte [rax + 0x10c8], 0x20
mov qword [rax + 0x1090], rdx
lea rdx, [rax + 0x10c8]
mov qword [rax + 0x10c0], 1
mov byte [rax + 0x10c9], 0
mov qword [rax + 0x10b0], 0x3b9aca00
mov qword [rax + 0x10b8], rdx
lea rdx, [r14 + 0x20]
mov qword [rax], 0x409708
mov qword [r14 + 0x40], rax
mov qword [rsp + 0x40], r14
mov qword [rax + 0x10d8], rdx
mov rax, qword [rbx + 8]
nop dword [rax]
cmp qword [rbx + 0x10], rax
mov rdx, rax
jbe 0x402f10
lea rax, [rdx + 1]
mov qword [rbx + 8], rax
movzx r12d, byte [rdx]
lea edx, [r12 - 9]
mov ecx, r12d
cmp dl, 4
jbe 0x402d28
cmp r12b, 0x20
je 0x402d28
cmp r12b, 0x2d
movsx edx, r12b
je 0x4034a0
mov esi, dword [rbx + 0x18]
xor r13d, r13d
xor ebp, ebp
cmp esi, 0xa
ja 0x402e2b
sub ecx, 0x30
xor r13d, r13d
xor ebp, ebp
movzx ecx, cl
cmp esi, ecx
ja 0x402da9
jmp 0x402e50
nop word [rax + rax]
lea rax, [rdx + 1]
mov qword [rbx + 8], rax
movsx edx, byte [rdx]
lea ecx, [rdx - 0x30]
movzx ecx, cl
cmp ecx, esi
jae 0x402e50
imul ebp, esi
add r13d, 1
cmp qword [rbx + 0x10], rax
lea ebp, [rbp + rdx - 0x30]
mov rdx, rax
ja 0x402d90
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rdx, qword [rbx + 8]
mov esi, dword [rbx + 0x18]
jmp 0x402d90
nop
mov eax, ecx
xor edx, edx
sub rbx, 1
div edi
lea eax, [rdx + 0x30]
lea esi, [rdx + 0x37]
cmp edx, 9
cmova eax, esi
xor edx, edx
mov byte [rbx], al
mov edi, dword [rbp + 0x10a4]
mov eax, ecx
div edi
test eax, eax
mov ecx, eax
jne 0x402dd0
jmp 0x402b45
nop
lea ecx, [rdx - 0x37]
movsx edx, cl
cmp edx, esi
jae 0x402e50
imul ebp, esi
add r13d, 1
add ebp, edx
cmp qword [rbx + 0x10], rax
jbe 0x40363f
lea rcx, [rax + 1]
mov qword [rbx + 8], rcx
movzx edx, byte [rax]
mov rax, rcx
lea ecx, [rdx - 0x30]
cmp cl, 9
jbe 0x402e03
lea ecx, [rdx - 0x41]
cmp cl, 0x19
jbe 0x402e00
lea ecx, [rdx - 0x61]
sub edx, 0x57
cmp cl, 0x19
mov ecx, edx
cmova ecx, esi
movsx edx, cl
cmp edx, esi
jb 0x402e0a
sub rax, 1
test r13d, r13d
mov qword [rbx + 8], rax
je 0x403040
mov edx, ebp
neg edx
cmp r12b, 0x2d
cmove ebp, edx
mov dword [r14], ebp
nop
cmp qword [rbx + 0x10], rax
mov rdx, rax
jbe 0x403060
lea rax, [rdx + 1]
mov qword [rbx + 8], rax
movzx r12d, byte [rdx]
lea edx, [r12 - 9]
mov ecx, r12d
cmp dl, 4
jbe 0x402e70
cmp r12b, 0x20
je 0x402e70
cmp r12b, 0x2d
movsx edx, r12b
je 0x403620
mov esi, dword [rbx + 0x18]
xor r13d, r13d
xor ebp, ebp
cmp esi, 0xa
ja 0x402f4c
sub ecx, 0x30
xor r13d, r13d
xor ebp, ebp
movzx ecx, cl
cmp ecx, esi
jb 0x402ee9
jmp 0x402f78
nop
lea rax, [rdx + 1]
mov qword [rbx + 8], rax
movsx edx, byte [rdx]
lea ecx, [rdx - 0x30]
movzx ecx, cl
cmp ecx, esi
jae 0x402f78
imul ebp, esi
add r13d, 1
cmp qword [rbx + 0x10], rax
lea ebp, [rbp + rdx - 0x30]
mov rdx, rax
ja 0x402ed0
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rdx, qword [rbx + 8]
mov esi, dword [rbx + 0x18]
jmp 0x402ed0
nop
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rdx, qword [rbx + 8]
jmp 0x402d35
lea ecx, [rdx - 0x37]
movsx edx, cl
cmp edx, esi
jae 0x402f78
imul ebp, esi
add r13d, 1
add ebp, edx
cmp qword [rbx + 0x10], rax
jbe 0x4038aa
lea rcx, [rax + 1]
mov qword [rbx + 8], rcx
movzx edx, byte [rax]
mov rax, rcx
lea ecx, [rdx - 0x30]
cmp cl, 9
jbe 0x402f24
lea ecx, [rdx - 0x41]
cmp cl, 0x19
jbe 0x402f21
lea ecx, [rdx - 0x61]
sub edx, 0x57
cmp cl, 0x19
mov ecx, edx
cmova ecx, esi
movsx edx, cl
cmp edx, esi
jb 0x402f2b
nop dword [rax]
sub rax, 1
test r13d, r13d
mov qword [rbx + 8], rax
je 0x403040
mov edx, ebp
neg edx
cmp r12b, 0x2d
cmove ebp, edx
mov dword [r14 + 4], ebp
nop dword [rax + rax]
cmp qword [rbx + 0x10], rax
mov rdx, rax
jbe 0x403500
lea rax, [rdx + 1]
mov qword [rbx + 8], rax
movzx r12d, byte [rdx]
lea edx, [r12 - 9]
mov ecx, r12d
cmp dl, 4
jbe 0x402fa0
cmp r12b, 0x20
je 0x402fa0
cmp r12b, 0x2d
movsx edx, r12b
je 0x40388b
mov esi, dword [rbx + 0x18]
xor r13d, r13d
xor ebp, ebp
cmp esi, 0xa
ja 0x40309c
sub ecx, 0x30
xor r13d, r13d
xor ebp, ebp
movzx ecx, cl
cmp esi, ecx
ja 0x403019
jmp 0x4030c8
nop
lea rax, [rdx + 1]
mov qword [rbx + 8], rax
movsx edx, byte [rdx]
lea ecx, [rdx - 0x30]
movzx ecx, cl
cmp ecx, esi
jae 0x4030c8
imul ebp, esi
add r13d, 1
cmp qword [rbx + 0x10], rax
lea ebp, [rbp + rdx - 0x30]
mov rdx, rax
ja 0x403000
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rdx, qword [rbx + 8]
mov esi, dword [rbx + 0x18]
jmp 0x403000
nop
mov ecx, str.void_read_Ts___...___with_Ts____int___int___int___int___int___int___int___
mov edx, 0x240
mov esi, str.sorted_code_control_Al.Cash_Al.Cash_1_1_source.cpp
mov edi, str.input__read_forward_Ts__args_..._
call sym.imp.__assert_fail
nop dword [rax]
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rdx, qword [rbx + 8]
jmp 0x402e7d
lea ecx, [rdx - 0x37]
movsx edx, cl
cmp edx, esi
jae 0x4030c8
imul ebp, esi
add r13d, 1
add ebp, edx
cmp qword [rbx + 0x10], rax
jbe 0x403be0
lea rcx, [rax + 1]
mov qword [rbx + 8], rcx
movzx edx, byte [rax]
mov rax, rcx
lea ecx, [rdx - 0x30]
cmp cl, 9
jbe 0x403074
lea ecx, [rdx - 0x41]
cmp cl, 0x19
jbe 0x403071
lea ecx, [rdx - 0x61]
sub edx, 0x57
cmp cl, 0x19
mov ecx, edx
cmova ecx, esi
movsx edx, cl
cmp edx, esi
jb 0x40307b
nop dword [rax]
sub rax, 1
test r13d, r13d
mov qword [rbx + 8], rax
je 0x403040
mov edx, ebp
neg edx
cmp r12b, 0x2d
cmove ebp, edx
mov dword [r14 + 8], ebp
nop dword [rax + rax]
cmp qword [rbx + 0x10], rax
mov rdx, rax
jbe 0x403713
lea rax, [rdx + 1]
mov qword [rbx + 8], rax
movzx r12d, byte [rdx]
lea edx, [r12 - 9]
mov ecx, r12d
cmp dl, 4
jbe 0x4030f0
cmp r12b, 0x20
je 0x4030f0
cmp r12b, 0x2d
movsx edx, r12b
je 0x403bb0
mov esi, dword [rbx + 0x18]
xor r13d, r13d
xor ebp, ebp
cmp esi, 0xa
ja 0x40353b
sub ecx, 0x30
xor r13d, r13d
xor ebp, ebp
movzx ecx, cl
cmp esi, ecx
ja 0x403169
jmp 0x403559
nop
lea rax, [rdx + 1]
mov qword [rbx + 8], rax
movsx edx, byte [rdx]
lea ecx, [rdx - 0x30]
movzx ecx, cl
cmp ecx, esi
jae 0x403559
imul ebp, esi
add r13d, 1
cmp qword [rbx + 0x10], rax
lea ebp, [rbp + rdx - 0x30]
mov rdx, rax
ja 0x403150
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rdx, qword [rbx + 8]
mov esi, dword [rbx + 0x18]
jmp 0x403150
nop
lea edx, [r12 - 8]
lea rax, [rcx + rdx + 0x80]
cmp qword [rbp + 0x1090], rax
mov r12, rdx
jbe 0x4038ee
cmp edx, 1
je 0x403852
movzx esi, byte [rbp + 0x10a0]
lea rbx, [rcx + rdx]
mov rdi, rcx
call sym.imp.memset
mov rcx, rbx
mov qword [rbp + 0x1088], rbx
lea rax, [rcx + 0x88]
cmp qword [rbp + 0x1090], rax
ja 0x402bd8
lea rbx, [rbp + 8]
mov eax, r14d
mov r15d, str.started
mov rsi, r14
sub eax, ecx
mov r14, rbp
mov r12d, 8
mov rbp, r15
mov qword [rsp + 0x18], rbx
mov r15, rsi
jmp 0x403236
nop
test eax, eax
mov ebx, eax
jne 0x404b0b
add rcx, rbx
cmp rcx, r15
mov qword [r14 + 0x1088], rcx
jae 0x403261
test r12d, r12d
je 0x403296
add rbp, rbx
mov eax, 0x1000
cmp r12d, eax
jae 0x403210
mov ebx, r12d
xor r12d, r12d
mov rdi, rcx
mov rdx, rbx
mov rsi, rbp
call sym.imp.memmove
mov rcx, rax
add rcx, rbx
cmp rcx, r15
mov qword [r14 + 0x1088], rcx
jb 0x403229
mov rax, qword [r14]
mov esi, 0x1000
mov rdi, r14
xor r13d, r13d
call qword [rax]
mov rax, qword [r14 + 0x1088]
sub rax, r15
jne 0x4038d6
mov rax, qword [rsp + 0x18]
test r12d, r12d
lea rcx, [rax + r13]
mov qword [r14 + 0x1088], rcx
jne 0x40322e
mov rbp, r14
mov r14, r15
jmp 0x402bea
nop dword [rax]
mov rax, qword [rbp + 0x10c0]
mov rcx, qword [rbp + 0x1088]
mov rsi, qword [rbp + 0x1090]
mov r15, qword [rbp + 0x10b8]
mov byte [rbp + 0x1098], 0
mov r12d, eax
mov r13d, eax
lea rdx, [rcx + r12 + 0x80]
cmp rsi, rdx
jbe 0x403a47
cmp eax, 1
je 0x40382e
test eax, eax
je 0x403307
mov rsi, r15
mov rdi, rcx
mov rdx, r12
call sym.imp.memmove
mov rsi, qword [rbp + 0x1090]
mov rcx, rax
add rcx, r12
mov qword [rbp + 0x1088], rcx
jmp 0x402b60
nop word cs:[rax + rax]
mov rdi, qword [rbp + 0x1088]
lea edx, [r15 - 5]
mov r15, rdx
lea rax, [rdi + rdx + 0x80]
cmp qword [rbp + 0x1090], rax
jbe 0x403986
cmp edx, 1
je 0x403872
movzx esi, byte [rbp + 0x10a0]
lea r13, [rdi + rdx]
lea r14, [rbp + 0x1008]
call sym.imp.memset
lea rax, [r13 + 0x85]
cmp qword [rbp + 0x1090], rax
mov qword [rbp + 0x1088], r13
ja 0x402ade
lea rsi, [rbp + 8]
mov eax, r14d
mov ebx, str.Case
mov dword [rsp + 0x28], r12d
sub eax, r13d
mov r12, r14
mov r15d, 5
mov r14, rbp
mov qword [rsp + 0x18], rsi
mov rbp, rbx
jmp 0x4033d6
nop dword [rax + rax]
test eax, eax
mov ebx, eax
jne 0x404b24
add r13, rbx
cmp r13, r12
mov qword [r14 + 0x1088], r13
jae 0x4033fe
test r15d, r15d
je 0x40342f
add rbp, rbx
mov eax, 0x1000
cmp r15d, eax
jae 0x4033b0
mov ebx, r15d
xor r15d, r15d
mov rdi, r13
mov rdx, rbx
add r13, rbx
mov rsi, rbp
call sym.imp.memmove
cmp r13, r12
mov qword [r14 + 0x1088], r13
jb 0x4033c9
mov rax, qword [r14]
mov esi, 0x1000
mov rdi, r14
xor r13d, r13d
call qword [rax]
mov rax, qword [r14 + 0x1088]
sub rax, r12
jne 0x4038be
add r13, qword [rsp + 0x18]
test r15d, r15d
mov qword [r14 + 0x1088], r13
jne 0x4033ce
mov rbp, r14
mov r14, r12
mov r12d, dword [rsp + 0x28]
mov rbx, qword [rbp + 0x1090]
test r12d, r12d
mov ecx, r12d
jns 0x402b09
nop dword [rax]
neg r12d
je 0x403b7b
mov esi, dword [rbp + 0x10a4]
mov ecx, 0xcccccccd
cmp esi, 0xa
jne 0x4034d0
nop dword [rax]
mov eax, r12d
sub rbx, 1
mul ecx
shr edx, 3
lea eax, [rdx + rdx*4]
add eax, eax
sub r12d, eax
add r12d, 0x30
test edx, edx
mov byte [rbx], r12b
mov r12d, edx
jne 0x403470
mov byte [rbx - 1], 0x2d
sub rbx, 1
jmp 0x402b45
nop
cmp rax, qword [rbx + 0x10]
jae 0x403b1c
lea rsi, [rax + 1]
mov qword [rbx + 8], rsi
movsx edx, byte [rax]
mov rax, rsi
mov ecx, edx
jmp 0x402d62
nop
mov rdi, rbx
call rax
jmp 0x402c55
nop word [rax + rax]
mov eax, r12d
xor edx, edx
sub rbx, 1
div esi
lea eax, [rdx + 0x30]
lea ecx, [rdx + 0x37]
cmp edx, 9
cmova eax, ecx
xor edx, edx
mov byte [rbx], al
mov esi, dword [rbp + 0x10a4]
mov eax, r12d
div esi
test eax, eax
mov r12d, eax
jne 0x4034d0
jmp 0x403492
nop
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rdx, qword [rbx + 8]
jmp 0x402fad
mov edx, ecx
movsx edx, dl
cmp edx, esi
jae 0x403559
imul ebp, esi
add r13d, 1
add ebp, edx
cmp qword [rbx + 0x10], rax
jbe 0x403e3d
lea rcx, [rax + 1]
mov qword [rbx + 8], rcx
movzx edx, byte [rax]
mov rax, rcx
lea ecx, [rdx - 0x30]
cmp cl, 9
jbe 0x403511
lea ecx, [rdx - 0x41]
cmp cl, 0x19
ja 0x403bcf
sub edx, 0x37
movsx edx, dl
cmp edx, esi
jb 0x40351a
sub rax, 1
test r13d, r13d
mov qword [rbx + 8], rax
je 0x403040
mov edx, ebp
neg edx
cmp r12b, 0x2d
cmove ebp, edx
mov dword [r14 + 0xc], ebp
nop dword [rax]
cmp qword [rbx + 0x10], rax
mov rdx, rax
jbe 0x403b2d
lea rax, [rdx + 1]
mov qword [rbx + 8], rax
movzx ebp, byte [rdx]
lea edx, [rbp - 9]
mov ecx, ebp
cmp dl, 4
jbe 0x403580
cmp bpl, 0x20
je 0x403580
cmp bpl, 0x2d
movsx edx, bpl
je 0x403e1e
mov esi, dword [rbx + 0x18]
xor r13d, r13d
xor r12d, r12d
cmp esi, 0xa
ja 0x403750
sub ecx, 0x30
xor r13d, r13d
xor r12d, r12d
movzx ecx, cl
cmp esi, ecx
ja 0x4035f9
jmp 0x40376e
nop dword [rax]
lea rax, [rdx + 1]
mov qword [rbx + 8], rax
movsx edx, byte [rdx]
lea ecx, [rdx - 0x30]
movzx ecx, cl
cmp ecx, esi
jae 0x40376e
imul r12d, esi
add r13d, 1
cmp qword [rbx + 0x10], rax
lea r12d, [r12 + rdx - 0x30]
mov rdx, rax
ja 0x4035e0
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rdx, qword [rbx + 8]
mov esi, dword [rbx + 0x18]
jmp 0x4035e0
cmp rax, qword [rbx + 0x10]
jae 0x403c4c
lea rsi, [rax + 1]
mov qword [rbx + 8], rsi
movsx edx, byte [rax]
mov rax, rsi
mov ecx, edx
jmp 0x402eaa
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
mov esi, dword [rbx + 0x18]
jmp 0x402e1d
mov rax, qword [rbp]
mov esi, 0x1000
mov rdi, rbp
xor ebx, ebx
call qword [rax]
mov rax, qword [rbp + 0x1088]
lea rcx, [rbp + 8]
sub rax, r14
jne 0x403b03
add rbx, rcx
mov qword [rbp + 0x1088], rbx
jmp 0x402c0c
mov rax, qword [rbp]
mov esi, 0x1000
mov rdi, rbp
xor ebx, ebx
call qword [rax]
mov rax, qword [rbp + 0x1088]
lea rcx, [rbp + 8]
sub rax, r14
jne 0x403a2e
add rcx, rbx
mov qword [rbp + 0x1088], rcx
jmp 0x402bac
sub r12d, eax
mov edx, r12d
lea rax, [rcx + rdx + 0x80]
cmp rsi, rax
jbe 0x403c5d
cmp r12d, 1
je 0x403b90
movzx esi, byte [rbp + 0x10a0]
lea r12, [rcx + rdx]
mov rdi, rcx
call sym.imp.memset
mov qword [rbp + 0x1088], r12
mov rcx, r12
mov rax, qword [rbp + 0x1090]
sub rax, rbx
jmp 0x402b7d
mov byte [rbx - 1], 0x30
sub rbx, 1
jmp 0x402b45
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rdx, qword [rbx + 8]
jmp 0x4030fd
mov edx, ecx
movsx edx, dl
cmp edx, esi
jae 0x40376e
imul r12d, esi
add r13d, 1
add r12d, edx
cmp qword [rbx + 0x10], rax
jbe 0x404a22
lea rcx, [rax + 1]
mov qword [rbx + 8], rcx
movzx edx, byte [rax]
mov rax, rcx
lea ecx, [rdx - 0x30]
cmp cl, 9
jbe 0x403724
lea ecx, [rdx - 0x41]
cmp cl, 0x19
ja 0x403c3b
sub edx, 0x37
movsx edx, dl
cmp edx, esi
jb 0x40372d
sub rax, 1
test r13d, r13d
mov qword [rbx + 8], rax
je 0x403040
mov edx, r12d
neg edx
cmp bpl, 0x2d
cmove r12d, edx
mov dword [r14 + 0x10], r12d
cmp qword [rbx + 0x10], rax
mov rdx, rax
jbe 0x403cfb
lea rax, [rdx + 1]
mov qword [rbx + 8], rax
movzx r12d, byte [rdx]
lea edx, [r12 - 9]
mov ecx, r12d
cmp dl, 4
jbe 0x403790
cmp r12b, 0x20
je 0x403790
cmp r12b, 0x2d
movsx edx, r12b
je 0x404a03
mov esi, dword [rbx + 0x18]
xor r13d, r13d
xor ebp, ebp
cmp esi, 0xa
ja 0x403c22
sub ecx, 0x30
xor r13d, r13d
xor ebp, ebp
movzx ecx, cl
cmp esi, ecx
ja 0x403809
jmp 0x403d3a
nop
lea rax, [rdx + 1]
mov qword [rbx + 8], rax
movsx edx, byte [rdx]
lea ecx, [rdx - 0x30]
movzx ecx, cl
cmp ecx, esi
jae 0x403d3a
imul ebp, esi
add r13d, 1
cmp qword [rbx + 0x10], rax
lea ebp, [rbp + rdx - 0x30]
mov rdx, rax
ja 0x4037f0
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rdx, qword [rbx + 8]
mov esi, dword [rbx + 0x18]
jmp 0x4037f0
lea rax, [rcx + 1]
mov qword [rbp + 0x1088], rax
movzx eax, byte [r15]
mov byte [rcx], al
mov rcx, qword [rbp + 0x1088]
mov rsi, qword [rbp + 0x1090]
jmp 0x402b60
lea rax, [rcx + 1]
mov qword [rbp + 0x1088], rax
movzx eax, byte [rbp + 0x10a0]
mov byte [rcx], al
mov rcx, qword [rbp + 0x1088]
jmp 0x402bc4
lea rax, [rdi + 1]
mov qword [rbp + 0x1088], rax
movzx eax, byte [rbp + 0x10a0]
mov byte [rdi], al
jmp 0x402abc
cmp rax, qword [rbx + 0x10]
jae 0x403e51
lea rsi, [rax + 1]
mov qword [rbx + 8], rsi
movsx edx, byte [rax]
mov rax, rsi
mov ecx, edx
jmp 0x402fda
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
mov esi, dword [rbx + 0x18]
jmp 0x402f3e
mov rdi, qword [rsp + 0x18]
mov rdx, rax
mov rsi, r12
mov r13, rax
call sym.imp.memmove
jmp 0x40341e
mov rdi, qword [rsp + 0x18]
mov rdx, rax
mov rsi, r15
mov r13, rax
call sym.imp.memmove
jmp 0x403281
mov eax, r14d
lea rbx, [rbp + 8]
mov rdi, rcx
sub eax, ecx
jmp 0x403919
nop dword [rax]
cmp r15, r14
mov qword [rbp + 0x1088], r15
mov rdi, r15
jae 0x403948
sub r12d, r13d
mov eax, 0x1000
je 0x40397e
cmp r12d, eax
cmovbe eax, r12d
mov edx, eax
test edx, edx
mov r13, rdx
lea r15, [rdi + rdx]
je 0x403900
movzx esi, byte [rbp + 0x10a0]
call sym.imp.memset
cmp r15, r14
mov qword [rbp + 0x1088], r15
mov rdi, r15
jb 0x40390f
mov rax, qword [rbp]
mov esi, 0x1000
mov rdi, rbp
xor r15d, r15d
call qword [rax]
mov rax, qword [rbp + 0x1088]
sub rax, r14
jne 0x403d24
lea rdi, [rbx + r15]
sub r12d, r13d
mov eax, 0x1000
mov qword [rbp + 0x1088], rdi
jne 0x403919
mov rcx, rdi
jmp 0x402bc4
lea rbx, [rbp + 0x1008]
lea rsi, [rbp + 8]
mov eax, ebx
mov qword [rsp + 0x18], rsi
sub eax, edi
jmp 0x4039b9
nop dword [rax]
cmp rbx, r13
mov qword [rbp + 0x1088], r13
mov rdi, r13
jbe 0x4039e8
sub r15d, r14d
mov eax, 0x1000
je 0x403a23
cmp r15d, eax
cmovbe eax, r15d
mov edx, eax
test edx, edx
mov r14, rdx
lea r13, [rdi + rdx]
je 0x4039a0
movzx esi, byte [rbp + 0x10a0]
call sym.imp.memset
cmp rbx, r13
mov qword [rbp + 0x1088], r13
mov rdi, r13
ja 0x4039af
mov rax, qword [rbp]
mov esi, 0x1000
mov rdi, rbp
xor r13d, r13d
call qword [rax]
mov rax, qword [rbp + 0x1088]
sub rax, rbx
jne 0x403d0c
mov rax, qword [rsp + 0x18]
sub r15d, r14d
lea rdi, [rax + r13]
mov eax, 0x1000
mov qword [rbp + 0x1088], rdi
jne 0x4039b9
mov r13, rdi
mov r14, rbx
jmp 0x402aca
mov rdi, rcx
mov rdx, rax
mov rsi, r14
mov rbx, rax
call sym.imp.memmove
mov rcx, rax
jmp 0x4036aa
lea rax, [rbp + 8]
mov r12d, r14d
mov qword [rsp + 0x28], rbx
sub r12d, ecx
mov rbx, r14
mov r14, rbp
mov qword [rsp + 0x18], rax
mov rbp, r15
jmp 0x403a8d
nop word cs:[rax + rax]
add rcx, r15
cmp rcx, rbx
mov qword [r14 + 0x1088], rcx
jae 0x403abc
sub r13d, r12d
je 0x403aec
add rbp, r15
mov r12d, 0x1000
cmp r13d, r12d
cmovbe r12d, r13d
test r12d, r12d
mov r15d, r12d
je 0x403a70
mov rdi, rcx
mov rdx, r15
mov rsi, rbp
call sym.imp.memmove
mov rcx, rax
add rcx, r15
cmp rcx, rbx
mov qword [r14 + 0x1088], rcx
jb 0x403a7f
mov rax, qword [r14]
mov esi, 0x1000
mov rdi, r14
call qword [rax]
mov rax, qword [r14 + 0x1088]
xor ecx, ecx
sub rax, rbx
jne 0x403dff
add rcx, qword [rsp + 0x18]
sub r13d, r12d
mov qword [r14 + 0x1088], rcx
jne 0x403a84
mov rbp, r14
mov r14, rbx
mov rbx, qword [rsp + 0x28]
mov rsi, qword [rbp + 0x1090]
jmp 0x402b60
mov rdi, rcx
mov rdx, rax
mov rsi, r14
mov rbx, rax
call sym.imp.memmove
mov rcx, rax
jmp 0x403677
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
jmp 0x4034aa
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rdx, qword [rbx + 8]
jmp 0x40358d
mov eax, sym.imp.__pthread_key_create
test rax, rax
je 0x403b52
mov edi, obj.inputMutex
call sym.imp.pthread_mutex_unlock
mov rax, qword [rsp + 0xb8]
xor rax, qword fs:[0x28]
jne 0x404b13
add rsp, 0xc8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
mov byte [rbx - 1], 0x30
sub rbx, 1
mov byte [rbx - 1], 0x2d
sub rbx, 1
jmp 0x402b45
lea rax, [rcx + 1]
mov qword [rbp + 0x1088], rax
movzx eax, byte [rbp + 0x10a0]
mov byte [rcx], al
mov rcx, qword [rbp + 0x1088]
jmp 0x4036f7
cmp rax, qword [rbx + 0x10]
jae 0x404aba
lea rsi, [rax + 1]
mov qword [rbx + 8], rsi
movsx edx, byte [rax]
mov rax, rsi
mov ecx, edx
jmp 0x40312a
lea ecx, [rdx - 0x61]
sub edx, 0x57
cmp cl, 0x19
cmova edx, esi
jmp 0x403513
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
mov esi, dword [rbx + 0x18]
jmp 0x40308e
mov edx, ecx
movsx edx, dl
cmp edx, esi
jae 0x403d3a
imul ebp, esi
add r13d, 1
add ebp, edx
cmp qword [rbx + 0x10], rax
jbe 0x404a66
lea rcx, [rax + 1]
mov qword [rbx + 8], rcx
movzx edx, byte [rax]
mov rax, rcx
lea ecx, [rdx - 0x30]
cmp cl, 9
jbe 0x403bf4
lea ecx, [rdx - 0x41]
cmp cl, 0x19
ja 0x403ec1
sub edx, 0x37
jmp 0x403bf6
lea ecx, [rdx - 0x61]
sub edx, 0x57
cmp cl, 0x19
cmova edx, esi
jmp 0x403726
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
jmp 0x40362a
lea rsi, [rbp + 8]
mov eax, r14d
mov rdi, rcx
sub eax, ecx
mov qword [rsp + 0x18], rsi
jmp 0x403c89
cmp r15, r14
mov qword [rbp + 0x1088], r15
mov rdi, r15
jae 0x403cb8
sub r12d, r13d
mov eax, 0x1000
je 0x403cf3
cmp r12d, eax
cmovbe eax, r12d
mov edx, eax
test edx, edx
mov r13, rdx
lea r15, [rdi + rdx]
je 0x403c70
movzx esi, byte [rbp + 0x10a0]
call sym.imp.memset
cmp r15, r14
mov qword [rbp + 0x1088], r15
mov rdi, r15
jb 0x403c7f
mov rax, qword [rbp]
mov esi, 0x1000
mov rdi, rbp
xor r15d, r15d
call qword [rax]
mov rax, qword [rbp + 0x1088]
sub rax, r14
jne 0x403ed2
mov rax, qword [rsp + 0x18]
sub r12d, r13d
lea rdi, [rax + r15]
mov eax, 0x1000
mov qword [rbp + 0x1088], rdi
jne 0x403c89
mov rcx, rdi
jmp 0x4036f7
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rdx, qword [rbx + 8]
jmp 0x40379d
mov rdi, qword [rsp + 0x18]
mov rdx, rax
mov rsi, rbx
mov r13, rax
call sym.imp.memmove
jmp 0x403a09
mov rdx, rax
mov rsi, r14
mov rdi, rbx
mov r15, rax
call sym.imp.memmove
jmp 0x403969
sub rax, 1
test r13d, r13d
mov qword [rbx + 8], rax
je 0x403040
mov edx, ebp
neg edx
cmp r12b, 0x2d
cmove ebp, edx
mov dword [r14 + 0x14], ebp
cmp qword [rbx + 0x10], rax
mov rdx, rax
jbe 0x403e62
lea rax, [rdx + 1]
mov qword [rbx + 8], rax
movzx r12d, byte [rdx]
lea edx, [r12 - 9]
mov esi, r12d
cmp dl, 4
jbe 0x403d5a
cmp r12b, 0x20
je 0x403d5a
cmp r12b, 0x2d
movsx edx, r12b
je 0x404a47
mov ecx, dword [rbx + 0x18]
xor r13d, r13d
xor ebp, ebp
cmp ecx, 0xa
ja 0x403e73
sub esi, 0x30
xor r13d, r13d
xor ebp, ebp
movzx esi, sil
cmp esi, ecx
jb 0x403dda
jmp 0x403eea
nop word [rax + rax]
lea rax, [rdx + 1]
mov qword [rbx + 8], rax
movsx edx, byte [rdx]
lea esi, [rdx - 0x30]
movzx esi, sil
cmp esi, ecx
jae 0x403eea
imul ebp, ecx
add r13d, 1
cmp qword [rbx + 0x10], rax
lea ebp, [rbp + rdx - 0x30]
mov rdx, rax
ja 0x403dc0
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rdx, qword [rbx + 8]
mov ecx, dword [rbx + 0x18]
jmp 0x403dc0
mov rdi, qword [rsp + 0x18]
mov rdx, rax
mov rsi, rbx
mov qword [rsp + 0x30], rax
call sym.imp.memmove
mov rcx, qword [rsp + 0x30]
jmp 0x403adb
cmp rax, qword [rbx + 0x10]
jae 0x404a36
lea rsi, [rax + 1]
mov qword [rbx + 8], rsi
movsx edx, byte [rax]
mov rax, rsi
mov ecx, edx
jmp 0x4035b6
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
mov esi, dword [rbx + 0x18]
jmp 0x40352d
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
jmp 0x403895
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rdx, qword [rbx + 8]
jmp 0x403d67
lea esi, [rdx - 0x30]
cmp sil, 9
ja 0x403eaf
mov edx, esi
movsx edx, dl
cmp edx, ecx
jae 0x403eea
imul ebp, ecx
add r13d, 1
add ebp, edx
cmp qword [rbx + 0x10], rax
jbe 0x404af7
lea rsi, [rax + 1]
mov qword [rbx + 8], rsi
movzx edx, byte [rax]
mov rax, rsi
lea esi, [rdx - 0x30]
cmp sil, 9
jbe 0x403e7c
lea esi, [rdx - 0x41]
cmp sil, 0x19
ja 0x404a9e
sub edx, 0x37
jmp 0x403e7e
lea ecx, [rdx - 0x61]
sub edx, 0x57
cmp cl, 0x19
cmova edx, esi
jmp 0x403bf6
mov rdi, qword [rsp + 0x18]
mov rdx, rax
mov rsi, r14
mov r15, rax
call sym.imp.memmove
jmp 0x403cd9
sub rax, 1
test r13d, r13d
mov qword [rbx + 8], rax
je 0x403040
mov eax, ebp
neg eax
cmp r12b, 0x2d
cmove ebp, eax
mov eax, sym.imp.__pthread_key_create
test rax, rax
mov dword [r14 + 0x18], ebp
je 0x403f1e
mov edi, obj.inputMutex
call sym.imp.pthread_mutex_unlock
mov rbx, qword [rsp + 0x40]
mov rax, qword [rsp + 8]
mov byte [rsp + 0x80], 0
mov qword [rsp + 0x78], 0
mov r12d, dword [rbx + 8]
mov qword [rsp + 0x70], rax
mov eax, dword [rbx]
lea edx, [r12 + r12]
cmp edx, eax
je 0x4042e8
mov r13d, dword [rbx + 0x10]
lea edx, [r13 + r13]
cmp eax, edx
je 0x404508
mov ebp, dword [rbx + 0x18]
lea edx, [rbp + rbp]
cmp eax, edx
je 0x4045b0
test r12d, r12d
jle 0x403f7f
cmp r12d, dword [rbx + 0x14]
jge 0x404430
test r13d, r13d
jle 0x403f8e
cmp r13d, dword [rbx + 4]
jge 0x404430
test ebp, ebp
mov eax, dword [rbx + 0xc]
jle 0x403f9d
cmp ebp, eax
jge 0x404430
mov ecx, dword [rbx + 0x14]
mov edx, dword [rbx + 4]
sub eax, ebp
mov dword [rbx + 0xc], eax
mov r8d, 1
sub ecx, r12d
sub edx, r13d
cmp ecx, edx
mov dword [rbx + 0x14], ecx
mov dword [rbx + 4], edx
jl 0x4048e2
cmp ecx, eax
jl 0x4048fe
lea rdi, [rsp + 0x70]
mov ecx, 0x40921d
xor edx, edx
xor esi, esi
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_replace
nop dword [rax]
mov eax, dword [rbx + 0x14]
sub eax, 1
mov dword [rbx + 0x14], eax
mov rdi, qword [rsp + 0x70]
mov r12, qword [rsp + 0x78]
test eax, eax
mov rcx, rdi
movzx edx, byte [rdi + r12 - 1]
jle 0x404148
cmp dl, 0x52
je 0x404120
cmp dl, 0x59
je 0x4040c8
cmp dl, 0x42
jne 0x404004
mov edx, dword [rbx + 4]
mov eax, dword [rbx + 0xc]
mov esi, edx
add esi, eax
je 0x4046a5
cmp edx, eax
jg 0x404080
je 0x404078
cmp rdi, qword [rsp + 8]
lea r13, [r12 + 1]
mov rax, qword [rsp + 0x80]
je 0x4044f8
cmp r13, rax
ja 0x4042c0
mov byte [rcx + r12], 0x59
mov rax, qword [rsp + 0x70]
mov qword [rsp + 0x78], r13
mov byte [rax + r12 + 1], 0
sub dword [rbx + 0xc], 1
mov eax, dword [rbx + 0x14]
jmp 0x403fe9
nop dword [rax + rax]
cmp byte [rdi], 0x52
jne 0x404031
nop dword [rax]
cmp rdi, qword [rsp + 8]
lea r13, [r12 + 1]
mov rax, qword [rsp + 0x80]
je 0x4044e8
cmp r13, rax
ja 0x404298
mov byte [rcx + r12], 0x52
mov rax, qword [rsp + 0x70]
mov qword [rsp + 0x78], r13
mov byte [rax + r12 + 1], 0
sub dword [rbx + 4], 1
mov eax, dword [rbx + 0x14]
jmp 0x403fe9
nop word [rax + rax]
mov edx, dword [rbx + 4]
mov esi, edx
add esi, eax
je 0x4046a5
cmp edx, eax
jl 0x4040e0
jne 0x404080
cmp byte [rdi], 0x42
jne 0x404080
cmp rdi, qword [rsp + 8]
lea r13, [r12 + 1]
mov rax, qword [rsp + 0x80]
je 0x4044d8
cmp r13, rax
ja 0x404270
mov byte [rcx + r12], 0x42
mov rax, qword [rsp + 0x70]
mov qword [rsp + 0x78], r13
mov byte [rax + r12 + 1], 0
jmp 0x403fe0
nop dword [rax + rax]
mov edx, dword [rbx + 0xc]
mov esi, edx
add esi, eax
je 0x4046a5
cmp edx, eax
jl 0x4040e0
jne 0x404031
cmp byte [rdi], 0x42
jne 0x404031
jmp 0x4040e0
nop word [rax + rax]
mov esi, dword [rbx + 4]
test esi, esi
jle 0x40416a
cmp dl, 0x52
je 0x404120
cmp dl, 0x59
je 0x4040c8
cmp dl, 0x42
je 0x40401b
test esi, esi
jg 0x40414f
mov r8d, dword [rbx + 0xc]
test r8d, r8d
jg 0x40414f
cmp byte [rdi], dl
je 0x4046a5
lea rsi, [rdi + r12]
lea rax, [rsp + 0xa0]
mov qword [rsp + 0x98], 0
mov byte [rsp + 0xa0], 0
cmp rsi, rdi
mov qword [rsp + 0x90], rax
mov qword [rsp + 0x18], rsi
je 0x404bb3
mov rbp, rdi
xor r15d, r15d
mov qword [rsp + 0x28], rax
movabs r12, 0x7fffffffffffffff
jmp 0x404226
nop dword [rax + rax]
mov byte [rax + r15], r13b
mov rax, qword [rsp + 0x90]
cmp r13b, 0x52
mov qword [rsp + 0x98], r14
mov byte [rax + r14], 0
je 0x404861
cmp r13b, 0x59
je 0x4047f8
cmp r13b, 0x42
je 0x404723
add rbp, 1
cmp qword [rsp + 0x18], rbp
je 0x40479b
mov r15, qword [rsp + 0x98]
mov rax, qword [rsp + 0x90]
cmp rax, qword [rsp + 0x28]
movzx r13d, byte [rbp]
lea r14, [r15 + 1]
je 0x40491d
mov rdx, qword [rsp + 0xa0]
cmp r14, rdx
jbe 0x4041d0
lea rdi, [rsp + 0x90]
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, r15
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rax, qword [rsp + 0x90]
jmp 0x4041d0
nop
lea rdi, [rsp + 0x70]
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, r12
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rcx, qword [rsp + 0x70]
jmp 0x404101
nop dword [rax]
lea rdi, [rsp + 0x70]
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, r12
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rcx, qword [rsp + 0x70]
jmp 0x4040a1
nop dword [rax]
lea rdi, [rsp + 0x70]
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, r12
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rcx, qword [rsp + 0x70]
jmp 0x404052
nop dword [rax]
mov eax, dword [rbx + 0x14]
add eax, eax
cmp edx, eax
je 0x4046d7
mov rax, qword [rsp + 0x20]
mov qword [rsp + 0x50], rax
mov rax, qword [rsp + 0x80]
mov rdx, qword [rsp + 0x88]
mov qword [rsp + 0x60], rax
mov qword [rsp + 0x68], rdx
nop dword [rax]
mov r12, qword [rsp + 0x78]
mov qword [rsp + 0x58], r12
test r12, r12
je 0x40445d
mov rbp, qword [rbx + 0x40]
mov r15, qword [rsp + 0x50]
mov r13d, r12d
mov r14d, dword [rbp + 0x109c]
mov byte [rbp + 0x1098], 0
cmp r12d, r14d
jb 0x404480
mov rcx, qword [rbp + 0x1088]
mov r12d, r12d
lea rax, [rcx + r12 + 0x80]
cmp qword [rbp + 0x1090], rax
jbe 0x40460c
cmp r13d, 1
je 0x404590
test r13d, r13d
je 0x404395
mov rdi, rcx
mov rdx, r12
mov rsi, r15
call sym.imp.memmove
mov rcx, rax
add r12, rcx
mov qword [rbp + 0x1088], r12
mov rbx, qword [rbx + 0x40]
mov rsi, qword [rbx + 0x1088]
mov rax, qword [rbx]
lea rbp, [rbx + 8]
mov rdi, rbx
sub rsi, rbp
call qword [rax]
mov rdi, qword [rsp + 0x50]
lea rax, [rsp + 0x60]
mov qword [rbx + 0x1088], rbp
cmp rdi, rax
je 0x4043d4
call sym.operatordelete
movsxd rdi, dword [rsp + 0x14]
mov rax, qword [rsp + 0x40]
lea rsi, [rax + 0x20]
shl rdi, 5
add rdi, qword [rip + 0x206e73]
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
mov rbx, qword [rsp + 0x40]
test rbx, rbx
je 0x402a60
mov rdi, qword [rbx + 0x40]
test rdi, rdi
je 0x40440f
mov rax, qword [rdi]
call qword [rax + 0x10]
mov rdi, qword [rbx + 0x20]
lea rax, [rbx + 0x30]
cmp rdi, rax
je 0x404421
call sym.operatordelete
mov rdi, rbx
call sym.operatordelete
jmp 0x402a60
nop
mov rax, qword [rsp + 0x20]
mov rdx, qword [rsp + 0x88]
mov qword [rsp + 0x58], 0
mov qword [rsp + 0x50], rax
mov rax, qword [rsp + 0x80]
mov qword [rsp + 0x68], rdx
mov qword [rsp + 0x60], rax
lea rdi, [rsp + 0x50]
mov r8d, 0xa
mov ecx, str.IMPOSSIBLE
xor edx, edx
xor esi, esi
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_replace
mov r12, qword [rsp + 0x58]
jmp 0x404333
mov rdi, qword [rbp + 0x1088]
sub r14d, r12d
mov edx, r14d
lea rax, [rdi + rdx + 0x80]
cmp qword [rbp + 0x1090], rax
jbe 0x404948
cmp r14d, 1
je 0x4048c9
movzx esi, byte [rbp + 0x10a0]
lea rcx, [rdi + rdx]
mov qword [rsp + 0x18], rcx
call sym.imp.memset
mov rcx, qword [rsp + 0x18]
mov qword [rbp + 0x1088], rcx
jmp 0x40435d
nop word [rax + rax]
mov eax, 0xf
jmp 0x4040f8
nop word [rax + rax]
mov eax, 0xf
jmp 0x404098
nop word [rax + rax]
mov eax, 0xf
jmp 0x404049
nop word [rax + rax]
mov esi, dword [rbx + 4]
lea edx, [rsi + rsi]
cmp eax, edx
jne 0x4042f5
test r13d, r13d
jle 0x4042f5
xor ebp, ebp
movabs r12, 0x7fffffffffffffff
jmp 0x404542
nop dword [rax]
mov rax, r12
sub rax, qword [rsp + 0x78]
cmp rax, 1
jbe 0x404bcc
lea rdi, [rsp + 0x70]
mov edx, 2
mov esi, 0x40921f
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
add ebp, 1
cmp r13d, ebp
jne 0x404530
mov rax, qword [rsp + 0x70]
cmp rax, qword [rsp + 8]
mov rsi, qword [rsp + 0x20]
mov qword [rsp + 0x50], rsi
je 0x4042ff
mov qword [rsp + 0x50], rax
mov rax, qword [rsp + 0x80]
mov qword [rsp + 0x60], rax
jmp 0x404320
nop
lea rax, [rcx + 1]
mov qword [rbp + 0x1088], rax
movzx eax, byte [r15]
mov byte [rcx], al
jmp 0x40439f
nop word cs:[rax + rax]
mov esi, dword [rbx + 0xc]
lea edx, [rsi + rsi]
cmp eax, edx
jne 0x4042f5
test ebp, ebp
jle 0x4042f5
xor r12d, r12d
movabs r13, 0x7fffffffffffffff
jmp 0x4045ea
nop dword [rax]
mov rax, r13
sub rax, qword [rsp + 0x78]
cmp rax, 1
jbe 0x404bc2
lea rdi, [rsp + 0x70]
mov edx, 2
mov esi, 0x409222
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
add r12d, 1
cmp ebp, r12d
jne 0x4045d8
jmp 0x40455e
lea rax, [rbp + 0x1008]
mov r12d, eax
mov qword [rsp + 0x18], rax
lea rax, [rbp + 8]
sub r12d, ecx
mov qword [rsp + 0x28], rax
jmp 0x404653
nop dword [rax]
add rcx, r14
cmp qword [rsp + 0x18], rcx
mov qword [rbp + 0x1088], rcx
jbe 0x404675
sub r13d, r12d
je 0x40439f
add r15, r14
mov r12d, 0x1000
cmp r13d, r12d
cmovbe r12d, r13d
test r12d, r12d
mov r14d, r12d
je 0x404630
mov rdi, rcx
mov rdx, r14
mov rsi, r15
call sym.imp.memmove
mov rcx, rax
jmp 0x404630
mov rax, qword [rbp]
mov esi, 0x1000
mov rdi, rbp
call qword [rax]
xor ecx, ecx
mov rax, qword [rbp + 0x1088]
sub rax, qword [rsp + 0x18]
jne 0x404927
add rcx, qword [rsp + 0x28]
mov qword [rbp + 0x1088], rcx
jmp 0x404641
cmp rdi, qword [rsp + 8]
mov rax, qword [rsp + 0x20]
mov qword [rsp + 0x58], 0
mov byte [rsp + 0x60], 0
mov qword [rsp + 0x50], rax
je 0x40445d
call sym.operatordelete
mov r12, qword [rsp + 0x58]
jmp 0x40432a
test r12d, r12d
jle 0x4042f5
xor ebp, ebp
movabs r13, 0x7fffffffffffffff
jmp 0x404702
nop
mov rax, r13
sub rax, qword [rsp + 0x78]
cmp rax, 1
jbe 0x404ab0
lea rdi, [rsp + 0x70]
mov edx, 2
mov esi, 0x40921c
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
add ebp, 1
cmp r12d, ebp
jne 0x4046f0
jmp 0x40455e
mov r14d, dword [rbx + 8]
test r14d, r14d
jle 0x404785
mov rax, r12
sub rax, qword [rsp + 0x98]
cmp rax, 1
jbe 0x404b83
xor r13d, r13d
jmp 0x404765
nop word cs:[rax + rax]
mov rax, r12
sub rax, qword [rsp + 0x98]
cmp rax, 1
jbe 0x404b83
lea rdi, [rsp + 0x90]
mov edx, 2
mov esi, 0x40921c
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
add r13d, 1
cmp r14d, r13d
jne 0x404750
add rbp, 1
cmp qword [rsp + 0x18], rbp
mov dword [rbx + 8], 0
jne 0x404216
mov rax, qword [rsp + 0x90]
mov rsi, qword [rsp + 0x20]
lea rdx, [rsp + 0xa0]
cmp rax, rdx
mov qword [rsp + 0x50], rsi
je 0x404a7a
mov qword [rsp + 0x50], rax
mov rax, qword [rsp + 0xa0]
mov rdi, qword [rsp + 0x70]
mov qword [rsp + 0x60], rax
cmp rdi, qword [rsp + 8]
mov r12, qword [rsp + 0x98]
mov qword [rsp + 0x58], r12
jne 0x4046c8
jmp 0x40432a
nop word [rax + rax]
mov r14d, dword [rbx + 0x18]
test r14d, r14d
jle 0x404855
mov rax, r12
sub rax, qword [rsp + 0x98]
cmp rax, 1
jbe 0x404b79
xor r13d, r13d
jmp 0x404835
nop dword [rax + rax]
mov rax, r12
sub rax, qword [rsp + 0x98]
cmp rax, 1
jbe 0x404b79
lea rdi, [rsp + 0x90]
mov edx, 2
mov esi, 0x409222
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
add r13d, 1
cmp r14d, r13d
jne 0x404820
mov dword [rbx + 0x18], 0
jmp 0x404207
mov r14d, dword [rbx + 0x10]
test r14d, r14d
jle 0x4048bd
mov rax, r12
sub rax, qword [rsp + 0x98]
cmp rax, 1
jbe 0x404b6f
xor r13d, r13d
jmp 0x40489d
nop dword [rax]
mov rax, r12
sub rax, qword [rsp + 0x98]
cmp rax, 1
jbe 0x404b6f
lea rdi, [rsp + 0x90]
mov edx, 2
mov esi, 0x40921f
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
add r13d, 1
cmp r14d, r13d
jne 0x404888
mov dword [rbx + 0x10], 0
jmp 0x404207
lea rax, [rdi + 1]
mov qword [rbp + 0x1088], rax
movzx eax, byte [rbp + 0x10a0]
mov byte [rdi], al
jmp 0x404356
cmp edx, eax
jl 0x4048fe
lea rdi, [rsp + 0x70]
mov ecx, 0x409220
xor edx, edx
xor esi, esi
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_replace
jmp 0x4040b6
lea rdi, [rsp + 0x70]
mov ecx, 0x409223
xor edx, edx
xor esi, esi
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_replace
sub dword [rbx + 0xc], 1
mov eax, dword [rbx + 0x14]
jmp 0x403fe9
mov edx, 0xf
jmp 0x404242
mov rsi, qword [rsp + 0x18]
mov rdi, qword [rsp + 0x28]
mov rdx, rax
mov qword [rsp + 0x30], rax
call sym.imp.memmove
mov rcx, qword [rsp + 0x30]
jmp 0x404697
lea rax, [rbp + 0x1008]
lea rsi, [rbp + 8]
mov rcx, rdi
mov qword [rsp + 0x28], rax
mov qword [rsp + 0x38], rsi
sub eax, edi
jmp 0x404989
nop dword [rax]
cmp qword [rsp + 0x28], r8
mov qword [rbp + 0x1088], r8
mov rcx, r8
jbe 0x4049b9
sub r14d, dword [rsp + 0x18]
mov eax, 0x1000
je 0x40435d
cmp r14d, eax
cmovbe eax, r14d
mov edx, eax
test eax, eax
mov dword [rsp + 0x18], eax
lea r8, [rcx + rdx]
je 0x404968
movzx esi, byte [rbp + 0x10a0]
mov rdi, rcx
mov qword [rsp + 0x30], r8
call sym.imp.memset
mov r8, qword [rsp + 0x30]
jmp 0x404968
mov rax, qword [rbp]
mov esi, 0x1000
mov rdi, rbp
call qword [rax]
xor ecx, ecx
mov rax, qword [rbp + 0x1088]
sub rax, qword [rsp + 0x28]
jne 0x4049e5
add rcx, qword [rsp + 0x38]
mov qword [rbp + 0x1088], rcx
jmp 0x404979
mov rsi, qword [rsp + 0x28]
mov rdi, qword [rsp + 0x38]
mov rdx, rax
mov qword [rsp + 0x30], rax
call sym.imp.memmove
mov rcx, qword [rsp + 0x30]
jmp 0x4049d7
cmp rax, qword [rbx + 0x10]
jae 0x404b5e
lea rsi, [rax + 1]
mov qword [rbx + 8], rsi
movsx edx, byte [rax]
mov rax, rsi
mov ecx, edx
jmp 0x4037ca
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
mov esi, dword [rbx + 0x18]
jmp 0x403742
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
jmp 0x403e28
cmp rax, qword [rbx + 0x10]
jae 0x404b4d
lea rcx, [rax + 1]
mov qword [rbx + 8], rcx
movsx edx, byte [rax]
mov rax, rcx
mov esi, edx
jmp 0x403d94
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
mov esi, dword [rbx + 0x18]
jmp 0x403c14
mov rdi, qword [rsp + 0x70]
mov rax, qword [rsp + 0xa0]
mov rdx, qword [rsp + 0xa8]
mov qword [rsp + 0x60], rax
mov qword [rsp + 0x68], rdx
jmp 0x4047d5
lea esi, [rdx - 0x61]
sub edx, 0x57
cmp sil, 0x19
cmova edx, ecx
jmp 0x403e7e
mov edi, str.basic_string::append
call sym.std::__throw_length_error
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
jmp 0x403bba
mov rbx, rax
mov rdi, qword [rsp + 0x70]
lea rax, [rsp + 0x80]
cmp rdi, rax
je 0x404ae5
call sym.operatordelete
lea rdi, [rsp + 0x40]
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::_unique_ptr
mov rdi, rbx
call sym.imp._Unwind_Resume
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
mov ecx, dword [rbx + 0x18]
jmp 0x403e98
sub r12d, eax
jmp 0x403241
call sym.imp.__stack_chk_fail
mov edi, eax
call sym.std::__throw_system_error
mov rbx, rax
jmp 0x404ae5
sub r15d, eax
jmp 0x4033e1
mov rdi, qword [r14 + 0x20]
mov rbp, rax
cmp rbx, rdi
je 0x404b3d
call sym.operatordelete
mov rdi, r14
call sym.operatordelete
mov rdi, rbp
call sym.imp._Unwind_Resume
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
jmp 0x404a51
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
jmp 0x404a0d
mov edi, str.basic_string::append
call sym.std::__throw_length_error
mov edi, str.basic_string::append
call sym.std::__throw_length_error
mov edi, str.basic_string::append
call sym.std::__throw_length_error
mov rdi, qword [rsp + 0x90]
lea rdx, [rsp + 0xa0]
mov rbx, rax
cmp rdi, rdx
je 0x404ace
call sym.operatordelete
jmp 0x404ace
mov rax, qword [rsp + 0x20]
mov qword [rsp + 0x50], rax
jmp 0x404a7f
mov edi, str.basic_string::append
call sym.std::__throw_length_error
mov edi, str.basic_string::append
call sym.std::__throw_length_error
mov rdi, qword [rsp + 0x50]
mov rbx, rax
lea rax, [rsp + 0x60]
cmp rdi, rax
jne 0x404ae0
jmp 0x404ae5
nop dword [rax + rax]
nop word cs:[rax + rax]
push r15
push r14
push r13
push r12
push rbp
push rbx
sub rsp, 0xc8
mov rax, qword fs:[0x28]
mov qword [rsp + 0xb8], rax
xor eax, eax
lea rax, [rsp + 0x60]
lea r15, [rsp + 0x80]
mov dword [rsp + 0xc], 0
mov qword [rsp + 0x20], rax
nop
mov edi, 0x48
call sym.operatornew
lea rbp, [rax + 0x30]
mov qword [rax + 0x28], 0
mov byte [rax + 0x30], 0
mov edi, 0x10e0
mov rbx, rax
mov qword [rax + 0x20], rbp
call sym.operatornew
lea rdx, [rax + 8]
mov r12d, dword [rbx + 8]
mov byte [rax + 0x1098], 0
mov dword [rax + 0x109c], 0
mov byte [rax + 0x10a0], 0x20
mov qword [rax + 0x1088], rdx
lea rdx, [rax + 0x1088]
mov dword [rax + 0x10a4], 0xa
mov dword [rax + 0x10a8], 9
mov byte [rax + 0x10c8], 0x20
mov qword [rax + 0x1090], rdx
lea rdx, [rax + 0x10c8]
mov qword [rax + 0x10c0], 1
mov byte [rax + 0x10c9], 0
mov qword [rax + 0x10b0], 0x3b9aca00
mov qword [rax + 0x10b8], rdx
lea rdx, [rbx + 0x20]
mov qword [rax], 0x409708
mov qword [rbx + 0x40], rax
mov qword [rsp + 0x40], rbx
mov qword [rax + 0x10d8], rdx
mov eax, dword [rbx]
lea edx, [r12 + r12]
mov qword [rsp + 0x70], r15
mov qword [rsp + 0x78], 0
mov byte [rsp + 0x80], 0
cmp edx, eax
je 0x4050b0
mov r13d, dword [rbx + 0x10]
lea edx, [r13 + r13]
cmp eax, edx
je 0x405310
mov ebp, dword [rbx + 0x18]
lea edx, [rbp + rbp]
cmp eax, edx
je 0x4053d0
test r12d, r12d
jle 0x404d54
cmp r12d, dword [rbx + 0x14]
jge 0x4052a8
test r13d, r13d
jle 0x404d63
cmp r13d, dword [rbx + 4]
jge 0x4052a8
test ebp, ebp
mov eax, dword [rbx + 0xc]
jle 0x404d72
cmp ebp, eax
jge 0x4052a8
mov ecx, dword [rbx + 0x14]
mov edx, dword [rbx + 4]
sub eax, ebp
mov dword [rbx + 0xc], eax
mov r8d, 1
sub ecx, r12d
sub edx, r13d
cmp ecx, edx
mov dword [rbx + 0x14], ecx
mov dword [rbx + 4], edx
jl 0x405730
cmp ecx, eax
jl 0x405710
lea rdi, [rsp + 0x70]
mov ecx, 0x40921d
xor edx, edx
xor esi, esi
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_replace
nop word [rax + rax]
mov eax, dword [rbx + 0x14]
sub eax, 1
mov dword [rbx + 0x14], eax
mov rdi, qword [rsp + 0x70]
mov rbp, qword [rsp + 0x78]
test eax, eax
mov rcx, rdi
movzx edx, byte [rdi + rbp - 1]
jle 0x404f08
cmp dl, 0x52
je 0x404ee0
cmp dl, 0x59
je 0x404e48
cmp dl, 0x42
jne 0x404ddb
mov edx, dword [rbx + 4]
mov eax, dword [rbx + 0xc]
mov esi, edx
add esi, eax
je 0x4054d0
cmp edx, eax
jg 0x404e5b
je 0x405398
cmp rdi, r15
lea r12, [rbp + 1]
mov rax, qword [rsp + 0x80]
je 0x405300
cmp r12, rax
ja 0x405038
mov byte [rcx + rbp], 0x59
mov rax, qword [rsp + 0x70]
mov qword [rsp + 0x78], r12
mov byte [rax + rbp + 1], 0
sub dword [rbx + 0xc], 1
mov eax, dword [rbx + 0x14]
jmp 0x404dc1
nop dword [rax]
mov edx, dword [rbx + 4]
mov esi, edx
add esi, eax
je 0x4054d0
cmp edx, eax
jl 0x404ea8
je 0x404ea0
cmp rdi, r15
lea r12, [rbp + 1]
mov rax, qword [rsp + 0x80]
je 0x4052f0
cmp r12, rax
ja 0x405060
mov byte [rcx + rbp], 0x52
mov rax, qword [rsp + 0x70]
mov qword [rsp + 0x78], r12
mov byte [rax + rbp + 1], 0
sub dword [rbx + 4], 1
mov eax, dword [rbx + 0x14]
jmp 0x404dc1
nop dword [rax + rax]
cmp byte [rdi], 0x42
jne 0x404e5b
nop dword [rax]
cmp rdi, r15
lea r12, [rbp + 1]
mov rax, qword [rsp + 0x80]
je 0x4052e0
cmp r12, rax
ja 0x405088
mov byte [rcx + rbp], 0x42
mov rax, qword [rsp + 0x70]
mov qword [rsp + 0x78], r12
mov byte [rax + rbp + 1], 0
jmp 0x404db8
nop
mov edx, dword [rbx + 0xc]
mov esi, edx
add esi, eax
je 0x4054d0
cmp edx, eax
jl 0x404ea8
jne 0x404e08
cmp byte [rdi], 0x42
jne 0x404e08
jmp 0x404ea8
nop word [rax + rax]
mov esi, dword [rbx + 4]
test esi, esi
jle 0x404f2a
cmp dl, 0x52
je 0x404ee0
cmp dl, 0x59
je 0x404e48
cmp dl, 0x42
je 0x404dee
test esi, esi
jg 0x404f0f
mov r8d, dword [rbx + 0xc]
test r8d, r8d
jg 0x404f0f
cmp byte [rdi], dl
je 0x4054d0
lea rsi, [rdi + rbp]
lea rax, [rsp + 0xa0]
mov qword [rsp + 0x98], 0
mov byte [rsp + 0xa0], 0
mov r13, rdi
movabs r12, 0x7fffffffffffffff
cmp rsi, rdi
mov qword [rsp + 0x90], rax
mov qword [rsp + 0x18], rsi
mov qword [rsp + 0x28], rax
jne 0x404fd2
jmp 0x4055cf
nop dword [rax]
mov byte [rax + rbp], r14b
lea rax, [rbp + 1]
cmp r14b, 0x52
mov qword [rsp + 0x98], rax
mov rax, qword [rsp + 0x90]
mov byte [rax + rbp + 1], 0
je 0x405620
cmp r14b, 0x59
je 0x405558
cmp r14b, 0x42
je 0x405688
add r13, 1
cmp qword [rsp + 0x18], r13
je 0x4055ca
mov rbp, qword [rsp + 0x98]
movzx r14d, byte [r13]
lea rax, [rbp + 1]
mov qword [rsp + 0x10], rax
mov rax, qword [rsp + 0x90]
cmp rax, qword [rsp + 0x28]
je 0x40574c
mov rdx, qword [rsp + 0xa0]
cmp qword [rsp + 0x10], rdx
jbe 0x404f88
lea rdi, [rsp + 0x90]
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, rbp
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rax, qword [rsp + 0x90]
jmp 0x404f88
nop dword [rax]
lea rdi, [rsp + 0x70]
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, rbp
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rcx, qword [rsp + 0x70]
jmp 0x404e26
nop dword [rax]
lea rdi, [rsp + 0x70]
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, rbp
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rcx, qword [rsp + 0x70]
jmp 0x404e79
nop dword [rax]
lea rdi, [rsp + 0x70]
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, rbp
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rcx, qword [rsp + 0x70]
jmp 0x404ec6
nop dword [rax]
mov eax, dword [rbx + 0x14]
add eax, eax
cmp edx, eax
je 0x405500
mov rax, qword [rsp + 0x20]
mov qword [rsp + 0x50], rax
mov rax, qword [rsp + 0x80]
mov rdx, qword [rsp + 0x88]
mov qword [rsp + 0x60], rax
mov qword [rsp + 0x68], rdx
nop dword [rax]
mov r12, qword [rsp + 0x78]
mov qword [rsp + 0x58], r12
test r12, r12
jne 0x405115
lea rdi, [rsp + 0x50]
mov r8d, 0xa
mov ecx, str.IMPOSSIBLE
xor edx, edx
xor esi, esi
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_replace
mov r12, qword [rsp + 0x58]
mov rbp, qword [rbx + 0x40]
mov rax, qword [rsp + 0x50]
mov r13d, r12d
mov r14d, dword [rbp + 0x109c]
mov qword [rsp + 0x10], rax
mov byte [rbp + 0x1098], 0
cmp r12d, r14d
jb 0x405250
mov rcx, qword [rbp + 0x1088]
mov r12d, r12d
lea rax, [rcx + r12 + 0x80]
cmp qword [rbp + 0x1090], rax
jbe 0x405430
cmp r13d, 1
je 0x4053b0
test r13d, r13d
je 0x40517e
mov rsi, qword [rsp + 0x10]
mov rdi, rcx
mov rdx, r12
call sym.imp.memmove
mov rcx, rax
add r12, rcx
mov qword [rbp + 0x1088], r12
mov rbx, qword [rbx + 0x40]
mov rsi, qword [rbx + 0x1088]
mov rax, qword [rbx]
lea rbp, [rbx + 8]
mov rdi, rbx
sub rsi, rbp
call qword [rax]
mov rdi, qword [rsp + 0x50]
lea rax, [rsp + 0x60]
mov qword [rbx + 0x1088], rbp
cmp rdi, rax
je 0x4051bd
call sym.operatordelete
mov rax, qword [rsp + 0x40]
mov edi, dword [rsp + 0xc]
lea rsi, [rax + 0x20]
call sym.writeAnswer
mov rbx, qword [rsp + 0x40]
test rbx, rbx
je 0x405202
mov rdi, qword [rbx + 0x40]
test rdi, rdi
je 0x4051e8
mov rax, qword [rdi]
call qword [rax + 0x10]
mov rdi, qword [rbx + 0x20]
lea rax, [rbx + 0x30]
cmp rdi, rax
je 0x4051fa
call sym.operatordelete
mov rdi, rbx
call sym.operatordelete
add dword [rsp + 0xc], 1
mov eax, dword [rsp + 0xc]
cmp eax, 0x64
jne 0x404c40
call sym.imp.clock
pxor xmm0, xmm0
lea rsi, [rsp + 0x40]
mov edi, str._n_nTest_time:
cvtsi2sd xmm0, rax
divsd xmm0, qword [rip + 0x4584]
movsd qword [rsp + 0x40], xmm0
call sym.writeln_charconst____15__double_
xor edi, edi
call sym.imp.exit
nop word cs:[rax + rax]
mov rdi, qword [rbp + 0x1088]
sub r14d, r12d
mov edx, r14d
lea rax, [rdi + rdx + 0x80]
cmp qword [rbp + 0x1090], rax
jbe 0x405777
cmp r14d, 1
je 0x4056f0
movzx esi, byte [rbp + 0x10a0]
lea rcx, [rdi + rdx]
mov qword [rsp + 0x18], rcx
call sym.imp.memset
mov rcx, qword [rsp + 0x18]
mov qword [rbp + 0x1088], rcx
jmp 0x405144
nop word [rax + rax]
mov rax, qword [rsp + 0x20]
mov rdx, qword [rsp + 0x88]
mov qword [rsp + 0x58], 0
mov qword [rsp + 0x50], rax
mov rax, qword [rsp + 0x80]
mov qword [rsp + 0x68], rdx
mov qword [rsp + 0x60], rax
mov r12, qword [rsp + 0x58]
jmp 0x4050f2
nop
mov eax, 0xf
jmp 0x404ebd
nop word [rax + rax]
mov eax, 0xf
jmp 0x404e70
nop word [rax + rax]
mov eax, 0xf
jmp 0x404e1d
nop word [rax + rax]
mov esi, dword [rbx + 4]
lea edx, [rsi + rsi]
cmp eax, edx
jne 0x4050bd
test r13d, r13d
jle 0x4050bd
xor ebp, ebp
movabs r12, 0x7fffffffffffffff
jmp 0x40534a
nop dword [rax]
mov rax, r12
sub rax, qword [rsp + 0x78]
cmp rax, 1
jbe 0x40590c
lea rdi, [rsp + 0x70]
mov edx, 2
mov esi, 0x40921f
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
add ebp, 1
cmp r13d, ebp
jne 0x405338
mov rax, qword [rsp + 0x70]
mov rsi, qword [rsp + 0x20]
cmp rax, r15
mov qword [rsp + 0x50], rsi
je 0x4050c7
mov qword [rsp + 0x50], rax
mov rax, qword [rsp + 0x80]
mov qword [rsp + 0x60], rax
jmp 0x4050e8
nop dword [rax]
cmp byte [rdi], 0x52
jne 0x404e08
jmp 0x404e5b
nop word cs:[rax + rax]
lea rax, [rcx + 1]
mov qword [rbp + 0x1088], rax
mov rax, qword [rsp + 0x10]
movzx eax, byte [rax]
mov byte [rcx], al
jmp 0x405188
nop word [rax + rax]
mov esi, dword [rbx + 0xc]
lea edx, [rsi + rsi]
cmp eax, edx
jne 0x4050bd
test ebp, ebp
jle 0x4050bd
xor r12d, r12d
movabs r13, 0x7fffffffffffffff
jmp 0x40540a
nop dword [rax]
mov rax, r13
sub rax, qword [rsp + 0x78]
cmp rax, 1
jbe 0x4058c5
lea rdi, [rsp + 0x70]
mov edx, 2
mov esi, 0x409222
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
add r12d, 1
cmp ebp, r12d
jne 0x4053f8
jmp 0x405366
nop dword [rax]
lea rax, [rbp + 0x1008]
mov r12d, eax
mov qword [rsp + 0x18], rax
lea rax, [rbp + 8]
sub r12d, ecx
mov qword [rsp + 0x28], rax
jmp 0x405475
nop dword [rax]
add rcx, r14
cmp qword [rsp + 0x18], rcx
mov qword [rbp + 0x1088], rcx
jbe 0x4054a0
sub r13d, r12d
je 0x405188
add qword [rsp + 0x10], r14
mov r12d, 0x1000
cmp r13d, r12d
cmovbe r12d, r13d
test r12d, r12d
mov r14d, r12d
je 0x405450
mov rsi, qword [rsp + 0x10]
mov rdi, rcx
mov rdx, r14
call sym.imp.memmove
mov rcx, rax
jmp 0x405450
nop dword [rax]
mov rax, qword [rbp]
mov esi, 0x1000
mov rdi, rbp
call qword [rax]
xor ecx, ecx
mov rax, qword [rbp + 0x1088]
sub rax, qword [rsp + 0x18]
jne 0x405756
add rcx, qword [rsp + 0x28]
mov qword [rbp + 0x1088], rcx
jmp 0x405461
mov rax, qword [rsp + 0x20]
mov qword [rsp + 0x58], 0
mov byte [rsp + 0x60], 0
mov qword [rsp + 0x50], rax
cmp rdi, r15
je 0x4052d5
call sym.operatordelete
jmp 0x4052d5
nop dword [rax + rax]
test r12d, r12d
jle 0x4050bd
xor ebp, ebp
movabs r13, 0x7fffffffffffffff
jmp 0x405532
nop word [rax + rax]
mov rax, r13
sub rax, qword [rsp + 0x78]
cmp rax, 1
jbe 0x405852
lea rdi, [rsp + 0x70]
mov edx, 2
mov esi, 0x40921c
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
add ebp, 1
cmp r12d, ebp
jne 0x405520
jmp 0x405366
nop dword [rax + rax]
mov r14d, dword [rbx + 0x18]
test r14d, r14d
jle 0x4055b4
mov rax, r12
sub rax, qword [rsp + 0x98]
cmp rax, 1
jbe 0x4058cf
xor ebp, ebp
jmp 0x405595
nop word [rax + rax]
mov rax, r12
sub rax, qword [rsp + 0x98]
cmp rax, 1
jbe 0x4058cf
lea rdi, [rsp + 0x90]
mov edx, 2
mov esi, 0x409222
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
add ebp, 1
cmp r14d, ebp
jne 0x405580
add r13, 1
cmp qword [rsp + 0x18], r13
mov dword [rbx + 0x18], 0
jne 0x404fd2
mov rdi, qword [rsp + 0x70]
mov rax, qword [rsp + 0x20]
lea rdx, [rsp + 0xa0]
mov qword [rsp + 0x50], rax
mov rax, qword [rsp + 0x90]
cmp rax, rdx
je 0x405833
mov qword [rsp + 0x50], rax
mov rax, qword [rsp + 0xa0]
mov qword [rsp + 0x60], rax
mov rax, qword [rsp + 0x98]
mov qword [rsp + 0x58], rax
jmp 0x4054e8
nop word cs:[rax + rax]
mov r14d, dword [rbx + 0x10]
test r14d, r14d
jle 0x40567c
mov rax, r12
sub rax, qword [rsp + 0x98]
cmp rax, 1
jbe 0x40589c
xor ebp, ebp
jmp 0x40565d
nop word [rax + rax]
mov rax, r12
sub rax, qword [rsp + 0x98]
cmp rax, 1
jbe 0x40589c
lea rdi, [rsp + 0x90]
mov edx, 2
mov esi, 0x40921f
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
add ebp, 1
cmp r14d, ebp
jne 0x405648
mov dword [rbx + 0x10], 0
jmp 0x404fc3
mov r14d, dword [rbx + 8]
test r14d, r14d
jle 0x4056e4
mov rax, r12
sub rax, qword [rsp + 0x98]
cmp rax, 1
jbe 0x4058d9
xor ebp, ebp
jmp 0x4056c5
nop word [rax + rax]
mov rax, r12
sub rax, qword [rsp + 0x98]
cmp rax, 1
jbe 0x4058d9
lea rdi, [rsp + 0x90]
mov edx, 2
mov esi, 0x40921c
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
add ebp, 1
cmp r14d, ebp
jne 0x4056b0
mov dword [rbx + 8], 0
jmp 0x404fc3
lea rax, [rdi + 1]
mov qword [rbp + 0x1088], rax
movzx eax, byte [rbp + 0x10a0]
mov byte [rdi], al
jmp 0x40513d
nop dword [rax]
lea rdi, [rsp + 0x70]
mov ecx, 0x409223
xor edx, edx
xor esi, esi
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_replace
sub dword [rbx + 0xc], 1
mov eax, dword [rbx + 0x14]
jmp 0x404dc1
nop
cmp edx, eax
jl 0x405710
lea rdi, [rsp + 0x70]
mov ecx, 0x409220
xor edx, edx
xor esi, esi
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_replace
jmp 0x404e8c
mov edx, 0xf
jmp 0x405003
mov rsi, qword [rsp + 0x18]
mov rdi, qword [rsp + 0x28]
mov rdx, rax
mov qword [rsp + 0x30], rax
call sym.imp.memmove
mov rcx, qword [rsp + 0x30]
jmp 0x4054c2
lea rax, [rbp + 0x1008]
lea rsi, [rbp + 8]
mov rcx, rdi
mov qword [rsp + 0x28], rax
mov qword [rsp + 0x38], rsi
sub eax, edi
jmp 0x4057b9
nop dword [rax + rax]
cmp qword [rsp + 0x28], r8
mov qword [rbp + 0x1088], r8
mov rcx, r8
jbe 0x4057e9
sub r14d, dword [rsp + 0x18]
mov eax, 0x1000
je 0x405144
cmp r14d, eax
cmovbe eax, r14d
mov edx, eax
test eax, eax
mov dword [rsp + 0x18], eax
lea r8, [rcx + rdx]
je 0x405798
movzx esi, byte [rbp + 0x10a0]
mov rdi, rcx
mov qword [rsp + 0x30], r8
call sym.imp.memset
mov r8, qword [rsp + 0x30]
jmp 0x405798
mov rax, qword [rbp]
mov esi, 0x1000
mov rdi, rbp
call qword [rax]
xor ecx, ecx
mov rax, qword [rbp + 0x1088]
sub rax, qword [rsp + 0x28]
jne 0x405815
add rcx, qword [rsp + 0x38]
mov qword [rbp + 0x1088], rcx
jmp 0x4057a9
mov rsi, qword [rsp + 0x28]
mov rdi, qword [rsp + 0x38]
mov rdx, rax
mov qword [rsp + 0x30], rax
call sym.imp.memmove
mov rcx, qword [rsp + 0x30]
jmp 0x405807
mov rax, qword [rsp + 0xa0]
mov rdx, qword [rsp + 0xa8]
mov qword [rsp + 0x60], rax
mov qword [rsp + 0x68], rdx
jmp 0x405604
mov edi, str.basic_string::append
call sym.std::__throw_length_error
mov rbx, rax
mov rdi, qword [rsp + 0x70]
lea rax, [rsp + 0x80]
cmp rdi, rax
je 0x405876
call sym.operatordelete
lea rdi, [rsp + 0x40]
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::_unique_ptr
mov rdi, rbx
call sym.imp._Unwind_Resume
mov rdi, qword [rsp + 0x50]
mov rbx, rax
lea rax, [rsp + 0x60]
cmp rdi, rax
jne 0x405871
jmp 0x405876
mov edi, str.basic_string::append
call sym.std::__throw_length_error
mov rdi, qword [rsp + 0x90]
lea rdx, [rsp + 0xa0]
mov rbx, rax
cmp rdi, rdx
je 0x40585f
call sym.operatordelete
jmp 0x40585f
mov edi, str.basic_string::append
call sym.std::__throw_length_error
mov edi, str.basic_string::append
call sym.std::__throw_length_error
mov edi, str.basic_string::append
call sym.std::__throw_length_error
mov rdi, qword [rbx + 0x20]
mov r12, rax
cmp rbp, rdi
je 0x4058f4
call sym.operatordelete
mov rdi, rbx
call sym.operatordelete
mov rdi, r12
call sym.imp._Unwind_Resume
mov rbx, rax
jmp 0x405876
mov edi, str.basic_string::append
call sym.std::__throw_length_error
nop word cs:[rax + rax]
push r15
push r14
push r13
push r12
push rbp
push rbx
sub rsp, 0xe8
mov rax, qword fs:[0x28]
mov qword [rsp + 0xd8], rax
xor eax, eax
lea rax, [rsp + 0xa0]
mov dword [rsp + 0x14], 1
mov qword [rsp + 8], rax
lea rax, [rsp + 0x80]
mov qword [rsp + 0x20], rax
nop word cs:[rax + rax]
mov edi, 0x48
call sym.operatornew
lea rbp, [rax + 0x30]
mov qword [rax + 0x28], 0
mov byte [rax + 0x30], 0
mov edi, 0x10e0
mov rbx, rax
mov qword [rax + 0x20], rbp
call sym.operatornew
lea rdx, [rax + 8]
mov byte [rax + 0x1098], 0
mov dword [rax + 0x109c], 0
mov byte [rax + 0x10a0], 0x20
mov dword [rax + 0x10a4], 0xa
mov qword [rax + 0x1088], rdx
lea rdx, [rax + 0x1088]
mov dword [rax + 0x10a8], 9
mov byte [rax + 0x10c8], 0x20
mov qword [rax + 0x10c0], 1
mov qword [rax + 0x1090], rdx
lea rdx, [rax + 0x10c8]
mov byte [rax + 0x10c9], 0
mov qword [rax + 0x10b0], 0x3b9aca00
mov qword [rax], 0x409708
mov qword [rax + 0x10b8], rdx
lea rdx, [rbx + 0x20]
mov qword [rbx + 0x40], rax
mov r12d, dword [rbx + 8]
mov qword [rsp + 0x40], rbx
mov qword [rax + 0x10d8], rdx
mov rax, qword [rsp + 8]
mov qword [rsp + 0x98], 0
mov byte [rsp + 0xa0], 0
lea edx, [r12 + r12]
mov qword [rsp + 0x90], rax
mov eax, dword [rbx]
cmp edx, eax
je 0x405e20
mov r13d, dword [rbx + 0x10]
lea edx, [r13 + r13]
cmp eax, edx
je 0x406508
mov ebp, dword [rbx + 0x18]
lea edx, [rbp + rbp]
cmp eax, edx
je 0x4065d0
test r12d, r12d
jle 0x405a8f
cmp r12d, dword [rbx + 0x14]
jge 0x406498
test r13d, r13d
jle 0x405a9e
cmp r13d, dword [rbx + 4]
jge 0x406498
test ebp, ebp
mov eax, dword [rbx + 0xc]
jle 0x405aad
cmp ebp, eax
jge 0x406498
mov ecx, dword [rbx + 0x14]
mov edx, dword [rbx + 4]
sub eax, ebp
mov dword [rbx + 0xc], eax
mov r8d, 1
sub ecx, r12d
sub edx, r13d
cmp ecx, edx
mov dword [rbx + 0x14], ecx
mov dword [rbx + 4], edx
jl 0x406df8
cmp ecx, eax
jl 0x406dd0
lea rdi, [rsp + 0x90]
mov ecx, 0x40921d
xor edx, edx
xor esi, esi
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_replace
mov eax, dword [rbx + 0x14]
sub eax, 1
mov dword [rbx + 0x14], eax
mov rdi, qword [rsp + 0x90]
mov rbp, qword [rsp + 0x98]
test eax, eax
mov rcx, rdi
movzx edx, byte [rdi + rbp - 1]
jle 0x405c68
cmp dl, 0x52
je 0x405c40
cmp dl, 0x59
je 0x405b90
cmp dl, 0x42
jne 0x405b19
mov edx, dword [rbx + 4]
mov eax, dword [rbx + 0xc]
mov esi, edx
add esi, eax
je 0x4066d0
cmp edx, eax
jg 0x405ba3
je 0x4065a0
cmp rdi, qword [rsp + 8]
lea r12, [rbp + 1]
mov rax, qword [rsp + 0xa0]
je 0x4064f8
cmp r12, rax
ja 0x405d90
mov byte [rcx + rbp], 0x59
mov rax, qword [rsp + 0x90]
mov qword [rsp + 0x98], r12
mov byte [rax + rbp + 1], 0
sub dword [rbx + 0xc], 1
mov eax, dword [rbx + 0x14]
jmp 0x405af9
nop dword [rax + rax]
mov edx, dword [rbx + 4]
mov esi, edx
add esi, eax
je 0x4066d0
cmp edx, eax
jl 0x405bf8
je 0x405bf0
cmp rdi, qword [rsp + 8]
lea r12, [rbp + 1]
mov rax, qword [rsp + 0xa0]
je 0x4064e8
cmp r12, rax
ja 0x405dc0
mov byte [rcx + rbp], 0x52
mov rax, qword [rsp + 0x90]
mov qword [rsp + 0x98], r12
mov byte [rax + rbp + 1], 0
sub dword [rbx + 4], 1
mov eax, dword [rbx + 0x14]
jmp 0x405af9
nop dword [rax + rax]
cmp byte [rdi], 0x42
jne 0x405ba3
nop dword [rax]
cmp rdi, qword [rsp + 8]
lea r12, [rbp + 1]
mov rax, qword [rsp + 0xa0]
je 0x4064d8
cmp r12, rax
ja 0x405df0
mov byte [rcx + rbp], 0x42
mov rax, qword [rsp + 0x90]
mov qword [rsp + 0x98], r12
mov byte [rax + rbp + 1], 0
jmp 0x405af0
nop word cs:[rax + rax]
mov edx, dword [rbx + 0xc]
mov esi, edx
add esi, eax
je 0x4066d0
cmp edx, eax
jl 0x405bf8
jne 0x405b46
cmp byte [rdi], 0x42
jne 0x405b46
jmp 0x405bf8
nop word [rax + rax]
mov esi, dword [rbx + 4]
test esi, esi
jle 0x405c8a
cmp dl, 0x52
je 0x405c40
cmp dl, 0x59
je 0x405b90
cmp dl, 0x42
je 0x405b2c
test esi, esi
jg 0x405c6f
mov r8d, dword [rbx + 0xc]
test r8d, r8d
jg 0x405c6f
cmp byte [rdi], dl
je 0x4066d0
lea rsi, [rdi + rbp]
lea rax, [rsp + 0xc0]
mov qword [rsp + 0xb8], 0
mov byte [rsp + 0xc0], 0
mov r14, rdi
movabs rbp, 0x7fffffffffffffff
cmp rsi, rdi
mov qword [rsp + 0xb0], rax
mov qword [rsp + 0x18], rsi
mov qword [rsp + 0x28], rax
jne 0x405d2f
jmp 0x406c1b
nop dword [rax]
mov byte [rax + r12], r13b
mov rax, qword [rsp + 0xb0]
cmp r13b, 0x52
mov qword [rsp + 0xb8], r15
mov byte [rax + r12 + 1], 0
je 0x406c68
cmp r13b, 0x59
je 0x406ba0
cmp r13b, 0x42
je 0x406cd1
add r14, 1
cmp qword [rsp + 0x18], r14
je 0x406c13
mov rax, qword [rsp + 0xb0]
cmp rax, qword [rsp + 0x28]
mov r12, qword [rsp + 0xb8]
movzx r13d, byte [r14]
lea r15, [r12 + 1]
je 0x406e17
mov rdx, qword [rsp + 0xc0]
cmp r15, rdx
jbe 0x405ce8
lea rdi, [rsp + 0xb0]
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, r12
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rax, qword [rsp + 0xb0]
jmp 0x405ce8
nop word [rax + rax]
lea rdi, [rsp + 0x90]
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, rbp
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rcx, qword [rsp + 0x90]
jmp 0x405b66
nop word [rax + rax]
lea rdi, [rsp + 0x90]
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, rbp
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rcx, qword [rsp + 0x90]
jmp 0x405bc3
nop word [rax + rax]
lea rdi, [rsp + 0x90]
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, rbp
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_mutate
mov rcx, qword [rsp + 0x90]
jmp 0x405c18
nop word [rax + rax]
mov eax, dword [rbx + 0x14]
add eax, eax
cmp edx, eax
je 0x406b40
mov rax, qword [rsp + 0x20]
mov qword [rsp + 0x70], rax
mov rax, qword [rsp + 0xa0]
mov rdx, qword [rsp + 0xa8]
mov qword [rsp + 0x80], rax
mov qword [rsp + 0x88], rdx
nop word [rax + rax]
mov r12, qword [rsp + 0x98]
mov qword [rsp + 0x78], r12
test r12, r12
jne 0x405e90
lea rdi, [rsp + 0x70]
mov r8d, 0xa
mov ecx, str.IMPOSSIBLE
xor edx, edx
xor esi, esi
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_replace
mov r12, qword [rsp + 0x78]
mov rbp, qword [rbx + 0x40]
mov r15, qword [rsp + 0x70]
mov r13d, r12d
mov r14d, dword [rbp + 0x109c]
mov byte [rbp + 0x1098], 0
cmp r12d, r14d
jb 0x406440
mov rcx, qword [rbp + 0x1088]
mov r12d, r12d
lea rax, [rcx + r12 + 0x80]
cmp qword [rbp + 0x1090], rax
jbe 0x406638
cmp r13d, 1
je 0x4065b0
test r13d, r13d
je 0x405ef2
mov rdi, rcx
mov rdx, r12
mov rsi, r15
call sym.imp.memmove
mov rcx, rax
add r12, rcx
mov qword [rbp + 0x1088], r12
mov rbx, qword [rbx + 0x40]
mov rsi, qword [rbx + 0x1088]
mov rax, qword [rbx]
lea rbp, [rbx + 8]
mov rdi, rbx
sub rsi, rbp
call qword [rax]
mov rdi, qword [rsp + 0x70]
lea rax, [rsp + 0x80]
mov qword [rbx + 0x1088], rbp
cmp rdi, rax
je 0x405f34
call sym.operatordelete
lea rax, [rsp + 0x60]
lea rdi, [rsp + 0x50]
mov qword [rsp + 0x58], 0
mov byte [rsp + 0x60], 0
mov qword [rsp + 0x50], rax
mov rax, qword [rsp + 0x40]
lea rsi, [rax + 0x20]
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
mov rax, qword [rsp + 0x40]
mov rbx, qword [rax + 0x40]
mov rsi, qword [rbx + 0x1088]
mov rax, qword [rbx]
lea rbp, [rbx + 8]
mov rdi, rbx
sub rsi, rbp
call qword [rax]
mov qword [rbx + 0x1088], rbp
mov rax, qword [rsp + 0x40]
mov rdx, qword [rax + 0x28]
cmp rdx, qword [rsp + 0x58]
je 0x406410
mov rbx, qword [rip + 0x205308]
mov ebp, dword [rbx + 0x109c]
mov byte [rbx + 0x1098], 0
cmp ebp, 0xf
ja 0x406a38
mov rcx, qword [rbx + 0x1088]
lea r12, [rbx + 0x1008]
lea rax, [rcx + 0x8f]
cmp qword [rbx + 0x1090], rax
jbe 0x406a9f
movabs rax, 0x6e6f20726f727245
mov esi, 0x2074
mov dword [rcx + 8], 0x73657420
mov qword [rcx], rax
mov word [rcx + 0xc], si
add rcx, 0xf
mov byte [rcx - 1], 0x23
mov qword [rbx + 0x1088], rcx
mov ecx, dword [rbx + 0x10a4]
mov rbp, qword [rbx + 0x1090]
cmp ecx, 0xa
jne 0x406fab
mov ecx, dword [rsp + 0x14]
mov esi, 0xcccccccd
nop dword [rax + rax]
mov eax, ecx
sub rbp, 1
mul esi
shr edx, 3
lea eax, [rdx + rdx*4]
add eax, eax
sub ecx, eax
add ecx, 0x30
test edx, edx
mov byte [rbp], cl
mov ecx, edx
jne 0x406028
cmp byte [rbx + 0x1098], 0
jne 0x4069c0
mov r15, qword [rbx + 0x1088]
mov rsi, qword [rbx + 0x1090]
mov r13d, dword [rbx + 0x109c]
mov rax, rsi
mov byte [rbx + 0x1098], 1
sub rax, rbp
cmp eax, r13d
jb 0x406ed2
xor r13d, r13d
test rax, rax
je 0x406097
mov rdx, rax
mov rsi, rbp
mov rdi, r15
mov r13, rax
call sym.imp.memmove
lea rax, [r15 + r13]
cmp rax, r12
mov qword [rbx + 0x1088], rax
jae 0x406ea6
lea rdx, [rax + 1]
mov byte [rbx + 0x1098], 0
mov qword [rbx + 0x1088], rdx
mov byte [rax], 0xa
cmp qword [rbx + 0x1088], r12
jae 0x406e74
mov rbx, qword [rip + 0x2051d4]
mov rax, qword [rbx]
mov rsi, qword [rbx + 0x1088]
lea rbp, [rbx + 8]
mov rax, qword [rax]
sub rsi, rbp
cmp rax, sym.OutputFile::writeToDevice
jne 0x406d50
mov rcx, qword [rbx + 0x10d8]
mov edx, esi
mov rdi, rbp
mov esi, 1
call sym.imp.fwrite
mov rdi, qword [rbx + 0x10d8]
call sym.imp.fflush
mov qword [rbx + 0x1088], rbp
mov rbx, qword [rip + 0x205184]
mov r15, qword [rsp + 0x40]
mov ebp, dword [rbx + 0x109c]
mov byte [rbx + 0x1098], 0
cmp ebp, 0xa
ja 0x406860
mov rcx, qword [rbx + 0x1088]
lea r12, [rbx + 0x1008]
lea rax, [rcx + 0x8a]
cmp qword [rbx + 0x1090], rax
jbe 0x4068c7
movabs rax, 0x6465746365707845
mov edx, 0xa3a
add rcx, 0xa
mov qword [rcx - 0xa], rax
mov word [rcx - 2], dx
mov qword [rbx + 0x1088], rcx
mov rbp, qword [r15 + 0x28]
mov r14, qword [r15 + 0x20]
mov r15d, dword [rbx + 0x109c]
mov byte [rbx + 0x1098], 0
mov r13d, ebp
cmp ebp, r15d
jb 0x406810
mov r15d, ebp
lea rax, [rcx + r15 + 0x80]
cmp qword [rbx + 0x1090], rax
jbe 0x406fe0
cmp ebp, 1
je 0x406d70
test ebp, ebp
je 0x4061db
mov rdi, rcx
mov rdx, r15
mov rsi, r14
call sym.imp.memmove
mov rcx, rax
add rcx, r15
lea rax, [rcx + 1]
mov byte [rbx + 0x1098], 0
mov qword [rbx + 0x1088], rax
mov byte [rcx], 0xa
cmp r12, qword [rbx + 0x1088]
jbe 0x40706b
mov rbx, qword [rip + 0x2050a1]
mov rax, qword [rbx]
mov rsi, qword [rbx + 0x1088]
lea rbp, [rbx + 8]
mov rax, qword [rax]
sub rsi, rbp
cmp rax, sym.OutputFile::writeToDevice
jne 0x406d60
mov rcx, qword [rbx + 0x10d8]
mov edx, esi
mov rdi, rbp
mov esi, 1
call sym.imp.fwrite
mov rdi, qword [rbx + 0x10d8]
call sym.imp.fflush
mov qword [rbx + 0x1088], rbp
mov rbx, qword [rip + 0x205051]
mov ebp, dword [rbx + 0x109c]
mov byte [rbx + 0x1098], 0
cmp ebp, 0xa
ja 0x406700
mov rcx, qword [rbx + 0x1088]
lea r13, [rbx + 0x1008]
lea rax, [rcx + 0x8a]
cmp qword [rbx + 0x1090], rax
jbe 0x406767
movabs rax, 0x6465766965636552
add rcx, 0xa
mov qword [rcx - 0xa], rax
mov eax, 0xa3a
mov word [rcx - 2], ax
mov qword [rbx + 0x1088], rcx
mov rbp, qword [rsp + 0x58]
mov r15d, dword [rbx + 0x109c]
mov r14, qword [rsp + 0x50]
mov byte [rbx + 0x1098], 0
cmp ebp, r15d
mov r12d, ebp
jb 0x406978
mov r15d, ebp
lea rax, [rcx + r15 + 0x80]
cmp qword [rbx + 0x1090], rax
jbe 0x406f1f
cmp ebp, 1
je 0x406d90
test ebp, ebp
je 0x40630b
mov rdi, rcx
mov rdx, r15
mov rsi, r14
call sym.imp.memmove
mov rcx, rax
add rcx, r15
lea rax, [rcx + 1]
mov byte [rbx + 0x1098], 0
mov qword [rbx + 0x1088], rax
mov byte [rcx], 0xa
cmp r13, qword [rbx + 0x1088]
jbe 0x406e42
mov rbx, qword [rip + 0x204f71]
mov rax, qword [rbx]
mov rsi, qword [rbx + 0x1088]
lea rbp, [rbx + 8]
mov rax, qword [rax]
sub rsi, rbp
cmp rax, sym.OutputFile::writeToDevice
jne 0x406d40
mov rcx, qword [rbx + 0x10d8]
mov edx, esi
mov rdi, rbp
mov esi, 1
call sym.imp.fwrite
mov rdi, qword [rbx + 0x10d8]
call sym.imp.fflush
mov qword [rbx + 0x1088], rbp
mov rbx, qword [rsp + 0x50]
lea rax, [rsp + 0x60]
cmp rbx, rax
je 0x406397
mov rdi, rbx
call sym.operatordelete
mov rbx, qword [rsp + 0x40]
test rbx, rbx
je 0x4063ca
mov rdi, qword [rbx + 0x40]
test rdi, rdi
je 0x4063b0
mov rax, qword [rdi]
call qword [rax + 0x10]
mov rdi, qword [rbx + 0x20]
lea rax, [rbx + 0x30]
cmp rdi, rax
je 0x4063c2
call sym.operatordelete
mov rdi, rbx
call sym.operatordelete
add dword [rsp + 0x14], 1
mov eax, dword [rsp + 0x14]
cmp eax, 0x65
jne 0x405970
call sym.imp.clock
pxor xmm0, xmm0
lea rsi, [rsp + 0x40]
mov edi, str._n_nTest_time:
cvtsi2sd xmm0, rax
divsd xmm0, qword [rip + 0x33bc]
movsd qword [rsp + 0x40], xmm0
call sym.writeln_charconst____15__double_
xor edi, edi
call sym.imp.exit
nop
test rdx, rdx
mov rbx, qword [rsp + 0x50]
je 0x406385
mov rdi, qword [rax + 0x20]
mov rsi, rbx
call sym.imp.memcmp
test eax, eax
jne 0x405f99
jmp 0x406385
nop word [rax + rax]
mov rdi, qword [rbp + 0x1088]
sub r14d, r12d
mov edx, r14d
lea rax, [rdi + rdx + 0x80]
cmp qword [rbp + 0x1090], rax
jbe 0x40709d
cmp r14d, 1
je 0x406db0
movzx esi, byte [rbp + 0x10a0]
lea rcx, [rdi + rdx]
mov qword [rsp + 0x18], rcx
call sym.imp.memset
mov rcx, qword [rsp + 0x18]
mov qword [rbp + 0x1088], rcx
jmp 0x405eba
nop word [rax + rax]
mov rax, qword [rsp + 0x20]
mov rdx, qword [rsp + 0xa8]
mov qword [rsp + 0x78], 0
mov qword [rsp + 0x70], rax
mov rax, qword [rsp + 0xa0]
mov qword [rsp + 0x88], rdx
mov qword [rsp + 0x80], rax
mov r12, qword [rsp + 0x78]
jmp 0x405e6d
nop dword [rax]
mov eax, 0xf
jmp 0x405c0f
nop word [rax + rax]
mov eax, 0xf
jmp 0x405bba
nop word [rax + rax]
mov eax, 0xf
jmp 0x405b5d
nop word [rax + rax]
mov esi, dword [rbx + 4]
lea edx, [rsi + rsi]
cmp eax, edx
jne 0x405e2d
test r13d, r13d
jle 0x405e2d
xor ebp, ebp
movabs r12, 0x7fffffffffffffff
jmp 0x406545
nop dword [rax]
mov rax, r12
sub rax, qword [rsp + 0x98]
cmp rax, 1
jbe 0x407861
lea rdi, [rsp + 0x90]
mov edx, 2
mov esi, 0x40921f
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
add ebp, 1
cmp r13d, ebp
jne 0x406530
mov rax, qword [rsp + 0x90]
cmp rax, qword [rsp + 8]
mov rsi, qword [rsp + 0x20]
mov qword [rsp + 0x70], rsi
je 0x405e37
mov qword [rsp + 0x70], rax
mov rax, qword [rsp + 0xa0]
mov qword [rsp + 0x80], rax
jmp 0x405e60
nop dword [rax + rax]
cmp byte [rdi], 0x52
jne 0x405b46
jmp 0x405ba3
nop
lea rax, [rcx + 1]
mov qword [rbp + 0x1088], rax
movzx eax, byte [r15]
mov byte [rcx], al
jmp 0x405efc
nop word cs:[rax + rax]
mov esi, dword [rbx + 0xc]
lea edx, [rsi + rsi]
cmp eax, edx
jne 0x405e2d
test ebp, ebp
jle 0x405e2d
xor r12d, r12d
movabs r13, 0x7fffffffffffffff
jmp 0x40660d
nop dword [rax]
mov rax, r13
sub rax, qword [rsp + 0x98]
cmp rax, 1
jbe 0x4078c2
lea rdi, [rsp + 0x90]
mov edx, 2
mov esi, 0x409222
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
add r12d, 1
cmp ebp, r12d
jne 0x4065f8
jmp 0x406564
nop word [rax + rax]
lea rax, [rbp + 0x1008]
mov r12d, eax
mov qword [rsp + 0x18], rax
lea rax, [rbp + 8]
sub r12d, ecx
mov qword [rsp + 0x28], rax
jmp 0x40667b
nop dword [rax]
add rcx, r14
cmp qword [rsp + 0x18], rcx
mov qword [rbp + 0x1088], rcx
jbe 0x4066a0
sub r13d, r12d
je 0x405efc
add r15, r14
mov r12d, 0x1000
cmp r13d, r12d
cmovbe r12d, r13d
test r12d, r12d
mov r14d, r12d
je 0x406658
mov rdi, rcx
mov rdx, r14
mov rsi, r15
call sym.imp.memmove
mov rcx, rax
jmp 0x406658
nop dword [rax]
mov rax, qword [rbp]
mov esi, 0x1000
mov rdi, rbp
call qword [rax]
xor ecx, ecx
mov rax, qword [rbp + 0x1088]
sub rax, qword [rsp + 0x18]
jne 0x406e21
add rcx, qword [rsp + 0x28]
mov qword [rbp + 0x1088], rcx
jmp 0x406669
mov rax, qword [rsp + 0x20]
mov qword [rsp + 0x78], 0
mov byte [rsp + 0x80], 0
mov qword [rsp + 0x70], rax
cmp rdi, qword [rsp + 8]
je 0x4064cb
call sym.operatordelete
jmp 0x4064cb
mov rdi, qword [rbx + 0x1088]
lea edx, [rbp - 0xa]
mov rbp, rdx
lea rax, [rdi + rdx + 0x80]
cmp qword [rbx + 0x1090], rax
jbe 0x4071f5
cmp edx, 1
je 0x4071bc
movzx esi, byte [rbx + 0x10a0]
lea rcx, [rdi + rdx]
lea r13, [rbx + 0x1008]
mov qword [rsp + 0x18], rcx
call sym.imp.memset
mov rcx, qword [rsp + 0x18]
lea rax, [rcx + 0x8a]
cmp qword [rbx + 0x1090], rax
mov qword [rbx + 0x1088], rcx
ja 0x40628f
lea rax, [rbx + 8]
mov ebp, r13d
mov r12d, 0xa
sub ebp, ecx
mov r15d, str.Received:_n
mov qword [rsp + 0x18], rax
jmp 0x4067af
nop dword [rax + rax]
test ebp, ebp
mov r14d, ebp
jne 0x4067ba
add rcx, r14
cmp r13, rcx
mov qword [rbx + 0x1088], rcx
jbe 0x4067da
sub r12d, ebp
je 0x4062b1
add r15, r14
mov ebp, 0x1000
cmp r12d, ebp
jae 0x406788
mov r14d, r12d
mov ebp, r12d
mov rdi, rcx
mov rdx, r14
mov rsi, r15
call sym.imp.memmove
mov rcx, rax
add rcx, r14
cmp r13, rcx
mov qword [rbx + 0x1088], rcx
ja 0x40679e
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 0x1088]
xor ecx, ecx
sub rax, r13
jne 0x4074f9
add rcx, qword [rsp + 0x18]
mov qword [rbx + 0x1088], rcx
jmp 0x40679e
nop word [rax + rax]
sub r15d, ebp
mov edx, r15d
lea rax, [rcx + rdx + 0x80]
cmp qword [rbx + 0x1090], rax
jbe 0x407582
cmp r15d, 1
je 0x4071d5
movzx esi, byte [rbx + 0x10a0]
lea r15, [rcx + rdx]
mov rdi, rcx
call sym.imp.memset
mov qword [rbx + 0x1088], r15
mov rcx, r15
jmp 0x4061a5
nop word [rax + rax]
mov rdi, qword [rbx + 0x1088]
lea edx, [rbp - 0xa]
mov rbp, rdx
lea rax, [rdi + rdx + 0x80]
cmp qword [rbx + 0x1090], rax
jbe 0x40728b
cmp edx, 1
je 0x40718a
movzx esi, byte [rbx + 0x10a0]
lea rcx, [rdi + rdx]
lea r12, [rbx + 0x1008]
mov qword [rsp + 0x18], rcx
call sym.imp.memset
mov rcx, qword [rsp + 0x18]
lea rax, [rcx + 0x8a]
cmp qword [rbx + 0x1090], rax
mov qword [rbx + 0x1088], rcx
ja 0x406161
lea rax, [rbx + 8]
mov ebp, r12d
mov r13d, 0xa
sub ebp, ecx
mov qword [rsp + 0x18], str.Expected:_n
mov qword [rsp + 0x28], rax
jmp 0x406919
nop word cs:[rax + rax]
test ebp, ebp
mov r14d, ebp
jne 0x406924
add rcx, r14
cmp r12, rcx
mov qword [rbx + 0x1088], rcx
jbe 0x406946
sub r13d, ebp
je 0x406183
add qword [rsp + 0x18], r14
mov ebp, 0x1000
cmp r13d, ebp
jae 0x4068f0
mov r14d, r13d
mov ebp, r13d
mov rsi, qword [rsp + 0x18]
mov rdi, rcx
mov rdx, r14
call sym.imp.memmove
mov rcx, rax
add rcx, r14
cmp r12, rcx
mov qword [rbx + 0x1088], rcx
ja 0x406906
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 0x1088]
xor ecx, ecx
sub rax, r12
jne 0x407639
add rcx, qword [rsp + 0x28]
mov qword [rbx + 0x1088], rcx
jmp 0x406906
nop dword [rax + rax]
sub r15d, ebp
mov edx, r15d
lea rax, [rcx + rdx + 0x80]
cmp qword [rbx + 0x1090], rax
jbe 0x407443
cmp r15d, 1
je 0x40716a
movzx esi, byte [rbx + 0x10a0]
lea r15, [rcx + rdx]
mov rdi, rcx
call sym.imp.memset
mov qword [rbx + 0x1088], r15
mov rcx, r15
jmp 0x4062d5
nop
mov rax, qword [rbx + 0x10c0]
mov rsi, qword [rbx + 0x10b8]
mov r15, qword [rbx + 0x1088]
mov byte [rbx + 0x1098], 0
mov qword [rsp + 0x28], rsi
mov r13d, eax
mov rsi, qword [rbx + 0x1090]
lea rdx, [r15 + r13 + 0x80]
mov r14d, eax
cmp rsi, rdx
jbe 0x4073bb
cmp eax, 1
je 0x407141
test eax, eax
je 0x406a23
mov rsi, qword [rsp + 0x28]
mov rdx, r13
mov rdi, r15
call sym.imp.memmove
mov rsi, qword [rbx + 0x1090]
add r15, r13
mov qword [rbx + 0x1088], r15
jmp 0x406061
nop word [rax + rax]
mov rdi, qword [rbx + 0x1088]
lea edx, [rbp - 0xf]
mov rbp, rdx
lea rax, [rdi + rdx + 0x80]
cmp qword [rbx + 0x1090], rax
jbe 0x407326
cmp edx, 1
je 0x4071a3
movzx esi, byte [rbx + 0x10a0]
lea rcx, [rdi + rdx]
lea r12, [rbx + 0x1008]
mov qword [rsp + 0x18], rcx
call sym.imp.memset
mov rcx, qword [rsp + 0x18]
lea rax, [rcx + 0x8f]
cmp qword [rbx + 0x1090], rax
mov qword [rbx + 0x1088], rcx
ja 0x405fd8
lea rax, [rbx + 8]
mov ebp, r12d
mov r13d, 0xf
sub ebp, ecx
mov r15d, str.Error_on_test__
mov qword [rsp + 0x18], rax
jmp 0x406ae7
nop dword [rax + rax]
test ebp, ebp
mov r14d, ebp
jne 0x406af2
add rcx, r14
cmp rcx, r12
mov qword [rbx + 0x1088], rcx
jae 0x406b12
sub r13d, ebp
je 0x406004
add r15, r14
mov ebp, 0x1000
cmp r13d, ebp
jae 0x406ac0
mov r14d, r13d
mov ebp, r13d
mov rdi, rcx
mov rdx, r14
mov rsi, r15
call sym.imp.memmove
mov rcx, rax
add rcx, r14
cmp rcx, r12
mov qword [rbx + 0x1088], rcx
jb 0x406ad6
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 0x1088]
xor ecx, ecx
sub rax, r12
jne 0x407518
add rcx, qword [rsp + 0x18]
mov qword [rbx + 0x1088], rcx
jmp 0x406ad6
nop
test r12d, r12d
jle 0x405e2d
xor ebp, ebp
movabs r13, 0x7fffffffffffffff
jmp 0x406b75
nop word [rax + rax]
mov rax, r13
sub rax, qword [rsp + 0x98]
cmp rax, 1
jbe 0x407814
lea rdi, [rsp + 0x90]
mov edx, 2
mov esi, 0x40921c
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
add ebp, 1
cmp r12d, ebp
jne 0x406b60
jmp 0x406564
nop dword [rax]
mov r13d, dword [rbx + 0x18]
test r13d, r13d
jle 0x406bfd
mov rax, rbp
sub rax, qword [rsp + 0xb8]
cmp rax, 1
jbe 0x4078e0
xor r12d, r12d
jmp 0x406bdd
nop dword [rax + rax]
mov rax, rbp
sub rax, qword [rsp + 0xb8]
cmp rax, 1
jbe 0x4078e0
lea rdi, [rsp + 0xb0]
mov edx, 2
mov esi, 0x409222
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
add r12d, 1
cmp r13d, r12d
jne 0x406bc8
add r14, 1
cmp qword [rsp + 0x18], r14
mov dword [rbx + 0x18], 0
jne 0x405d2f
mov rdi, qword [rsp + 0x90]
mov rax, qword [rsp + 0x20]
lea rdx, [rsp + 0xc0]
mov qword [rsp + 0x70], rax
mov rax, qword [rsp + 0xb0]
cmp rax, rdx
je 0x4077ef
mov qword [rsp + 0x70], rax
mov rax, qword [rsp + 0xc0]
mov qword [rsp + 0x80], rax
mov rax, qword [rsp + 0xb8]
mov qword [rsp + 0x78], rax
jmp 0x4066eb
nop dword [rax]
mov r13d, dword [rbx + 0x10]
test r13d, r13d
jle 0x406cc5
mov rax, rbp
sub rax, qword [rsp + 0xb8]
cmp rax, 1
jbe 0x4078cc
xor r12d, r12d
jmp 0x406ca5
nop dword [rax + rax]
mov rax, rbp
sub rax, qword [rsp + 0xb8]
cmp rax, 1
jbe 0x4078cc
lea rdi, [rsp + 0xb0]
mov edx, 2
mov esi, 0x40921f
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
add r12d, 1
cmp r13d, r12d
jne 0x406c90
mov dword [rbx + 0x10], 0
jmp 0x405d20
mov r13d, dword [rbx + 8]
test r13d, r13d
jle 0x406d2d
mov rax, rbp
sub rax, qword [rsp + 0xb8]
cmp rax, 1
jbe 0x4078d6
xor r12d, r12d
jmp 0x406d0d
nop dword [rax]
mov rax, rbp
sub rax, qword [rsp + 0xb8]
cmp rax, 1
jbe 0x4078d6
lea rdi, [rsp + 0xb0]
mov edx, 2
mov esi, 0x40921c
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
add r12d, 1
cmp r13d, r12d
jne 0x406cf8
mov dword [rbx + 8], 0
jmp 0x405d20
nop dword [rax]
mov rdi, rbx
call rax
jmp 0x406379
nop word [rax + rax]
mov rdi, rbx
call rax
jmp 0x406116
nop word [rax + rax]
mov rdi, rbx
call rax
jmp 0x406249
nop word [rax + rax]
lea rax, [rcx + 1]
mov qword [rbx + 0x1088], rax
movzx eax, byte [r14]
mov byte [rcx], al
mov rcx, qword [rbx + 0x1088]
jmp 0x4061de
nop dword [rax]
lea rax, [rcx + 1]
mov qword [rbx + 0x1088], rax
movzx eax, byte [r14]
mov byte [rcx], al
mov rcx, qword [rbx + 0x1088]
jmp 0x40630e
nop dword [rax]
lea rax, [rdi + 1]
mov qword [rbp + 0x1088], rax
movzx eax, byte [rbp + 0x10a0]
mov byte [rdi], al
jmp 0x405eb3
nop dword [rax]
lea rdi, [rsp + 0x90]
mov ecx, 0x409223
xor edx, edx
xor esi, esi
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_replace
sub dword [rbx + 0xc], 1
mov eax, dword [rbx + 0x14]
jmp 0x405af9
nop word [rax + rax]
cmp edx, eax
jl 0x406dd0
lea rdi, [rsp + 0x90]
mov ecx, 0x409220
xor edx, edx
xor esi, esi
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_replace
jmp 0x405bdc
mov edx, 0xf
jmp 0x405d5b
mov rsi, qword [rsp + 0x18]
mov rdi, qword [rsp + 0x28]
mov rdx, rax
mov qword [rsp + 0x30], rax
call sym.imp.memmove
mov rcx, qword [rsp + 0x30]
jmp 0x4066c2
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 0x1088]
xor ebp, ebp
lea rcx, [rbx + 8]
sub rax, r13
jne 0x4074e0
add rbp, rcx
mov qword [rbx + 0x1088], rbp
jmp 0x406330
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 0x1088]
xor ebp, ebp
lea rcx, [rbx + 8]
sub rax, r12
jne 0x407550
add rbp, rcx
mov qword [rbx + 0x1088], rbp
jmp 0x4060cd
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 0x1088]
xor ebp, ebp
lea rcx, [rbx + 8]
sub rax, r12
jne 0x407569
lea rax, [rcx + rbp]
jmp 0x4060ab
sub r13d, eax
mov edx, r13d
lea rax, [r15 + rdx + 0x80]
cmp rsi, rax
jbe 0x4076c6
cmp r13d, 1
je 0x4076a5
movzx esi, byte [rbx + 0x10a0]
lea r13, [r15 + rdx]
mov rdi, r15
mov r15, r13
call sym.imp.memset
mov qword [rbx + 0x1088], r13
mov rax, qword [rbx + 0x1090]
sub rax, rbp
jmp 0x40607e
lea rax, [rbx + 8]
mov ebp, r13d
sub ebp, ecx
mov qword [rsp + 0x18], rax
jmp 0x406f50
nop
add rcx, r15
cmp r13, rcx
mov qword [rbx + 0x1088], rcx
jbe 0x406f7e
sub r12d, ebp
je 0x40630e
add r14, r15
mov ebp, 0x1000
cmp r12d, ebp
cmovbe ebp, r12d
test ebp, ebp
mov r15d, ebp
je 0x406f30
mov rdi, rcx
mov rdx, r15
mov rsi, r14
call sym.imp.memmove
mov rcx, rax
add rcx, r15
cmp r13, rcx
mov qword [rbx + 0x1088], rcx
ja 0x406f3f
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 0x1088]
xor ecx, ecx
sub rax, r13
jne 0x407658
add rcx, qword [rsp + 0x18]
mov qword [rbx + 0x1088], rcx
jmp 0x406f3f
mov esi, dword [rsp + 0x14]
nop
mov eax, esi
xor edx, edx
sub rbp, 1
div ecx
lea ecx, [rdx + 0x37]
lea eax, [rdx + 0x30]
cmp edx, 9
cmova eax, ecx
xor edx, edx
mov byte [rbp], al
mov ecx, dword [rbx + 0x10a4]
mov eax, esi
div ecx
test eax, eax
mov esi, eax
jne 0x406fb0
jmp 0x406046
lea rax, [rbx + 8]
mov ebp, r12d
sub ebp, ecx
mov qword [rsp + 0x18], rax
jmp 0x407010
add rcx, r15
cmp r12, rcx
mov qword [rbx + 0x1088], rcx
jbe 0x40703e
sub r13d, ebp
je 0x4061de
add r14, r15
mov ebp, 0x1000
cmp r13d, ebp
cmovbe ebp, r13d
test ebp, ebp
mov r15d, ebp
je 0x406ff0
mov rdi, rcx
mov rdx, r15
mov rsi, r14
call sym.imp.memmove
mov rcx, rax
add rcx, r15
cmp r12, rcx
mov qword [rbx + 0x1088], rcx
ja 0x406fff
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 0x1088]
xor ecx, ecx
sub rax, r12
jne 0x407424
add rcx, qword [rsp + 0x18]
mov qword [rbx + 0x1088], rcx
jmp 0x406fff
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 0x1088]
xor ebp, ebp
lea rcx, [rbx + 8]
sub rax, r12
jne 0x407537
add rbp, rcx
mov qword [rbx + 0x1088], rbp
jmp 0x406200
lea rax, [rbp + 0x1008]
lea rsi, [rbp + 8]
mov rcx, rdi
mov qword [rsp + 0x28], rax
mov qword [rsp + 0x38], rsi
sub eax, edi
jmp 0x4070e1
nop dword [rax]
cmp qword [rsp + 0x28], r8
mov qword [rbp + 0x1088], r8
mov rcx, r8
jbe 0x407111
sub r14d, dword [rsp + 0x18]
mov eax, 0x1000
je 0x405eba
cmp r14d, eax
cmovbe eax, r14d
mov edx, eax
test eax, eax
mov dword [rsp + 0x18], eax
lea r8, [rcx + rdx]
je 0x4070c0
movzx esi, byte [rbp + 0x10a0]
mov rdi, rcx
mov qword [rsp + 0x30], r8
call sym.imp.memset
mov r8, qword [rsp + 0x30]
jmp 0x4070c0
mov rax, qword [rbp]
mov esi, 0x1000
mov rdi, rbp
call qword [rax]
xor ecx, ecx
mov rax, qword [rbp + 0x1088]
sub rax, qword [rsp + 0x28]
jne 0x407618
add rcx, qword [rsp + 0x38]
mov qword [rbp + 0x1088], rcx
jmp 0x4070d1
lea rax, [r15 + 1]
mov qword [rbx + 0x1088], rax
mov rax, qword [rsp + 0x28]
movzx eax, byte [rax]
mov byte [r15], al
mov r15, qword [rbx + 0x1088]
mov rsi, qword [rbx + 0x1090]
jmp 0x406061
lea rax, [rcx + 1]
mov qword [rbx + 0x1088], rax
movzx eax, byte [rbx + 0x10a0]
mov byte [rcx], al
mov rcx, qword [rbx + 0x1088]
jmp 0x4062d5
lea rax, [rdi + 1]
mov qword [rbx + 0x1088], rax
movzx eax, byte [rbx + 0x10a0]
mov byte [rdi], al
jmp 0x40613f
lea rax, [rdi + 1]
mov qword [rbx + 0x1088], rax
movzx eax, byte [rbx + 0x10a0]
mov byte [rdi], al
jmp 0x405fb6
lea rax, [rdi + 1]
mov qword [rbx + 0x1088], rax
movzx eax, byte [rbx + 0x10a0]
mov byte [rdi], al
jmp 0x40626d
lea rax, [rcx + 1]
mov qword [rbx + 0x1088], rax
movzx eax, byte [rbx + 0x10a0]
mov byte [rcx], al
mov rcx, qword [rbx + 0x1088]
jmp 0x4061a5
lea r13, [rbx + 0x1008]
lea r14, [rbx + 8]
mov eax, r13d
sub eax, edi
jmp 0x40722d
nop word [rax + rax]
cmp r13, rcx
mov qword [rbx + 0x1088], rcx
jbe 0x407261
sub ebp, r12d
mov eax, 0x1000
je 0x40627b
mov rdi, rcx
cmp ebp, eax
cmovbe eax, ebp
mov edx, eax
test edx, edx
mov r12, rdx
lea rcx, [rdi + rdx]
je 0x407210
movzx esi, byte [rbx + 0x10a0]
mov qword [rsp + 0x18], rcx
call sym.imp.memset
mov rcx, qword [rsp + 0x18]
cmp r13, rcx
mov qword [rbx + 0x1088], rcx
ja 0x40721c
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov r15, qword [rbx + 0x1088]
sub r15, r13
jne 0x40778d
lea rcx, [r14 + r15]
mov qword [rbx + 0x1088], rcx
jmp 0x40721c
lea r13, [rbx + 0x1008]
lea r14, [rbx + 8]
mov eax, r13d
sub eax, edi
jmp 0x4072b9
nop dword [rax]
cmp r13, rcx
mov qword [rbx + 0x1088], rcx
jbe 0x4072ed
sub ebp, r12d
mov eax, 0x1000
je 0x40731e
mov rdi, rcx
cmp ebp, eax
cmovbe eax, ebp
mov edx, eax
test edx, edx
mov r12, rdx
lea rcx, [rdi + rdx]
je 0x4072a0
movzx esi, byte [rbx + 0x10a0]
mov qword [rsp + 0x18], rcx
call sym.imp.memset
mov rcx, qword [rsp + 0x18]
cmp r13, rcx
mov qword [rbx + 0x1088], rcx
ja 0x4072ac
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rcx, qword [rbx + 0x1088]
sub rcx, r13
jne 0x4077a0
add rcx, r14
sub ebp, r12d
mov eax, 0x1000
mov qword [rbx + 0x1088], rcx
jne 0x4072b6
mov r12, r13
jmp 0x40614d
lea r12, [rbx + 0x1008]
lea r14, [rbx + 8]
mov eax, r12d
sub eax, edi
jmp 0x40735d
nop dword [rax + rax]
cmp r12, rcx
mov qword [rbx + 0x1088], rcx
jbe 0x407391
sub ebp, r13d
mov eax, 0x1000
je 0x405fc4
mov rdi, rcx
cmp ebp, eax
cmovbe eax, ebp
mov edx, eax
test edx, edx
mov r13, rdx
lea rcx, [rdi + rdx]
je 0x407340
movzx esi, byte [rbx + 0x10a0]
mov qword [rsp + 0x18], rcx
call sym.imp.memset
mov rcx, qword [rsp + 0x18]
cmp r12, rcx
mov qword [rbx + 0x1088], rcx
ja 0x40734c
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov r15, qword [rbx + 0x1088]
sub r15, r12
jne 0x4077dc
lea rcx, [r14 + r15]
mov qword [rbx + 0x1088], rcx
jmp 0x40734c
lea rax, [rbx + 8]
mov r13d, r12d
sub r13d, r15d
mov qword [rsp + 0x30], rax
jmp 0x4073fe
nop dword [rax]
add r15, qword [rsp + 0x18]
cmp r15, r12
mov qword [rbx + 0x1088], r15
jae 0x407677
sub r14d, r13d
je 0x40605a
mov rsi, qword [rsp + 0x18]
add qword [rsp + 0x28], rsi
mov r13d, 0x1000
cmp r14d, r13d
cmovbe r13d, r14d
mov eax, r13d
test r13d, r13d
mov qword [rsp + 0x18], rax
je 0x4073d0
mov rsi, qword [rsp + 0x28]
mov edx, r13d
mov rdi, r15
call sym.imp.memmove
jmp 0x4073d0
mov rdi, qword [rsp + 0x18]
mov rdx, rax
mov rsi, r12
mov qword [rsp + 0x28], rax
call sym.imp.memmove
mov rcx, qword [rsp + 0x28]
jmp 0x40705d
lea rsi, [rbx + 8]
mov eax, r13d
mov rdi, rcx
sub eax, ecx
mov qword [rsp + 0x30], rsi
jmp 0x40747f
nop word cs:[rax + rax]
cmp r13, rcx
mov qword [rbx + 0x1088], rcx
jbe 0x4074b5
sub r15d, dword [rsp + 0x18]
mov eax, 0x1000
je 0x4062d5
mov rdi, rcx
cmp r15d, eax
cmovbe eax, r15d
mov edx, eax
mov dword [rsp + 0x18], eax
add rcx, rdx
test eax, eax
je 0x407460
movzx esi, byte [rbx + 0x10a0]
mov qword [rsp + 0x28], rcx
call sym.imp.memset
mov rcx, qword [rsp + 0x28]
cmp r13, rcx
mov qword [rbx + 0x1088], rcx
ja 0x40746c
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rcx, qword [rbx + 0x1088]
sub rcx, r13
jne 0x4077bd
add rcx, qword [rsp + 0x30]
mov qword [rbx + 0x1088], rcx
jmp 0x40746c
mov rdi, rcx
mov rdx, rax
mov rsi, r13
mov rbp, rax
call sym.imp.memmove
mov rcx, rax
jmp 0x406e65
mov rdi, qword [rsp + 0x18]
mov rdx, rax
mov rsi, r13
mov qword [rsp + 0x28], rax
call sym.imp.memmove
mov rcx, qword [rsp + 0x28]
jmp 0x4067f9
mov rdi, qword [rsp + 0x18]
mov rdx, rax
mov rsi, r12
mov qword [rsp + 0x28], rax
call sym.imp.memmove
mov rcx, qword [rsp + 0x28]
jmp 0x406b31
mov rdi, rcx
mov rdx, rax
mov rsi, r12
mov rbp, rax
call sym.imp.memmove
mov rcx, rax
jmp 0x40708e
mov rdi, rcx
mov rdx, rax
mov rsi, r12
mov rbp, rax
call sym.imp.memmove
mov rcx, rax
jmp 0x406e97
mov rdi, rcx
mov rdx, rax
mov rsi, r12
mov rbp, rax
call sym.imp.memmove
mov rcx, rax
jmp 0x406ec9
lea rsi, [rbx + 8]
mov eax, r12d
mov rdi, rcx
sub eax, ecx
mov qword [rsp + 0x30], rsi
jmp 0x4075b7
nop dword [rax]
cmp r12, rcx
mov qword [rbx + 0x1088], rcx
jbe 0x4075ed
sub r15d, dword [rsp + 0x18]
mov eax, 0x1000
je 0x4061a5
mov rdi, rcx
cmp r15d, eax
cmovbe eax, r15d
mov edx, eax
mov dword [rsp + 0x18], eax
add rcx, rdx
test eax, eax
je 0x407598
movzx esi, byte [rbx + 0x10a0]
mov qword [rsp + 0x28], rcx
call sym.imp.memset
mov rcx, qword [rsp + 0x28]
cmp r12, rcx
mov qword [rbx + 0x1088], rcx
ja 0x4075a4
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov rcx, qword [rbx + 0x1088]
sub rcx, r12
jne 0x40776e
add rcx, qword [rsp + 0x30]
mov qword [rbx + 0x1088], rcx
jmp 0x4075a4
mov rsi, qword [rsp + 0x28]
mov rdi, qword [rsp + 0x38]
mov rdx, rax
mov qword [rsp + 0x30], rax
call sym.imp.memmove
mov rcx, qword [rsp + 0x30]
jmp 0x407133
mov rdi, qword [rsp + 0x28]
mov rdx, rax
mov rsi, r12
mov qword [rsp + 0x30], rax
call sym.imp.memmove
mov rcx, qword [rsp + 0x30]
jmp 0x406965
mov rdi, qword [rsp + 0x18]
mov rdx, rax
mov rsi, r13
mov qword [rsp + 0x28], rax
call sym.imp.memmove
mov rcx, qword [rsp + 0x28]
jmp 0x406f9d
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov r15, qword [rbx + 0x1088]
sub r15, r12
jne 0x407759
add r15, qword [rsp + 0x30]
mov qword [rbx + 0x1088], r15
jmp 0x4073e5
lea rax, [r15 + 1]
mov qword [rbx + 0x1088], rax
movzx eax, byte [rbx + 0x10a0]
mov byte [r15], al
mov r15, qword [rbx + 0x1088]
jmp 0x406f10
lea rsi, [rbx + 8]
mov eax, r12d
mov rdi, r15
sub eax, r15d
mov qword [rsp + 0x18], rsi
jmp 0x4076f7
cmp r15, r12
mov qword [rbx + 0x1088], r15
jae 0x407722
sub r13d, r14d
mov eax, 0x1000
je 0x406f10
mov rdi, r15
cmp r13d, eax
cmovbe eax, r13d
mov edx, eax
add r15, rdx
test edx, edx
mov r14, rdx
je 0x4076da
movzx esi, byte [rbx + 0x10a0]
call sym.imp.memset
cmp r15, r12
mov qword [rbx + 0x1088], r15
jb 0x4076e6
mov rax, qword [rbx]
mov esi, 0x1000
mov rdi, rbx
call qword [rax]
mov r15, qword [rbx + 0x1088]
sub r15, r12
je 0x40774b
mov rdi, qword [rsp + 0x18]
mov rdx, r15
mov rsi, r12
call sym.imp.memmove
add r15, qword [rsp + 0x18]
mov qword [rbx + 0x1088], r15
jmp 0x4076e6
mov rdi, qword [rsp + 0x30]
mov rdx, r15
mov rsi, r12
call sym.imp.memmove
jmp 0x407694
mov rdi, qword [rsp + 0x30]
mov rdx, rcx
mov rsi, r12
mov qword [rsp + 0x28], rcx
call sym.imp.memmove
mov rcx, qword [rsp + 0x28]
jmp 0x40760a
mov rdx, r15
mov rsi, r13
mov rdi, r14
call sym.imp.memmove
jmp 0x40727e
mov rdx, rcx
mov rsi, r13
mov rdi, r14
mov qword [rsp + 0x18], rcx
call sym.imp.memmove
mov rcx, qword [rsp + 0x18]
jmp 0x40730a
mov rdi, qword [rsp + 0x30]
mov rdx, rcx
mov rsi, r13
mov qword [rsp + 0x28], rcx
call sym.imp.memmove
mov rcx, qword [rsp + 0x28]
jmp 0x4074d2
mov rdx, r15
mov rsi, r12
mov rdi, r14
call sym.imp.memmove
jmp 0x4073ae
mov rax, qword [rsp + 0xc0]
mov rdx, qword [rsp + 0xc8]
mov qword [rsp + 0x80], rax
mov qword [rsp + 0x88], rdx
jmp 0x406c53
mov edi, str.basic_string::append
call sym.std::__throw_length_error
mov rbx, rax
mov rdi, qword [rsp + 0x90]
lea rax, [rsp + 0xa0]
cmp rdi, rax
je 0x40783b
call sym.operatordelete
lea rdi, [rsp + 0x40]
call sym.std::unique_ptr_TestCase_std::default_delete_TestCase__::_unique_ptr
mov rdi, rbx
call sym.imp._Unwind_Resume
mov rdi, qword [rsp + 0x50]
mov rbx, rax
lea rax, [rsp + 0x60]
cmp rdi, rax
jne 0x407836
jmp 0x40783b
mov edi, str.basic_string::append
call sym.std::__throw_length_error
mov rdi, qword [rsp + 0x70]
mov rbx, rax
lea rax, [rsp + 0x80]
cmp rdi, rax
jne 0x407836
jmp 0x40783b
mov rdi, qword [rsp + 0xb0]
lea rdx, [rsp + 0xc0]
mov rbx, rax
cmp rdi, rdx
je 0x407821
call sym.operatordelete
jmp 0x407821
mov rdi, qword [rbx + 0x20]
mov r12, rax
cmp rbp, rdi
je 0x4078b2
call sym.operatordelete
mov rdi, rbx
call sym.operatordelete
mov rdi, r12
call sym.imp._Unwind_Resume
mov edi, str.basic_string::append
call sym.std::__throw_length_error
mov edi, str.basic_string::append
call sym.std::__throw_length_error
mov edi, str.basic_string::append
call sym.std::__throw_length_error
mov edi, str.basic_string::append
call sym.std::__throw_length_error
nop word [rax + rax]
ret
nop word cs:[rax + rax]
nop dword [rax]
mov rax, rdi
lea rdi, [rdi + 0x10]
mov rax, qword [rax + 0x10]
jmp qword [rax]
nop dword [rax]
jmp qword [rdi + 0x18]
nop word cs:[rax + rax]
nop dword [rax]
push r12
push rbp
push rbx
mov rbp, qword [rdi + 8]
mov rbx, qword [rdi]
cmp rbp, rbx
je 0x407956
mov r12, rdi
nop dword [rax + rax]
mov rdi, qword [rbx]
lea rax, [rbx + 0x10]
cmp rdi, rax
je 0x407949
call sym.operatordelete
add rbx, 0x20
cmp rbp, rbx
jne 0x407938
mov rbp, qword [r12]
test rbp, rbp
je 0x407970
pop rbx
mov rdi, rbp
pop rbp
pop r12
jmp sym.operatordelete
nop word [rax + rax]
pop rbx
pop rbp
pop r12
ret
nop word cs:[rax + rax]
nop
jmp sym.operatordelete
nop word cs:[rax + rax]
nop
jmp sym.operatordelete
nop word cs:[rax + rax]
nop
push rbx
mov rcx, qword [rdi + 0x10d8]
mov rbx, rdi
lea rdi, [rdi + 8]
mov edx, esi
mov esi, 1
call sym.imp.fwrite
mov rdi, qword [rbx + 0x10d8]
pop rbx
jmp sym.imp.fflush
nop dword [rax + rax]
push rbp
push rbx
lea rbp, [rdi + 0x2a]
mov rbx, rdi
sub rsp, 8
cmp byte [rdi + 0x28], 0
mov qword [rdi + 8], rbp
mov byte [rdi + 0x2a], 0
jne 0x407a10
mov rcx, qword [rdi + 0x20]
mov edx, 0x1000
mov rdi, rbp
mov esi, 1
call sym.imp.fread
add rbp, rax
mov qword [rbx + 0x10], rbp
add rsp, 8
pop rbx
pop rbp
ret
nop
mov rdx, qword [rdi + 0x20]
mov qword [rdi + 0x10], rbp
mov esi, 0x1000
mov rdi, rbp
call sym.imp.fgets
test rax, rax
je 0x407a08
mov rax, qword [rbx + 0x10]
cmp byte [rax], 0
je 0x407a08
nop dword [rax + rax]
add rax, 1
mov qword [rbx + 0x10], rax
cmp byte [rax], 0
jne 0x407a38
jmp 0x407a08
nop word [rax + rax]
mov rsi, qword [rsi + 8]
mov rdx, rdi
cmp rsi, str.St19_Sp_make_shared_tag
je 0x407a75
xor eax, eax
cmp byte [rsi], 0x2a
je 0x407a79
mov edi, str.St19_Sp_make_shared_tag
mov ecx, 0x18
repe cmpsb byte [rsi], byte ptr [rdi]
jne 0x407a79
lea rax, [rdx + 0x10]
ret
nop dword [rax + rax]
test rdi, rdi
je 0x407aa0
mov rax, qword [rdi]
mov rax, qword [rax + 8]
cmp rax, sym.std::_Sp_counted_ptr_inplace_std::thread::_Impl_std::_Bind_simple_void__________std::allocator_std::thread::_Impl_std::_Bind_simple_void______________gnu_cxx::_Lock_policy_2_::__Sp_counted_ptr_inplace
jne 0x407aa8
jmp sym.operatordelete
nop dword [rax]
ret
nop word [rax + rax]
jmp rax
nop word [rax + rax]
push rbp
push rbx
lea rbp, [rdi + 8]
mov rbx, rdi
movabs rax, 0x7fffffffffffffff
sub rsp, 8
mov qword [rdi], 0x409708
mov rdx, qword [rdi + 0x1088]
mov rdi, qword [rdi + 0x10d8]
sub edx, ebp
sub rax, qword [rdi + 8]
cmp rdx, rax
ja 0x407b27
mov rsi, rbp
add rbx, 0x10c8
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
mov rdi, qword [rbx - 0x10]
mov qword [rbx - 0x40], rbp
mov qword [rbx - 0x10c8], 0x4096b8
cmp rdi, rbx
je 0x407b20
add rsp, 8
pop rbx
pop rbp
jmp sym.operatordelete
nop dword [rax]
add rsp, 8
pop rbx
pop rbp
ret
mov edi, str.basic_string::append
call sym.std::__throw_length_error
nop word cs:[rax + rax]
nop dword [rax + rax]
push rbx
mov rbx, qword [rdi]
test rbx, rbx
je 0x407b78
cmp byte [rbx + 0x29], 0
mov qword [rbx], 0x4096a0
jne 0x407b60
mov rdi, rbx
pop rbx
jmp sym.operatordelete
nop
mov rdi, qword [rbx + 0x20]
call sym.imp.fclose
mov rdi, rbx
pop rbx
jmp sym.operatordelete
nop word [rax + rax]
pop rbx
ret
nop word [rax + rax]
mov edx, esi
lea rsi, [rdi + 8]
mov rdi, qword [rdi + 0x10d8]
movabs rax, 0x7fffffffffffffff
sub rax, qword [rdi + 8]
cmp rdx, rax
ja 0x407ba5
jmp sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
push rax
mov edi, str.basic_string::append
call sym.std::__throw_length_error
push rbp
push rbx
lea rbp, [rdi + 8]
mov rbx, rdi
movabs rax, 0x7fffffffffffffff
sub rsp, 8
mov qword [rdi], 0x409708
mov rdx, qword [rdi + 0x1088]
mov rdi, qword [rdi + 0x10d8]
sub edx, ebp
sub rax, qword [rdi + 8]
cmp rdx, rax
ja 0x407c23
mov rsi, rbp
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
mov rdi, qword [rbx + 0x10b8]
lea rax, [rbx + 0x10c8]
mov qword [rbx + 0x1088], rbp
mov qword [rbx], 0x4096b8
cmp rdi, rax
je 0x407c15
call sym.operatordelete
add rsp, 8
mov rdi, rbx
pop rbx
pop rbp
jmp sym.operatordelete
mov edi, str.basic_string::append
call sym.std::__throw_length_error
nop dword [rax]
push rbp
push rbx
lea rbp, [rdi + 8]
mov rbx, rdi
mov esi, 1
sub rsp, 8
mov rdx, qword [rdi + 0x1088]
mov rcx, qword [rdi + 0x10d8]
mov qword [rdi], 0x4096e0
mov rdi, rbp
sub edx, ebp
call sym.imp.fwrite
mov rdi, qword [rbx + 0x10d8]
call sym.imp.fflush
cmp byte [rbx + 0x10e0], 0
mov qword [rbx + 0x1088], rbp
jne 0x407cb0
mov rdi, qword [rbx + 0x10b8]
lea rax, [rbx + 0x10c8]
mov qword [rbx], 0x4096b8
cmp rdi, rax
je 0x407c9c
call sym.operatordelete
add rsp, 8
mov rdi, rbx
pop rbx
pop rbp
jmp sym.operatordelete
nop word [rax + rax]
mov rdi, qword [rbx + 0x10d8]
call sym.imp.fclose
jmp 0x407c7d
nop
push rbp
push rbx
lea rbp, [rdi + 8]
mov rbx, rdi
mov esi, 1
sub rsp, 8
mov rdx, qword [rdi + 0x1088]
mov rcx, qword [rdi + 0x10d8]
mov qword [rdi], 0x4096e0
mov rdi, rbp
sub edx, ebp
call sym.imp.fwrite
mov rdi, qword [rbx + 0x10d8]
call sym.imp.fflush
cmp byte [rbx + 0x10e0], 0
mov qword [rbx + 0x1088], rbp
jne 0x407d38
mov rdi, qword [rbx + 0x10b8]
mov qword [rbx], 0x4096b8
add rbx, 0x10c8
cmp rdi, rbx
je 0x407d50
add rsp, 8
pop rbx
pop rbp
jmp sym.operatordelete
nop word [rax + rax]
mov rdi, qword [rbx + 0x10d8]
call sym.imp.fclose
jmp 0x407d0d
nop word cs:[rax + rax]
add rsp, 8
pop rbx
pop rbp
ret
nop word [rax + rax]
push rbp
push rbx
sub rsp, 8
mov rbx, qword [rdi]
test rbx, rbx
je 0x407e00
mov rax, qword [rbx]
mov rax, qword [rax + 0x10]
cmp rax, 0x407c30
jne 0x407e20
mov rdx, qword [rbx + 0x1088]
lea rbp, [rbx + 8]
mov rcx, qword [rbx + 0x10d8]
mov esi, 1
mov qword [rbx], 0x4096e0
mov rdi, rbp
sub edx, ebp
call sym.imp.fwrite
mov rdi, qword [rbx + 0x10d8]
call sym.imp.fflush
cmp byte [rbx + 0x10e0], 0
mov qword [rbx + 0x1088], rbp
jne 0x407e10
mov rdi, qword [rbx + 0x10b8]
lea rax, [rbx + 0x10c8]
mov qword [rbx], 0x4096b8
cmp rdi, rax
je 0x407de8
call sym.operatordelete
add rsp, 8
mov rdi, rbx
pop rbx
pop rbp
jmp sym.operatordelete
nop word cs:[rax + rax]
add rsp, 8
pop rbx
pop rbp
ret
nop word [rax + rax]
mov rdi, qword [rbx + 0x10d8]
call sym.imp.fclose
jmp 0x407dc9
nop
add rsp, 8
mov rdi, rbx
pop rbx
pop rbp
jmp rax
nop dword [rax + rax]
push rbx
mov rbx, qword [rdi + 0x10]
mov qword [rdi], 0x409678
test rbx, rbx
je 0x407e52
mov eax, sym.imp.__pthread_key_create
test rax, rax
je 0x407e58
lock sub dword [rbx + 8], 1
je 0x407e80
pop rbx
ret
nop dword [rax]
mov eax, dword [rbx + 8]
lea edx, [rax - 1]
cmp eax, 1
mov dword [rbx + 8], edx
jne 0x407e52
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax + 0x10]
mov eax, dword [rbx + 0xc]
lea edx, [rax - 1]
mov dword [rbx + 0xc], edx
jmp 0x407e93
nop word [rax + rax]
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax + 0x10]
mov eax, 0xffffffff
lock xadd dword [rbx + 0xc], eax
cmp eax, 1
jne 0x407e52
mov rax, qword [rbx]
mov rdi, rbx
pop rbx
mov rax, qword [rax + 0x18]
jmp rax
nop word cs:[rax + rax]
nop
push rbp
push rbx
mov rbp, rdi
sub rsp, 8
mov rbx, qword [rdi + 0x10]
mov qword [rdi], 0x409678
test rbx, rbx
je 0x407eda
mov eax, sym.imp.__pthread_key_create
test rax, rax
je 0x407ef0
lock sub dword [rbx + 8], 1
je 0x407f18
add rsp, 8
mov rdi, rbp
pop rbx
pop rbp
jmp sym.operatordelete
nop dword [rax + rax]
mov eax, dword [rbx + 8]
lea edx, [rax - 1]
cmp eax, 1
mov dword [rbx + 8], edx
jne 0x407eda
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax + 0x10]
mov eax, dword [rbx + 0xc]
lea edx, [rax - 1]
mov dword [rbx + 0xc], edx
jmp 0x407f2b
nop word [rax + rax]
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax + 0x10]
mov eax, 0xffffffff
lock xadd dword [rbx + 0xc], eax
cmp eax, 1
jne 0x407eda
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax + 0x18]
jmp 0x407eda
nop dword [rax + rax]
push rbx
mov rbx, qword [rdi]
test rbx, rbx
je 0x407f78
mov rdi, qword [rbx + 0x40]
test rdi, rdi
je 0x407f58
mov rax, qword [rdi]
call qword [rax + 0x10]
mov rdi, qword [rbx + 0x20]
lea rax, [rbx + 0x30]
cmp rdi, rax
je 0x407f6a
call sym.operatordelete
mov rdi, rbx
pop rbx
jmp sym.operatordelete
nop dword [rax + rax]
pop rbx
ret
nop word [rax + rax]
push r15
push r14
push r13
push r12
mov r12, rsi
push rbp
push rbx
mov rbx, rdi
sub rsp, 8
mov rdx, qword [rdi + 8]
jmp 0x407fc3
nop word [rax + rax]
lea rdx, [rax + 1]
mov qword [rbx + 8], rdx
movzx ebp, byte [rax]
lea eax, [rbp - 9]
mov esi, ebp
cmp al, 4
setbe cl
cmp bpl, 0x20
sete al
or cl, al
mov r15d, ecx
je 0x407fe0
cmp qword [rbx + 0x10], rdx
mov rax, rdx
ja 0x407fa0
mov rax, qword [rbx]
mov rdi, rbx
call qword [rax]
mov rax, qword [rbx + 8]
jmp 0x407fa0
nop word [rax + rax]
cmp bpl, 0x2d
mov ecx, ebp
je 0x408100
mov edi, dword [rbx + 0x18]
xor r13d, r13d
xor r14d, r14d
cmp edi, 0xa
ja 0x40809a
sub esi, 0x30
xor r13d, r13d
xor r14d, r14d
movzx esi, sil
cmp esi, edi
jb 0x408032
jmp 0x4080c0
nop dword [rax]
lea rdx, [rcx + 1]
mov qword [rbx + 8], rdx
movzx ecx, byte [rcx]
lea esi, [rcx - 0x30]
movzx esi, sil
cmp esi, edi
jae 0x4080c0
imul r14d, edi
add r13d, 1
cmp qword [rbx + 0x10], rdx
movsx esi, cl
mov rcx, rdx
lea r14d, [r14 + rsi - 0x30]
ja 0x408018
mov rdx, qword [rbx]
mov rdi, rbx
call qword [rdx]
mov rcx, qword [rbx + 8]
mov edi, dword [rbx + 0x18]
jmp 0x408018
nop dword [rax]
lea esi, [rcx - 0x61]
sub ecx, 0x57
cmp sil, 0x19
mov esi, ecx
cmova esi, edi
movsx ecx, sil
cmp edi, ecx
jbe 0x4080c0
imul r14d, edi
add r13d, 1
add r14d, ecx
cmp qword [rbx + 0x10], rdx
jbe 0x40811b
lea rsi, [rdx + 1]
mov qword [rbx + 8], rsi
movzx ecx, byte [rdx]
mov rdx, rsi
lea esi, [rcx - 0x30]
cmp sil, 9
jbe 0x40806f
lea esi, [rcx - 0x41]
cmp sil, 0x19
ja 0x408060
lea esi, [rcx - 0x37]
movsx ecx, sil
cmp edi, ecx
ja 0x408077
nop word [rax + rax]
sub rdx, 1
test r13d, r13d
mov qword [rbx + 8], rdx
je 0x4080e4
mov eax, r14d
mov r15d, 1
neg eax
cmp bpl, 0x2d
cmove r14d, eax
mov dword [r12], r14d
add rsp, 8
mov eax, r15d
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop word cs:[rax + rax]
cmp qword [rbx + 0x10], rdx
jbe 0x40812f
lea rdi, [rdx + 1]
mov qword [rbx + 8], rdi
movzx ecx, byte [rdx]
mov rdx, rdi
mov esi, ecx
jmp 0x407fec
mov rdx, qword [rbx]
mov rdi, rbx
call qword [rdx]
mov rdx, qword [rbx + 8]
mov edi, dword [rbx + 0x18]
jmp 0x40808c
mov rdx, qword [rbx]
mov rdi, rbx
call qword [rdx]
mov rdx, qword [rbx + 8]
jmp 0x408106
nop dword [rax]
sub rsp, 8
mov rdx, qword [rdi + 8]
mov rdi, qword [rdi]
cmp rdx, rdi
je 0x40816f
cmp qword [rdi], 0
jne 0x408185
mov rax, rdi
jmp 0x408166
nop dword [rax + rax]
cmp qword [rax], 0
jne 0x408185
add rax, 8
cmp rdx, rax
jne 0x408160
test rdi, rdi
je 0x408180
add rsp, 8
jmp sym.operatordelete
nop dword [rax]
add rsp, 8
ret
call sym.std::terminate
nop word [rax + rax]
push r15
push r14
mov r14, rdi
push r13
push r12
mov r12, rsi
push rbp
push rbx
sub rsp, 0x28
mov rbp, qword [rip + 0x2030fd]
call sym.imp.strlen
mov r15, rax
mov r8d, eax
mov ebx, dword [rbp + 0x109c]
mov byte [rbp + 0x1098], 0
cmp eax, ebx
jb 0x4084b8
mov rcx, qword [rbp + 0x1088]
lea r13, [rbp + 0x1008]
mov ebx, r15d
mov rsi, qword [rbp + 0x1090]
lea rax, [rcx + rbx + 0x80]
cmp rsi, rax
jbe 0x4086e8
cmp r15d, 1
je 0x408610
test r15d, r15d
jne 0x408438
add rbx, rcx
mov qword [rbp + 0x1088], rbx
movsd xmm0, qword [r12]
movmskpd r14d, xmm0
and r14d, 1
je 0x40822e
movsd xmm1, qword [rip + 0x1556]
xorpd xmm0, xmm1
ucomisd xmm0, xmm0
jp 0x4087a0
movsd xmm1, qword [rip + 0x1550]
andpd xmm1, xmm0
ucomisd xmm1, qword [rip + 0x1554]
jbe 0x408360
lea r12, [rsi - 3]
mov byte [rsi - 1], 0x66
mov byte [rsi - 2], 0x6e
mov byte [rsi - 3], 0x49
test r14d, r14d
je 0x408271
mov byte [r12 - 1], 0x2d
sub r12, 1
cmp byte [rbp + 0x1098], 0
jne 0x408458
mov rcx, qword [rbp + 0x1088]
mov rax, qword [rbp + 0x1090]
mov edx, dword [rbp + 0x109c]
mov rbx, rax
mov byte [rbp + 0x1098], 1
sub rbx, r12
cmp ebx, edx
jb 0x408698
xor edi, edi
test rbx, rbx
je 0x4082c2
mov rdi, rcx
mov rdx, rbx
mov rsi, r12
call sym.imp.memmove
mov rdi, rbx
mov rcx, rax
add rdi, rcx
cmp rdi, r13
mov qword [rbp + 0x1088], rdi
jae 0x408668
lea rax, [rdi + 1]
mov byte [rbp + 0x1098], 0
mov qword [rbp + 0x1088], rax
mov byte [rdi], 0xa
cmp qword [rbp + 0x1088], r13
jae 0x408630
mov rbx, qword [rip + 0x202faa]
mov rax, qword [rbx]
mov rsi, qword [rbx + 0x1088]
lea rbp, [rbx + 8]
mov rax, qword [rax]
sub rsi, rbp
cmp rax, sym.OutputFile::writeToDevice
jne 0x4085e0
mov rcx, qword [rbx + 0x10d8]
mov edx, esi
mov rdi, rbp
mov esi, 1
call sym.imp.fwrite
mov rdi, qword [rbx + 0x10d8]
call sym.imp.fflush
mov qword [rbx + 0x1088], rbp
add rsp, 0x28
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop word cs:[rax + rax]
movsd xmm2, qword [rip + 0x1440]
ucomisd xmm0, xmm2
jae 0x4085c0
cvttsd2si rbx, xmm0
test rbx, rbx
mov rdx, qword [rbp + 0x10b0]
js 0x4087b8
pxor xmm1, xmm1
cvtsi2sd xmm1, rbx
test rdx, rdx
subsd xmm0, xmm1
js 0x4087e0
pxor xmm1, xmm1
cvtsi2sd xmm1, rdx
mulsd xmm0, xmm1
addsd xmm0, qword [rip + 0x13fe]
ucomisd xmm0, xmm2
jae 0x4085a0
cvttsd2si rcx, xmm0
cmp rdx, rcx
ja 0x408520
mov edx, dword [rbp + 0x10a8]
mov r12, rsi
add rbx, 1
sub r12, rdx
test edx, edx
jne 0x408a87
test rbx, rbx
je 0x408850
mov eax, dword [rbp + 0x10a4]
movabs rcx, 0xcccccccccccccccd
cmp eax, 0xa
jne 0x408871
nop dword [rax]
mov rax, rbx
sub r12, 1
mul rcx
shr rdx, 3
lea rax, [rdx + rdx*4]
add rax, rax
sub rbx, rax
add ebx, 0x30
test rdx, rdx
mov byte [r12], bl
mov rbx, rdx
jne 0x408408
jmp 0x408262
nop dword [rax]
mov rsi, r14
mov rdi, rcx
mov rdx, rbx
call sym.imp.memmove
mov rsi, qword [rbp + 0x1090]
mov rcx, rax
jmp 0x408207
nop dword [rax]
mov rdx, qword [rbp + 0x10c0]
mov rcx, qword [rbp + 0x1088]
mov rax, qword [rbp + 0x1090]
mov r14, qword [rbp + 0x10b8]
mov byte [rbp + 0x1098], 0
mov ebx, edx
mov r15d, edx
lea rsi, [rcx + rbx + 0x80]
cmp rax, rsi
jbe 0x4088d7
cmp edx, 1
je 0x408828
test edx, edx
jne 0x4085f0
add rcx, rbx
mov qword [rbp + 0x1088], rcx
jmp 0x40828c
nop dword [rax]
mov rdi, qword [rbp + 0x1088]
sub ebx, eax
mov edx, ebx
lea rax, [rdi + rdx + 0x80]
cmp qword [rbp + 0x1090], rax
jbe 0x4089a1
cmp ebx, 1
je 0x408808
movzx esi, byte [rbp + 0x10a0]
lea rcx, [rdi + rdx]
mov dword [rsp + 8], r15d
lea r13, [rbp + 0x1008]
mov qword [rsp], rcx
call sym.imp.memset
mov rcx, qword [rsp]
mov r8d, dword [rsp + 8]
mov qword [rbp + 0x1088], rcx
jmp 0x4081d9
nop word cs:[rax + rax]
mov edx, dword [rbp + 0x10a8]
mov r12, rsi
sub r12, rdx
test edx, edx
je 0x4083e2
test rcx, rcx
je 0x408a87
mov eax, dword [rbp + 0x10a4]
movabs rdi, 0xcccccccccccccccd
cmp eax, 0xa
jne 0x408a94
nop word cs:[rax + rax]
mov rax, rcx
sub rsi, 1
mul rdi
shr rdx, 3
lea rax, [rdx + rdx*4]
add rax, rax
sub rcx, rax
add ecx, 0x30
test rdx, rdx
mov byte [rsi], cl
mov rcx, rdx
jne 0x408560
sub rsi, r12
mov rdx, rsi
jne 0x40885f
mov byte [r12 - 1], 0x2e
sub r12, 1
jmp 0x4083e2
subsd xmm0, xmm2
movabs rax, 0x8000000000000000
cvttsd2si rcx, xmm0
xor rcx, rax
jmp 0x4083c1
nop dword [rax + rax]
movapd xmm1, xmm0
movabs rax, 0x8000000000000000
subsd xmm1, xmm2
cvttsd2si rbx, xmm1
xor rbx, rax
jmp 0x408377
nop
mov rdi, rbx
call rax
jmp 0x408340
nop word [rax + rax]
mov rdi, rcx
mov rdx, rbx
mov rsi, r14
call sym.imp.memmove
mov rcx, rax
mov rax, qword [rbp + 0x1090]
jmp 0x4084a2
nop dword [rax]
lea rax, [rcx + 1]
mov qword [rbp + 0x1088], rax
movzx eax, byte [r14]
mov byte [rcx], al
mov rsi, qword [rbp + 0x1090]
jmp 0x408211
nop dword [rax]
mov rax, qword [rbp]
mov esi, 0x1000
mov rdi, rbp
xor ebx, ebx
call qword [rax]
mov rax, qword [rbp + 0x1088]
lea rcx, [rbp + 8]
sub rax, r13
jne 0x408988
add rbx, rcx
mov qword [rbp + 0x1088], rbx
jmp 0x4082f7
nop dword [rax + rax]
mov rax, qword [rbp]
mov esi, 0x1000
mov rdi, rbp
xor ebx, ebx
call qword [rax]
mov rax, qword [rbp + 0x1088]
lea rcx, [rbp + 8]
sub rax, r13
jne 0x40896f
lea rdi, [rcx + rbx]
jmp 0x4082d5
nop dword [rax]
sub edx, ebx
mov edx, edx
lea rsi, [rcx + rdx + 0x80]
mov rbx, rdx
cmp rax, rsi
jbe 0x408ad6
cmp edx, 1
je 0x408a67
movzx esi, byte [rbp + 0x10a0]
lea rbx, [rcx + rdx]
mov rdi, rcx
call sym.imp.memset
mov qword [rbp + 0x1088], rbx
mov rcx, rbx
mov rbx, qword [rbp + 0x1090]
sub rbx, r12
jmp 0x4082a7
nop dword [rax]
lea rax, [rbp + 8]
mov ebx, r13d
mov r15, r14
sub ebx, ecx
mov qword [rsp + 8], rax
jmp 0x40871c
nop dword [rax + rax]
add rcx, r14
cmp rcx, r13
mov qword [rbp + 0x1088], rcx
jae 0x408752
sub r8d, ebx
je 0x408790
add r15, r14
mov ebx, 0x1000
cmp r8d, ebx
cmovbe ebx, r8d
test ebx, ebx
mov r14d, ebx
je 0x408700
mov rdi, rcx
mov rdx, r14
mov rsi, r15
mov dword [rsp], r8d
call sym.imp.memmove
mov rcx, rax
mov r8d, dword [rsp]
add rcx, r14
cmp rcx, r13
mov qword [rbp + 0x1088], rcx
jb 0x40870f
mov rax, qword [rbp]
mov dword [rsp], r8d
mov esi, 0x1000
mov rdi, rbp
call qword [rax]
mov rax, qword [rbp + 0x1088]
xor ecx, ecx
mov r8d, dword [rsp]
sub rax, r13
jne 0x4088b0
add rcx, qword [rsp + 8]
sub r8d, ebx
mov qword [rbp + 0x1088], rcx
jne 0x408714
nop dword [rax + rax]
mov rsi, qword [rbp + 0x1090]
jmp 0x408211
nop dword [rax]
mov byte [rsi - 1], 0x4e
mov byte [rsi - 2], 0x61
lea r12, [rsi - 3]
mov byte [rsi - 3], 0x4e
jmp 0x408262
nop dword [rax]
mov rax, rbx
mov rcx, rbx
pxor xmm1, xmm1
shr rax, 1
and ecx, 1
or rax, rcx
cvtsi2sd xmm1, rax
addsd xmm1, xmm1
jmp 0x408390
nop dword [rax]
mov rax, rdx
mov rcx, rdx
pxor xmm1, xmm1
shr rax, 1
and ecx, 1
or rax, rcx
cvtsi2sd xmm1, rax
addsd xmm1, xmm1
jmp 0x4083a6
nop dword [rax]
lea rax, [rdi + 1]
mov qword [rbp + 0x1088], rax
movzx eax, byte [rbp + 0x10a0]
mov byte [rdi], al
jmp 0x4081cb
nop dword [rax]
lea rax, [rcx + 1]
mov qword [rbp + 0x1088], rax
movzx eax, byte [r14]
mov byte [rcx], al
mov rcx, qword [rbp + 0x1088]
mov rax, qword [rbp + 0x1090]
jmp 0x40828c
nop dword [rax]
mov byte [r12 - 1], 0x30
sub r12, 1
jmp 0x408262
mov esi, 0x30
mov rdi, r12
call sym.imp.memset
jmp 0x408591
mov ecx, eax
nop dword [rax + rax]
mov rax, rbx
xor edx, edx
sub r12, 1
div rcx
lea ecx, [rdx + 0x37]
lea eax, [rdx + 0x30]
cmp rdx, 9
cmova eax, ecx
xor edx, edx
mov byte [r12], al
mov ecx, dword [rbp + 0x10a4]
mov rax, rbx
div rcx
test rax, rax
mov rbx, rax
jne 0x408878
jmp 0x408262
mov rdi, qword [rsp + 8]
mov rdx, rax
mov rsi, r13
mov dword [rsp + 0x10], r8d
mov qword [rsp], rax
call sym.imp.memmove
mov r8d, dword [rsp + 0x10]
mov rcx, qword [rsp]
jmp 0x40877a
lea rax, [rbp + 8]
mov ebx, r13d
sub ebx, ecx
mov qword [rsp + 8], rax
jmp 0x408910
nop word [rax + rax]
add rcx, r9
cmp rcx, r13
mov qword [rbp + 0x1088], rcx
jae 0x408939
sub r15d, ebx
je 0x408285
add r14, r9
mov ebx, 0x1000
cmp r15d, ebx
cmovbe ebx, r15d
test ebx, ebx
mov r9d, ebx
je 0x4088f0
mov rdx, r9
mov rdi, rcx
mov rsi, r14
mov qword [rsp], r9
call sym.imp.memmove
mov r9, qword [rsp]
mov rcx, rax
jmp 0x4088f0
mov rax, qword [rbp]
mov qword [rsp], r9
mov esi, 0x1000
mov rdi, rbp
call qword [rax]
mov rax, qword [rbp + 0x1088]
xor ecx, ecx
mov r9, qword [rsp]
sub rax, r13
jne 0x408b51
add rcx, qword [rsp + 8]
mov qword [rbp + 0x1088], rcx
jmp 0x4088ff
mov rdi, rcx
mov rdx, rax
mov rsi, r13
mov rbx, rax
call sym.imp.memmove
mov rcx, rax
jmp 0x40868c
mov rdi, rcx
mov rdx, rax
mov rsi, r13
mov rbx, rax
call sym.imp.memmove
mov rcx, rax
jmp 0x408654
lea r10, [rbp + 0x1008]
mov rcx, rdi
mov eax, r10d
sub eax, edi
lea rdi, [rbp + 8]
mov qword [rsp + 0x18], rdi
jmp 0x4089dd
nop dword [rax + rax]
cmp r10, r11
mov qword [rbp + 0x1088], r11
mov rcx, r11
jbe 0x408a1c
sub ebx, r13d
mov eax, 0x1000
je 0x408a5f
cmp ebx, eax
cmovbe eax, ebx
mov edx, eax
test edx, edx
mov r13, rdx
lea r11, [rcx + rdx]
je 0x4089c0
movzx esi, byte [rbp + 0x10a0]
mov rdi, rcx
mov qword [rsp + 0x10], r11
mov qword [rsp + 8], r10
mov dword [rsp], r8d
call sym.imp.memset
mov r11, qword [rsp + 0x10]
mov r10, qword [rsp + 8]
mov r8d, dword [rsp]
jmp 0x4089c0
mov rax, qword [rbp]
mov qword [rsp + 8], r10
mov esi, 0x1000
mov dword [rsp], r8d
mov rdi, rbp
call qword [rax]
mov rax, qword [rbp + 0x1088]
mov r10, qword [rsp + 8]
xor ecx, ecx
mov r8d, dword [rsp]
sub rax, r10
jne 0x408b78
add rcx, qword [rsp + 0x18]
mov qword [rbp + 0x1088], rcx
jmp 0x4089cf
mov r13, r10
jmp 0x4081d9
lea rax, [rcx + 1]
mov qword [rbp + 0x1088], rax
movzx eax, byte [rbp + 0x10a0]
mov byte [rcx], al
mov rcx, qword [rbp + 0x1088]
jmp 0x4086d6
mov byte [rsi - 1], 0x30
sub rsi, 1
jmp 0x408585
mov edi, eax
nop word cs:[rax + rax]
mov rax, rcx
xor edx, edx
sub rsi, 1
div rdi
lea edi, [rdx + 0x37]
lea eax, [rdx + 0x30]
cmp rdx, 9
cmova eax, edi
xor edx, edx
mov byte [rsi], al
mov edi, dword [rbp + 0x10a4]
mov rax, rcx
div rdi
test rax, rax
mov rcx, rax
jne 0x408aa0
jmp 0x408585
lea rdi, [rbp + 8]
mov eax, r13d
sub eax, ecx
mov qword [rsp], rdi
jmp 0x408b05
nop dword [rax]
cmp r14, r13
mov qword [rbp + 0x1088], r14
mov rcx, r14
jae 0x408b28
sub ebx, r15d
mov eax, 0x1000
je 0x4086d6
cmp ebx, eax
cmovbe eax, ebx
mov edx, eax
test edx, edx
mov r15, rdx
lea r14, [rcx + rdx]
je 0x408ae8
movzx esi, byte [rbp + 0x10a0]
mov rdi, rcx
call sym.imp.memset
jmp 0x408ae8
mov rax, qword [rbp]
mov esi, 0x1000
mov rdi, rbp
call qword [rax]
mov rax, qword [rbp + 0x1088]
xor ecx, ecx
sub rax, r13
jne 0x408ba9
add rcx, qword [rsp]
mov qword [rbp + 0x1088], rcx
jmp 0x408af7
mov rdi, qword [rsp + 8]
mov rdx, rax
mov rsi, r13
mov qword [rsp + 0x10], r9
mov qword [rsp], rax
call sym.imp.memmove
mov r9, qword [rsp + 0x10]
mov rcx, qword [rsp]
jmp 0x408961
mov rdi, qword [rsp + 0x18]
mov rsi, r10
mov rdx, rax
mov dword [rsp + 0x10], r8d
mov qword [rsp], r10
mov qword [rsp + 8], rax
call sym.imp.memmove
mov r8d, dword [rsp + 0x10]
mov rcx, qword [rsp + 8]
mov r10, qword [rsp]
jmp 0x408a4e
mov rdi, qword [rsp]
mov rdx, rax
mov rsi, r13
mov qword [rsp + 8], rax
call sym.imp.memmove
mov rcx, qword [rsp + 8]
jmp 0x408b44
nop word cs:[rax + rax]
nop
mov eax, sym.imp.__pthread_key_create
push rbx
mov rbx, rdi
test rax, rax
je 0x408bf0
lock sub dword [rdi + 8], 1
je 0x408c10
pop rbx
ret
nop word [rax + rax]
mov eax, dword [rdi + 8]
lea edx, [rax - 1]
cmp eax, 1
mov dword [rdi + 8], edx
jne 0x408be5
mov rax, qword [rdi]
call qword [rax + 0x10]
mov eax, dword [rbx + 0xc]
lea edx, [rax - 1]
mov dword [rbx + 0xc], edx
jmp 0x408c20
nop
mov rax, qword [rdi]
call qword [rax + 0x10]
mov eax, 0xffffffff
lock xadd dword [rbx + 0xc], eax
cmp eax, 1
jne 0x408be5
mov rax, qword [rbx]
mov rdi, rbx
pop rbx
mov rax, qword [rax + 0x18]
jmp rax
nop word cs:[rax + rax]
nop dword [rax]
test rsi, rsi
je 0x408e2c
mov r8, qword [rdi + 8]
mov rax, qword [rdi + 0x10]
sub rax, r8
sar rax, 5
cmp rsi, rax
ja 0x408ca0
mov rdx, rsi
mov rax, r8
nop dword [rax + rax]
test rax, rax
je 0x408c80
lea rcx, [rax + 0x10]
mov qword [rax + 8], 0
mov byte [rax + 0x10], 0
mov qword [rax], rcx
add rax, 0x20
sub rdx, 1
jne 0x408c68
shl rsi, 5
add rsi, r8
mov qword [rdi + 8], rsi
ret
nop word cs:[rax + rax]
push r15
push r14
mov rax, r8
push r13
push r12
movabs rcx, 0x7ffffffffffffff
push rbp
push rbx
mov rdx, rcx
mov r14, rsi
mov rbx, rdi
sub rsp, 8
mov r15, qword [rdi]
sub rax, r15
sar rax, 5
sub rdx, rax
cmp rsi, rdx
ja 0x408e6b
cmp rsi, rax
mov rdx, rax
cmovae rdx, rsi
add rax, rdx
jb 0x408e30
cmp rax, rcx
ja 0x408e30
xor r12d, r12d
xor ebp, ebp
test rax, rax
mov rsi, r8
jne 0x408e51
nop word [rax + rax]
cmp rsi, r15
je 0x408e60
lea rdx, [r15 + 0x20]
lea rax, [r15 + 0x10]
sub rsi, rdx
mov rdx, rbp
mov rdi, rsi
lea rsi, [r15 + rsi + 0x30]
shr rdi, 5
jmp 0x408d66
nop dword [rax]
mov qword [rdx], rcx
mov rcx, qword [rax]
mov qword [rdx + 0x10], rcx
mov rcx, qword [rax - 8]
mov qword [rdx + 8], rcx
mov qword [rax - 0x10], rax
mov qword [rax - 8], 0
mov byte [rax], 0
add rax, 0x20
add rdx, 0x20
cmp rax, rsi
je 0x408d90
test rdx, rdx
je 0x408d59
lea rcx, [rdx + 0x10]
mov qword [rdx], rcx
mov rcx, qword [rax - 0x10]
cmp rcx, rax
jne 0x408d38
mov r9, qword [rax]
mov r10, qword [rax + 8]
mov qword [rdx + 0x10], r9
mov qword [rdx + 0x18], r10
jmp 0x408d42
nop dword [rax]
add rdi, 1
mov r15, qword [rbx + 8]
mov r13, qword [rbx]
shl rdi, 5
add rdi, rbp
mov rax, rdi
mov rdx, r14
nop dword [rax + rax]
test rax, rax
je 0x408dc8
lea rcx, [rax + 0x10]
mov qword [rax + 8], 0
mov byte [rax + 0x10], 0
mov qword [rax], rcx
add rax, 0x20
sub rdx, 1
jne 0x408db0
mov rsi, r14
shl rsi, 5
cmp r13, r15
lea r14, [rdi + rsi]
je 0x408e06
nop word [rax + rax]
mov rdi, qword [r13]
lea rax, [r13 + 0x10]
cmp rdi, rax
je 0x408dfa
call sym.operatordelete
add r13, 0x20
cmp r13, r15
jne 0x408de8
mov r15, qword [rbx]
test r15, r15
je 0x408e13
mov rdi, r15
call sym.operatordelete
mov qword [rbx], rbp
mov qword [rbx + 8], r14
mov qword [rbx + 0x10], r12
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
mov r12, -0x20
mov rdi, r12
call sym.operatornew
mov rsi, qword [rbx + 8]
mov rbp, rax
mov r15, qword [rbx]
add r12, rax
jmp 0x408d10
shl rax, 5
mov r12, rax
jmp 0x408e37
nop word [rax + rax]
mov r13, r15
mov rdi, rbp
jmp 0x408da2
mov edi, str.vector::_M_default_append
call sym.std::__throw_length_error
nop word cs:[rax + rax]
nop
push r14
push r13
mov r14, rsi
push r12
push rbp
push rbx
mov rbx, rdi
sub rsp, 0x20
mov rcx, qword [rbx + 8]
mov rdi, qword [rdi]
mov rax, qword fs:[0x28]
mov qword [rsp + 0x18], rax
xor eax, eax
mov r13, rcx
sub r13, rdi
mov r12, r13
sar r12, 3
test r12, r12
je 0x409030
lea rax, [r12 + r12]
cmp r12, rax
jbe 0x4090e6
mov r12, -8
mov rdi, r12
call sym.operatornew
mov rcx, qword [rbx + 8]
mov rdi, qword [rbx]
mov rbp, rax
mov r13, rcx
sub r13, rdi
add r13, rbp
je 0x408f7f
mov qword [r13], 0
mov edi, 0x30
call sym.operatornew
lea rdx, [rax + 0x10]
mov dword [rax + 8], 1
mov dword [rax + 0xc], 1
mov qword [rax], 0x409758
mov qword [rax + 0x18], 0
mov rsi, rsp
mov qword [rsp], rdx
mov qword [rax + 0x20], 0
mov edx, sym.imp.pthread_create
mov qword [rax + 0x10], 0x409730
mov qword [rax + 0x28], r14
mov rdi, r13
mov qword [rsp + 8], rax
call sym.std::thread::_M_start_thread
mov r13, qword [rsp + 8]
test r13, r13
je 0x408f78
mov eax, sym.imp.__pthread_key_create
test rax, rax
je 0x409068
lock sub dword [r13 + 8], 1
je 0x40903b
mov rcx, qword [rbx + 8]
mov rdi, qword [rbx]
cmp rcx, rdi
je 0x409093
mov rdx, rbp
mov rax, rdi
nop
test rdx, rdx
je 0x408fa9
mov qword [rdx], 0
mov rsi, qword [rax]
mov qword [rdx], rsi
mov qword [rax], 0
add rax, 8
add rdx, 8
cmp rax, rcx
jne 0x408f90
lea rax, [rdi + 8]
mov rsi, rcx
sub rsi, rax
mov rax, rsi
shr rax, 3
cmp qword [rdi], 0
lea r13, [rbp + rax*8 + 0x10]
jne 0x4090a9
mov rax, rdi
jmp 0x408fea
nop dword [rax + rax]
cmp qword [rax], 0
jne 0x4090a9
add rax, 8
cmp rax, rcx
jne 0x408fe0
test rdi, rdi
je 0x408ffd
call sym.operatordelete
mov qword [rbx], rbp
add rbp, r12
mov qword [rbx + 8], r13
mov rax, qword [rsp + 0x18]
xor rax, qword fs:[0x28]
mov qword [rbx + 0x10], rbp
jne 0x4090b3
add rsp, 0x20
pop rbx
pop rbp
pop r12
pop r13
pop r14
ret
nop dword [rax]
mov r12d, 8
jmp 0x408ed3
mov rax, qword [r13]
mov rdi, r13
call qword [rax + 0x10]
mov eax, 0xffffffff
lock xadd dword [r13 + 0xc], eax
cmp eax, 1
jne 0x408f78
mov rax, qword [r13]
mov rdi, r13
call qword [rax + 0x18]
jmp 0x408f78
mov eax, dword [r13 + 8]
lea edx, [rax - 1]
cmp eax, 1
mov dword [r13 + 8], edx
jne 0x408f78
mov rax, qword [r13]
mov rdi, r13
call qword [rax + 0x10]
mov eax, dword [r13 + 0xc]
lea edx, [rax - 1]
mov dword [r13 + 0xc], edx
jmp 0x409050
lea r13, [rbp + 8]
jmp 0x408ff3
mov rax, qword [rbx + 8]
sub rax, qword [rbx]
cmp qword [rax], 0
je 0x4090df
call sym.std::terminate
mov r12, rax
jmp 0x4090b8
call sym.imp.__stack_chk_fail
mov rdi, qword [rsp + 8]
test rdi, rdi
je 0x4090c7
call sym.std::_Sp_counted_base____gnu_cxx::_Lock_policy_2_::_M_release
mov rax, r12
mov rdi, rax
call sym.imp.__cxa_begin_catch
test rbp, rbp
je 0x40909c
mov rdi, rbp
call sym.operatordelete
call sym.imp.__cxa_rethrow
jmp 0x4090ca
movabs rdx, 0x1fffffffffffffff
cmp rax, rdx
ja 0x408ecc
test rax, rax
jne 0x40910d
xor r12d, r12d
xor ebp, ebp
jmp 0x408eeb
mov rbx, rax
jmp 0x409116
shl r12, 4
jmp 0x408ed3
call sym.imp.__cxa_end_catch
mov rdi, rbx
call sym.imp._Unwind_Resume
nop word cs:[rax + rax]
nop dword [rax]
push r15
push r14
mov r15d, edi
push r13
push r12
lea r12, [rip + 0x201c96]
push rbp
lea rbp, [rip + 0x201c9e]
push rbx
mov r14, rsi
mov r13, rdx
sub rbp, r12
sub rsp, 8
sar rbp, 3
call sym._init
test rbp, rbp
je 0x409186
xor ebx, ebx
nop dword [rax + rax]
mov rdx, r13
mov rsi, r14
mov edi, r15d
call qword [r12 + rbx*8]
add rbx, 1
cmp rbx, rbp
jne 0x409170
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
nop word cs:[rax + rax]
ret
add byte [rax], al
sub rsp, 8
add rsp, 8
ret
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add al, byte [rax]
jae 0x409231
movsxd rbx, dword [rdi + 0x73]
je 0x40923f
imul ebp, dword [rsi + 0x67], 0x70613a3a
jo 0x40923b
outsb dx, byte [rsi]
add byte fs:[rdx], dh
xor ah, byte [rax]
cmp al, 0x3d
and byte [rsi + 0x61], dh
insb byte [rdi], dx
jne 0x409248
and byte [rsi], ah
and byte es:[rsi + 0x61], dh
insb byte [rdi], dx
jne 0x409251
and byte [rdi + 0x363320], bh
jbe 0x409256
insb byte [rdi], dx
jne 0x40925d
and byte [rax], bh
pop r8
pop rdi
push r12
add byte [rbx + 0x61], al
jae 0x40926f
and byte [rbx], ah
add byte [rbx + 0x61], al
jae 0x409276
and byte [rax], al
and byte [rbx + 0x74], dh
jb str.output.txt
add byte fs:[rdi + 0x42], cl
add byte [rdi + 0x52], al
add byte [rsi + 0x59], dl
add byte [rcx + 0x4d], cl
push r8
push r11
push rbx
add byte [r10], r9b
or cl, byte [rdx]
push rsp
jae 0x4092aa
and byte [rcx + rbp*2 + 0x6d], dh
cmp ah, byte gs:[rax]
add byte [rbp + 0x72], al
jb 0x4092b3
outsd dx, dword [rsi]
jb str.vector::_M_default_append
outsd dx, dword [rsi]
outsb dx, byte [rsi]
and byte [rbp + 0x73], dh
je 0x40926c
and eax, dword [rax]
js 0x4092c1
movsxd rsi, dword gs:[rbp + 0x64]
cmp cl, byte [rdx]
add byte [rdx + 0x65], dl
push rdx
movsxd rsp, dword gs:[rbp + 0x69]
jbe 0x4092c5
cmp cl, byte fs:[rdx]
add byte [rsi + 0x65], dh
jbe 0x4092cb
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp bh, byte [rdx]
pop rdi
pop r15
jne 0x4092e1
je 0x4092d6
jo 0x4092ea
outsb dx, byte gs:[rsi]
add byte fs:[rdx], dh
sub eax, 0x6772616c
imul ebp, dword cs:[rsi], 0x756f0077
outsd dx, dword [rsi]
jne 0x409304
jo 0x409307
je 0x4092c2
je 0x40930e
je str._n_nTotal_time:
or cl, byte [rdx]
push rsp
outsd dx, dword [rsi]
je 0x4092ff
insb byte [rdi], dx
and byte [rcx + rbp*2 + 0x6d], dh
cmp ah, byte gs:[rax]
add byte [rax], al
jae 0x409319
jb str.void_read_Ts___...___with_Ts____int___int___int___int___int___int___int___
pop rdi
movsxd rbp, dword [rdi + 0x64]
movsxd rbp, dword [rdi + 0x6e]
je 0x40932b
outsd dx, dword [rsi]
insb byte [rdi], dx
insb byte [rdi], dx
jae 0x40932b
insb byte [rdi], dx
jae 0x409333
pop rdi
xor dword [rdi + 0x31], ebx
jae 0x409341
jne 0x409346
movsxd rsp, dword [rbp + 0x2e]
movsxd rsi, dword [rax + 0x70]
add byte [rax], al
add byte [rax], al
add byte [rax], al
imul ebp, dword [rsi + 0x70], 0x3e2d7475
jb 0x40934e
sub byte fs:[rsi + 0x6f], ah
jb 0x409367
jb 0x409357
cmp al, 0x54
jae 0x409335
sub byte [rcx + 0x72], ah
jae 0x409326
sub dword cs:[rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jbe 0x409391
imul esp, dword [rax + 0x72], 0x28646165
push rsp
jae 0x409353
and byte es:[rsi], ch
sub dword cs:[rax], esp
pop rbx
ja 0x4093a0
je 0x4093a1
and byte [rbx + rsi*2 + 0x20], dl
cmp eax, 0x6e697b20
je 0x40936a
sub al, 0x20
imul ebp, dword [rsi + 0x74], 0x69202c26
outsb dx, byte [rsi]
je 0x409376
sub al, 0x20
imul ebp, dword [rsi + 0x74], 0x69202c26
outsb dx, byte [rsi]
je 0x409382
sub al, 0x20
imul ebp, dword [rsi + 0x74], 0x69202c26
outsb dx, byte [rsi]
je 0x40938e
jge 0x4093c7
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
je 0x4093e5
imul ebp, dword [rdx + rdi + 0x3a], 0x63657250
imul esi, dword [rbx + 0x69], 0x73206e6f
je 0x4093e6
jb 0x4093fd
movsxd rbp, dword [rcx + 0x73]
imul ebp, dword [rdi + 0x6e], 0x6e697528
je 0x4093cd
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
je 0x409415
imul ebp, dword [rdx + rdi + 0x3a], 0x65736142
and byte [rbx + 0x65], dh
je 0x409403
jae 0x409429
sub byte [rbp + 0x69], dh
outsb dx, byte [rsi]
je 0x4093f3
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbx
je 0x409414
xor dword [rdi + 0x4d], ebx
jne 0x40945c
js 0x40944a
jae 0x409454
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne obj.typeinfoforstd::_Sp_counted_base____gnu_cxx::_Lock_policy_2_
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x409475
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rax], al
nop
mov cl, 0x60
add byte [rax], al
add byte [rax], al
add al, ah
xchg eax, ebx
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x74], dl
push rbx
je 0x409454
pop rdi
push rbx
jo 0x409487
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x409493
pop rdi
jae 0x409499
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40949d
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4094ba
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rax], al
add byte [rax], al
add al, ch
call 0x40f50e
add byte [rax], al
add byte [rax], ah
xchg eax, esp
add byte [rax], al
add byte [rax], al
add byte [rax], dl
xchg eax, esp
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x53], cl
push rbx
je 0x4094aa
je 0x4094de
jb 0x4094dd
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x4094ed
pop rdi
jae 0x4094eb
add byte [r8 + 0x60b1], r10b
nop
mov cl, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax - 0x6c], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
xor dword [rcx], esi
outsb dx, byte [rsi]
jo 0x409513
je 0x4094e4
jbe 0x40950c
movsxd rsp, dword [rbp]
add byte [rax], al
nop
mov cl, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4094], bl
add byte [rax], al
add byte [rcx], bh
cmp dword [rcx + 0x6e], ecx
jo 0x409532
je 0x409505
imul ebp, dword [rbp], 0
add al, ch
call 0x40f57e
add byte [rax], al
add byte [rax + 0x4094], bh
add byte [rax], al
add byte [rax + 0x4094], ch
add byte [rax], al
add byte [rcx], dh
xor dword [rdx], esi
jne 0x409559
jo 0x40955c
je 0x40952d
jbe 0x409555
movsxd rsp, dword [rbp]
add byte [rax + 0x60b1], dl
nop
mov cl, 0x60
add byte [rax], al
add byte [rax], al
add al, ah
xchg eax, esp
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
xor dword [rax], esi
jne 0x409579
jo 0x40957c
je 0x40954f
imul ebp, dword [rbp], 0xe8000000
call 0x40f5c6
add byte [rax], al
add byte [rax], al
xchg eax, ebp
add byte [rax], al
add byte [rax], al
add al, dh
xchg eax, esp
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
xor dword [rdx], esi
jne 0x4095a1
jo 0x4095a4
je 0x409584
je 0x4095a5
imul ebp, dword [rsi + 0x67], 0xb1e80000
call 0x40f5ee
add byte [rax], al
add byte [rax], ch
xchg eax, ebp
add byte [rax], al
add byte [rax], al
add al, dh
xchg eax, esp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x53], cl
push rbx
je 0x40959a
je 0x4095ce
jb 0x4095cd
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x4095a5
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x4095ec
push rax
jbe 0x4095fd
jbe 0x4095cf
add byte [r8], r8b
add al, ch
call 0x40f646
add byte [rax], al
add byte [rax - 0x6b], ah
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4094], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x74], dl
push rbx
je 0x4095e4
cmp dword [rdi + 0x53], ebx
jo 0x409617
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x409627
add byte [eax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x74], dl
push rbx
je 0x409615
xor ebx, dword [rdi + 0x53]
jo 0x409647
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x409653
pop rdi
jo 0x409666
jb 0x409653
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x409636
je 0x40966a
jb 0x409669
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x409641
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x409688
push rax
jbe 0x409699
jbe 0x40966b
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x409698
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4096b5
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rax], al
call 0x40f706
add byte [rax], al
add al, ah
xchg eax, ebp
add byte [rax], al
add byte [rax], al
add byte [rax - 0x6c], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rax + rax*2], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
enter 0x4094, 0
add byte [rax], al
add byte [rax], al
sar byte [rcx + 0x40], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, esp
add byte [rax], al
add byte [rax], al
add al, dl
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rbp + 0x40], dl
add byte [rax], al
movabs al, byte [0xc000000000004079]
jl 0x40972b
add byte [rax], al
add byte [rax], al
add byte [rax], dh
jl 0x409733
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rbp + 0x40], dl
add byte [rax], al
cmp byte [rbx + 0x40], 0
add byte [rax], al
add byte [rax], al
mov al, 0x7a
add byte [rax], al
add byte [rax], al
add byte [rax + 0x407b], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
xchg eax, ebp
add byte [rax], al
add byte [rax], al
add byte [rax], dh
jle 0x409773
add byte [rax], al
add byte [rax], al
add byte [rax + 0x407e], dh
add byte [rax], al
add byte [rax], dl
jns 0x409783
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
xchg eax, esi
add byte [rax], al
add byte [rax], al
add al, dh
js 0x40979b
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4079], al
add byte [rax], al
add byte [rax], al
jns 0x4097ab
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4079], dl
add byte [rax], al
add byte [rax + 0x7a], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
jg 0x409799
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
out dx, eax
jg 0x4097a9
add byte [rax], al
add byte [rax], al
add al, ah
add byte [r8], al
add byte [rax], al
add byte [rax], al
loopne 0x4097f7
add byte [rax], al
add byte [rax], al
add byte [rsi + rbp + 0x31b0141], 0x3b
add dword [rbx], ebx
add edi, dword [rbx]
push rsp
add dword [rax], eax
add byte [rcx], ch
add byte [rax], al
add byte [rax - 0x5f000087], dh
add dword [rax], eax
add byte [rax + 0x7c], dl
dec dword [rax]
or byte [rax], al
add byte [rax - 0x7f], al
inc dword [rax + 8]
add byte [rax], al
loopne 0x409767
push qword [rax + 1]
add byte [rax], al
loopne 0x409770
call rax
add al, 0
add al, dh
call 0x409801
cmp edi, -1
add byte [rip - 0x7cd00000], al
lcall [rax]
add eax, 0x83600000
push qword [rax]
add eax, 0x83700000
dec dword [rax + 5]
add byte [rax], al
xchg eax, edx
mov eax, 0x40000005
mov ah, 0xff
call rax
add byte [rax], al
sar edi, -1
or byte [rdi], al
add byte [rax], al
xor cl, ah
dec eax
add dword [rax], eax
add byte [rax - 0x1f], al
jmp rax
add dword [rax], eax
add byte [rax - 0x1f], dl
clc
add dword [rax], eax
add byte [rax - 0x1f], ah
call qword [rax]
add al, byte [rax]
add al, al
loope 0x409856
dec dword [rax + 2]
add byte [rax], al
shl cl, 1
jmp qword [rax + 2]
add byte [rax], al
loopne 0x409847
js 0x40986c
add byte [rax], al
adc dl, ah
lcall [rax - 0x6ffffffe]
loop 0x409876
dec eax
add al, byte [rax]
add al, al
loop 0x40987e
jmp rax
add al, byte [rax]
add al, dh
loop 0x409886
lcall [rax]
add eax, dword [rax]
add byte [rax + 0x58ffffe3], al
add eax, dword [rax]
add al, al
jrcxz 0x409896
dec dword [rax - 0xffffffd]
jrcxz 0x40989e
jmp qword [rax + 0x70000003]
in al, 0xff
call rax
add eax, dword [rax]
add byte [rax], al
in eax, 0xff
inc dword [rax]
add al, 0
add byte [rax + 0x38ffffe5], ah
add al, 0
add byte [rax - 0x1a], dh
inc dword [rax - 0xffffffc]
out 0xff, al
jmp qword [rax - 0x7ffffffc]
out 0xff, eax
lcall [rax - 0x3ffffffb]
out 0xff, eax
call qword [rax]
add byte [rax], al
sub cl, 0xff
jmp qword [rax + 6]
add byte [rax], al
shr cl, 1
inc dword [rax + 0x10000006]
hlt
inc dword [rax + 7]
add byte [rax], al
xor ah, 0xff
jmp qword [rax + 7]
add byte [rax], al
sal dh, 0xff
inc eax
add byte [rax], al
jo 0x4098ff
lcall [rax + 8]
add byte [rax], al
loopne 0x409907
jmp qword [rax + 8]
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x409937
add dword [rbx], ebx
or al, 7
or byte [rax + 0x14100701], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
push 0x2affff80
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x409967
add dword [rbx], ebx
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
or byte [rax - 1], bh
call qword [rax + 2]
adc byte [rsi + 0xe], al
sbb byte [rdx + 0xf], cl
or esi, dword [rdi + 8]
add byte [rax], 0x3f
sbb bh, byte [rbx]
sub dh, byte [rbx]
and al, 0x22
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], r8b
add byte [rax - 0x21], ah
inc dword [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
pop rsp
add byte [rax], al
add byte [rax - 0x21], bl
dec dword [rip]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
je 0x4099be
add byte [rax], al
push rax
inc dword [rbx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
mov word [rax], es
add byte [rax], al
call qword [rbp]
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdx + rax - 0x79e7f1bf], cl
add eax, dword [rcx + 0xe]
and byte [rbx + 0xe0a7804], al
sbb byte [rsi + rcx + 0x10], al
or byte [rsi + 0xb], cl
sbb byte [rcx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax - 0x21], dh
inc dword [rip]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
fadd qword [rax]
add byte [rax], al
push 0x5ffffdf
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
hlt
add byte [rax], al
add byte [rax - 0x21], ah
ljmp [rax]
add byte [rax], al
add byte [rax], al
adc byte [rbx + 0x80e6202], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ch
add byte [rax], al
adc al, 1
add byte [rax], al
jo 0x409a41
push qword [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x180e4102], al
add dword [rbx], 0x4b
and byte [rdi + 0xa], ch
sbb byte [rcx + 0xe], al
adc byte [rcx + 0xe], al
or byte [rdx + 0xb], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add dword [rax], r8d
add al, al
ljmp [rbx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
pop rsp
add dword [rax], eax
add al, bl
ljmp [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x50], edi
push rdx
add byte [rcx], al
js 0x409ad9
add esi, dword [rax + 0x3004013]
sbb ecx, dword [rdi + rax]
or byte [rax + 0x3c000001], dl
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
rcr bh, 1
inc dword [rcx + 0x4000000]
jl 0x409a8b
add byte [rcx + 0xe], al
adc byte [rsi + 0x180e4102], al
add dword [rbx], 0x55
and byte [rdx], al
or cl, byte [r14]
sbb byte [rcx + 0xe], al
adc byte [rcx + 0xe], al
or byte [rbx + rcx + 0x44], cl
or cl, byte [rsi]
sbb byte [rcx + 0xe], al
adc byte [rcx + 0xe], al
or byte [rcx + 0xb], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ch
add byte [rax], al
add byte fs:[rax], al
add byte [rax], ah
loopne 0x409b22
cmp al, byte [rax]
add byte [rax], al
add al, 0x80
movabs al, byte [0x590283100e410040]
or cl, byte [rsi]
or byte [rsi + 0xb], al
or r9b, byte [r14]
or byte [rbx + 0xb], cl
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add al, 2
add byte [rax], al
xor al, ah
push qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax + rax], ch
add byte [rax], al
lodsb al, byte [rsi]
add byte [rax], al
add byte [rax - 0x20], cl
jge 0x409b6e
add byte [rax], al
add al, 0x84
movabs al, byte [0x410286100e410040]
sbb byte [rbx + 0x200e5503], al
add dl, byte [rdx + 0xa]
sbb byte [rsi + rcx + 0x10], al
or byte [rbp + 0xb], al
add byte [rax + rax], ch
add byte [rax], al
fadd qword [rax]
add byte [rax], al
cwde
loopne 0x409b9a
dec dword [rsi + 0x4000000]
mov byte [rax + 0xe410040], ah
adc byte [rsi + 0x180e4102], al
add dword [rbx], 0x50
and byte [rdx], al
pop rsi
or cl, byte [rsi]
sbb byte [rsi + rcx + 0x10], al
or byte [rbx + 0xb], cl
add byte [rax + rax], dh
add byte [rax], al
or al, 1
add byte [rax], al
clc
loopne 0x409bca
call qword [rdi + 0x4000000]
mov word [rax + 0xe410040], fs
adc byte [rsi + 0x180e4102], al
add dword [rbx], 0x50
and byte [rdx], al
pop rcx
or cl, byte [rsi]
sbb byte [rcx + 0xe], al
adc byte [rcx + 0xe], al
or byte [rbx + 0xb], cl
pop rsp
sbb byte [rcx + 0xe], al
adc byte [rcx + 0xe], al
or byte [rax + rax], al
add byte [rcx + rax], al
add byte [rax - 0x1f], ah
dec ebx
add byte [rax], al
add byte [rax + rdx*4], al
movabs al, byte [0x410286100e410040]
sbb byte [rbx + 0x200e4403], al
add al, byte [rsi + 0x44180e0a]
adc byte [rcx + 0xe], al
or byte [rdi + 0xb], cl
or r9b, byte [rsi]
sbb byte [rcx + 0xe], al
adc byte [rcx + 0xe], al
or byte [rdx + 0xb], cl
push rsp
sbb byte [rsi + rcx + 0x10], al
or byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cld
add al, byte [rax]
add al, ch
loope 0x409c4a
push qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rbx + 0xe0a6202], al
or byte [rbp + 0xb], al
add al, byte [rdi + 0xe]
or byte [rax + rax], ch
add byte [rax], al
sbb al, 3
add byte [rax], al
loop 0x409c6a
dec dword [rbx]
adc byte [rsi + 0x180e4102], al
add dword [rbx], 0x47
and byte [rbp + 0xa], ah
sbb byte [rsi + rcx + 0x10], al
or byte [rbp + 0xb], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add r8, qword [rax]
add byte [rax], cl
jle 0x409c9a
inc dword [rbx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add eax, dword fs:[rax]
add byte [rax], al
jle 0x409cb2
inc dword [rbx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
jl 0x409cc9
add byte [rax], al
clc
jge 0x409cca
jmp qword [rip]
adc byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
xchg eax, esp
add eax, dword [rax]
add byte [rax], dl
jle 0x409ce2
jmp qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
lodsb al, byte [rsi]
add eax, dword [rax]
add byte [rax], ch
jle 0x409cfa
inc dword [rax + rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add ah, al
add eax, dword [rax]
add byte [rax], ah
jle 0x409d12
jmp rdi
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bb], es
cmp byte [rbx + 0x600e4707], al
add ebx, dword [rdx + 2]
or cl, byte [rsi]
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rdi + 0xb], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 4
add byte [rax], al
loopne 0x409d43
cmp al, byte [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rbx + 0xe0a6d02], al
or byte [rdx + 0xb], cl
or byte [rax], al
push rsp
add byte [rax], al
add ah, al
add al, byte [rax]
add byte [rax - 0x2e000074], ah
and dword [rax], eax
add byte [rsp + rdx*4], al
movabs al, byte [0x42028f100e420040]
sbb byte [rsi + 0x200e4203], cl
lea eax, [rdx + rax*2]
sub byte [rbp + rax - 0x79cff1bf], cl
cmp byte [rbx - 0x7ff1b8f9], al
add al, byte [rbx]
adc dword [rdx], ecx
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rcx + 0xb], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rsp + rax - 0x1e580000], cl
mov ebp, 1
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bc], es
cmp byte [rbx + 0x400e4707], al
add edx, dword [rcx + rax + 0xa]
cmp byte [rsi + rcx + 0x30], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rbx + 0xb], cl
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fadd qword [rax + rax]
add byte [rax], bl
jrcxz 0x409e2a
dec dword [rdx]
add byte [rax], al
add byte [rsi + rcx + 0x10], al
je 0x409e40
or byte [rax + 0xb], cl
or r9b, byte [rsi]
or byte [rcx + 0xb], al
add byte [rax], r8b
add ah, bh
add al, 0
add byte [rax - 0x1d], cl
push qword [rdx + rcx]
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bc], es
cmp byte [rbx + 0x600e4407], al
add esp, dword [rdi + 0x380e0a01]
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rbx + 0xb], cl
add byte [rax], al
add byte [rax], al
xor al, 0
add byte [rax], al
fadd qword [rbx]
add byte [rax], al
push 0x16ffffad
or eax, 0x50040000
movabs eax, dword [0x42028f100e420040]
sbb byte [rsi + 0x200e4203], cl
lea eax, [rdx + rax*2]
sub byte [rbp + rax - 0x79cff1bf], cl
cmp byte [rbx - 0x7ff1b8f9], al
add al, byte [rax]
xor al, 0
add byte [rax], al
adc al, 4
add byte [rax], al
push rax
mov edx, 0x1fcaffff
add byte [rax], al
add al, 0xcf
movabs eax, dword [0x42028f100e420040]
sbb byte [rsi + 0x200e4203], cl
lea eax, [rdx + rax*2]
sub byte [rbp + rax - 0x79cff1bf], cl
cmp byte [rbx - 0x5ff1b8f9], al
add al, byte [rax]
sbb al, 0
add byte [rax], al
mov esp, 0xc8000005
in al, dx
jmp qword [rdx]
add byte [rax], al
add byte [rsi + 0xe], al
adc byte [rbx + 0xe0a5002], al
or byte [rdx + 0xb], cl
jl 0x409f2c
or byte [rax], al
pop rsp
add byte [rax], al
add ah, bl
add eax, 0xed180000
push qword [rip + 2]
add ah, byte [rdx + 0xe]
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b5], es
cmp byte [rbx + 0x400e4d07], al
add ebx, dword [rsi + 1]
cmp byte [rcx - 0x3d], al
xor byte [rcx - 0x3a], al
sub byte [rdx - 0x34], al
and byte [rdx - 0x33], al
sbb byte [rdx - 0x32], al
adc byte [rdx - 0x31], al
or byte [rsi + rcx + 0x40], al
add dword [rdi], -0x7a
mov word [rip + 0x38e048d], es
pop qword [rdx]
add byte [rax + rax], al
add ah, cl
add al, 0
add al, bh
out dx, al
jmp qword [rbx + 0x4000002]
push 0x420040a2
adc byte [rsi + 0x180e4202], cl
lea eax, [rbx]
and byte [rsp + rax - 0x79d7f1bf], cl
add eax, 0x83300e41
push rax
add edx, dword [rcx + 0x300e0a01]
sub byte [rcx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rbp + 0xb], al
xor al, 0
add byte [rax], al
adc al, 5
add byte [rax], al
je 0x409fd2
push rax
add al, 0
add byte [rax + rdx*4], al
movabs byte [0x41028c100e420040], al
sbb byte [rsi + 0x200e4603], al
add dword [rsp + rax*2], 0xe
push rax
add edi, dword [rbx + 4]
or cl, byte [rsi]
and byte [rcx + 0xe], al
sbb byte [rcx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rcx + 0xb], al
adc al, 0
add byte [rax], al
mov esp, 0xf8000006
js 0x40a00a
call qword [rdi]
adc byte [rdx], al
mov cs, word [rsi]
or byte [rax + rax], al
add ah, dl
add byte [rax], al
adc cl, dh
jmp qword [rbp]
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b8], es
cmp byte [rbx + 0x400e4d07], al
jb 0x40a05a
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
adc al, 0
add byte [rax], al
sbb al, 7
add byte [rax], al
cmp cl, dh
inc dword [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
mov bh, 1
movsb byte [rdi], byte ptr [rsi]
add al, 0x22
add byte [rax], al
loop 0x40a0a4
add eax, 0xa300428c
ret 0xff07
add r15b, cl
adc dh, dl
add al, 0
add dh, ah
adc eax, 0x41ff02c1
add cl, al
sbb byte [rip + 0x19f90000], dh
cdq
add edi, edi
add byte [r15 + 0x2f21e], sil
add byte [rdx - 0xfd4dde], al
add byte [r15 + 0x225], spl
loope 0x40a0fd
jmp 0x829fdf
mov eax, 0x41ab052b
add byte [rax + rsi + 0x42ed05], bh
loop 0x40a11b
push rbp
stosd dword [rdi], eax
add byte [r15 - 0x49fe40cd], dl
add byte [r9 - 0x54fe52ca], sil
add r9b, spl
cmp byte [rdx], al
mov dh, 0x43
add cl, dh
cmp dword [rip - 0x28ffbe55], eax
cmp bh, byte [rbp + 0x42ed02]
cmp eax, 0x41ab1d
movsd dword [rdi], dword ptr [rsi]
add dh, byte [rsi + 0x40880043]
inc dword [rcx]
xchg eax, ebp
add eax, 0xa00041ab
add dil, r15b
add r10b, dl
add eax, 0x41dd0000
add bh, bh
add r10b, dil
xor eax, dword [r8]
add byte [rbx + 0x41ff1342], dh
add ah, dl
sbb ebp, ebp
add byte [rdi + 0x41ab0f43], spl
add bh, bh
inc dword [rcx]
jnp 0x40a19a
add eax, 0x5660000
jrcxz 0x40a175
add byte [rbp + 0x18dc0503], ch
add byte [rbx + 0x19a60508], ah
add dl, cl
or byte [rbp - 0x24], dl
sbb byte [rax], al
mov ecx, dword [rdx]
xchg eax, edi
add dword [rax + 0xbca0019], ecx
add eax, 0xba001a84
or al, 5
add byte [rax], al
vpaddusb xmm11, xmm15, xmmword [rax]
add byte [rcx + rdx + 0x198802], ch
rcl dword [rdx], 5
fcomp qword [rax]
add byte [rdi - 0x59fd4aed], ah
sbb dword [rax], eax
sahf
sub esp, ebx
sbb byte [rax], al
cmc
add cl, byte [rax + 0x18d70019]
add eax, 0x830018dc
sbb dword [rip + 0x19a10000], eax
add eax, 0xca0019a6
sbb dword [rip - 0x2bffe724], eax
sbb dword [rdi], ecx
cmpsb byte [rsi], byte ptr [rdi]
sbb dword [rax], eax
lcall [rcx]
add eax, 0x1a910000
add eax, 0xff0018dc
inc dword [rcx]
xchg eax, ecx
add dword [rbp + 5], edx
add byte [rax], al
jbe 0x40a1df
cmp dword [rdi], 0x503cb00
cmp eax, 0x508d500
loop 0x40a226
add byte [rbp + 0x3dfe6509], al
add dh, ah
or dl, byte [rax + 0x3ecb01]
fmul qword [rdi*8 + 0x3ead07]
loop 0x40a214
add eax, 0x18b70000
int 1
cmp eax, 0x21b8c00
retf
add ch, al
sbb eax, 0x3ead06ba
add bh, ah
and al, 5
cmp eax, 0xb525cf00
add ah, dl
add byte ds:[rbx + 0x3ead2228], ah
add cl, al
sub dword [rcx], esi
cmp eax, 0xab2aad00
add al, 0xad
add ch, bh
add cl, bl
add ah, cl
xor al, bl
or dword [rbp + 0x3df9003e], ebp
add eax, 0xa8003dfe
add eax, 0x3ec60000
add eax, 0x9d003dfe
add eax, 0x3fa70000
add eax, 0xb1003dfe
sbb edx, esp
add byte ds:[rax], al
add byte [rax], al
inc dword [rbx]
and eax, 0x5561b01
add byte [rax], al
add dword [rcx], 0x104e405
iretd
add dword [rip - 0x20fcfb52], eax
add al, 5
mov byte [rip + 0x5059e00], al
add byte [rax], al
add dword [rax], eax
add byte [rbp], bh
add byte [rax], al
add bh, bh
inc dword [rcx]
sbb eax, 0x2f000005
add eax, 0x8c0009ad
add dword [rip + 0x19e0000], eax
add eax, 0xcd0009c0
add dh, dl
add dword [rax], eax
add byte [rdx + 0x9e60506], cl
add ah, bl
add eax, 0xe20009c2
xchg byte [rcx], al
out 9, al
add byte [rbp + 0x509], dl
mov ebx, 0x2b09
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1a], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
push rax
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmpsd dword [rsi], dword ptr [rdi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 3], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 3], ah
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
or eax, 0
add byte [rax], al
add byte [rcx + rdx*4 + 0x40], ah
add byte [rax], al
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
fsubr dword [rbp + 0x60]
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
call 0x410f32
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax + 7], ah
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
add al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
popfq
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov al, 0x60
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x400d], dl
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
or eax, 0x40
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bh
ljmp [rdi]
add byte [rax], al
add byte [rax + 0xc], ah
add byte [rax], al
add byte [rax], al
add bh, bh
ljmp [rdi]
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ljmp [rdi]
add byte [rax], al
add dh, bh
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
lodsd eax, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4011], al
add byte [rax], al
add byte [rsi + 0x4011], dl
add byte [rax], al
add byte [rsi + 0x4011], ah
add byte [rax], al
add byte [rsi + 0x4011], dh
add byte [rax], al
add dh, al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
out 0x11, al
add byte [rax], al
add byte [rax], al
add dh, dh
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
adc al, byte es:[rax]
add byte [rax], al
add byte [rax], al
adc al, byte ss:[rax]
add byte [rax], al
add byte [rax], al
adc r8b, byte [rax]
add byte [rax], al
add byte [rax], al
push rsi
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
jbe 0x40b0a4
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4012], al
add byte [rax], al
add byte [rsi + 0x4012], dl
add byte [rax], al
add byte [rsi + 0x4012], ah
add byte [rax], al
add byte [rsi + 0x4012], dh
add byte [rax], al
add dh, al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
out 0x12, al
add byte [rax], al
add byte [rax], al
add dh, dh
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
adc eax, dword es:[rax]
add byte [rax], al
add byte [rax], al
adc eax, dword ss:[rax]
add byte [rax], al
add byte [rax], al
adc r8d, dword [rax]
add byte [rax], al
add byte [rax], al
push rsi
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
adc ax, word [rax]
add byte [rax], al
add byte [rax], al
jbe 0x40b125
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4013], al
add byte [rax], al
add byte [rsi + 0x4013], dl
add byte [rax], al
add byte [rsi + 0x4013], ah
add byte [rax], al
add byte [rsi + 0x4013], dh
add byte [rax], al
add dh, al
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
out 0x13, al
add byte [rax], al
add byte [rax], al
add dh, dh
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x40b1e0
je 0x40b1e9
and byte [rip + 0x302e342e], dh
sub eax, 0x75627536
outsb dx, byte [rsi]
je 0x40b1f7
xor dword [rsi + 0x31], edi
xor byte cs:[rsi + rbp], dh
xor al, 0x29
and byte [rip + 0x302e342e], dh
and byte [rdx], dh
xor byte [rcx], dh
xor byte ss:[rsi], dh
xor byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add al, byte [rax]
push rsp
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, dword [rax]
je 0x40b1f4
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], al
cwde
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, 0x4002e000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], al
add byte [rax + 7], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], al
add dh, bh
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or byte [rax], al
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], cl
add byte [rax], dh
or eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or al, byte [rax]
nop
or eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or eax, dword [rax]
push rax
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or al, 0
jo 0x40b2db
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x40140000], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], cl
add byte [rax], dl
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], cl
add byte [rcx + rdx*4 + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc byte [rax], al
rcl byte [rcx + 0x40], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], dl
add al, al
xchg eax, edi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], dl
add byte [rax], bl
cdq
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], dl
add byte [rax + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], dl
fsubr dword [rbp + 0x60]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc eax, 0x60ade800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], dl
add al, dh
lodsd eax, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], dl
add al, bh
lodsd eax, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], bl
add al, bh
scasd eax, dword [rdi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], bl
add byte [rax], al
mov al, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], bl
add byte [rax - 0x4f], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], bl
add byte [rax + 0x60b1], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add dword [rax], eax
add al, dh
lodsd eax, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add al, dl
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], dl
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte cs:[rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0x1a], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rcx], al
add byte [rbx], bl
add byte [rax - 0x4e], cl
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add dword [rax], eax
adc eax, 0x60ade800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, byte [rax]
add byte [rax + 0x1a], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], al
add byte [rax + rax], dl
fsubr dword [rbp + 0x60]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsd dword [rdi], dword ptr [rsi]
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], dh
add byte [rax], dl
add byte [rax + 0x4093], dh
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, dl
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x4093], al
add byte [rax], al
add byte [rip], ah
add byte [rax], al
add ah, bh
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rax], ah
xchg eax, ebx
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp dword [rcx], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
xchg eax, edi
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 1], dl
add byte [rax], al
add dword [rax], eax
sbb eax, dword [rax]
sal byte [rdx + 0x60], 0
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rax], ah
add byte [rcx], al
add byte [rdx], dl
add byte [rax - 0x60], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 1], dh
add byte [rax], al
add dword [rax], eax
add al, dh
lodsd eax, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 1], bh
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
rcl byte [rdi + 0x40], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1000001], dl
add byte [rcx], bl
add byte [rax], al
mov al, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 1], ah
add byte [rax + rax], dl
call 0x41170a
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 1], bh
add byte [rax + rax], dl
fsubr dword [rbp + 0x60]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
retf
add dword [rax], eax
add byte [rcx], al
add byte [rdi], dl
add al, bh
lodsd eax, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0xa], cl
add byte [rax], al
and byte [rax], al
sbb al, byte [rax]
pop rax
mov cl, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dl
add dword [rax], eax
add byte [rdx], dl
add byte [rsi], cl
add byte [rax], ah
pop rcx
add byte [rax], al
add byte [rax], al
add dl, cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
in al, 1
add byte [rax], al
and al, byte [rax]
add al, al
jl 0x40b713
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add al, bh
add dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], ah
jns 0x40b72b
add byte [rax], al
add byte [rax], al
add byte [rbp], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add r8b, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 2], dh
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
test al, 0x96
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x220000], al
add byte [rax + 0x7a], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000003], dl
add byte [rsi], cl
add byte [rax + 0x7f], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 3], cl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x407e], dh
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rbx + rax + 0x120000], dl
add byte [rax + 0x4091], ah
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rax + 0x220000], ah
add al, dl
jns 0x40b7eb
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbx
or al, byte [rax]
add byte [rdx], dl
add byte [rsi], cl
add byte [rax + 0x4019], ah
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000003], bh
add byte [rsi], cl
add byte [rax + 0x7d], ah
add byte [rax], al
add byte [rax], al
add bl, cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bh
add eax, dword [rax]
add byte [rcx], ah
add byte [rax], dl
add byte [rax], ah
xchg eax, edi
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x407f], al
add byte [rax], al
add byte [rbp + 1], bh
add byte [rax], al
add byte [rdi + 0x12000004], dl
add byte [rsi], cl
add byte [rax], dh
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
out 0xe, eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
fiadd word [rax + rax]
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ch
add al, 0
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub eax, 0x21000005
add byte [rax], dl
add byte [rax - 0x69], cl
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x12000005], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x12000007], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + rax + 0x220000], dh
add byte [rax + 0x407b], al
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dl
add eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x220000
add byte [rax + 0x407a], dh
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rsi + 0x12000003], bl
add byte [rdi], cl
add byte [rcx + rdx*4 + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rsi], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rsi]
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rax], ah
jns 0x40b99b
add byte [rax], al
add byte [rax], al
add byte [rbp], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, ebp
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test al, 6
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rsi], 0x220000
add byte [rax + 0x7b], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rax], dh
jle 0x40b9fb
add byte [rax], al
add byte [rax], al
add byte [rbp], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor eax, dword [rdi]
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
loopne 0x40b965
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 7], ah
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
adc byte [rbp + 0x40], dl
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ja 0x40ba01
add byte [rax], al
and al, byte [rax]
add byte [rax - 0x7f], al
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
cmp byte [rbp + 0x40], dl
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
lodsd eax, dword [rsi]
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rdi], 0x220000
add al, dh
js 0x40ba8b
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x12000008], bh
add byte [rsi], cl
add byte [rax], ah
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
shl dword [rcx], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], r8b
add byte [rcx], ah
add byte [rax], dl
add al, bh
xchg eax, esi
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 8], bl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dl, 8
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, bh
or byte [rax], al
add byte [rcx], ah
add byte [rax], dl
add al, dh
xchg eax, esp
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x12000009], cl
add byte [rax], al
add byte [rax + 0x12], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
or dword [rax], eax
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 9], cl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x7b], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x21000009], al
add byte [rax], dl
add byte [rax - 0x6c], bl
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x21000009], bh
add byte [rax], dl
add byte [rax + 0x4096], dl
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, cl
or dword [rax], eax
add byte [rcx], dl
add byte [rax], dl
add al, al
xchg eax, ecx
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fisttp qword [rcx]
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
rcl byte [rsi + 0x40], 1
add byte [rax], al
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out dx, al
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], dh
jl 0x40bbdb
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rdx], al
or al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
or al, byte [rax]
add byte [rcx], ah
add byte [rax], dl
add byte [rax], ch
xchg eax, ebp
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
or al, byte [rax]
add byte [rcx], dl
add byte [rbx], bl
add byte [rdx + rsi*4 + 0x60], bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor ecx, dword [rdx]
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or r8b, byte [r8]
add byte [rax], dl
add byte [rdx], bl
add byte [rax - 0x4f], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0xa], bl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
adc byte [rdx], 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xa], dh
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
push 0x4096
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2100000a], dl
add byte [rax], dl
add al, cl
xchg eax, esp
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1100000a], ah
add byte [rbx], bl
add byte [rax - 0x4e], bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
stosd dword [rdi], eax
or al, byte [rax]
add byte [rcx], ah
add byte [rax], dl
add byte [rax], dl
xchg eax, esp
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bl
or al, byte [rax]
add byte [rdx], dl
add byte [rsi], cl
add byte [rax], ah
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rcx], ah
add byte [rbx], bl
add byte [rax + 0x60b1], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0xb
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x408e], al
add byte [rax], al
add byte [rbx + 2], ah
add byte [rax], al
add byte [rax + 0xb], ch
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
mov eax, 0x60b2
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xb], ch
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
xchg eax, ebp
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1100000b], ah
add byte [rbx], bl
add byte [rax + 0x60b2], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2100000b], ch
add byte [rax], dl
add byte [rax + 0x4094], bh
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2100000b], bh
add byte [rax], dl
add byte [rax], ah
xchg eax, esp
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rcx], ah
add byte [rax], dl
add byte [rax + 0x4095], dl
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rcx], ah
add byte [rax], al
adc dword [rdx], eax
sbb al, byte [rax]
push 0x60b1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
or al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rcx], dl
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2200000c], ch
add byte [rsi], cl
add byte [rax + 0x4081], dl
add byte [rax], al
add byte [rdx + rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ah
or al, 0
add byte [rcx], ah
add byte [rax], dl
add byte [rax - 0x6a], dl
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0xd], dl
add byte [rax], al
adc dword [rdx], eax
sbb al, byte [rax]
mov cl, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0xd], ah
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
loopne 0x40bdb6
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0xd], dh
add byte [rax], al
adc al, byte [rax]
add byte [rax], dh
xchg eax, ecx
add byte [rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
test dword [rip + 0x210000], ecx
adc byte [rax], al
loopne 0x40bde7
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
or eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x407b], dh
add byte [rax], al
add byte [rbp], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsi
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
mov al, 0x95
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0xe], bh
add byte [rax], al
and al, byte [rax]
add byte [rax], dh
jle 0x40bef3
add byte [rax], al
add byte [rax], al
add byte [rbp], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
lodsd eax, dword [rsi]
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
rcl byte [rdx], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, cl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x407a], dh
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add dl, ah
add byte [rax], al
and al, byte [rax]
add al, dl
mov eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ah
sldt word [rax]
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp al, 0xf
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sldt word [r8]
adc al, byte [rax]
add byte [rax + 0x401a], dh
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0xf], bl
add byte [rax], al
and al, byte [rax]
add al, al
jl 0x40bf9b
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rdi + 0xf], ch
add byte [rax], al
adc al, byte [rax]
add al, al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
and eax, 0
add byte [rax], al
add byte [rbx + 0xf], bh
add byte [rax], al
adc byte [rax], al
sbb eax, dword [rax]
push 0x60b1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x1200000f], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2100000f], bl
add byte [rbx], bl
add al, bl
mov cl, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
iretd
sldt word [rax]
and dword [rax], eax
adc byte [rax], al
mov byte [rax + rax*2], dl
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ch
sldt word [rax]
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rcx], ah
add byte [rax], dl
add byte [rax - 0x6c], dh
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
adc byte [rax], al
add byte [rcx], ah
add byte [rax], dl
add byte [rax + 0x4094], ch
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000010], dh
add byte [rsi], cl
add byte [rax + 0x7d], ah
add byte [rax], al
add byte [rax], al
add bl, cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x10], dh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test byte [rax], dl
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
add byte [rbp + 0x40], dl
add byte [rax], al
or eax, 0
add byte [rax], al
add byte [rbp + 0x12000010], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ch
adc byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], al
jns 0x40c0d3
add byte [rax], al
add byte [rax], al
add byte [rip], cl
add byte [rax], al
add byte [rbx + 0x10000001], dh
add byte [rbx], bl
add al, cl
mov dl, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x11], ch
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jle 0x40c0e3
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
or eax, 0
add byte [rax], al
mov dl, byte [rcx]
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x7f], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, al
adc dword [rax], eax
add byte [rcx], dl
add byte [rbx], bl
add byte [rax + 0x60b2], dh
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
adc dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ah
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4081], dl
add byte [rax], al
add byte [rdx + rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, byte [rdx]
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
mov dl, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
adc al, byte [rax]
add byte [rdx], dl
add byte [rsi], cl
add al, dh
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub byte [rdx], dl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4079], ah
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x12], cl
add byte [rax], al
and dword [rax], eax
adc byte [rax], al
cwde
xchg eax, esp
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x12], bl
add byte [rax], al
and al, byte [rax]
add byte [rax], al
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jge 0x40c1d4
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
wait
adc al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add al, dh
js 0x40c223
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
adc eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x22000013], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x13], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pushfq
adc eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax - 0x7f], al
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x22000013
add byte [rsi], cl
add byte [rax + 0x4079], dl
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rdi], bh
adc al, 0
add byte [rax], dl
add byte [rdx], bl
add byte [rax - 0x4f], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x14], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
mov al, 0x13
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x14], ah
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x408e], al
add byte [rax], al
add byte [rbx + 2], ah
add byte [rax], al
add byte [rbx + 0x22000014], ch
add byte [rsi], cl
add byte [rax - 0x74], al
add byte [rax], al
add byte [rax], al
add byte [rip + 2], dh
add byte [rax], al
add byte [rdx], cl
adc eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, 0x22000015
add byte [rsi], cl
add byte [rax], dl
jns 0x40c32b
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 1], cl
add byte [rax], al
adc al, byte [rax]
add byte [rax + 0x401a], ah
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x15], dl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
insd dword [rdi], dx
adc eax, 0x220000
add byte [rax + 0x4079], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add bl, ah
adc eax, 0x110000
sbb eax, dword [rax]
mov dl, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dh
adc eax, 0x220000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x407a], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x16], bl
add byte [rax], al
adc al, byte [rax]
add byte [rax], dl
adc al, 0x40
add byte [rax], al
add byte [rax], al
add al, dh
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rdi + 0xd], bh
add byte [rax], al
adc al, byte [rax]
or eax, dword [rax]
push rax
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
je 0x40c3e8
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
test al, 0xb2
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsxd rsi, dword [rdx + 0x74]
jae 0x40c462
jne 0x40c456
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
pop rdi
pop rdi
add byte [rbp + 0x72], ah
imul esi, dword gs:[ebx + 0x74], 0x745f7265
insd dword [rdi], dx
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x40c416
pop rdi
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x40c494
jb 0x40c49a
pop rdi
jne 0x40c4a3
add byte [rbx + 0x6f], ah
insd dword [rdi], dx
jo 0x40c49d
je 0x40c499
xor eax, 0x5f003538
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x40c4b9
jb 0x40c4bf
pop rdi
jne 0x40c4c8
pop rdi
imul bp, word [rsi + 0x69], 0x615f
jb 0x40c4cb
jns 0x40c4bb
outsb dx, byte gs:[rsi]
je 0x40c4d2
jns 0x40c462
jb 0x40c4c6
insd dword [rdi], dx
pop rdi
jne 0x40c4d8
insd dword [rdi], dx
jns 0x40c46e
pop rdi
pop rdi
jb 0x40c4d4
insd dword [rdi], dx
pop rdi
jne 0x40c4e6
insd dword [rdi], dx
jns 0x40c4db
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40c4e6
jns 0x40c4e6
outsb dx, byte gs:[rsi]
je 0x40c4fd
jns 0x40c48d
jae 0x40c4fe
jne 0x40c503
movsxd rsp, dword [rbp + 0x2e]
movsxd rsi, dword [rax + 0x70]
add byte [rdi + 0x5a], bl
pop rdx
jae 0x40c503
je 0x40c4e2
jae 0x40c508
push 0x45
xor dword [rcx], edi
pop rdi
pop rdi
push rax
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
pop rdx
xor dword [rdx], esi
jae 0x40c527
je 0x40c514
jb 0x40c52b
movsxd rbp, dword [rcx + 0x73]
imul ebp, dword [rdi + 0x6e], 0x3931456a
pop rdi
pop rdi
push rax
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
pop rdx
xor al, 0x72
push rdx
imul edx, dword [rbx + 0x30], 0x5f30535f
push rbx
xor byte [rdi + 0x53], bl
xor byte [rdi + 0x53], bl
xor byte [rdi + 0x53], bl
xor byte [rdi + 0x45], bl
jbe 0x40c54a
jo 0x40c557
push rsp
pop rdi
xor dword [r9], r15d
pop rdi
pop rdi
push rax
push rdx
push r12
push rsp
pop rcx
pop rdi
push rbp
push r12
pop rdi
pop rdi
add byte [rdi + 0x47], bl
pop rdi
pop rdi
jae 0x40c5a1
pop rdi
pop r15
pop rdi
pop rdx
cmp byte [rbx + 0x65], dh
je 0x40c58e
imul esp, dword [rsp + rsi*2 + 0x68], 0x5a5f006a
push rbx
je 0x40c58e
cmp byte [rdi + 0x5f], bl
imul ebp, dword [rdi + 0x69], 0x74696e
pop rdi
pop rdi
push rdx
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push r10
pop rdi
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push rbp
pop rdi
pop rdi
push rdx
pop r15
push rdx
add byte [rdi + 0x47], bl
pop rdi
push rbx
push r12
pop rdi
push rsp
pop r15
add byte [rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40c5fb
jns 0x40c5fb
outsb dx, byte gs:[rsi]
add byte fs:[rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40c60c
jns 0x40c60c
jae 0x40c623
jb 0x40c626
add byte [rdi + 0x44], bl
pop rcx
add byte [r15 + 0x5a], bl
xor dword [rax], esi
jb 0x40c623
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
push rsp
jae 0x40c63e
jbe 0x40c5cc
pop rdi
pop rdx
xor qword [rax], r14
jne 0x40c648
jo 0x40c64b
je 0x40c61e
imul ebp, dword [rbp + 0x44], 0x764531
pop rdi
pop rdx
push rbx
je 0x40c61c
jbe 0x40c64d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x40c628
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40c667
movsxd rbx, dword [rdi + 0x73]
je 0x40c675
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40c670
je 0x40c685
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4445455f
xor dword [rbp + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x40c665
xor byte [rdi + 0x5f], bl
je 0x40c6a0
jb 0x40c6a9
ja 0x40c69b
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
je 0x40c6aa
pop rdi
jb 0x40c6b8
outsd dx, dword [rsi]
jb 0x40c699
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rsp
push rsi
xor dword [rdx], esi
jne 0x40c6d6
jo 0x40c6d9
je 0x40c6aa
jbe 0x40c6d2
movsxd rsp, dword [rbp]
pop rdi
pop rdx
push rbx
je 0x40c6a4
xor ebx, dword [rdi + 0x53]
jo 0x40c6d6
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40c6e2
pop rdi
jo 0x40c6f5
jb 0x40c6e2
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x40c6c5
je 0x40c6f9
jb 0x40c6f8
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40c6d0
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40c717
push rax
jbe 0x40c728
jbe 0x40c6fa
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40c727
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40c744
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rdi + rbx*2], esi
pop r15
je 0x40c745
insb byte [rdi], dx
je 0x40c751
jb 0x40c733
push rdx
push r11
je 0x40c72c
je 0x40c76e
jo 0x40c75c
pop rdi
imul ebp, dword [rsi + 0x66], 0x5a5f006f
push rbx
je 0x40c734
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x40c758
cmp byte [rbp + 0x73], dl
je 0x40c758
jae 0x40c77d
push rbx
je 0x40c74c
xor al, 0x64
jne 0x40c78e
je 0x40c783
insb byte [rdi], dx
je 0x40c78f
push r11
xor byte [rdi + 0x45], bl
xor r8b, byte [rbp + 0x76]
add byte [rbp + 0x65], ch
insd dword [rdi], dx
jae 0x40c79f
je 0x40c77c
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x40c785
je 0x40c7b9
jb 0x40c7b8
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40c790
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40c7d7
push rax
jbe 0x40c7e8
jbe 0x40c7ba
xor byte [rbp + 0x76], r8b
add byte [rdi + 0x5f], bl
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul bp, word [rsi + 0x69], 0x5f00
pop rdx
cmp qword [rcx + 0x6e], r9
jo 0x40c809
je 0x40c7dc
imul ebp, dword [rbp + 0x39], 0x6c6c6966
outsb dx, byte [rsi]
jo 0x40c817
je 0x40c7e9
jbe 0x40c7a6
pop rdi
pop rdx
push rbx
je 0x40c7dd
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x40c801
xor dword [rax], esi
jne 0x40c831
jo 0x40c834
je 0x40c807
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x40c83a
je 0x40c82f
insb byte [rdi], dx
je 0x40c83b
push r11
xor byte [rdi + 0x45], bl
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rsp
push rsi
push rbx
je 0x40c81f
je 0x40c853
jb 0x40c852
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40c82a
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40c871
push rax
jbe 0x40c882
jbe 0x40c854
add byte [r15 + 0x5a], r11b
xor qword [rcx], r14
outsb dx, byte [rsi]
jo 0x40c891
je 0x40c862
jbe 0x40c88a
movsxd rsp, dword [rbp + 0x34]
jb 0x40c88b
imul rax, qword fs:[r13 + 0x45], 0x3974534e
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x73616158
jb 0x40c893
je 0x40c873
xor dword [rcx + 0x73], ebp
pop rdi
imul ebp, dword [rsi + 0x74], 0x61726765
insb byte [rdi], dx
push r12
pop rdi
xor eax, 0x756c6176
jae 0x40c8cc
push rbx
je 0x40c896
imul esi, dword [rbx + 0x5f], 0x6e676973
push r11
xor ebx, dword [rdi + 0x45]
xor eax, 0x756c6176
xor al, 0x74
jns 0x40c8e8
push r10
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
xor dword [rcx], esi
ja 0x40c8f7
imul esi, dword [rbp + 0x41], 0x6577736e
jb 0x40c8f8
push rdx
push rbx
je 0x40c8cc
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40c90b
movsxd rbx, dword [rdi + 0x73]
je 0x40c919
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40c914
je 0x40c929
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
add byte [r15 + 0x5f], r11b
insd dword [edi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x40c943
jb 0x40c946
pop rdi
pop rdi
add byte [rdi + 0x4a], bl
jbe 0x40c938
push rdx
imul esi, dword gs:[ebx + 0x74], 0x6c437265
jae 0x40c959
jae 0x40c8e9
pop rdi
pop rdx
push rbx
je 0x40c920
xor byte [rdi + 0x5f], bl
je 0x40c95b
jb 0x40c964
ja 0x40c956
jae 0x40c972
jae 0x40c96f
insd dword [rdi], dx
pop rdi
jb 0x40c973
outsd dx, dword [rsi]
jb 0x40c96d
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dword [rcx], esi
add byte [rdi + 0x5a], bl
push rsp
push rsi
push rbx
je 0x40c94e
xor ebx, dword [rdi + 0x53]
jo 0x40c980
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40c98c
pop rdi
jo 0x40c99f
jb 0x40c98c
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x40c96f
je 0x40c9a3
jb 0x40c9a2
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40c97a
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40c9c1
push rax
jbe 0x40c9d2
jbe 0x40c9a4
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40c9d1
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40c9ee
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
insb byte [rdi], dx
push rax
jbe 0x40c9cf
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x40ca18
jo 0x40ca1b
je 0x40c9fb
je 0x40ca1c
imul ebp, dword [rsi + 0x67], 0x72773331
imul esi, dword [rbp + 0x54], 0x7665446f
imul esp, dword [rbx + 0x65], 0x5f006a45
pop rdi
jae 0x40ca37
jb 0x40ca3b
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
xor dword [rdx], esi
jne 0x40ca56
jo 0x40ca59
je 0x40ca39
je 0x40ca5a
imul ebp, dword [rsi + 0x67], 0x76453144
add byte [rdi + 0x5f], bl
movsxd rdi, dword [rax + 0x61]
pop rdi
jb 0x40ca5d
je 0x40ca62
jb 0x40ca6b
ja 0x40ca3e
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40ca48
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rbx + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40ca6b
jbe 0x40ca9c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x40ca77
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40cab6
movsxd rbx, dword [rdi + 0x73]
je 0x40cac4
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40cabf
je 0x40cad4
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x4445455f
xor al, byte [rbp + 0x76]
add byte [rsi + 0x6f], ah
jo 0x40cae6
outsb dx, byte [rsi]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x6c5f5f00
imul esp, dword [rdx + 0x63], 0x6174735f
jb 0x40cb10
pop rdi
insd dword [rdi], dx
imul ebp, dword [rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x40cae6
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x40cb0a
cmp dword [rcx + 0x6e], ecx
jo 0x40cb3b
je 0x40cb0e
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x40cb41
je 0x40cb36
insb byte [rdi], dx
je 0x40cb42
push r11
xor byte [rdi + 0x45], bl
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40cb24
je 0x40cb58
jb 0x40cb57
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40cb2f
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40cb76
push rax
jbe 0x40cb87
jbe 0x40cb59
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rsp
push rbx
push rbx
je 0x40cb53
xor dword [rdi + 0x4d], ebx
jne 0x40cb9b
js 0x40cb89
jae 0x40cb93
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40cb97
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40cbb4
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
push rsp
xor qword [r8], rsi
jne 0x40cbcb
jo 0x40cbce
je 0x40cba1
imul ebp, dword [rbp], 0x534e5a5f
je 0x40cb9b
jbe 0x40cbcc
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40cba5
je 0x40cbd9
jb 0x40cbd8
push rbx
push r11
xor byte [rdi + 0x45], bl
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rsp
xor qword [r10], rsi
jne 0x40cbff
jo 0x40cc02
je 0x40cbe2
je 0x40cc03
imul ebp, dword [rsi + 0x67], 0x635f5f00
js 0x40cbfb
pop rdi
je 0x40cc03
js 0x40cc09
je 0x40cbe2
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x40cbe7
xor ebx, dword [rdi + 0x53]
jo 0x40cc19
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40cc25
pop rdi
jo 0x40cc38
jb 0x40cc25
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x40cc08
je 0x40cc3c
jb 0x40cc3b
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40cc13
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40cc5a
push rax
jbe 0x40cc6b
jbe 0x40cc3d
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40cc6a
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40cc87
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
xor al, 0x77
outsd dx, dword [rsi]
jb 0x40cc97
jbe 0x40cc2e
pop rdi
pop rdx
push rsp
push rsi
xor dword [rdx], esi
jne 0x40ccab
jo 0x40ccae
je 0x40cc8e
je 0x40ccaf
imul ebp, dword [rsi + 0x67], 0x4e5a5f00
push rbx
je 0x40cc7e
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40ccbd
movsxd rbx, dword [rdi + 0x73]
je 0x40cccb
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40ccc6
je 0x40ccdb
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [rax], esi
pop rdi
pop r15
jb 0x40cce2
jo 0x40cceb
movsxd rsp, dword [rbp + 0x45]
insd dword [rdi], dx
insd dword [rdi], dx
push rax
movsxd rbp, dword [r13 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rsi + 0x67], ah
je 0x40cd12
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x40cce9
je 0x40cd1d
jb 0x40cd1c
xor dh, byte fs:[rax]
push 0x77647261
jb 0x40cd28
pop rdi
movsxd rbp, dword [rdi + 0x6e]
movsxd rsi, dword [rbp + 0x72]
jb 0x40cd31
outsb dx, byte [rsi]
movsxd rdi, dword [rcx + 0x45]
jbe 0x40cd12
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dword [rdi], esi
add byte [rdi + 0x5a], bl
push rsp
xor qword [r10], rsi
jne 0x40cd5f
jo 0x40cd62
je 0x40cd33
jbe 0x40cd5b
movsxd rsp, dword [rbp]
pop rdi
pop rdx
push rbx
je 0x40cd33
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rsp + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
push r12
pop r15
jb 0x40cd88
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x40cd6d
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x40cd91
cmp dword [rcx + 0x6e], ecx
jo 0x40cdc2
je 0x40cd95
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x40cdc8
je 0x40cdbd
insb byte [rdi], dx
je 0x40cdc9
push r11
xor byte [rdi + 0x45], bl
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rsp
push r11
je 0x40cda7
pop rdi
push rbx
jo 0x40cdda
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40cde6
pop rdi
jae 0x40cdec
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40cdf0
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40ce0d
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
push rsp
push rsi
cmp dword [rcx + 0x6e], ecx
jo 0x40ce25
je 0x40cdf8
imul ebp, dword [rbp], 0x5f4f495f
jae 0x40ce30
imul ebp, dword fs:[rsi + 0x5f], 0x64657375
add byte [rdi + 0x5a], bl
push rsp
push rsi
xor dword [rax], esi
jne 0x40ce42
jo 0x40ce45
je 0x40ce18
imul ebp, dword [rbp], 0x314e5a5f
xor byte [rdi + 0x75], cl
je 0x40ce4f
jne 0x40ce55
imul r13d, dword [rbp + r12*2 + 0x44], 0x764530
jae 0x40ce60
jb 0x40ce5a
outsb dx, byte gs:[rsi]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x545a5f00
push rbx
xor dword [rdx], esi
jne 0x40ce7b
jo 0x40ce7e
je 0x40ce5e
je 0x40ce7f
imul ebp, dword [rsi + 0x67], 0x73657400
je 0x40ce5f
outsb dx, byte [rsi]
js 0x40ce1b
pop rdi
push r12
pop r15
jb 0x40ce87
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5f], bl
je 0x40ce9c
pop rdi
jae 0x40ceb2
jb 0x40ceb5
add byte [rax + 0x74], dh
push 0x64616572
pop rdi
movsxd rsi, dword [rdx + 0x65]
je 0x40ceb5
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x545a5f00
push rsi
push rbx
je 0x40ce9c
je 0x40ced0
jb 0x40cecf
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x40cedf
pop rdi
jae 0x40cedd
add byte [r15 + 0x5a], r11b
push rsp
cmp qword [r9 + 0x6e], rcx
jo 0x40cef8
je 0x40cecb
imul ebp, dword [rbp], 0x74736574
outsd dx, dword [rsi]
jne 0x40ceff
je 0x40ce93
pop rdi
pop rdx
push rsp
push r11
je 0x40cecb
xor dword [rdi + 0x4d], ebx
jne 0x40cf13
js 0x40cf01
jae 0x40cf0b
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40cf0f
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40cf2c
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
xor dword [rdx], esi
jae 0x40cf31
je 0x40cf12
insb byte [rdi], dx
imul ebp, dword [rbp + 0x69], 0x50726574
movsxd rax, dword [r8]
pop rdi
pop rdx
push rsp
push rsi
xor qword [rax], r14
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
imul esi, dword [rsi + 0x31], 0x5f5f3731
movsxd rbp, dword [rcx + 0x73]
jae 0x40cf54
je 0x40cf70
jo 0x40cf5e
pop rdi
imul ebp, dword [rsi + 0x66], 0x4040456f
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40cf48
jbe 0x40cf79
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40cf52
je 0x40cf86
jb 0x40cf85
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x40cf9f
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x40cfb7
push rdx
jbe 0x40cfbb
jbe 0x40cf8f
jo 0x40cf9c
push rsp
pop rdi
add byte [rcx + 0x6e], ch
jo 0x40cfc9
je 0x40cf56
pop rdi
pop rdx
push rsp
push rbx
push rbx
je 0x40cf94
je 0x40cfc8
jb 0x40cfc7
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40cf9f
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40cfe6
push rax
jbe 0x40cff7
jbe 0x40cfc9
add byte [r9 + 0x6e], r13b
jo 0x40d001
je 0x40cfdb
jne 0x40d004
js 0x40cf93
pop rdi
pop rdx
push rsp
push rbx
cmp dword [rcx + 0x6e], ecx
jo 0x40d011
je 0x40cfe4
imul ebp, dword [rbp], 0x53545a5f
push rbx
je 0x40cfda
pop rdi
push rbx
jo 0x40d00d
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40d019
pop rdi
jae 0x40d01f
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40d023
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40d040
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
push rsp
push rbx
je 0x40d018
je 0x40d04c
jb 0x40d04b
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40d023
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40d06a
push rax
jbe 0x40d07b
jbe 0x40d04d
add byte [r15 + 0x5f], r11b
push rsp
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40d054
je 0x40d088
jb 0x40d087
xor al, 0x6a
outsd dx, dword [rsi]
imul ebp, dword [rsi + 0x45], 0x47404076
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dword [rcx], esi
add byte [rdi + 0x5a], bl
push rbx
je 0x40d078
je 0x40d0ac
jb 0x40d0ab
xor dword fs:[rip + 0x735f4d5f], esi
je 0x40d0b1
jb 0x40d0c6
pop rdi
je 0x40d0bd
jb 0x40d0bc
push r11
je 0x40d08e
xor byte [rbx + 0x68], dh
jb 0x40d0c8
pop rdi
jo 0x40d0db
jb 0x40d0b2
push rbx
pop rdi
xor dword [rax], esi
pop rdi
insd dword [rdi], dx
jo 0x40d0df
pop rdi
jae 0x40d0dd
push r8
jbe 0x40d0f4
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
ja 0x40d107
imul esi, dword [rbp + 0x6c], 0x5249496e
xor dword [rip + 0x64634b5f], esi
jbe 0x40d0ec
jo 0x40d0f9
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40d0eb
je 0x40d119
jb 0x40d123
imul ebp, dword [rsi + 0x61], 0x40766574
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rsp
push r11
je 0x40d103
xor ebx, dword [rdi + 0x53]
jo 0x40d135
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40d141
pop rdi
jo 0x40d154
jb 0x40d141
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x40d124
je 0x40d158
jb 0x40d157
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40d12f
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40d176
push rax
jbe 0x40d187
jbe 0x40d159
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40d186
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40d1a3
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5f], bl
jae 0x40d1b1
pop rdi
push 0x6c646e61
add byte gs:[rdi + 0x5a], bl
push rsp
push rbx
xor dword [rdx], esi
jne 0x40d1c7
jo 0x40d1ca
je 0x40d19b
jbe 0x40d1c3
movsxd rsp, dword [rbp]
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul ebp, dword [rsi + 0x69], 0x5a5f0074
push rsp
push rbx
push rbx
je 0x40d1a6
xor ebx, dword [rdi + 0x53]
jo 0x40d1d8
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40d1e4
pop rdi
jo 0x40d1f7
jb 0x40d1e4
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x40d1c7
je 0x40d1fb
jb 0x40d1fa
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40d1d2
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40d219
push rax
jbe 0x40d22a
jbe 0x40d1fc
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40d229
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40d246
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
add byte [rdi + 0x5a], bl
push rbx
je 0x40d21d
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40d25c
movsxd rbx, dword [rdi + 0x73]
je 0x40d26a
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40d265
je 0x40d27a
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x73
ja 0x40d27a
jo 0x40d260
push rdx
push rbx
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
xor qword [rdx], r14
jne 0x40d2ac
jo 0x40d2af
je 0x40d28f
je 0x40d2b0
imul ebp, dword [rsi + 0x67], 0x76453044
add byte [rdi + 0x5a], bl
push rsp
push rbx
push rbx
je 0x40d27e
cmp dword [rdi + 0x53], ebx
jo 0x40d2b1
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x73
push 0x64657261
pop rdi
je 0x40d2c1
add byte [edi + 0x5a], bl
push rbx
je 0x40d29e
je 0x40d2d2
jb 0x40d2d1
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40d2a9
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40d2f0
push rax
jbe 0x40d301
jbe 0x40d2d3
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5f], bl
movsxd rdi, dword [rax + 0x61]
pop rdi
jo 0x40d312
jb 0x40d304
pop rdi
jbe 0x40d30b
jb 0x40d318
jne 0x40d307
insb byte [rdi], dx
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
xor qword [rdx], r14
jne 0x40d330
jo 0x40d333
je 0x40d313
je 0x40d334
imul ebp, dword [rsi + 0x67], 0x76453244
add byte [rdi + 0x5a], bl
push rbx
je 0x40d301
pop rdi
push rbx
jo 0x40d334
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40d340
pop rdi
jae 0x40d346
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40d34a
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40d367
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rax], esi
pop rdi
pop r15
jb 0x40d36c
insb byte [rdi], dx
jae 0x40d371
jbe 0x40d30f
insd dword [rdi], dx
insd dword [rdi], dx
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40d37b
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x65726600
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x375a5f00
jae 0x40d3a1
je 0x40d384
imul ebp, dword [rsp + rbp*2 + 0x63], 0x4e5a5f00
xor dword [rax], esi
jne 0x40d3bf
jo 0x40d3c2
je 0x40d395
imul ebp, dword [rbp + 0x44], 0x764532
pop rdi
pop rdx
jae 0x40d3c1
je 0x40d3a0
jae 0x40d3c6
push 0
pop rdi
pop rdi
jae 0x40d3db
pop rdi
jae 0x40d3df
jb 0x40d3e2
add byte [rbx + 0x6c], ah
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x40]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x545a5f00
push rsi
xor qword [rax], r14
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
imul esi, dword [rsi + 0x31], 0x5f5f3032
jae 0x40d402
pop rdi
movsxd rbp, dword [rcx + 0x73]
jae 0x40d3ff
je 0x40d41b
jo 0x40d409
pop rdi
imul ebp, dword [rsi + 0x66], 0x4040456f
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rsp
push rbx
je 0x40d3f5
je 0x40d429
jb 0x40d428
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x40d438
pop rdi
jae 0x40d436
add byte [r15 + 0x5f], r11b
jae 0x40d44b
movsxd rbp, dword [rbx + 0x5f]
movsxd rbp, dword [rax + 0x6b]
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor al, 0
pop rdi
pop rdx
push rsp
push rbx
push rbx
je 0x40d42d
je 0x40d461
jb 0x40d460
xor dword fs:[rax], esi
pop rdi
insd dword [rdi], dx
jo 0x40d470
pop rdi
jae 0x40d46e
add byte [r15 + 0x5a], r11b
push rsp
xor qword [r9], rsi
outsb dx, byte [rsi]
jo 0x40d48a
je 0x40d45b
jbe 0x40d483
movsxd rsp, dword [rbp]
pop rdi
pop rdx
push rbx
je 0x40d454
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x40d478
xor dword [rax], esi
jne 0x40d4a8
jo 0x40d4ab
je 0x40d47e
imul ebp, dword [rbp + 0x53], 0x64343174
jne 0x40d4b1
je 0x40d4a6
insb byte [rdi], dx
je 0x40d4b2
push r11
xor byte [rdi + 0x45], bl
xor dword [rbp + 0x76], r8d
add byte [rbp + 0x65], ch
insd dword [rdi], dx
movsxd rbp, dword [rbp + 0x70]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x545a5f00
push rbx
xor dword [rax], esi
jne 0x40d4e9
jo 0x40d4ec
je 0x40d4bf
imul ebp, dword [rbp], 0x534e5a5f
je 0x40d4ba
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40d4f9
movsxd rbx, dword [rdi + 0x73]
je 0x40d507
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40d502
je 0x40d517
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp dword [rdi + 0x4d], ebx
pop rdi
jo 0x40d529
outsb dx, byte gs:[rsi]
push r8
movsxd rbp, dword [r13 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x40d50a
xor ebx, dword [rdi + 0x53]
jo 0x40d53c
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40d548
pop rdi
jo 0x40d55b
jb 0x40d548
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x40d52b
je 0x40d55f
jb 0x40d55e
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40d536
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40d57d
push rax
jbe 0x40d58e
jbe 0x40d560
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40d58d
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40d5aa
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rax], esi
pop rdi
pop r15
imul esi, dword fs:[rbx + 0x70], 0x4565736f
jbe 0x40d552
movsxd rbp, dword [rdi + rbp*2 + 0x73]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x375a5f00
insd dword [rdi], dx
js 0x40d5c1
jae 0x40d5e4
jbe 0x40d572
pop rdi
pop rdx
push rbx
je 0x40d5a9
xor byte [rbp + 0x6e], dh
imul esi, dword [rcx + 0x75], 0x74705f65
jb 0x40d5cd
cmp byte [rbp + 0x73], dl
je 0x40d5cd
jae 0x40d5f2
push rbx
je 0x40d5c1
xor al, 0x64
jne 0x40d603
je 0x40d5f8
insb byte [rdi], dx
je 0x40d604
push r11
xor byte [rdi + 0x45], bl
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x75], ch
je 0x40d61e
jne 0x40d624
add byte [rdi + 0x5f], bl
movsxd rdi, dword [rax + 0x61]
pop rdi
outsb dx, byte gs:[rsi]
pop rdi
movsxd rsp, dword [rcx + 0x74]
movsxd rbp, dword [rax + 0x40]
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
ja 0x40d644
imul esi, dword [rbp + 0x6c], 0x524a496e
xor dword [rip + 0x64634b5f], esi
jbe 0x40d629
jo 0x40d636
push rsp
pop rdi
add byte [rbx + 0x74], dh
jb 0x40d662
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x315a5f00
xor dh, byte [rbx + 0x65]
je 0x40d656
jb 0x40d66d
movsxd rbp, dword [rcx + 0x73]
imul ebp, dword [rdi + 0x6e], 0x5a5f006a
xor qword [rax], r14
jne 0x40d68c
jo 0x40d68f
je 0x40d662
imul ebp, dword [rbp + 0x31], 0x69727733
je 0x40d68b
push rsp
outsd dx, dword [rsi]
jbe 0x40d695
movsxd rsp, dword [rbp + 0x45]
push 0
pop rdi
pop rdx
push rsp
push rbx
xor dword [rcx], esi
outsb dx, byte [rsi]
jo 0x40d6b0
je 0x40d681
jbe 0x40d6a9
movsxd rsp, dword [rbp]
pop rdi
pop rdi
jo 0x40d6bb
push 0x64616572
pop rdi
imul esp, dword [rbp + 0x79], 0x5f
movsxd rsi, dword [rdx + 0x65]
je 0x40d6bc
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x635f5f00
js 0x40d6cb
pop rdi
imul ebp, dword gs:[esi + 0x5f], 0x63746163
push 0x58434040
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40d6bb
xor ebx, dword [rdi + 0x53]
jo 0x40d6ed
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40d6f9
pop rdi
jo 0x40d70c
jb 0x40d6f9
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x40d6dc
je 0x40d710
jb 0x40d70f
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40d6e7
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40d72e
push rax
jbe 0x40d73f
jbe 0x40d711
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40d73e
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40d75b
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor r8b, byte [rbp + 0x76]
add byte [rsi + 0x77], ah
jb 0x40d766
je 0x40d764
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x68747000
jb 0x40d777
pop rdi
insd dword [rdi], dx
jne 0x40d78c
js 0x40d77a
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x40]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x40d76a
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40d7a9
movsxd rbx, dword [rdi + 0x73]
je 0x40d7b7
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40d7b2
je 0x40d7c7
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp dword [rdi + 0x4d], ebx
pop rdi
insd dword [rdi], dx
jne 0x40d7dd
je 0x40d7d1
insd dword [rdi], dx
insd dword [rdi], dx
push rax
movsxd rbp, dword [r13 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x40d7c0
jbe 0x40d7f1
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40d7ca
je 0x40d7fe
jb 0x40d7fd
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40d7df
xor ebx, dword [rdi + 0x53]
jo 0x40d811
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40d81d
pop rdi
jo 0x40d830
jb 0x40d81d
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x40d800
je 0x40d834
jb 0x40d833
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40d80b
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40d852
push rax
jbe 0x40d863
jbe 0x40d835
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40d862
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40d87f
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rax], esi
pop rdi
pop r15
jae 0x40d895
jb 0x40d892
jns 0x40d86a
jbe 0x40d827
pop rdi
je 0x40d88e
add byte [rdi + 0x5f], bl
js 0x40d8ab
pop rdi
jo 0x40d89b
jb 0x40d8ab
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
imul esi, dword [rcx + rdi*2 + 0x5f], 0x40403076
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40d88b
jbe 0x40d8bc
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40d895
je 0x40d8c9
jb 0x40d8c8
push rbx
push r11
xor byte [rdi + 0x45], bl
xor dword [r9], r15d
pop rdi
pop r15
insd dword [rdi], dx
jo 0x40d8e2
movsxd rsp, dword [rbp + 0x5f]
movsxd rbp, dword [rbx + 0x5f]
jne 0x40d8fa
push r10
jbe 0x40d8fe
jbe 0x40d8d2
jo 0x40d8df
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40d8cf
jbe 0x40d900
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push rbx
je 0x40d8db
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40d91a
movsxd rbx, dword [rdi + 0x73]
je 0x40d928
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40d923
je 0x40d938
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push r11
push r11
xor eax, 0x3145455f
pop rdi
pop r15
jne 0x40d953
je 0x40d948
jo 0x40d95c
outsb dx, byte gs:[rsi]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
outsb dx, byte [rsi]
ja 0x40d964
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40d941
je 0x40d975
jb 0x40d974
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40d94c
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40d993
push rax
jbe 0x40d9a4
jbe 0x40d976
pop rdi
pop r15
jb 0x40d9ae
outsb dx, byte [rsi]
jbe 0x40d93d
pop rdi
push rbp
outsb dx, byte [rsi]
ja 0x40d9ab
outsb dx, byte [rsi]
pop rdi
push rdx
jae 0x40d9be
insd dword [rdi], dx
pop r15
xor ebp, dword [rsi]
xor byte [rax], al
pop rdi
pop rdx
push rbx
je 0x40d98d
xor ebx, dword [rdi + 0x53]
jo 0x40d9bf
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40d9cb
pop rdi
jo 0x40d9de
jb 0x40d9cb
imul ebp, dword [rsi + 0x70], 0x6563616c
push rbx
je 0x40d9ae
je 0x40d9e2
jb 0x40d9e1
xor eax, 0x706d495f
insb byte [rdi], dx
push r11
je 0x40d9b9
xor bl, byte [rdi + 0x42]
imul ebp, dword [rsi + 0x64], 0x6d69735f
jo 0x40da00
push rax
jbe 0x40da11
jbe 0x40d9e3
push r11
push r11
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40da10
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40da2d
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor byte [rbp + 0x76], r8b
add byte [rdi + 0x5a], bl
outsb dx, byte [rsi]
jae 0x40da49
jb 0x40da17
xor eax, 0x31787863
xor dword [rax], eax
jo 0x40da52
push 0x64616572
pop rdi
insd dword [rdi], dx
jne 0x40da5b
js 0x40da49
jne 0x40da5a
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x40]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x40da35
pop rdi
push rbx
jo 0x40da68
movsxd rbp, dword [rdi + 0x75]
outsb dx, byte [rsi]
je 0x40da74
pop rdi
jae 0x40da7a
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40da7e
movsxd rdi, dword [rax + 0x78]
xor dword [rdx], esi
pop rdi
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x40da9b
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x45453245
xor dword [rax], esi
pop rdi
pop r15
jae 0x40dab1
jb 0x40daae
jns 0x40da86
jbe 0x40da43
insd dword [rdi], dx
imul ebp, dword [rsi], 0x756c6666
jae 0x40dab6
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x676f6c00
jae 0x40da61
add byte [rsi], ch
jae 0x40dade
insd dword [rdi], dx
je 0x40dac9
add byte [rsi], ch
jae 0x40dae1
jb 0x40dae3
add byte [rsi], ch
jae 0x40dadd
jae 0x40daeb
jb 0x40daed
add byte [rsi], ch
imul ebp, dword [rsi + 0x74], 0x707265
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x40daee
sub rax, 0x676174
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x40dafc
outsb dx, byte cs:[esi]
jne 0x40daca
jne 0x40db08
insb byte [rdi], dx
sub eax, 0x2e006469
outsb dx, byte [esi]
jne 0x40dad8
push 0x687361
jns 0x40db21
jae 0x40db2e
insd dword [rdi], dx
add byte [rsi], ch
jns 0x40db29
jae 0x40db31
jb 0x40dabf
outsb dx, byte cs:[esi]
jne 0x40daf2
jbe 0x40db2b
jb 0x40db3b
imul ebp, dword [rdi + 0x6e], 0x6e672e00
jne 0x40daff
jbe 0x40db38
jb 0x40db48
imul ebp, dword [rdi + 0x6e], 0x2e00725f
jb 0x40db43
insb byte [rdi], dx
jns 0x40db52
add byte [rsi], ch
jb 0x40db4d
insb byte [rdi], dx
jo 0x40db59
je 0x40daef
imul ebp, dword cs:[rsi + 0x69], 0x702e0074
insb byte [rdi], dx
je 0x40db28
outsd dx, dword [esi]
je 0x40dafe
je 0x40db66
js 0x40db77
add byte [rsi], ch
imul bp, word [rsi + 0x69], 0x2e00
jb 0x40db7c
je 0x40db72
add byte [rsi], ch
push 0x6172665f
insd dword [rdi], dx
pop rdi
push 0x2e007264
push 0x6172665f
insd dword [rdi], dx
add byte gs:[rsi], ch
movsxd rsp, dword [ebx + 0x5f]
js 0x40db95
jo 0x40dba9
pop rdi
je 0x40db99
insb byte [rdi], dx
add byte gs:[rsi], ch
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40dba7
jns 0x40db48
imul bp, word cs:[rsi + 0x69], 0x615f
jb 0x40dbc3
jns 0x40db54
push 0x63
jb 0x40db59
jns 0x40dbcb
insd dword [rdi], dx
imul esp, dword [rbx], 0x746f672e
jo 0x40dbd5
je 0x40db6b
je 0x40dbd1
add byte [rsi], ch
jae 0x40dbe8
add byte [rsi], ch
movsxd rbp, dword [rdi + 0x6d]
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x40db7f
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add dh, dh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rax + 2], bl
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x40dcd4
add byte [rax], al
add byte [rax], al
add al, ah
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + 4], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 7], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
popfq
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bh
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
dec byte [rbx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xc], ah
add byte [rax], al
add byte [rax], al
add byte [rax + 0xc], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rax], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jp 0x40ddc2
add byte [rax], al
add al, 0
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rip + 0x40], cl
add byte [rax], al
xor byte [rip], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x40000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x400d], dl
add byte [rax], al
add byte [rax + 0xd], dl
add byte [rax], al
add al, al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rip + 0x19000000], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x11], dl
add byte [rax], al
add byte [rax], al
add byte [rax + 0x11], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x11], dh
add byte [rax], al
add byte [rax], al
add byte [rax + 0x11], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x10000], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x1000000], bl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], dl
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x7d], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000000], ah
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rdx*4 + 0x40], ah
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
xchg eax, ecx
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
xchg eax, ecx
add byte [rax], al
add byte [rax], al
add al, al
xchg eax, ecx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov cl, 0
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rcl byte [rdi + 0x40], 0
add al, al
xchg eax, edi
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rsp
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
cdq
add byte [rax], al
add byte [rax], al
add byte [rax], bl
cdq
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
leave
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rdi + 2], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fild dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
lodsd eax, dword [rsi]
add byte [rax], al
add byte [rax], al
add al, bl
lodsd eax, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0, eax
add byte [rax], al
sldt word [rax]
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
lodsd eax, dword [rsi]
add byte [rax], al
add byte [rax], al
add al, ch
lodsd eax, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
lodsd eax, dword [rsi]
add byte [rax], al
add byte [rax], al
add al, dh
lodsd eax, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
lodsd eax, dword [rsi]
add byte [rax], al
add byte [rax], al
add al, bh
lodsd eax, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], bl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
scasd eax, dword [rdi]
add byte [rax], al
add byte [rax], al
add al, bh
scasd eax, dword [rdi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rcx], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x60], dh
add byte [rax], al
add byte [rax], dh
add byte [rax], al
pop rax
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add dword [rax], eax
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax - 0x4f], bl
add byte [rax], al
add byte [rax], al
add byte [rax - 0x4f], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rcx], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rcx + 0x60], 0
add byte [rax - 0x4f], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add qword [rax], rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x1000001], dl
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax - 0x4f], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fiadd dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xb1], ah
add byte [rax], al
add byte [rax + 0x12], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x8000000], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
ret
add byte [rax], al
add byte [rax], al
add byte [rax], al
jns 0x40e378
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
