xor ebp, ebp
mov r9, rdx
pop rsi
mov rdx, rsp
and rsp, 0xfffffffffffffff0
push rax
push rsp
mov r8, sym.__libc_csu_fini
mov rcx, sym.__libc_csu_init
mov rdi, sym.main
call sym.imp.__libc_start_main
hlt
nop word [rax + rax]
mov eax, 0x6040cf
push rbp
sub rax, obj.__TMC_END__
cmp rax, 0xe
mov rbp, rsp
jbe 0x400ba0
mov eax, 0
test rax, rax
je 0x400ba0
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop word [rax + rax]
pop rbp
ret
nop dword [rax]
nop word cs:[rax + rax]
mov esi, obj.__TMC_END__
push rbp
sub rsi, obj.__TMC_END__
sar rsi, 3
mov rbp, rsp
mov rax, rsi
shr rax, 0x3f
add rsi, rax
sar rsi, 1
je 0x400be8
mov eax, 0
test rax, rax
je 0x400be8
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop dword [rax]
pop rbp
ret
nop word [rax + rax]
cmp byte [rip + 0x2034f9], 0
jne 0x400c0a
push rbp
mov rbp, rsp
call sym.deregister_tm_clones
pop rbp
mov byte [rip + 0x2034e6], 1
ret
nop dword [rax]
mov edi, obj.__JCR_LIST__
cmp qword [rdi], 0
jne 0x400c20
jmp sym.register_tm_clones
nop dword [rax]
mov eax, 0
test rax, rax
je 0x400c1b
push rbp
mov rbp, rsp
call rax
pop rbp
jmp sym.register_tm_clones
push rbp
mov rbp, rsp
sub rsp, 0x30
mov dword [rbp - 0x24], edi
mov dword [rbp - 0x28], esi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov dword [rbp - 0x10], 1
mov eax, dword [rip + 0x226be0]
cmp dword [rbp - 0x10], eax
jg 0x400c81
mov eax, dword [rbp - 0x10]
cdqe
movsd xmm0, qword [rip + 0x1f36]
movsd qword [rax*8 + obj.dis], xmm0
add dword [rbp - 0x10], 1
jmp 0x400c5a
mov edx, 0x1b8
mov esi, 0
mov edi, obj.pd
call sym.imp.memset
mov eax, dword [rbp - 0x24]
cdqe
pxor xmm0, xmm0
movsd qword [rax*8 + obj.dis], xmm0
lea rax, [rbp - 0x24]
mov rsi, rax
mov edi, obj.Q
call sym.std::queue_int_std::deque_int_std::allocator_int___::push
mov eax, dword [rbp - 0x24]
cdqe
mov dword [rax*4 + obj.pd], 1
mov edi, obj.Q
call sym.std::queue_int_std::deque_int_std::allocator_int___::empty
xor eax, 1
test al, al
je 0x400e7c
mov edi, obj.Q
call sym.std::queue_int_std::deque_int_std::allocator_int___::front
mov eax, dword [rax]
mov dword [rbp - 0xc], eax
mov edi, obj.Q
call sym.std::queue_int_std::deque_int_std::allocator_int___::pop
mov dword [rbp - 0x14], 1
mov edx, dword [rbp - 0x14]
mov eax, dword [rip + 0x226b3a]
cmp edx, eax
jg 0x400e67
mov eax, dword [rbp - 0x14]
cdqe
mov edx, dword [rbp - 0xc]
movsxd rdx, edx
imul rdx, rdx, 0x6e
add rax, rdx
mov rax, qword [rax*8 + obj.d]
pxor xmm1, xmm1
cvtsi2sd xmm1, rax
mov eax, dword [rbp - 0xc]
cdqe
mov eax, dword [rax*4 + obj.e]
pxor xmm0, xmm0
cvtsi2sd xmm0, eax
movsd xmm2, qword [rip + 0x203373]
addsd xmm0, xmm2
ucomisd xmm0, xmm1
jb 0x400e59
mov eax, dword [rbp - 0x14]
cdqe
movsd xmm3, qword [rax*8 + obj.dis]
mov eax, dword [rbp - 0xc]
cdqe
movsd xmm1, qword [rax*8 + obj.dis]
movsd xmm0, qword [rip + 0x203341]
addsd xmm1, xmm0
mov eax, dword [rbp - 0x14]
cdqe
mov edx, dword [rbp - 0xc]
movsxd rdx, edx
imul rdx, rdx, 0x6e
add rax, rdx
mov rax, qword [rax*8 + obj.d]
pxor xmm0, xmm0
cvtsi2sd xmm0, rax
mov eax, dword [rbp - 0xc]
cdqe
mov eax, dword [rax*4 + obj.ss]
pxor xmm2, xmm2
cvtsi2sd xmm2, eax
divsd xmm0, xmm2
addsd xmm0, xmm1
ucomisd xmm3, xmm0
jbe 0x400e59
mov edx, dword [rbp - 0x14]
mov eax, dword [rbp - 0xc]
cdqe
movsd xmm2, qword [rax*8 + obj.dis]
mov eax, dword [rbp - 0x14]
cdqe
mov ecx, dword [rbp - 0xc]
movsxd rcx, ecx
imul rcx, rcx, 0x6e
add rax, rcx
mov rax, qword [rax*8 + obj.d]
pxor xmm0, xmm0
cvtsi2sd xmm0, rax
mov eax, dword [rbp - 0xc]
cdqe
mov eax, dword [rax*4 + obj.ss]
pxor xmm1, xmm1
cvtsi2sd xmm1, eax
divsd xmm0, xmm1
addsd xmm0, xmm2
movsxd rax, edx
movsd qword [rax*8 + obj.dis], xmm0
mov eax, dword [rbp - 0x14]
cdqe
mov eax, dword [rax*4 + obj.pd]
test eax, eax
jne 0x400e59
lea rax, [rbp - 0x14]
mov rsi, rax
mov edi, obj.Q
call sym.std::queue_int_std::deque_int_std::allocator_int___::push
mov eax, dword [rbp - 0x14]
cdqe
mov dword [rax*4 + obj.pd], 1
mov eax, dword [rbp - 0x14]
add eax, 1
mov dword [rbp - 0x14], eax
jmp 0x400cfd
mov eax, dword [rbp - 0xc]
cdqe
mov dword [rax*4 + obj.pd], 0
jmp 0x400cc8
mov eax, dword [rbp - 0x28]
cdqe
movsd xmm0, qword [rax*8 + obj.dis]
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x400e9e
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov esi, obj.n
mov edi, 0x402b7a
mov eax, 0
call sym.imp.scanf
mov esi, obj.q
mov edi, 0x402b7a
mov eax, 0
call sym.imp.scanf
mov edx, 0x17a20
mov esi, 0x3f
mov edi, obj.d
call sym.imp.memset
mov dword [rbp - 0x28], 1
mov eax, dword [rip + 0x226940]
cmp dword [rbp - 0x28], eax
jg 0x400f3c
mov eax, dword [rbp - 0x28]
cdqe
shl rax, 2
lea rdx, [rax + obj.ss]
mov eax, dword [rbp - 0x28]
cdqe
shl rax, 2
add rax, obj.e
mov rsi, rax
mov edi, str._d_d
mov eax, 0
call sym.imp.scanf
add dword [rbp - 0x28], 1
jmp 0x400efa
mov dword [rbp - 0x24], 1
mov eax, dword [rip + 0x2268f7]
cmp dword [rbp - 0x24], eax
jg 0x401015
mov eax, dword [rbp - 0x24]
cdqe
imul rax, rax, 0x378
add rax, obj.d
mov qword [rax], 0
mov dword [rbp - 0x20], 1
mov eax, dword [rip + 0x2268c8]
cmp dword [rbp - 0x20], eax
jg 0x40100c
mov eax, dword [rbp - 0x20]
movsxd rdx, eax
mov eax, dword [rbp - 0x24]
cdqe
imul rax, rax, 0x6e
add rax, rdx
shl rax, 2
add rax, obj.b
mov rsi, rax
mov edi, 0x402b7a
mov eax, 0
call sym.imp.scanf
mov eax, dword [rbp - 0x20]
cdqe
mov edx, dword [rbp - 0x24]
movsxd rdx, edx
imul rdx, rdx, 0x6e
add rax, rdx
mov eax, dword [rax*4 + obj.b]
cmp eax, -1
je 0x401003
mov eax, dword [rbp - 0x20]
cdqe
mov edx, dword [rbp - 0x24]
movsxd rdx, edx
imul rdx, rdx, 0x6e
add rax, rdx
mov eax, dword [rax*4 + obj.b]
cdqe
mov edx, dword [rbp - 0x20]
movsxd rdx, edx
mov ecx, dword [rbp - 0x24]
movsxd rcx, ecx
imul rcx, rcx, 0x6e
add rdx, rcx
mov qword [rdx*8 + obj.d], rax
add dword [rbp - 0x20], 1
jmp 0x400f72
add dword [rbp - 0x24], 1
jmp 0x400f43
mov dword [rbp - 0x1c], 1
mov eax, dword [rip + 0x22681e]
cmp dword [rbp - 0x1c], eax
jg 0x4010f7
mov dword [rbp - 0x18], 1
mov eax, dword [rip + 0x226808]
cmp dword [rbp - 0x18], eax
jg 0x4010ee
mov dword [rbp - 0x14], 1
mov eax, dword [rip + 0x2267f2]
cmp dword [rbp - 0x14], eax
jg 0x4010e5
mov eax, dword [rbp - 0x14]
movsxd rdx, eax
mov eax, dword [rbp - 0x18]
cdqe
imul rax, rax, 0x6e
add rax, rdx
shl rax, 3
lea rdx, [rax + obj.d]
mov eax, dword [rbp - 0x1c]
cdqe
mov ecx, dword [rbp - 0x18]
movsxd rcx, ecx
imul rcx, rcx, 0x6e
add rax, rcx
mov rcx, qword [rax*8 + obj.d]
mov eax, dword [rbp - 0x14]
cdqe
mov esi, dword [rbp - 0x1c]
movsxd rsi, esi
imul rsi, rsi, 0x6e
add rax, rsi
mov rax, qword [rax*8 + obj.d]
add rax, rcx
mov qword [rbp - 0x10], rax
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::min_longlong_
mov rax, qword [rax]
mov edx, dword [rbp - 0x14]
movsxd rdx, edx
mov ecx, dword [rbp - 0x18]
movsxd rcx, ecx
imul rcx, rcx, 0x6e
add rdx, rcx
mov qword [rdx*8 + obj.d], rax
add dword [rbp - 0x14], 1
jmp 0x401048
add dword [rbp - 0x18], 1
jmp 0x401032
add dword [rbp - 0x1c], 1
jmp 0x40101c
mov eax, dword [rip + 0x226adb]
test eax, eax
je 0x40114a
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x2c]
mov rsi, rax
mov edi, str._d_d
mov eax, 0
call sym.imp.scanf
mov edx, dword [rbp - 0x10]
mov eax, dword [rbp - 0x2c]
mov esi, edx
mov edi, eax
call sym.getans
mov edi, str._.11lf
mov eax, 1
call sym.imp.printf
mov eax, dword [rip + 0x226a99]
sub eax, 1
mov dword [rip + 0x226a90], eax
jmp 0x4010f7
mov edi, 0xa
call sym.imp.putchar
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x401169
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rip + 0x202f57]
mov rdx, rax
mov esi, 0x402b8a
mov edi, str.Cl.in
call sym.imp.freopen
mov rax, qword [rip + 0x202f46]
mov rdx, rax
mov esi, 0x402b92
mov edi, str.Cl.out
call sym.imp.freopen
lea rax, [rbp - 0x10]
mov rsi, rax
mov edi, 0x402b7a
mov eax, 0
call sym.imp.scanf
mov dword [rbp - 0xc], 1
mov eax, dword [rbp - 0x10]
cmp dword [rbp - 0xc], eax
jg 0x4011f8
mov eax, dword [rbp - 0xc]
mov esi, eax
mov edi, str.Case___d:
mov eax, 0
call sym.imp.printf
call sym.solve
add dword [rbp - 0xc], 1
jmp 0x4011d1
mov eax, 0
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x401211
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x78
mov dword [rbp - 0x74], edi
mov dword [rbp - 0x78], esi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
cmp dword [rbp - 0x74], 1
jne 0x4012bb
cmp dword [rbp - 0x78], 0xffff
jne 0x4012bb
mov edi, obj.std::__ioinit
call sym.std::ios_base::Init::Init
mov edx, obj.__dso_handle
mov esi, obj.std::__ioinit
mov edi, sym.std::ios_base::Init::_Init
call sym.imp.__cxa_atexit
lea rax, [rbp - 0x70]
mov rdi, rax
call sym.std::deque_int_std::allocator_int__::deque
lea rax, [rbp - 0x70]
mov rsi, rax
mov edi, obj.Q
call sym.std::queue_int_std::deque_int_std::allocator_int___::queue
lea rax, [rbp - 0x70]
mov rdi, rax
call sym.std::deque_int_std::allocator_int__::_deque
mov edx, obj.__dso_handle
mov esi, obj.Q
mov edi, sym.std::queue_int_std::deque_int_std::allocator_int___::_queue
call sym.imp.__cxa_atexit
jmp 0x4012bb
mov rbx, rax
lea rax, [rbp - 0x70]
mov rdi, rax
call sym.std::deque_int_std::allocator_int__::_deque
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x4012cf
call sym.imp.__stack_chk_fail
add rsp, 0x78
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov esi, 0xffff
mov edi, 1
call sym.__static_initialization_and_destruction_0
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
cmp qword [rbp - 8], 0x1ff
ja 0x40131f
mov eax, 0x200
mov edx, 0
div qword [rbp - 8]
jmp 0x401324
mov eax, 1
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call 0x4014ce
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x68
mov qword [rbp - 0x68], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x68]
mov rdi, rax
call sym.std::_Deque_base_int_std::allocator_int__::_M_get_Tp_allocator
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdx, qword [rbp - 0x68]
mov rsi, rdx
mov rdi, rax
call sym.std::deque_int_std::allocator_int__::end
lea rax, [rbp - 0x60]
mov rdx, qword [rbp - 0x68]
mov rsi, rdx
mov rdi, rax
call sym.std::deque_int_std::allocator_int__::begin
lea rdx, [rbp - 0x40]
lea rsi, [rbp - 0x60]
mov rax, qword [rbp - 0x68]
mov rcx, rbx
mov rdi, rax
call sym.std::deque_int_std::allocator_int__::_M_destroy_data
mov rax, qword [rbp - 0x68]
mov rdi, rax
call sym.std::_Deque_base_int_std::allocator_int__::__Deque_base
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x4013cb
call sym.imp.__stack_chk_fail
add rsp, 0x68
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::move_std::deque_int_std::allocator_int____
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call method.std::deque_int_std::allocator_int__.deque
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::deque_int_std::allocator_int__::push_back
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::deque_int_std::allocator_int__::empty
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::deque_int_std::allocator_int__::front
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::deque_int_std::allocator_int__::pop_front
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
cmp rdx, rax
jge 0x4014ac
mov rax, qword [rbp - 0x10]
jmp 0x4014b0
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_int_::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Deque_base_int_std::allocator_int__::_Deque_impl::_Deque_impl
mov rax, qword [rbp - 0x18]
mov esi, 0
mov rdi, rax
call sym.std::_Deque_base_int_std::allocator_int__::_M_initialize_map
jmp 0x401514
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Deque_base_int_std::allocator_int__::_Deque_impl::__Deque_impl
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x18
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
test rax, rax
je 0x401575
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x48]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 0x28]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Deque_base_int_std::allocator_int__::_M_destroy_nodes
mov rax, qword [rbp - 8]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Deque_base_int_std::allocator_int__::_M_deallocate_map
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Deque_base_int_std::allocator_int__::_Deque_impl::__Deque_impl
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
lea rdx, [rax + 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Deque_iterator_int_int__int__::_Deque_iterator
mov rax, qword [rbp - 8]
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
lea rdx, [rax + 0x30]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Deque_iterator_int_int__int__::_Deque_iterator
mov rax, qword [rbp - 8]
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax + 0x10]
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], rdx
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax + 0x18]
mov rax, qword [rbp - 8]
mov qword [rax + 0x18], rdx
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x50
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x48], rdx
mov qword [rbp - 0x50], rcx
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x401678
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::move_std::deque_int_std::allocator_int____
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Deque_base_int_std::allocator_int__::_Deque_base
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rax + 0x30]
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x40]
sub rax, 4
cmp rdx, rax
je 0x401706
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 0x30]
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_int__::construct_int_intconst__
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x30]
lea rdx, [rax + 4]
mov rax, qword [rbp - 8]
mov qword [rax + 0x30], rdx
jmp 0x401719
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::deque_int_std::allocator_int__::_M_push_back_aux_intconst__
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
lea rdx, [rax + 0x10]
mov rax, qword [rbp - 8]
add rax, 0x30
mov rsi, rdx
mov rdi, rax
call sym.std::operator___int_int__int__
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x40
mov qword [rbp - 0x38], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
lea rax, [rbp - 0x30]
mov rdx, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.std::deque_int_std::allocator_int__::begin
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::_Deque_iterator_int_int__int__::operator_
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x401794
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdx, qword [rax + 0x10]
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x20]
sub rax, 4
cmp rdx, rax
je 0x4017e8
mov rax, qword [rbp - 8]
mov rdx, qword [rax + 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_int__::destroy_int_
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
lea rdx, [rax + 4]
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], rdx
jmp 0x4017f4
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::deque_int_std::allocator_int__::_M_pop_front_aux
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call 0x401d0e
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
add rax, 0x10
mov rdi, rax
call 0x401d2a
mov rax, qword [rbp - 8]
add rax, 0x30
mov rdi, rax
call 0x401d2a
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int_::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov qword [rbp - 0x48], rdi
mov qword [rbp - 0x50], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov edi, 4
call sym.std::__deque_buf_size
mov rbx, rax
mov rax, qword [rbp - 0x50]
mov edx, 0
div rbx
add rax, 1
mov qword [rbp - 0x30], rax
mov rax, qword [rbp - 0x30]
add rax, 2
mov qword [rbp - 0x38], rax
mov qword [rbp - 0x40], 8
lea rdx, [rbp - 0x38]
lea rax, [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call sym.std::max_unsignedlong_
mov rdx, qword [rax]
mov rax, qword [rbp - 0x48]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 0x48]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 0x48]
mov rsi, rdx
mov rdi, rax
call sym.std::_Deque_base_int_std::allocator_int__::_M_allocate_map
mov rdx, rax
mov rax, qword [rbp - 0x48]
mov qword [rax], rdx
mov rax, qword [rbp - 0x48]
mov rdx, qword [rax]
mov rax, qword [rbp - 0x48]
mov rax, qword [rax + 8]
sub rax, qword [rbp - 0x30]
shr rax, 1
shl rax, 3
add rax, rdx
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x30]
lea rdx, [rax*8]
mov rax, qword [rbp - 0x28]
add rax, rdx
mov qword [rbp - 0x20], rax
mov rdx, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x28]
mov rax, qword [rbp - 0x48]
mov rsi, rcx
mov rdi, rax
call sym.std::_Deque_base_int_std::allocator_int__::_M_create_nodes
mov rax, qword [rbp - 0x48]
lea rdx, [rax + 0x10]
mov rax, qword [rbp - 0x28]
mov rsi, rax
mov rdi, rdx
call sym.std::_Deque_iterator_int_int__int__::_M_set_node
mov rax, qword [rbp - 0x20]
lea rdx, [rax - 8]
mov rax, qword [rbp - 0x48]
add rax, 0x30
mov rsi, rdx
mov rdi, rax
call sym.std::_Deque_iterator_int_int__int__::_M_set_node
mov rax, qword [rbp - 0x48]
mov rdx, qword [rax + 0x18]
mov rax, qword [rbp - 0x48]
mov qword [rax + 0x10], rdx
mov rax, qword [rbp - 0x48]
mov rbx, qword [rax + 0x38]
mov edi, 4
call sym.std::__deque_buf_size
mov rcx, rax
mov rax, qword [rbp - 0x50]
mov edx, 0
div rcx
mov rax, rdx
shl rax, 2
lea rdx, [rbx + rax]
mov rax, qword [rbp - 0x48]
mov qword [rax + 0x30], rdx
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x401a2b
jmp 0x401a26
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rax, qword [rbp - 0x48]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 0x48]
mov rcx, qword [rax]
mov rax, qword [rbp - 0x48]
mov rsi, rcx
mov rdi, rax
call sym.std::_Deque_base_int_std::allocator_int__::_M_deallocate_map
mov rax, qword [rbp - 0x48]
mov qword [rax], 0
mov rax, qword [rbp - 0x48]
mov qword [rax + 8], 0
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x48
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x20]
mov qword [rbp - 8], rax
mov rax, qword [rbp - 8]
cmp rax, qword [rbp - 0x28]
jae 0x401a75
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::_Deque_base_int_std::allocator_int__::_M_deallocate_node
add qword [rbp - 8], 8
jmp 0x401a4e
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
lea rax, [rbp - 9]
mov rdx, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::_Deque_base_int_std::allocator_int__::_M_get_map_allocator
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
lea rax, [rbp - 9]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_int___::deallocate
lea rax, [rbp - 9]
mov rdi, rax
call sym.std::allocator_int__::_allocator
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x401ae6
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::move_std::_Deque_base_int_std::allocator_int____
mov rdx, rax
mov rax, qword [rbp - 0x28]
sub rsp, 8
push rbx
mov rsi, rdx
mov rdi, rax
call method.std::_Deque_base_int_std::allocator_int__._Deque_base
add rsp, 0x10
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x401b52
call sym.imp.__stack_chk_fail
mov rbx, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::forward_intconst__
mov rdx, rax
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int_::construct_int_intconst__
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov esi, 1
mov rdi, rax
call sym.std::deque_int_std::allocator_int__::_M_reserve_map_at_back
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x48]
lea rbx, [rax + 8]
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Deque_base_int_std::allocator_int__::_M_allocate_node
mov qword [rbx], rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_intconst__
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rcx, qword [rax + 0x30]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_int__::construct_int_intconst__
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x48]
lea rdx, [rax + 8]
mov rax, qword [rbp - 0x18]
add rax, 0x30
mov rsi, rdx
mov rdi, rax
call sym.std::_Deque_iterator_int_int__int__::_M_set_node
mov rax, qword [rbp - 0x18]
mov rdx, qword [rax + 0x38]
mov rax, qword [rbp - 0x18]
mov qword [rax + 0x30], rdx
nop
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 0x10]
mov rax, qword [rax]
cmp rdx, rax
sete al
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int_::destroy_int_
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov rax, qword [rbp - 0x18]
mov rbx, qword [rax + 0x10]
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Deque_base_int_std::allocator_int__::_M_get_Tp_allocator
mov rsi, rbx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_int__::destroy_int_
mov rax, qword [rbp - 0x18]
mov rdx, qword [rax + 0x18]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::_Deque_base_int_std::allocator_int__::_M_deallocate_node
mov rax, qword [rbp - 0x18]
mov rax, qword [rax + 0x28]
lea rdx, [rax + 8]
mov rax, qword [rbp - 0x18]
add rax, 0x10
mov rsi, rdx
mov rdi, rax
call sym.std::_Deque_iterator_int_int__int__::_M_set_node
mov rax, qword [rbp - 0x18]
mov rdx, qword [rax + 0x18]
mov rax, qword [rbp - 0x18]
mov qword [rax + 0x10], rdx
nop
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int_::new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x18], 0
nop
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 0x10]
mov rax, qword [rax]
cmp rdx, rax
jae 0x401d94
mov rax, qword [rbp - 0x10]
jmp 0x401d98
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
lea rax, [rbp - 0x19]
mov rdx, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Deque_base_int_std::allocator_int__::_M_get_map_allocator
mov rdx, qword [rbp - 0x30]
lea rax, [rbp - 0x19]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_int___::allocate
mov rbx, rax
lea rax, [rbp - 0x19]
mov rdi, rax
call sym.std::allocator_int__::_allocator
mov rax, rbx
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x401e22
jmp 0x401e1d
mov rbx, rax
lea rax, [rbp - 0x19]
mov rdi, rax
call sym.std::allocator_int__::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x28
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword [rbp - 0x30]
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
cmp rax, qword [rbp - 0x38]
jae 0x401ea5
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::_Deque_base_int_std::allocator_int__::_M_allocate_node
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov qword [rax], rdx
add qword [rbp - 0x18], 8
jmp 0x401e47
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
mov rsi, rcx
mov rdi, rax
call sym.std::_Deque_base_int_std::allocator_int__::_M_destroy_nodes
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
nop
add rsp, 0x38
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x20]
mov qword [rax + 0x18], rdx
mov rax, qword [rbp - 0x20]
mov rdx, qword [rax]
mov rax, qword [rbp - 0x18]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 0x18]
mov rbx, qword [rax + 8]
call sym.std::_Deque_iterator_int_int__int__::_S_buffer_size
shl rax, 2
lea rdx, [rbx + rax]
mov rax, qword [rbp - 0x18]
mov qword [rax + 0x10], rdx
nop
add rsp, 0x18
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov edi, 4
call sym.std::__deque_buf_size
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_int__::deallocate
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call method.std::_Deque_base_int_std::allocator_int__._M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_int__::allocator_int_
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int__::_new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int__::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::_Deque_base_int_std::allocator_int__::_M_get_Tp_allocator
mov rdi, rax
call sym.std::move_std::allocator_int___
mov rdx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call method.std::_Deque_base_int_std::allocator_int__::_Deque_impl._Deque_impl
mov rax, qword [rbp - 0x18]
mov esi, 0
mov rdi, rax
call sym.std::_Deque_base_int_std::allocator_int__::_M_initialize_map
mov rax, qword [rbp - 0x20]
mov rax, qword [rax]
test rax, rax
je 0x402043
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::_Deque_base_int_std::allocator_int__::_Deque_impl::_M_swap_data
jmp 0x402043
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Deque_base_int_std::allocator_int__::_Deque_impl::__Deque_impl
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
nop
add rsp, 0x18
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::forward_intconst__
mov ebx, dword [rax]
mov rax, qword [rbp - 0x20]
mov rsi, rax
mov edi, 4
call 0x4012eb
test rax, rax
je 0x402087
mov dword [rax], ebx
nop
add rsp, 0x28
pop rbx
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
lea rcx, [rax + 1]
mov rax, qword [rbp - 8]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x48]
mov rsi, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rsi, rax
mov rax, rsi
sar rax, 3
sub rdx, rax
mov rax, rdx
cmp rcx, rax
jbe 0x4020ef
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.std::deque_int_std::allocator_int__::_M_reallocate_map
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov edi, 4
call sym.std::__deque_buf_size
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_int__::allocate
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int__::allocate
leave
ret
push rbp
mov rbp, rsp
mov edi, 4
call sym.std::__deque_buf_size
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int_::deallocate
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int__::new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::move_std::allocator_int___
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_int_::allocator
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
add rax, 0x10
mov rdi, rax
call 0x401d2a
mov rax, qword [rbp - 8]
add rax, 0x30
mov rdi, rax
call 0x401d2a
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
lea rdx, [rax + 0x10]
mov rax, qword [rbp - 8]
add rax, 0x10
mov rsi, rdx
mov rdi, rax
call sym.std::swap_std::_Deque_iterator_int_int__int___
mov rax, qword [rbp - 0x10]
lea rdx, [rax + 0x30]
mov rax, qword [rbp - 8]
add rax, 0x30
mov rsi, rdx
mov rdi, rax
call sym.std::swap_std::_Deque_iterator_int_int__int___
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::swap_int___
mov rax, qword [rbp - 0x10]
lea rdx, [rax + 8]
mov rax, qword [rbp - 8]
add rax, 8
mov rsi, rdx
mov rdi, rax
call sym.std::swap_unsignedlong_
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x58
mov qword [rbp - 0x48], rdi
mov qword [rbp - 0x50], rsi
mov eax, edx
mov byte [rbp - 0x54], al
mov rax, qword [rbp - 0x48]
mov rax, qword [rax + 0x48]
mov rdx, rax
mov rax, qword [rbp - 0x48]
mov rax, qword [rax + 0x28]
sub rdx, rax
mov rax, rdx
sar rax, 3
add rax, 1
mov qword [rbp - 0x30], rax
mov rdx, qword [rbp - 0x50]
mov rax, qword [rbp - 0x30]
add rax, rdx
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x48]
mov rax, qword [rax + 8]
mov rdx, qword [rbp - 0x28]
add rdx, rdx
cmp rax, rdx
jbe 0x4023ea
mov rax, qword [rbp - 0x48]
mov rdx, qword [rax]
mov rax, qword [rbp - 0x48]
mov rax, qword [rax + 8]
sub rax, qword [rbp - 0x28]
shr rax, 1
lea rcx, [rax*8]
cmp byte [rbp - 0x54], 0
je 0x40236e
mov rax, qword [rbp - 0x50]
shl rax, 3
jmp 0x402373
mov eax, 0
add rax, rcx
add rax, rdx
mov qword [rbp - 0x38], rax
mov rax, qword [rbp - 0x48]
mov rax, qword [rax + 0x28]
cmp rax, qword [rbp - 0x38]
jbe 0x4023b3
mov rax, qword [rbp - 0x48]
mov rax, qword [rax + 0x48]
lea rcx, [rax + 8]
mov rax, qword [rbp - 0x48]
mov rax, qword [rax + 0x28]
mov rdx, qword [rbp - 0x38]
mov rsi, rcx
mov rdi, rax
call sym.std::copy_int___int___
jmp 0x4024bc
mov rax, qword [rbp - 0x30]
lea rdx, [rax*8]
mov rax, qword [rbp - 0x38]
add rdx, rax
mov rax, qword [rbp - 0x48]
mov rax, qword [rax + 0x48]
lea rcx, [rax + 8]
mov rax, qword [rbp - 0x48]
mov rax, qword [rax + 0x28]
mov rsi, rcx
mov rdi, rax
call sym.std::copy_backward_int___int___
jmp 0x4024bc
mov rax, qword [rbp - 0x48]
mov rbx, qword [rax + 8]
mov rax, qword [rbp - 0x48]
lea rdx, [rax + 8]
lea rax, [rbp - 0x50]
mov rsi, rax
mov rdi, rdx
call sym.std::max_unsignedlong_
mov rax, qword [rax]
add rax, rbx
add rax, 2
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x48]
mov rdx, qword [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::_Deque_base_int_std::allocator_int__::_M_allocate_map
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x20]
sub rax, qword [rbp - 0x28]
shr rax, 1
lea rdx, [rax*8]
cmp byte [rbp - 0x54], 0
je 0x402451
mov rax, qword [rbp - 0x50]
shl rax, 3
jmp 0x402456
mov eax, 0
add rdx, rax
mov rax, qword [rbp - 0x18]
add rax, rdx
mov qword [rbp - 0x38], rax
mov rax, qword [rbp - 0x48]
mov rax, qword [rax + 0x48]
lea rcx, [rax + 8]
mov rax, qword [rbp - 0x48]
mov rax, qword [rax + 0x28]
mov rdx, qword [rbp - 0x38]
mov rsi, rcx
mov rdi, rax
call sym.std::copy_int___int___
mov rax, qword [rbp - 0x48]
mov rdx, qword [rax + 8]
mov rax, qword [rbp - 0x48]
mov rcx, qword [rax]
mov rax, qword [rbp - 0x48]
mov rsi, rcx
mov rdi, rax
call sym.std::_Deque_base_int_std::allocator_int__::_M_deallocate_map
mov rax, qword [rbp - 0x48]
mov rdx, qword [rbp - 0x18]
mov qword [rax], rdx
mov rax, qword [rbp - 0x48]
mov rdx, qword [rbp - 0x20]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 0x48]
lea rdx, [rax + 0x10]
mov rax, qword [rbp - 0x38]
mov rsi, rax
mov rdi, rdx
call sym.std::_Deque_iterator_int_int__int__::_M_set_node
mov rax, qword [rbp - 0x30]
shl rax, 3
lea rdx, [rax - 8]
mov rax, qword [rbp - 0x38]
add rdx, rax
mov rax, qword [rbp - 0x48]
add rax, 0x30
mov rsi, rdx
mov rdi, rax
call sym.std::_Deque_iterator_int_int__int__::_M_set_node
nop
add rsp, 0x58
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int_::allocate
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int__::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x40255c
call sym.std::__throw_bad_alloc
mov rax, qword [rbp - 0x10]
shl rax, 3
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call method.__gnu_cxx::new_allocator_int_.new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x40
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::move_std::_Deque_iterator_int_int__int____
mov rdx, rax
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::_Deque_iterator_int_int__int__::_Deque_iterator
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::move_std::_Deque_iterator_int_int__int____
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rdx]
mov qword [rax], rcx
mov rcx, qword [rdx + 8]
mov qword [rax + 8], rcx
mov rcx, qword [rdx + 0x10]
mov qword [rax + 0x10], rcx
mov rdx, qword [rdx + 0x18]
mov qword [rax + 0x18], rdx
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_std::_Deque_iterator_int_int__int____
mov rdx, rax
mov rax, qword [rbp - 0x40]
mov rcx, qword [rdx]
mov qword [rax], rcx
mov rcx, qword [rdx + 8]
mov qword [rax + 8], rcx
mov rcx, qword [rdx + 0x10]
mov qword [rax + 0x10], rcx
mov rdx, qword [rdx + 0x18]
mov qword [rax + 0x18], rdx
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x402686
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_int____
mov rax, qword [rax]
mov qword [rbp - 0x10], rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_int____
mov rdx, qword [rax]
mov rax, qword [rbp - 0x18]
mov qword [rax], rdx
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.std::move_int____
mov rdx, qword [rax]
mov rax, qword [rbp - 0x20]
mov qword [rax], rdx
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x402709
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_unsignedlong__
mov rax, qword [rax]
mov qword [rbp - 0x10], rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_unsignedlong__
mov rdx, qword [rax]
mov rax, qword [rbp - 0x18]
mov qword [rax], rdx
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.std::move_unsignedlong__
mov rdx, qword [rax]
mov rax, qword [rbp - 0x20]
mov qword [rax], rdx
nop
mov rax, qword [rbp - 8]
xor rax, qword fs:[0x28]
je 0x40278c
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__miter_base_int___
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__miter_base_int___
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::__copy_move_a2_false_int___int___
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__miter_base_int___
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__miter_base_int___
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::__copy_move_backward_a2_false_int___int___
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int_::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x402856
call sym.std::__throw_bad_alloc
mov rax, qword [rbp - 0x10]
shl rax, 2
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0x1fffffffffffffff
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_int___false_::_S_base
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::__niter_base_int___
mov r12, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__niter_base_int___
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__niter_base_int___
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::__copy_move_a_false_int___int___
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::__niter_base_int___
mov r12, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__niter_base_int___
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__niter_base_int___
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::__copy_move_backward_a_false_int___int___
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0x3fffffffffffffff
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_int___false_::_S_base
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__copy_move_false_true_std::random_access_iterator_tag_::__copy_m_int__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__copy_move_backward_false_true_std::random_access_iterator_tag_::__copy_move_b_int__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov qword [rbp - 8], rax
cmp qword [rbp - 8], 0
je 0x402a44
mov rax, qword [rbp - 8]
lea rdx, [rax*8]
mov rcx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x28]
mov rsi, rcx
mov rdi, rax
call sym.imp.memmove
mov rax, qword [rbp - 8]
lea rdx, [rax*8]
mov rax, qword [rbp - 0x28]
add rax, rdx
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rdx, rax
mov rax, rdx
sar rax, 3
mov qword [rbp - 8], rax
cmp qword [rbp - 8], 0
je 0x402aba
mov rax, qword [rbp - 8]
lea rdx, [rax*8]
mov rax, qword [rbp - 8]
shl rax, 3
neg rax
mov rcx, rax
mov rax, qword [rbp - 0x28]
add rcx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rax
mov rdi, rcx
call sym.imp.memmove
mov rax, qword [rbp - 8]
shl rax, 3
neg rax
mov rdx, rax
mov rax, qword [rbp - 0x28]
add rax, rdx
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::deque_int_std::allocator_int__::_deque
nop
leave
ret
nop dword [rax]
push r15
push r14
mov r15d, edi
push r13
push r12
lea r12, [rip + 0x2012e6]
push rbp
lea rbp, [rip + 0x2012ee]
push rbx
mov r14, rsi
mov r13, rdx
sub rbp, r12
sub rsp, 8
sar rbp, 3
call sym._init
test rbp, rbp
je 0x402b46
xor ebx, ebx
nop dword [rax + rax]
mov rdx, r13
mov rsi, r14
mov edi, r15d
call qword [r12 + rbx*8]
add rbx, 1
cmp rbx, rbp
jne 0x402b30
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
nop word cs:[rax + rax]
ret
add byte [rax], al
sub rsp, 8
add rsp, 8
ret
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x64250064], ah
and eax, 0x642564
and byte [rip + 0x6c31312e], ah
add byte [rdx], dh
insb byte [rdi], dx
imul ebp, dword cs:[rsi], 0x6c430077
insb byte [rdi], dx
outsd dx, dword cs:[rsi]
jne 0x402c0e
add byte [rbx + 0x61], al
jae 0x402c04
and byte [rbx], ah
and eax, 0x3a64
add byte [rax], al
jge section_end..fini
xchg eax, esp
and eax, 0x54b249ad
add dword [rbx], ebx
add edi, dword [rbx]
cmp al, 3
add byte [rax], al
add byte [rax], al
add byte [rax - 0x22], al
dec dword [rax - 0x6ffffffd]
lcall [rax + 3]
add byte [rax], al
xchg al, ah
push rax
add eax, dword [rax]
add al, dh
loop 0x402bd6
call qword [rax]
add al, 0
add byte [rbx + 0x30ffffe5], bh
add al, 0
add byte [rbx - 0x1a], ah
jmp qword [rax + 0x10]
add byte [rax], al
out 0xff, eax
dec dword [rax + 0x3b000010]
out 0xff, eax
push qword [rax + 0x4d000003]
out 0xff, eax
call rax
add eax, dword [rax]
add byte [rsi - 0x19], dh
call qword [rax + 4]
add byte [rax], al
xchg eax, edx
out 0xff, eax
call qword [rax + 0x22000004]
call 0x4f92c19
add byte [rax], al
xor al, ch
fadd dword [rax + rax]
add byte [rdx - 0x18], ah
clc
add al, 0
add byte [rax + 0x18ffffe8], cl
add eax, 0xe8a20000
cmp byte [rip - 0x17440000], al
lcall [rax + 5]
add byte [rax], al
xlatb
call 0x5b92c49
add byte [rax], al
add ch, cl
lcall [rax + 0x1e000005]
jmp 0x5f92c59
add byte [rax], al
insb byte [rdi], dx
jmp 0x6212c61
add byte [rax], al
jmp 0x6412c69
add byte [rax], al
add ch, dl
jmp qword [rax]
add byte [rax], al
xor dl, ch
inc dword [rax + 6]
add byte [rax], al
jmp qword [rax + 6]
add byte [rax], al
mov edx, gs
inc dword [rax - 0x35fffffa]
jmp qword [rax - 0x3fffffa]
inc eax
add byte [rax], al
insb byte [rdi], dx
jmp 0x402c9e
jmp rax
add byte [rax], al
xchg eax, esi
jmp 0x402ca6
inc dword [rax]
add byte [rax], al
out 0xeb, al
jmp qword [rax]
add byte [rax], al
in al, dx
dec dword [rax + 7]
add byte [rax], al
in al, dx
ljmp [rax + 7]
add byte [rax], al
mov dh, 0xec
dec dword [rax - 0x7dfffff9]
out dx, al
push qword [rax - 0x37fffff9]
out dx, al
call rax
add byte [rax], al
cmp bh, ch
clc
add byte [rax], al
out dx, eax
lcall [rax]
or byte [rax], al
add byte [rax + 0x40ffffef], ch
or byte [rax], al
add byte [rsi + 0x60ffffef], dh
or byte [rax], al
add al, dh
out dx, eax
inc dword [rax - 0x75fffff8]
ljmp [rax - 0x53fffff8]
dec eax
or byte [rax], al
add byte [rbp - 0x17000010], bh
or byte [rax], al
add ah, ah
dec dword [rax]
or dword [rax], eax
add byte [rsi - 0xf], bl
push qword [rax]
or dword [rax], eax
add byte [rdx - 0xf], bh
call qword [rax + 9]
add byte [rax], al
mov ah, 0xf1
push qword [rax + 9]
add byte [rax], al
mov edi, 0x90fffff1
or dword [rax], eax
add dl, ch
int1
push qword [rax + 0x7a000009]
fmul dword [rcx]
add byte [rax], al
inc dword [rax]
or al, byte [rax]
add byte [rax - 0xd], dl
ljmp [rax]
or al, byte [rax]
add byte [rbx + rsi*8 + 0xa50ffff], al
add byte [rax], al
mov eax, 0x70fffff3
or al, byte [rax]
add bl, dl
call qword [rax + 0x100000a]
hlt
push qword [rax + 0x1000000a]
hlt
call rax
or al, byte [rax]
add byte [rsp + rsi*8 + 0xaf8ffff], bl
add byte [rax], al
loopne 0x402d8a
lcall [rax]
or eax, dword [rax]
add byte [rdx - 0xb], al
cmp byte [rbx], cl
add byte [rax], al
insb byte [rdi], dx
cmc
lcall [rax + 0xb]
add byte [rax], al
jl 0x402da3
js 0x402dbd
add byte [rax], al
xchg ebp, esi
lcall [rax - 0x4efffff5]
cmc
mov eax, 0xc100000b
cmc
fmul dword [rbx]
add byte [rax], al
cmc
clc
or eax, dword [rax]
add dh, bh
cmc
lcall [rax]
or al, 0
add byte [rsi], bl
idiv bh
cmp byte [rax + rax], cl
add byte [rdx], ch
idiv bh
lcall [rax + 0xc]
add byte [rax], al
idiv dil
js 0x402dfe
add byte [rax], al
mov dh, 0xf6
lcall [rax + 0x2e00000c]
idiv edi
mov eax, 0x5100000c
stc
jmp rax
or al, 0
add byte [rcx + rdi*8 - 1], bh
inc dword [rax]
or eax, 0xf9be0000
jmp qword [rax]
or eax, 0xf9e20000
inc dword [rax + 0xd]
add byte [rax], al
out dx, al
stc
jmp qword [rax + 0xd]
add byte [rax], al
adc al, 0xfa
inc dword [rax + 0x2200000d]
cli
jmp qword [rax - 0x27fffff3]
cli
inc eax
or eax, 0xfae60000
jmp rax
or eax, 0xfb5b0000
inc dword [rax]
add byte [rax], al
imul edi, ebx, 0xe20ffff
add byte [rax], al
fdivp st(3)
inc dword [rax + 0xe]
add byte [rax], al
sub bh, ah
ljmp [rax + 0xe]
add byte [rax], al
jbe 0x402e6a
call qword [rax - 0x47fffff2]
cld
push qword [rax - 0x33fffff2]
cld
call rax
add byte [rax], al
cld
push rax
add byte [rax], al
cmc
cld
call qword [rax]
sldt word [rax]
std
cmp byte [rdi], cl
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
std
jmp qword [rax + 0xf]
add byte [rax], al
mov edx, 0x80fffffd
sldt word [rax]
enter -3, -1
movabs al, byte [0xc0fffffde200000f]
sldt word [rax]
adc edi, esi
jmp rax
sldt word [rax]
inc dword [rax]
adc byte [rax], al
add byte [rcx + 0x20fffffe], ch
adc byte [rax], al
add byte [rdx], ah
inc dword [rax + 0x10]
add byte [rax], al
ljmp [rax - 0x4ffffff0]
push rax
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x402f0f
add dword [rbx], ebx
or al, 7
or byte [rax + 0x14100701], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xor ah, bl
ljmp [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x402f3f
add dword [rbx], ebx
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov al, 0xda
inc dword [rax + 1]
add byte [rax], al
add byte [rsi], cl
adc byte [rsi + 0xe], al
sbb byte [rdx + 0xf], cl
or esi, dword [rdi + 8]
add byte [rax], 0x3f
sbb bh, byte [rbx]
sub dh, byte [rbx]
and al, 0x22
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], r8b
add byte [rbx + 0x12ffffe3], al
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte fs:[rax], al
add byte [rbp - 0x1d], dh
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rax], al
add byte [rax], al
mov ds, esp
ljmp [rdx + 2]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add esp, dword [rbp + 2]
or al, 7
or byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
add al, bl
fdivp st(7)
dec ebx
add al, byte [rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add eax, esi
add cl, byte [rdi + rax]
or byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rbx - 0x5700001f], al
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rbx + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
in al, 0
add byte [rax], al
jrcxz 0x40300a
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x50], edi
push rdx
add byte [rcx], al
js 0x403041
add eax, dword [rax]
or eax, dword [rax]
add ebx, dword [rbx]
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
cli
loop 0x40304a
call qword [rax + 0x4000000]
mov esp, 0x4100403c
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
xchg byte [rdi + rax], cl
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add qword [rax], r8
add byte [rdx - 0x1d], ah
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
add dword [rax], eax
add byte [rax - 0x1d], dl
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rcx], es
add byte [rax], al
jrcxz 0x4030b2
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
add dword [rax], eax
add byte [rax - 0x1d], ch
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
add dword [rax], eax
add byte [rdx - 0x1d], ah
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
add dword [rax], eax
add byte [rbx - 1], bl
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 2
add byte [rax], al
push rdi
jrcxz 0x403132
ljmp [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 2
add byte [rax], al
jrcxz 0x403152
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add qword [rax], r8
add byte [rsi - 0x1d], bl
dec dword [rbp]
add byte [rax], al
add al, 0xc0
cmp al, 0x40
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x403198
add byte [rax], al
test bl, ah
ljmp [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xchg eax, esp
add al, byte [rax]
add ah, cl
jrcxz 0x4031ba
ljmp [rip]
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 2
add byte [rax], al
jrcxz 0x4031da
ljmp [rip]
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, byte [rax]
add al, ch
jrcxz 0x4031fa
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
add al, byte [rax]
add dh, dl
jrcxz 0x40321a
dec dword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
adc al, 3
add byte [rax], al
add al, 0xe4
add byte ds:[rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jns 0x403257
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 3
add byte [rax], al
and ah, ah
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
add eax, dword [rax]
add byte [rsp], dh
push qword [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ch, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
je 0x403299
add byte [rax], al
test ah, ah
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
add eax, dword [rax]
add byte [rsi + 0x50ffffe4], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
mov ah, 2
add byte [rax], al
mov esi, 0x61ffffe4
add byte [rax], al
add byte [rsp + rcx*8], al
cmp al, 0x40
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
fadd qword [rbx]
add byte [rax], al
clc
in al, 0xff
call qword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
cld
add eax, dword [rax]
add byte [rdx], ch
in eax, 0xff
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
sbb al, 3
add byte [rax], al
in eax, 0xff
dec esp
add dword [rax], eax
add byte [rax + rdx*8], al
cmp al, 0x40
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
ret 0xc01
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add al, 0
add dl, cl
out 0xff, al
inc dword [rsi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rcx + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add eax, dword fs:[rax]
add al, dh
out 0xff, al
push qword [rax]
add byte [rax], al
add al, 0xf4
cmp al, 0x40
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ch, byte [rbx + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov word [rax + rax], es
add byte [rax], bh
out 0xff, eax
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
lodsb al, byte [rsi]
add al, 0
add byte [rsi], ah
out 0xff, eax
jmp qword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0
add byte [rax - 0x19], ah
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
add al, 0
add byte [rsi - 0x19], cl
cmp dword [rax], eax
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
je 0x403437
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
adc al, 5
add byte [rax], al
push -0x65000019
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
nop
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 5
add byte [rax], al
out 0xff, eax
jmp qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add eax, 0xe7dc0000
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x4034a3
add byte [rax], al
int 0xe7
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
pushfq
add eax, 0xe7d40000
jp 0x4034c6
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
jo 0x4034e3
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add eax, 0xe8260000
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 5
add byte [rax], al
and ch, al
cmp al, byte [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jne 0x403527
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 6
add byte [rax], al
cmp al, 0xe8
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 6
add byte [rax], al
call 0x6c354d
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add eax, 0xe8320000
dec dword [rdi + 0x4000000]
clc
cmp al, 0x40
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
test dword [rdi + rax], ecx
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
insb byte [rdi], dx
add eax, 0xe89a0000
inc dword [rbx + 0x4000000]
add al, 0x3d
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
jns 0x4035b7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
xchg eax, esp
add byte [rax], al
imul al
call qword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov esp, 0x20000005
jmp 0x7435e5
add byte [rax], al
add al, 0x1c
cmp eax, 0xe410040
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 6
add byte [rax], al
sub al, 0xe9
push qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
outsd dx, dword [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 7
add byte [rax], al
jmp 0x5c362d
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 7
add byte [rax], al
cmp ebp, ecx
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
add byte [rax], al
jmp 0x4f366d
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add byte [rax], al
cmp cl, ch
dec dword [rbx + 0x4000000]
and byte [rip + 0xe410040], bh
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
mov word [rdi], es
add byte [rax], al
pushfq
jmp 0x8436b5
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x79
or al, 7
or byte [rax + rax], bl
add byte [rax], al
lodsb al, byte [rsi]
add byte [rax], al
shr cl, 0xff
jmp qword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add bl, byte [rbp + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
int3
add byte [rax], al
add ch, dl
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
add byte [rax], al
or al, 0xea
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 8
add byte [rax], al
cld
jmp 0x4c3735
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 8
add byte [rax], al
out 0xe9, eax
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or byte [rax], r8b
add cl, dh
jmp 0x513775
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
or byte [rax], al
add cl, ah
jmp 0x6f3795
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
mov word [rax], cs
add byte [rax], al
jmp 0x4f37b5
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
or byte [rax], al
add dh, bl
jmp 0x6037d5
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
pop rdx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
or byte [rax], al
add dh, bl
jmp 0x4c37f5
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
or byte [rax], al
add dl, cl
jmp 0x643815
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or al, 9
add byte [rax], al
jmp 0xa93835
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sub al, 9
add byte [rax], al
push qword [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dh, byte [rdx + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
or qword [rax], r8
add byte [rsi - 0x16], ch
jmp qword [rbx]
add al, byte [rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
sbb dword [rdx], eax
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
je 0x40389f
add byte [rax], al
imul ebp, esp, 0x2affff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
or dword [rax], eax
add byte [rsp + rbp*8 - 1], dh
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jge 0x4038d7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 9
add byte [rax], al
xchg eax, esi
in al, dx
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or dword [rax], eax
add byte [rdx + 0xbffffec], bl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
or dword [rax], eax
add byte [rsi + 0x26ffffec], al
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0xa
add byte [rax], al
mov esp, gs
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 0xa
add byte [rax], al
jp 0x403946
push qword [rsi]
adc byte [rsi + 0x60d4302], al
add dh, byte [rcx + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
push rsp
or al, byte [rax]
add byte [rax], dl
in eax, dx
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x4039a0
add byte [rax], al
in al, dx
push qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dh, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xchg eax, esp
or al, byte [rax]
add byte [rbx - 0x13], dl
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 0xa
add byte [rax], al
in eax, dx
push qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dh, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
or al, byte [rax]
add byte [rsi + 0x4cffffed], dl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
cld
or al, byte [rax]
add byte [rdx + 0x4cffffed], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 0xb
add byte [rax], al
fsubp st(5)
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jge 0x403a67
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or r8d, dword [rax]
add byte [rax], al
out dx, al
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or eax, dword fs:[rax]
add ah, dh
in eax, dx
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rbx], cl
add byte [rax], al
jrcxz 0x403a97
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
or eax, dword [rax]
add ch, bl
in eax, dx
lcall [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x4c
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
int3
or eax, dword [rax]
add byte [rip + 0x58ffffee], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x4c
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
or eax, dword [rax]
add byte [rsi], bh
out dx, al
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 0xc
add byte [rax], al
xor ch, dh
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 0xc
add byte [rax], al
and dh, ch
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
or al, 0
add byte [rdx], bl
out dx, al
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x403ba2
add byte [rax], al
sub ebp, esi
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
or al, 0
add byte [rsi + rbp*8], bh
jmp qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov ah, 0xc
add byte [rax], al
sub esi, 0x78ffff
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dh, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
or al, 0
add dl, bl
out dx, al
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
hlt
or eax, dword [rax]
add bl, bh
inc ebx
add byte [rax], al
add byte [rsp + rbp], al
cmp eax, 0xe410040
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
mov ecx, 0x8070c
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 0xd
add byte [rax], al
xchg eax, esi
call qword [rip]
adc byte [rsi + 0x60d4302], al
push rax
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rcx - 0x11700000], bh
jmp qword [rbp]
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b8], es
cmp byte [rbx + 0x400e4d07], al
jb 0x403c9a
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
adc al, 0
add byte [rax], al
test byte [rip - 0x11480000], cl
inc dword [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
or byte [rip + 0x41002c05], ah
add eax, 0xffff0000
add dword [rax], eax
inc dword [rbx]
and dword [rcx], eax
test dword [rcx], eax
add eax, 0x1de0000
add eax, 0xa80102eb
add eax, dword [rip - 0x44fffc53]
add eax, dword [rip + 0x10000]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
inc dword [rcx]
add bh, bh
inc dword [rcx]
or byte [rcx + 5], al
imul eax, dword [rax], 0x57e
inc dword [rbx]
adc eax, 0x52e0c01
add dword [rbx + 5], r12d
push 0x57600
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
or byte [rbx + 5], al
imul eax, dword [rax], 0x57e
inc dword [rcx]
and eax, 0x5670000
mov es, word [rcx]
add byte [rbx + 0x501], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax + rax*2], cl
add byte [rax], al
add byte [rax], al
add dh, dl
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
and dword [rcx], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
ror byte [rcx], 1
add byte [rax], al
add byte [rax], al
add byte [rip], cl
add byte [rax], al
add byte [rbx + rbp + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
cmp eax, 0x60
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
cmp eax, 0x60
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax + 5], al
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
leave
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ljmp [rdi]
add byte [rax], al
add byte [rax + 7], al
add byte [rax], al
add byte [rax], al
add bh, bh
ljmp [rdi]
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
ljmp [rdi]
add byte [rax], al
add byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte es:[rax]
add byte [rax], al
add byte [rax], al
or al, byte ss:[rax]
add byte [rax], al
add byte [rax], al
or r8b, byte [rax]
add byte [rax], al
add byte [rax], al
push rsi
or al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
jbe 0x40405c
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x400a], al
add byte [rax], al
add byte [rsi + 0x400a], dl
add byte [rax], al
add byte [rsi + 0x400a], ah
add byte [rax], al
add byte [rsi + 0x400a], dh
add byte [rax], al
add dh, al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
out 0xa, al
add byte [rax], al
add byte [rax], al
add dh, dh
or al, byte [rax]
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
or eax, dword es:[rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, ebp
call 0x3e516ed3
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x404140
je 0x404149
and byte [rip + 0x302e342e], dh
sub eax, 0x75627536
outsb dx, byte [rsi]
je 0x404157
xor dword [rsi + 0x31], edi
xor byte cs:[rsi + rbp], dh
xor al, 0x29
and byte [rip + 0x302e342e], dh
and byte [rdx], dh
xor byte [rcx], dh
xor byte ss:[rsi], dh
xor byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add al, byte [rax]
push rsp
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, dword [rax]
je 0x404154
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], al
cwde
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, 0x4002d000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], al
add byte [rax + 5], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], al
add byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], cl
add byte [rax + 7], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], cl
add al, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], cl
add byte [rax], cl
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or eax, dword [rax]
ror byte [rcx], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], cl
lock or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or eax, 0x400b3000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], cl
add byte [rax + 0xb], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], cl
add byte [rbx + rbp + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], dl
add byte [rax + 0x2b], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], dl
add byte [rax + 0x402b], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], dl
add al, dh
add byte cs:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], dl
add byte [rsp + rdi + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc al, 0
call 0x40a32a
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x603df800], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], dl
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], bl
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], bl
add byte [rax + 0x6040], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], bl
add al, ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0xb], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0x400b], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add al, dh
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rcx], al
add byte [rbx], bl
add al, dh
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add dword [rax], eax
adc eax, 0x603df800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, byte [rax]
add byte [rax], dl
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], al
add byte [rax + rax], dl
call 0x40a4c2
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x4000000], ah
add cl, dh
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000000], ch
add byte [rax], dl
add byte [rax + 0x2b], bh
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, al
add byte [rax], al
add byte [rcx], al
add byte [rbx], bl
add byte [rax - 0x7f], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, dl
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rcx + 0x2b], bh
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ch
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rbx], dl
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
ret
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add dword [rax], eax
add byte [rdx], al
add byte [rsi], cl
add dh, dl
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
adc eax, 0
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add dword [rax], eax
add byte [rcx], al
add byte [rdx], dl
add byte [rax + 0x403c], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add dword [rax], eax
add byte [rcx], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 1], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
mov al, 0x2b
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 1], bl
add byte [rax], al
add dword [rax], eax
sbb dword [rax], eax
add byte [rax + 0x60], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 1], ch
add byte [rax], al
add byte [rax], al
adc al, 0
clc
cmp eax, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jg 0x4045cb
add byte [rax], al
add byte [rax], al
adc al, 0
call 0x40a612
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x1000001], dl
add byte [rdi], dl
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000001], bl
add byte [rsi], cl
add byte [rdx + 0x16], bh
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0xa], al
add byte [rax], al
and byte [rax], al
sbb al, byte [rax]
mov al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000001], dh
add byte [rsi], cl
add byte [rsi + 0x25], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, ah
add dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x401d], bl
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rdx + rax], dl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub byte [rdx], al
add byte [rax], al
and al, byte [rax]
add al, al
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rsi + 2], ah
add byte [rax], al
and al, byte [rax]
add byte [rdx], dh
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x12000002], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x12000002], ch
add byte [rsi], cl
add byte [rax + 0x2b], ah
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000002], bh
add byte [rsi], cl
add dl, bl
and dword [rax], eax
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or r8b, byte [rax]
add byte [rdx], dl
add byte [rsi], cl
add byte [rax + 0xb], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, dh
add al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + rbp + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x13], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rcx], dh
add eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x1a], bh
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword fs:[rax]
add byte [rdx], ah
add byte [rsi], cl
add dl, dl
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000003], ah
add byte [rsi], cl
add byte [rax + 0x29], bh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ah
add eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add dl, dh
and byte [rax], al
add byte [rax], al
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, dword [rax + rax]
add byte [rdx], ah
add byte [rsi], cl
add dh, cl
and dword [rax], eax
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rax + rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x40], bl
add byte [rax], al
push 0
add byte [rax], al
add byte [rdi + 4], dl
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 4], bh
add byte [rax], al
and al, byte [rax]
add dh, cl
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
cdq
add al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x4025], dl
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000004], bh
add byte [rsi], cl
add dl, dl
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
loope 0x40483e
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
add al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + rbx + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add eax, 0x120000
add byte [rax + 0x400e], ah
add byte [rax], al
add bl, cl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add eax, 0x220000
add byte [rsi + 0x4025], bl
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add eax, 0x220000
add dh, bh
and dword [rax], eax
add byte [rax], al
add byte [rax], al
push 0
add byte [rax], al
add byte [rdx + 5], ah
add byte [rax], al
and al, byte [rax]
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + rax + 0x220000], dl
add byte [rsi + 0x17], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov eax, 0x12000002
add byte [rdi], cl
add byte [rbx + rbp + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000005], dh
add byte [rsi], cl
add byte [rsi], cl
sbb eax, 0x40
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ebp, 0x12000005
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dl
add eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
in al, dx
add eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rsi], eax
add byte [rax], al
and al, byte [rax]
add byte [rsp + rbx + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rax], dh
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4026], dl
add byte [rax], al
add byte [rbp], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x401b], ah
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rsi + 6], bh
add byte [rax], al
and al, byte [rax]
add dl, dl
and eax, 0x40
add byte [rax], al
mov dh, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
stosd dword [rdi], eax
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4027], cl
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add al, cl
add byte [rax], al
and al, byte [rax]
add al, ah
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
out dx, al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, 0x22000007
add byte [rsi], cl
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp dword [rdi], eax
add byte [rax], al
adc al, byte [rax]
add byte [rsi], dh
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx + 2], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x11000009
add byte [rbx], bl
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], ah
jp 0x404a44
add byte [rax], al
add byte [rax], al
add byte [rbp + 7], al
add byte [rax], al
and al, byte [rax]
add byte [rbp + rbx + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 7], ch
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
js 0x404acd
add byte [rax], al
add byte [rax], al
add byte [rax + 1], bh
add byte [rax], al
add byte [rdi + rax], ch
add byte [rdx], ah
add byte [rsi], cl
add dl, bl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000007], dl
add byte [rsi], cl
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add dh, al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x404ac9
add byte [rax], al
and al, byte [rax]
add bl, ch
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
call 0x22404ae4
add byte [rsi], cl
add byte [rdx + 0x14], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add dh, bh
and dword [rax], eax
add byte [rax], al
add byte [rax], al
push 0
add byte [rax], al
add byte [rsi], bh
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + rdx + 0x40], al
add byte [rax], al
sub eax, 0
add byte [rax], al
add byte [rdx + 8], bl
add byte [rax], al
and al, byte [rax]
add dh, ch
adc eax, 0x40
add byte [rax], al
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000008], al
add byte [rsi], cl
add bl, al
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ch, 8
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
or byte [rdx], 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, bl
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add ah, dh
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte gs:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
or dword [rax], eax
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 9], cl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4026], cl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000009], al
add byte [rsi], cl
add byte [rdx + 0x16], bh
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rcx + 0x110000], bl
adc byte [rax], al
jo 0x404bfd
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
stosd dword [rdi], eax
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x22], ah
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 9, al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
stc
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x4028], ah
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, byte es:[rax]
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xa], al
add byte [rax], al
adc byte [rax], al
sbb al, byte [rax]
mov al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0xa], cl
add byte [rax], al
and al, byte [rax]
add byte [0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rcx], bh
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x18], ah
add byte [rax], al
add byte [rax], al
add ah, cl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx + rcx + 0x110000], ch
sbb eax, dword [rax]
movabs al, byte [0x700000000000627d]
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2200000a], dh
add byte [rsi], cl
add byte [rsi + 0x4021], ch
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
or al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x4014], dh
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dh
or al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], dl
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rcx], bl
add byte [rax], al
and al, byte [rax]
add ch, bh
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, 0xb
add byte [rax], al
and al, byte [rax]
add al, ch
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rcx], bh
add byte [rcx], dl
add byte [rbx], bl
add al, ah
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2200000b], cl
add byte [rsi], cl
add byte [rax + 0x1f], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200000b], bl
add byte [rsi], cl
add byte [rsp + rbx + 0x40], dl
add byte [rax], al
jp 0x404d5a
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rcx], dl
add byte [rbx], bl
add byte [rax], ah
and dword [rdx], 0
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, al
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, ch
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub byte [rax + rax], cl
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + 0x4014], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bh
or al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], ah
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, byte ds:[rax]
add byte [rcx], dl
add byte [rbx], bl
add byte [rax], ah
jp 0x404e45
add byte [rax], al
add byte [rax], al
add byte [rax + 1], bh
add byte [rax], al
add byte [rsi + 0xc], dl
add byte [rax], al
and al, byte [rax]
add byte [rax], bh
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xc], bh
add byte [rax], al
and al, byte [rax]
add dh, cl
and dword [rax], eax
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs dword [0xc8001a021100000c], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2200000c], ch
add byte [rsi], cl
add byte [rdx], ch
sbb eax, 0x40
add byte [rax], al
cmp al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
ror dword [rax + rax], 1
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x2a], bl
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, 0x2110000
sbb al, byte [rax]
mov eax, 0x6040
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + rcx], al
add byte [rcx], dl
add byte [rbx], bl
add al, ah
jnp 0x404eed
add byte [rax], al
add byte [rax], al
add byte [rax + 1], bh
add byte [rax], al
add byte [rdi + 0xd], al
add byte [rax], al
and al, byte [rax]
add byte [rdx], ch
sbb eax, 0x40
add byte [rax], al
cmp al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
imul ecx, dword [rip + 0x110000], 0x7bd8001b
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
imul ecx, dword [rip + 0x220000], 0xe
add byte [rax + 0x28], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
cwde
or eax, 0x220000
add byte [rax + rbp + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
or eax, 0x120000
add al, dh
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte gs:[rax], al
add byte [rax], al
add byte [rax], al
add al, dl
or eax, 0x220000
add dh, dh
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dh
or eax, 0x220000
add byte [rdx + 0x18], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
or eax, 0x220000
add byte [rax + 0x1b], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x2200000e], dh
add byte [rsi], cl
add byte [rcx + 0x21], ah
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0xe], ah
add byte [rax], al
and al, byte [rax]
add byte [rsi], cl
sbb eax, 0x40
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
jb 0x404f98
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4029], dl
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2200000e], bl
add byte [rsi], cl
add byte [rdx + 0x4025], dl
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, al
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4021], ch
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bl
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4015], dh
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add ch, dh
add byte [rax], al
and al, byte [rax]
add byte [rdi + rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
sldt word [rax]
and al, byte [rax]
add byte [rsi + 0x1b], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0xf], dl
add byte [rax], al
and al, byte [rax]
add byte [rdi + rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg byte [rdi], cl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x1b], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, al
sldt word [rax]
and al, byte [rax]
add byte [rsi], ah
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
fimul word [rdi]
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sldt word [rax]
and al, byte [rax]
add byte [rcx], al
and eax, 0x40
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
and dword [rax], edx
add byte [rax], al
and al, byte [rax]
add al, al
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rdi + 0x10], bl
add byte [rax], al
and al, byte [rax]
add dh, ch
adc eax, 0x40
add byte [rax], al
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x11000010], al
add byte [rdx], bl
add al, al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000010], cl
add byte [rsi], cl
add byte [rsi + rdx + 0x40], ch
add byte [rax], al
jo 0x4050ea
add byte [rax], al
add byte [rax], al
add byte [rax], al
stosd dword [rdi], eax
adc byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi], dh
and dword [rax], eax
add byte [rax], al
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
ficom dword [rax]
add byte [rax], al
adc byte [rax], al
sbb eax, dword [rax]
enter 0x6040, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0x10, al
add byte [rax], al
and al, byte [rax]
add byte [rdx], bh
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x4025], bl
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ah
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x401f], dh
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x11], bl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jns 0x405193
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x401e], ch
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x22000011
add byte [rsi], cl
add byte [rdx + 0x29], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x1c], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add dword [rax], eax
add byte [rcx], dl
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
mov ebp, 0
add byte [rax], al
pushfq
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
js 0x40524d
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add edx, dword [rdx]
add byte [rax], al
and al, byte [rax]
add dl, dl
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte es:[rax]
add byte [rdx], ah
add byte [rsi], cl
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rdx
adc al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x4014], dh
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x12], bh
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x1d], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rdx + 0x220000], dl
add dh, bl
and al, byte [rax]
add byte [rax], al
add byte [rax], al
and eax, dword [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov esi, 0x22000012
add byte [rsi], cl
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rbp], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
jp 0x40528b
add byte [rax], al
adc byte [rax], al
sbb eax, dword [rax]
js 0x405213
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dl
adc al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ah
adc al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add dh, cl
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbp], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x13], cl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push 0x13
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
adc eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x401b], ah
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add ah, al
adc eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x21], dh
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dh
adc eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsp + rdx + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rdx], bl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rcx
adc al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x40], bl
add byte [rax], al
push 0
add byte [rax], al
add byte [rax + 0x14], bh
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4021], ah
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x12000014], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
adc al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + 0x4028], cl
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
adc eax, 0x100000
sbb al, byte [rax]
enter 0x6040, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
unpckhps xmm0, xmmword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rip + 0x220000], dl
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x15], ah
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x18], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x15], ch
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x29], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
cdq
adc eax, 0x220000
add dh, dh
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x12000015], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, cl
adc eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0x15, al
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4020], dl
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0x16
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x13], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rsi + rdx], ch
add byte [rax], al
and al, byte [rax]
add al, ah
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rdx
add byte [rax], al
and al, byte [rax]
add byte [rsi], ah
sub byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000016], al
add byte [rsi], cl
add al, ah
adc eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000016], dh
add byte [rsi], cl
add ah, al
and eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, bh
add byte [rax], al
and al, byte [rax]
add ch, bh
sub byte [rax], al
add byte [rax], al
add byte [rax], al
pop rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
and al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x17], ah
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
call 0x40b5a5
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x17], bh
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4017], dl
add byte [rax], al
add byte [rcx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
cdq
add byte [rax], al
adc al, byte [rax]
add byte [rbx + 0x11], ch
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add dl, cl
or eax, 0x120000
or eax, dword [rax]
ror byte [rcx], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000017], bl
add byte [rsi], cl
add byte [rbx + 0x401f], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dl
add byte [rax], al
and al, byte [rax]
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x1f], ch
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsxd rsi, dword [rdx + 0x74]
jae 0x40567a
jne 0x40566e
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
pop rdi
pop rdi
add byte [rbp + 0x72], ah
imul esi, dword gs:[ebx + 0x74], 0x745f7265
insd dword [rdi], dx
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x40562e
pop rdi
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x4056ac
jb 0x4056b2
pop rdi
jne 0x4056bb
add byte [rbx + 0x6f], ah
insd dword [rdi], dx
jo 0x4056b5
je 0x4056b1
xor eax, 0x5f003538
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x4056d1
jb 0x4056d7
pop rdi
jne 0x4056e0
pop rdi
imul bp, word [rsi + 0x69], 0x615f
jb 0x4056e3
jns 0x4056d3
outsb dx, byte gs:[rsi]
je 0x4056ea
jns 0x40567a
jb 0x4056de
insd dword [rdi], dx
pop rdi
jne 0x4056f0
insd dword [rdi], dx
jns 0x405686
pop rdi
pop rdi
jb 0x4056ec
insd dword [rdi], dx
pop rdi
jne 0x4056fe
insd dword [rdi], dx
jns 0x4056f3
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x4056fe
jns 0x4056fe
outsb dx, byte gs:[rsi]
je 0x405715
jns 0x4056a5
movsxd rsi, dword cs:[rax + 0x70]
add byte [rdi + 0x5a], bl
push rbx
je 0x4056fc
xor dword [rcx], edi
jo 0x40571d
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x405735
jb 0x405738
movsxd rsi, dword [rax + rax + 0x5f]
pop rdx
push rbx
je 0x405717
cmp byte [rdi + 0x5f], bl
imul ebp, dword [rdi + 0x69], 0x74696e
pop rdi
pop rdx
push rbx
je 0x405726
xor dword [rbx], esi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405745
jb 0x405750
add byte [rdi + 0x5a], bl
xor al, 0x31
pop rdi
pop rdi
jae 0x405766
je 0x40575e
movsxd rbx, dword [rdi + 0x69]
outsb dx, byte [rsi]
imul esi, dword [rcx + rbp*2 + 0x61], 0x617a696c
je 0x40576c
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
outsb dx, byte [rsi]
pop rdi
jae 0x405782
jb 0x405785
movsxd rsi, dword [rcx + rbp*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
xor byte [rcx + 0x69], ch
add byte [rdi + 0x47], bl
pop rdi
pop rdi
jae 0x40579a
pop rdi
pop r15
add byte [rdi + 0x5f], bl
push rdx
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push r10
pop rdi
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push rbp
pop rdi
pop rdi
push rdx
pop r15
push rdx
add byte [rdi + 0x47], bl
pop rdi
push rbx
push r12
pop rdi
push rsp
pop r15
add byte [rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x4057da
jns 0x4057da
outsb dx, byte gs:[rsi]
add byte fs:[rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x4057eb
jns 0x4057eb
jae 0x405802
jb 0x405805
add byte [rdi + 0x44], bl
pop rcx
add byte [r15 + 0x5a], bl
push rbx
je 0x4057d6
jno 0x40581a
imul rdx, qword gs:[r11 + 0x61], 0x45456949
xor al, byte [r13 + 0x4f]
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40581f
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x405828
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40581c
imul eax, dword [rbp + 0x31], 0x61656430
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
imul ebp, dword [rbp], 0x534e5a5f
je 0x40581d
xor dword [rdi + 0x44], ebx
jno 0x405867
pop rdi
jae 0x40585d
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rip + 0x615f4d5f], esi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
pop rdi
insd dword [rdi], dx
jo 0x405857
insd dword [rdi], dx
add byte [rax + 0x72], dh
imul ebp, dword [rsi + 0x74], 0x47404066
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x40585f
xor dword [rdi + 0x44], ebx
jno 0x4058a9
pop rdi
jae 0x40589f
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [r13 + 0x4f], eax
push rbx
xor dword [rdi + 0x53], ebx
je 0x40587d
imul ebp, dword [rsi + 0x74], 0x61726765
insb byte [rdi], dx
pop rdi
movsxd rbp, dword [rdi + 0x6e]
jae 0x4058cf
outsb dx, byte [rsi]
je 0x4058a8
xor dword [rbp + 0x45], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x40589d
xor dword [rdi + 0x44], ebx
jno 0x4058e7
pop rdi
jae 0x4058dd
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rsi], esi
pop rdi
pop r15
jae 0x4058fd
jb 0x4058fa
jns 0x4058ec
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jae 0x4058d8
push rax
push rax
imul edx, dword [rbx + 0x33], 0x656d005f
insd dword [rdi], dx
jae 0x405904
je 0x4058e1
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x6c5f5f00
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul bp, word [rsi + 0x69], 0x5f00
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405927
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x405930
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405924
push rax
imul eax, dword [rbp + 0x31], 0x61656430
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor dword [rdi + 0x6d], ebx
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40595a
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x405963
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405957
imul eax, dword [rbp + 0x43], 0x4b524531
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x405954
jno 0x405998
imul rdx, qword gs:[r11 + 0x61], 0x45456949
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x405968
xor dword [rdi + 0x44], ebx
jno 0x4059b2
pop rdi
jae 0x4059a8
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rdi], esi
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
pop rdi
insd dword [rdi], dx
jo 0x4059a4
push rax
push rax
imul ebp, dword [rbp], 0x74535a5f
xor al, 0x6d
outsd dx, dword [rsi]
jbe 0x4059d2
push r10
push rbx
je 0x4059a7
jno 0x4059eb
imul rdx, qword gs:[r11 + 0x61], 0x45456949
push rbx
je 0x4059b6
jb 0x4059ed
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4059f1
pop rdi
jb 0x4059f4
jb 0x4059f8
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x405a0e
push r11
xor eax, 0x5a5f005f
push rbx
je 0x4059db
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
push rax
imul eax, dword [rbp + 0x4e], 0x31317453
pop rdi
imul r14, qword [rbp + r12*2 + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x405a56
jo 0x405a44
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x405a1b
xor dword [rdi + 0x44], ebx
jno 0x405a65
pop rdi
jae 0x405a5b
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rsi], esi
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jbe 0x405a13
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405a7c
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x405a85
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405a79
push rax
imul eax, dword [rbp + 0x44], 0x764531
pop rdi
pop rdx
push rbx
je 0x405a6f
xor dword [rdi + 0x44], ebx
jno 0x405ab9
pop rdi
jae 0x405aaf
imul rdx, qword [r11 + 0x61], 0x45456949
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5f], bl
insd dword [edi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x405ad4
jb 0x405ad7
pop rdi
pop rdi
add byte [rdi + 0x4a], bl
jbe 0x405ac9
push rdx
imul esi, dword gs:[ebx + 0x74], 0x6c437265
jae 0x405aea
jae 0x405a7a
pop rdi
pop rdx
push rbx
je 0x405ab1
xor dword [rdi + 0x44], ebx
jno 0x405afb
pop rdi
jae 0x405af1
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405b02
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x405b0b
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405aff
push rax
imul eax, dword [rbp + 0x43], 0x764532
pop rdi
pop rdx
push rbx
je 0x405af9
jno 0x405b3b
jne 0x405b2e
imul rdx, qword [r11 + 0x74], 0x71656435
jne 0x405b38
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
insb byte [rdi], dx
push rax
jbe 0x405b28
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405b5e
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x405b67
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405b5b
imul eax, dword [rbp + 0x44], 0x764531
pop rdi
pop rdx
xor eax, 0x766c6f73
jbe 0x405b23
pop rdi
pop rdx
push rbx
imul rax, qword [r13 + 0x43], 0x4b524531
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x405b6a
xor dword [rdi + 0x44], ebx
jno 0x405bb4
pop rdi
jae 0x405baa
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rcx], esi
pop rdi
jno 0x405bc9
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x405b9b
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x405bd0
push r10
insd dword [rdi], dx
push rbx
je 0x405ba5
jb 0x405bdc
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x405be0
pop rdi
jb 0x405be3
jb 0x405be7
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x405bfd
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x405bcf
jno 0x405c13
imul rdx, qword gs:[r11 + 0x61], 0x45456949
xor eax, 0x6e6f7266
je 0x405bf3
jbe 0x405bb0
pop rdi
pop rdx
push rbx
imul rax, qword [r13 + 0x43], 0x764532
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
jb 0x405c2a
je 0x405c2f
jb 0x405c38
ja 0x405c0b
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
jo 0x405c4e
je 0x405c3e
push 0x40407261
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x405c2a
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rbx + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push r11
je 0x405c49
xor eax, 0x7165445f
jne 0x405c84
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
imul rdx, qword [r10 + 0x69], 0x64456950
jbe 0x405c34
pop rdi
pop rdx
push rbx
je 0x405c6d
jae 0x405cb2
jo 0x405c87
push rax
push rax
imul eax, dword [rbp + 0x76], 0x535f5452
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x405c85
jno 0x405cc9
imul rdx, qword gs:[r11 + 0x61], 0x45456949
xor dword [rsi], esi
pop rdi
pop r15
jo 0x405cd9
jae 0x405cce
pop rdi
movsxd rbp, dword [rbx + 0x5f]
jne 0x405ce7
push r10
imul rax, qword [r13 + 0x45], 0x70447645
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x405cb7
jae 0x405cfc
jo 0x405cd1
push rbx
je 0x405cbc
xor eax, 0x7165445f
jne 0x405cf7
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
imul rdx, qword [r10 + 0x69], 0x45456950
jbe 0x405cf7
push rsp
pop rdi
push rbx
xor eax, 0x5a5f005f
push rbx
je 0x405ce4
movsxd rbp, dword [rdi + 0x70]
jns 0x405cfe
push rax
push rax
imul edx, dword [rbx + 0x31], 0x3054455f
pop rdi
push rsp
pop rdi
push rbx
xor ebx, dword [rdi + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x405d03
jno 0x405d45
jne 0x405d38
imul rdx, qword [r11 + 0x74], 0x71656435
jne 0x405d42
imul rdx, qword [r11 + 0x61], 0x45456949
xor al, byte [r13 + 0x4f]
push rbx
xor bl, byte [rdi]
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x6174735f
jb 0x405d6e
pop rdi
insd dword [rdi], dx
imul ebp, dword [rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x405d44
xor dword [rdi + 0x44], ebx
jno 0x405d8e
pop rdi
jae 0x405d84
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rcx], esi
pop rdi
jno 0x405da3
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
jbe 0x405d39
pop rdi
pop rdx
je 0x405da1
outsb dx, byte [rsi]
jae 0x405dac
imul eax, dword [rax], 0x394e5a5f
pop rdi
pop rdi
outsb dx, byte [esi]
jne 0x405dae
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x405db7
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405dab
imul eax, dword [rbp + 0x44], 0x764532
jae 0x405dde
add byte [rdi + 0x5a], bl
push rbx
je 0x405da2
xor esp, dword [rbx + 0x6f]
jo 0x405def
pop rdi
movsxd rbp, dword [rbx + 0x77]
jb 0x405de3
push r8
push rax
imul edx, dword [rbx + 0x31], 0x3054455f
pop rdi
push rsp
pop rdi
push rbx
xor ebx, dword [rdi + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x405dca
xor dword [rdi + 0x44], ebx
jno 0x405e14
pop rdi
jae 0x405e0a
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rip + 0x635f4d5f], esi
jb 0x405e1a
je 0x405e1d
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jae 0x405e04
push rax
push rax
imul edx, dword [rbx + 0x33], 0x5f5f005f
movsxd rdi, dword [rax + 0x61]
pop rdi
je 0x405e34
js 0x405e3a
je 0x405e13
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x6e5a5f00
ja 0x405e52
push rax
jbe 0x405de8
pop rdi
pop rdx
push rbx
je 0x405e23
jno 0x405e65
jne 0x405e58
imul rdx, qword [r11 + 0x74], 0x71656435
jne 0x405e62
imul rdx, qword [r11 + 0x61], 0x45456949
xor eax, 0x6e6f7266
je 0x405e52
jbe 0x405e0f
pop rdi
pop rdx
push rbx
je 0x405e46
xor dword [rdi + 0x44], ebx
jno 0x405e90
pop rdi
jae 0x405e86
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rcx], esi
pop rdi
jno 0x405ea5
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x405e79
jno 0x405ebd
imul rdx, qword gs:[r11 + 0x61], 0x45456949
xor eax, 0x69676562
outsb dx, byte [rsi]
jbe 0x405e5a
pop rdi
pop rdx
push rbx
je 0x405e91
xor eax, 0x7165445f
jne 0x405ecc
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
imul rdx, qword [r10 + 0x69], 0x43456950
xor al, byte [rbp + 0x52]
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x405eb7
xor bl, byte [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x405eec
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x405ef6
pop rdi
movsxd rbp, dword [rbx + 0x77]
jb 0x405efe
pop rdi
xor byte [rbp + 0x50], al
push rax
imul edx, dword [rbx + 0x31], 0x3154455f
pop rdi
push rsp
xor byte [rdi + 0x53], bl
xor ebx, dword [rdi + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x405ef3
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rsp + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x405f11
xor dword [rdi + 0x5f], ebx
movsxd rbp, dword [rdi + 0x70]
jns 0x405f47
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x405f51
xor byte [rbp + 0x4c], al
xor dword [rbp + 0x53], eax
je 0x405f2a
jb 0x405f5c
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x405f79
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x405f73
cmp byte [r15d + 0x5f], r11b
movsxd rbp, dword [rdi + 0x70]
jns 0x405f7b
insd dword [rdi], dx
push r8
imul eax, dword [rbp + 0x45], 0x505f5450
push r11
xor al, 0x5f
push rbx
pop rdi
push rbx
xor eax, 0x495f005f
push rsp
pop r15
jb 0x405f9f
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x405f86
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x405fbb
push r10
push rax
push rax
imul eax, dword [rbp + 0x4f], 0x3174534e
jb 0x405fc9
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x405fcd
pop rdi
jb 0x405fd0
jb 0x405fd4
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x405fea
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x405fbc
jno 0x406000
imul rdx, qword gs:[r11 + 0x61], 0x45456949
xor dword [r13 + 0x4f], eax
push rbx
xor dword [rdi], ebx
pop rdi
pop r15
jae 0x406016
imul ebp, dword fs:[rsi + 0x5f], 0x64657375
add byte [rdi + 0x5a], bl
push rbx
je 0x405fe2
xor dword [rdi + 0x44], ebx
jno 0x40602c
pop rdi
jae 0x406022
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rcx], esi
pop rdi
jno 0x406041
pop rdi
imul ebp, dword [rbp + 0x70], 0x5f32316c
pop r15
jae 0x406050
jo 0x40603b
je 0x406041
push r10
push rbx
xor bl, byte [rdi]
jae 0x40604b
outsb dx, byte [rsi]
pop r15w
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x535a5f00
je 0x40602f
xor al, 0x5f
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x406065
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40606f
pop rdi
xor cl, byte [rcx + 0x4c]
xor byte [rbp + 0x50], al
push rax
imul edx, dword [rbx + 0x31], 0x3154455f
pop rdi
push rsp
xor byte [rdi + 0x53], bl
xor ebx, dword [rdi + 0x53]
xor bl, byte [rdi]
pop rdi
push r12
pop r15
jb 0x406092
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5f], bl
je 0x4060a7
pop rdi
jae 0x4060bd
jb 0x4060c0
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4060b6
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4060bf
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4060b3
push rax
imul eax, dword [rbp + 0x38], 0x6f6c6c61
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x40607c
pop rdi
pop rdx
push rbx
je 0x4060b3
xor dword [rdi + 0x44], ebx
jno 0x4060fd
pop rdi
jae 0x4060f3
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rdi], esi
pop rdi
pop r15
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x70616d5f
insd dword [rdi], dx
add byte [rcx + rbp*2 + 0x73], ah
add byte [rdi + 0x5a], bl
push rbx
push r8
imul eax, dword [rbp + 0x43], 0x45694932
push r10
push r11
push r12
pop rdi
add byte [r15 + 0x5a], r11b
push rbx
je 0x4060ff
xor dword [rdi + 0x44], ebx
jno 0x406149
pop rdi
jae 0x40613f
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rcx], esi
pop rdi
jno 0x40615e
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x4060f4
pop rdi
pop rdx
push rbx
je 0x40612f
jno 0x406171
jne 0x406164
imul rdx, qword [r11 + 0x74], 0x71656435
jne 0x40616e
imul rdx, qword [r11 + 0x61], 0x45456949
xor al, 0x70
jne 0x406189
push 0x694b5245
add byte [rdi + 0x5a], bl
push rbx
je 0x406152
pop rdi
pop rdi
jno 0x40619d
pop rdi
jne 0x406193
pop rdi
jae 0x406199
jp 0x406197
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x40616d
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4061a2
push r10
push rbx
je 0x406173
xor dword [rdi + 0x44], ebx
jno 0x4061bd
pop rdi
jae 0x4061b3
imul rdx, qword [r11 + 0x61], 0x45456949
push rbx
je 0x40618d
jb 0x4061c4
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4061c8
pop rdi
jb 0x4061cb
jb 0x4061cf
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x4061e5
push r11
xor eax, 0x7473005f
imul ebp, dword fs:[rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
push r8
imul eax, dword [rbp + 0x44], 0x764531
pop rdi
pop rdx
push rbx
je 0x4061d8
jno 0x40621c
imul rdx, qword gs:[r11 + 0x61], 0x45456949
xor dword [rsi], esi
pop rdi
pop r15
jo 0x406226
jo 0x406218
jb 0x40622b
outsb dx, byte [rsi]
je 0x40621e
jne 0x40623a
jbe 0x4061c5
push rcx
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x406230
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x406239
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40622d
imul eax, dword [rbp + 0x43], 0x764531
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x406254
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40625d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x406251
imul eax, dword [rbp + 0x39], 0x736e6f63
je 0x406283
jne 0x406276
je 0x40625e
imul ecx, dword [rdx + 0x52], 0x4545694b
jbe 0x40626f
push rsp
pop rdi
jo 0x406273
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x406260
insd dword [rdi], dx
imul ebp, dword [rsi + 0x49], 0x4b524578
push rsp
pop rdi
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x406279
jno 0x4062bd
imul rdx, qword gs:[r11 + 0x61], 0x45456949
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push r11
je 0x406292
jno 0x4062d4
jne 0x4062c7
imul rdx, qword [r11 + 0x74], 0x71656435
jne 0x4062d1
imul rdx, qword [r11 + 0x61], 0x45456949
xor eax, 0x74706d65
jns 0x4062c1
jbe 0x40627e
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4062e7
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4062f0
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4062e4
push rax
imul eax, dword [rbp + 0x44], 0x764532
pop rdi
pop rdi
push rsp
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4062e6
xor eax, 0x7165445f
jne 0x406321
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
imul rdx, qword [r10 + 0x69], 0x43456950
xor al, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x406309
xor byte [rdi + 0x5f], bl
movsxd rbp, dword [rdi + 0x70]
jns 0x40633e
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x406348
pop rdi
movsxd rbp, dword [rbx + 0x77]
jb 0x406350
xor byte [rbp + 0x4c], al
xor dword [rbp + 0x53], eax
je 0x40632a
jb 0x40635c
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x406379
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x406373
xor dword [r11d], r14d
pop rdi
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x40637c
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x406386
pop rdi
push r8
imul eax, dword [rbp + 0x45], 0x505f5450
push r11
xor al, 0x5f
push rbx
pop rdi
push rbx
xor eax, 0x5f5f005f
jae 0x4063ab
pop rdi
push 0x6c646e61
add byte gs:[rax + 0x64], dh
add byte [rdi + 0x5a], bl
push rbx
je 0x40637e
xor eax, 0x7165445f
jne 0x4063b9
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
imul rdx, qword [r10 + 0x69], 0x43456950
xor dword [rbp + 0x76], eax
add byte [rcx], dh
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x4063d5
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4063de
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4063d2
push rax
imul eax, dword [rbp + 0x38], 0x5f78616d
jae 0x4063fc
jp 0x4063fa
jbe 0x406398
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x406401
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40640a
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4063fe
imul eax, dword [rbp + 0x43], 0x4b524532
push rbx
xor dword [rdi], ebx
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul ebp, dword [rsi + 0x69], 0x5a5f0074
push rbx
je 0x406407
xor dword [rdi + 0x44], ebx
jno 0x406451
pop rdi
jae 0x406447
imul rdx, qword [r11 + 0x61], 0x45456949
xor al, byte [r13 + 0x4f]
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
imul rax, qword [r13 + 0x44], 0x764532
pop rdi
pop rdx
push rbx
je 0x40643b
outsw dx, word [rsi]
jb 0x40647f
jb 0x40646f
push r10
imul rax, qword [r13 + 0x4f], 0x4e525f54
push rbx
je 0x406449
jb 0x406480
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x406484
pop rdi
jb 0x406487
jb 0x40648b
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor bl, byte [rdi + 0x45]
xor al, 0x74
jns 0x4064a2
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x40646c
xor eax, 0x7165445f
jne 0x4064a7
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
imul rdx, qword [r10 + 0x69], 0x31456950
xor al, 0x5f
push rbx
pop rdi
jne 0x4064c0
jb 0x4064bd
jae 0x4064c9
jp 0x4064c7
jbe 0x406465
pop rdi
pop rdx
push rbx
imul rax, qword [r13 + 0x43], 0x764531
pop rdi
pop rdx
push rbx
je 0x4064a8
xor ebx, dword [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x4064de
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4064e8
pop rdi
xor byte [rbp + 0x50], al
push rax
imul edx, dword [rbx + 0x31], 0x3154455f
pop rdi
push rsp
xor byte [rdi + 0x53], bl
xor ebx, dword [rdi + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x406507
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x406510
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x406504
push rax
imul eax, dword [rbp + 0x43], 0x764531
pop rdi
pop rdx
push rbx
push r8
imul eax, dword [rbp + 0x43], 0x45694931
push r10
push r11
push r12
pop rdi
add byte [r15 + 0x5a], r11b
push rbx
je 0x406516
jno 0x40655a
imul rdx, qword gs:[r11 + 0x61], 0x45456949
xor esp, dword [rbp + 0x6e]
jbe 0x4064f5
pop rdi
pop rdx
push r11
je 0x406531
jno 0x406575
imul rdx, qword gs:[r11 + 0x61], 0x45456949
xor eax, 0x74706d65
jns 0x406555
jbe 0x406512
pop rdi
pop rdx
push rbx
je 0x406549
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x406582
je 0x406597
imul esi, dword [rbx + rsi*2 + 0x49], 0x69496153
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x4065aa
jb 0x4065ad
movsxd rsi, dword [rcx + rcx*2 + 0x69]
push r10
imul rax, qword [r13 + 0x45], 0x53527645
xor byte [rdi + 0x50], bl
push rsp
pop rdi
jo 0x40659d
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push r11
je 0x40658a
xor dword [rdi + 0x44], ebx
jno 0x4065d4
pop rdi
jae 0x4065ca
imul rdx, qword [r11 + 0x61], 0x45456949
xor dh, byte [rax]
pop rdi
pop r15
je 0x4065d5
insd dword [rdi], dx
jo 0x4065d9
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4065c9
jbe 0x406586
pop rdi
pop rdx
push rbx
je 0x4065bd
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4065f6
je 0x40660b
imul esi, dword [rbx + rsi*2 + 0x49], 0x69496153
cmp dword [r11 + 0x6f], r12d
outsb dx, byte [rsi]
jae 0x40661e
jb 0x406621
movsxd rsi, dword [rcx + rcx*2 + 0x69]
push rdx
imul rax, qword [r13 + 0x45], 0x53527645
xor byte [rdi + 0x50], bl
push rsp
pop rdi
jo 0x406611
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x406601
jno 0x406645
imul rdx, qword gs:[r11 + 0x61], 0x45456949
xor dword [r13 + 0x76], eax
add byte [rbp + 0x65], ch
insd dword [rdi], dx
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40664a
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x40662a
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x406663
je 0x406678
imul esi, dword [rbx + rsi*2 + 0x49], 0x69496153
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor byte [rdi + 0x6d], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x406658
xor dword [rdi + 0x44], ebx
jno 0x4066a2
pop rdi
jae 0x406698
imul rdx, qword [r11 + 0x61], 0x45456949
xor al, byte [r13 + 0x4f]
push rbx
xor dword [rdi + 0x53], ebx
je 0x406676
imul ebp, dword [rsi + 0x74], 0x61726765
insb byte [rdi], dx
pop rdi
movsxd rbp, dword [rdi + 0x6e]
jae 0x4066c8
outsb dx, byte [rsi]
je 0x4066a1
xor dword [rbp + 0x45], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x406696
xor eax, 0x7165445f
jne 0x4066d1
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
imul rdx, qword [r10 + 0x69], 0x43456950
xor dword [rbp + 0x52], eax
push r11
xor bl, byte [rdi]
jo 0x4066fb
add byte [rdi + 0x5a], bl
push rbx
je 0x4066c4
jno 0x406708
imul rdx, qword gs:[r11 + 0x61], 0x45456949
cmp dword [rax + 0x75], esi
jae 0x406709
pop rdi
movsxd rbp, dword [rbx + 0x45]
push rdx
imul rax, qword [r8], 0x534e5a5f
je 0x4066e2
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40671b
je 0x406730
imul esi, dword [rbx + rsi*2 + 0x49], 0x50496153
imul eax, dword [rbp + 0x45], 0x6c6c6138
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor dword [rdi + 0x6d], ebx
add byte [rdi + 0x5f], bl
jae 0x406752
pop rdi
jae 0x406756
jb 0x406759
add byte [rdi + 0x5a], bl
push rbx
je 0x406750
jno 0x406736
imul edx, dword [rdx + 0x69], 0x62456950
push rdx
push r11
je 0x40672a
xor eax, 0x7165445f
jne 0x406765
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push rsp
xor byte [rdi + 0x54], bl
xor dword [rdi + 0x45], ebx
push rbx
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
imul rax, qword [r13 + 0x43], 0x4b524532
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x406760
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x406795
push r10
push rbx
imul rax, qword [r13 + 0x45], 0x74534e4f
xor dword [rsi], esi
jb 0x4067a5
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4067a9
pop rdi
jb 0x4067ac
jb 0x4067b0
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x4067c6
push r11
xor ebx, dword [rdi]
pop rdi
pop rdi
jae 0x4067d5
movsxd rbp, dword [rbx + 0x5f]
movsxd rbp, dword [rax + 0x6b]
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x4067b0
xor eax, 0x7165445f
jne 0x4067eb
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
imul rdx, qword [r10 + 0x69], 0x31456950
xor dword [rdi + 0x4d], ebx
pop rdi
jae 0x406802
je 0x4067fe
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r8
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4067e0
xor byte [rdi + 0x49], bl
je 0x406819
jb 0x406815
jae 0x40681f
push r8
push rax
imul ecx, dword [rdx + 0x30], 0x5f374545
push rbx
pop rdi
jae 0x406830
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x406807
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x406840
je 0x406855
imul esi, dword [rbx + rsi*2 + 0x49], 0x69496153
jae 0x406867
jb 0x406864
jns 0x406840
imul eax, dword [rbp + 0x45], 0x30535276
pop rdi
push rax
push rsp
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x40683e
jno 0x406880
jne 0x406873
imul rdx, qword [r11 + 0x74], 0x71656435
jne 0x40687d
imul rdx, qword [r11 + 0x61], 0x45456949
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40685d
xor dword [rdi + 0x44], ebx
jno 0x4068a7
pop rdi
jae 0x40689d
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rcx], esi
pop rdi
jno 0x4068bc
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
jbe 0x406852
pop rdi
pop rdx
push rbx
je 0x406889
xor dword [rdi + 0x44], ebx
jno 0x4068d3
pop rdi
jae 0x4068c9
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rcx], esi
pop rdi
jno 0x4068e8
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x40687e
pop rdi
pop rdx
push rbx
je 0x4068b6
insd dword [rdi], dx
js 0x4068d0
insd dword [rdi], dx
push r10
push r12
pop rdi
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x4068cf
jno 0x406913
imul rdx, qword gs:[r11 + 0x61], 0x45456949
xor dword [rdi], esi
pop rdi
pop r15
jb 0x406913
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
pop rdi
insd dword [rdi], dx
jo 0x406900
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x4068f7
jae 0x40693c
jo 0x406911
insd dword [rdi], dx
jbe 0x40691e
push rsp
pop rdi
push rbx
xor dword [rdi], ebx
jb 0x40693a
outsd dx, dword [rsi]
jo 0x40693d
outsb dx, byte [rsi]
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x40691e
xor dword [rdi + 0x44], ebx
jno 0x406968
pop rdi
jae 0x40695e
imul rdx, qword [r11 + 0x61], 0x45456949
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x406941
jno 0x406985
imul rdx, qword gs:[r11 + 0x61], 0x45456949
xor dword [rip + 0x645f4d5f], esi
jae 0x406996
jb 0x406993
jns 0x406985
je 0x40698b
push r11
je 0x40695f
xor eax, 0x7165445f
jne 0x40699a
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
imul rdx, qword [r10 + 0x69], 0x53456950
xor eax, 0x534b525f
xor byte [rdi], bl
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
outsb dx, byte gs:[rsi]
pop rdi
movsxd rsp, dword [rcx + 0x74]
movsxd rbp, dword [rax + 0x40]
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x4069a0
pop rdi
pop rdi
je 0x4069dc
jb 0x4069e5
ja 0x4069d7
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsi, dword [rsi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x4069cb
jno 0x406a0f
imul rdx, qword gs:[r11 + 0x61], 0x45456949
xor dword [rsi], esi
pop rdi
pop r15
jo 0x406a1f
jae 0x406a14
pop rdi
movsxd rbp, dword [rbx + 0x5f]
jne 0x406a2d
push rdx
imul rax, qword [r13 + 0x45], 0x70447645
push r12
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4069fb
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x406a34
je 0x406a49
imul esi, dword [rbx + rsi*2 + 0x49], 0x69496153
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor byte [rdi + 0x50], bl
imul ebp, dword [rbp], 0x534e5a5f
je 0x406a32
jno 0x406a74
jne 0x406a67
imul rdx, qword [r11 + 0x74], 0x71656435
jne 0x406a71
imul rdx, qword [r11 + 0x61], 0x45456949
xor r14d, dword [r8 + 0x6f]
jo 0x406a5f
jbe 0x406a1c
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x406a85
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x406a8e
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x406a82
imul eax, dword [rbp + 0x39], 0x736e6f63
je 0x406ab4
jne 0x406aa7
je 0x406a8f
imul ecx, dword [rcx + 0x52], 0x4545694b
jbe 0x406aa0
push rsp
pop rdi
jo 0x406aa4
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x406a90
xor dword [rdi + 0x44], ebx
jno 0x406ada
pop rdi
jae 0x406ad0
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push r11
je 0x406ab0
xor dword [rdi + 0x44], ebx
jno 0x406afa
pop rdi
jae 0x406af0
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rcx], edi
pop rdi
pop r15
je 0x406afb
push rsp
jo 0x406afe
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x406aee
jbe 0x406aab
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
imul ebp, dword gs:[esi + 0x5f], 0x63746163
push 0x58434040
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x406aff
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
push rax
imul eax, dword [rbp + 0x4e], 0x31317453
pop rdi
imul r14, qword [r13 + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x406b7a
jo 0x406b68
push r11
xor ebx, dword [rdi]
pop rdi
je 0x406b6f
add byte [rdi + 0x5f], bl
js 0x406b8c
pop rdi
jo 0x406b7c
jb 0x406b8c
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
imul esi, dword [rcx + rdi*2 + 0x5f], 0x40403076
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x406b99
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x406ba2
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x406b96
imul eax, dword [rbp + 0x37], 0x74736564
jb 0x406bc5
jns 0x406ba1
imul eax, dword [rbp + 0x45], 0x5f545076
add byte [rdi + 0x5a], bl
push rbx
imul rax, qword [r13 + 0x44], 0x764531
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x406bd7
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x406be0
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x406bd4
imul eax, dword [rbp + 0x38], 0x5f78616d
jae 0x406bfd
jp 0x406bfb
jbe 0x406b99
pop rdi
pop rdx
push rbx
je 0x406bd0
xor dword [rdi + 0x44], ebx
jno 0x406c1a
pop rdi
jae 0x406c10
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [r13 + 0x4f], eax
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
outsb dx, byte [rsi]
ja 0x406c2d
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
push rbp
outsb dx, byte [rsi]
ja 0x406c3c
outsb dx, byte [rsi]
pop rdi
push rdx
jae 0x406c4f
insd dword [rdi], dx
pop r15
xor ebp, dword [rsi]
xor byte [rax], al
pop rdi
pop rdx
push rbx
je 0x406c21
jno 0x406c65
imul rdx, qword gs:[r11 + 0x61], 0x45456949
xor dh, byte [rdx]
pop rdi
pop r15
jb 0x406c65
jae 0x406c67
jb 0x406c7a
pop rdi
insd dword [rdi], dx
jo 0x406c69
je 0x406c6c
movsxd rbp, dword [rbx + 0x45]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x406c4f
jno 0x406c93
imul rdx, qword gs:[r11 + 0x61], 0x45456949
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x406c67
jno 0x406ca9
jne 0x406c9c
imul rdx, qword [r11 + 0x74], 0x71656435
jne 0x406ca6
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [r13 + 0x4f], eax
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x406cbb
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x406cc4
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x406cb8
imul eax, dword [rbp + 0x38], 0x6f6c6c61
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x406c80
pop rdi
pop rdx
push rbx
je 0x406cb7
xor dword [rdi + 0x44], ebx
jno 0x406d01
pop rdi
jae 0x406cf7
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rcx], edi
pop rdi
pop r15
je 0x406d02
push rsp
jo 0x406d05
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x406cf5
jbe 0x406cb2
pop rdi
pop rdx
push rbx
je 0x406ceb
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x406d20
push r10
push rbx
je 0x406cf1
xor eax, 0x7165445f
jne 0x406d2c
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
imul rdx, qword [r10 + 0x69], 0x45456950
push rbx
je 0x406d0e
jb 0x406d45
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x406d49
pop rdi
jb 0x406d4c
jb 0x406d50
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x406d66
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x406d34
xor ebx, dword [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x406d69
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x406d73
pop rdi
movsxd rbp, dword [rbx + 0x77]
jb 0x406d7b
pop rdi
xor cl, byte [rcx + 0x4c]
xor byte [rbp + 0x50], al
push rax
imul edx, dword [rbx + 0x31], 0x3154455f
pop rdi
push rsp
xor byte [rdi + 0x53], bl
xor ebx, dword [rdi + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x406d6a
xor dword [rdi + 0x44], ebx
jno 0x406db4
pop rdi
jae 0x406daa
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rax], edi
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
push r8
imul eax, dword [rax], 0x6f647473
jne 0x406ddf
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x406db4
jno 0x406df8
imul rdx, qword gs:[r11 + 0x61], 0x45456949
cmp dword [rax + 0x6f], esi
jo 0x406df0
jb 0x406e03
outsb dx, byte [rsi]
je 0x406ddc
jbe 0x406d99
insd dword [rdi], dx
imul ebp, dword [rsi], 0x534e5a5f
je 0x406dd5
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x406e0e
je 0x406e23
imul esi, dword [rbx + rsi*2 + 0x49], 0x50496153
imul eax, dword [rbp + 0x45], 0x65643031
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor dword [rdi + 0x50], ebx
push rbx
xor byte [rdi + 0x6d], bl
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x406e3d
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x406e46
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x406e3a
imul eax, dword [rbp + 0x43], 0x764532
pop rdi
pop rdx
push rbx
push r8
imul eax, dword [rbp + 0x44], 0x764532
add byte [rsi], ch
jae 0x406e83
insd dword [rdi], dx
je 0x406e6e
add byte [rsi], ch
jae 0x406e86
jb 0x406e88
add byte [rsi], ch
jae 0x406e82
jae 0x406e90
jb 0x406e92
add byte [rsi], ch
imul ebp, dword [rsi + 0x74], 0x707265
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x406e93
sub rax, 0x676174
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x406ea1
outsb dx, byte cs:[esi]
jne 0x406e6f
jne 0x406ead
insb byte [rdi], dx
sub eax, 0x2e006469
outsb dx, byte [esi]
jne 0x406e7d
push 0x687361
jns 0x406ec6
jae 0x406ed3
insd dword [rdi], dx
add byte [rsi], ch
jns 0x406ece
jae 0x406ed6
jb 0x406e64
outsb dx, byte cs:[esi]
jne 0x406e97
jbe 0x406ed0
jb 0x406ee0
imul ebp, dword [rdi + 0x6e], 0x6e672e00
jne 0x406ea4
jbe 0x406edd
jb 0x406eed
imul ebp, dword [rdi + 0x6e], 0x2e00725f
jb 0x406ee8
insb byte [rdi], dx
jns 0x406ef7
add byte [rsi], ch
jb 0x406ef2
insb byte [rdi], dx
jo 0x406efe
je 0x406e94
imul ebp, dword cs:[rsi + 0x69], 0x702e0074
insb byte [rdi], dx
je 0x406ecd
outsd dx, dword [esi]
je 0x406ea3
je 0x406f0b
js 0x406f1c
add byte [rsi], ch
imul bp, word [rsi + 0x69], 0x2e00
jb 0x406f21
je 0x406f17
add byte [rsi], ch
push 0x6172665f
insd dword [rdi], dx
pop rdi
push 0x2e007264
push 0x6172665f
insd dword [rdi], dx
add byte gs:[rsi], ch
movsxd rsp, dword [ebx + 0x5f]
js 0x406f3a
jo 0x406f4e
pop rdi
je 0x406f3e
insb byte [rdi], dx
add byte gs:[rsi], ch
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x406f4c
jns 0x406eed
imul bp, word cs:[rsi + 0x69], 0x615f
jb 0x406f68
jns 0x406ef9
push 0x63
jb 0x406efe
jns 0x406f70
insd dword [rdi], dx
imul esp, dword [rbx], 0x746f672e
jo 0x406f7a
je 0x406f10
je 0x406f76
add byte [rsi], ch
jae 0x406f8d
add byte [rsi], ch
movsxd rbp, dword [rdi + 0x6d]
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x406f24
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add dh, dh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rax + 2], bl
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rdx], 1
add byte [rax], al
add byte [rax], al
add al, dl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + 2], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x40
add byte [rax], al
add eax, 0
add byte [rax], al
leave
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 7], al
add byte [rax], al
add byte [rax], al
add byte [rax + 7], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], 0
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, 0
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rdi], 0x40
add byte [rax], al
add byte [rax], al
add al, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x40000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
or byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
enter 1, 0
add byte [rax], al
add byte [rax], al
add eax, 0x19000000
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
or dword [rax], eax
add byte [rax], al
add byte [rax], al
ror byte [rcx], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
or dword [rax], eax
add byte [rax], al
add byte [rax], al
lock or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax + 1], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, esp
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
xor byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
popfq
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xb], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xb], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and ah, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs dword [0x600000001000000], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rbp + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rbx + rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2b], dh
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2b], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1000000], dh
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x402b], dh
add byte [rax], al
add byte [rax + 0x2b], dh
add byte [rax], al
add byte [rbx + rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
add byte cs:[rax], al
add byte [rax], al
add al, dh
add byte cs:[rax], al
add byte [rax], al
add byte [rax], al
int3
or eax, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
leave
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rdi + 0x40], bh
add byte [rax], al
mov esp, 0x3c
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fild dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
cmp eax, 0x60
add byte [rax], al
call 0x407482
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ah
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
cmp eax, 0x60
add byte [rax], al
clc
cmp eax, 0
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte ds:[rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte ds:[rax], al
add byte [rax], al
add byte [rax], al
lock add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], bl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rcx], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x60], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, byte [rcx]
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + 0x40], dh
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add dword [rax], eax
add byte [rax], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
add byte [rax], al
add byte [rax], al
add al, cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
cwde
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x1000001
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
outsb dx, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add byte [rip], dl
add byte [rax], al
add byte [rax], al
add byte [rip + 0x8000000], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rsi
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
