call 0x401430
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x401248
add ebx, ebx
je 0x4011fe
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x401236
cmp rbp, -4
ja 0x401236
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x40121e
add ecx, 4
mov dl, byte [rax]
je 0x401246
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x401236
ret
cld
pop r11
cmp r8b, 2
je 0x40125e
jmp 0x4012db
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x40126e
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x401256
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x401286
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x401273
sub eax, 3
jb 0x4012a4
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x4012db
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x4012cb
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x4012c9
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x4012b8
cmp rbp, -0xd00
adc ecx, eax
call 0x40120a
jmp 0x40125e
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x4013b4
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x401352
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x40139e
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x401371
push 0x3a707474
jne 0x4013ca
js 0x40138a
jae 0x4013c4
outsb dx, byte cs:[rsi]
je 0x401383
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x4013f1
jb 0x4013e3
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x40140e
jb 0x401421
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x212207
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x212207
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x4012ec
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x401417
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x4013c5
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add byte [rax], al
jmp rbp
call 0x706f14bf
jb 0x4014d7
movsxd rbp, dword [rdi]
jae 0x4014d1
insb byte [rdi], dx
js 0x4014d7
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x4014b7
cmp rsi, rcx
jae 0x4014bf
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x40149e
cmp al, 0x8f
ja 0x40149e
cmp byte [rsi - 2], 0xf
je 0x4014a4
sub al, 0xe8
jg 0x4014a1
push rdi
cmp al, 1
ja 0x40148c
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x40148f
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x4014bc
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x401513
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c1991
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x401557
mov al, 0xa
jmp 0x401557
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x401533
inc ebx
mov al, 0
jmp 0x40155b
mov al, 2
jmp 0x40155b
mov al, 3
jmp 0x40155b
mov al, 0x3c
jmp 0x40155b
push rcx
rcr ah, 1
fstp st(7)
jle 0x40159c
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x4015ae
jg 0x4015a0
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a6d23
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x4015fa
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb6777
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x401602
cmp esi, 0x21585055
jne 0x401606
jge 0x4015f8
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x4015fb
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x4015ff
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x4016ab
pop rcx
or al, 0x3b
jb 0x4016b1
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x401623
jmp 0x401625
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x3661566
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf537ae
in eax, dx
jg 0x40165d
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x4016a3
mov bh, 0x2a
add edi, 0x10
jmp 0x4016a0
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x4016dd
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x401719
jne 0x401730
fstpnce st(6), st(0)
jle 0x4016f9
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x40172f
jrcxz 0x401763
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1b6c7
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x4017e2
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x4017a2
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x58295d77
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x401815
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x4017af
and ecx, 7
or al, 0xeb
jae 0x40181a
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x40184f
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x40188d
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x401846
push rax
call 0xffffffff868d1533
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x401850
std
cmp edi, esi
xchg eax, edi
jle 0x4018a5
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c95e31
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x4018a3
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x401891
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x4018ba
js 0x4018fa
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x40198c
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad2bc7
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x4019ad
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x4019b2
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc21464
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x401940
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
ror dword [rsi], 0
add byte [rsi], cl
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], dh
stosb byte [rdi], al
mov byte [rdx], dl
add byte [rax], al
add byte [rax], cl
jmp rax
sbb byte [rax], al
add byte [rcx], dl
or byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rdi], bl
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x401a66
je 0x401a6f
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x401a38
mov dh, 0x7d
jbe 0x401a37
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x401a70
sahf
sahf
add al, 0
cwde
add eax, 0x1f90d000
and byte [rdi + 0x5400006], bl
add byte [rdi + rax], bl
nop
nop
invd
add byte [rax + 9], dl
add al, ah
in al, 7
fsub dword [rdi]
or al, byte [rax]
sub byte [rax], cl
ja 0x401a64
add al, dh
or ebx, ecx
add edx, esi
add ecx, dword [rax + rax]
adc byte [rdx], cl
or eax, 0x1f204f0b
add byte [rax + 0xf], ah
add byte [rsp + rax], dh
push rsi
mov al, 0x1b
out dx, eax
adc byte [rdi], dl
fild dword [rdx + rsi*8]
adc dword [rax], eax
nop
adc al, byte [rsp + rbx]
in al, 0xf
nop
adc eax, dword [rax]
in al, dx
adc al, 0
call 0xa327ac0
in al, 1
adc eax, 0x16f800
add byte [rsi], ch
stc
add al, 0xf2
add dword [rdi], edx
add byte [rax], cl
sbb byte [rax], al
clc
jl 0x401a29
cld
add byte [rcx], bl
add byte [rax], al
xor byte [rdx], bl
add byte [rax - 0x7ec37eca], dh
sbb eax, dword [rax]
loopne 0x401ad6
adc edi, dword [rbx]
xchg eax, edx
ja 0x401b12
add dword [rdi], edx
add al, 0
int1
dec dword [rbx + rbx]
or eax, 0x19bf1657
xchg eax, edi
add dl, byte [rax + 0xc90400e]
xor ah, byte [rcx + 0x17]
sbb edx, eax
mov ebp, 0x2ec8390b
adc byte [rdi], cl
pop rdi
and al, byte [rbx - 0xf582df3]
add dword [rdi], edx
push rbx
mov ebx, 0x477a4f12
xor byte [rcx + 0x57], ah
xchg byte fs:[rdi - 0x6c36285b], dl
or dword [rip + 0xc008fab], 0x51
add cl, byte [rdx - 0x68]
cmp al, 0xc8
mov esp, 0x1f627150
sbb dword [rbx], r11d
retf
ja 0x401b27
or eax, 0x37084361
add byte [rdi - 0x1b], al
in al, dx
retf 0x588
lahf
clc
test dword [r13 + 9], 0x980e5763
adc al, 0x1f
ja 0x401b7e
cwde
xor al, byte [rcx]
outsd dx, dword [rsi]
or eax, 0x36af1b20
add edi, dword [rdi]
and byte [rbx], bh
xchg dword [rdi + 0x65], esi
int 0x2f
add byte [rdi + 0x17], cl
jg 0x401bc8
jb 0x401b01
xchg eax, ebx
sbb eax, dword [rdx]
cmp al, byte [rbx]
mov dl, 0x6b
cmp ebp, dword [rdx]
pop rdi
and dl, byte [rdi]
push rax
add dl, dl
or al, 0x76
push rbp
pop rdi
jle 0x401b8c
in al, 0x60
fmul dword [r13 - 0xfb85ee9]
sbb edx, eax
cmpsd dword [rsi], dword ptr [rdi]
fsub dword [rax - 0x6c6f79ec]
add r12b, dl
pop rcx
adc byte [rsi + 0x65], dh
cld
in al, 0xd9
or ebp, esp
add dl, byte [rdi]
cmp eax, dword [rdx]
cmpsd dword [rsi], dword ptr [rdi]
loopne 0x401bb3
ficom word [rax]
jb 0x401b95
rol dword [rcx], cl
outsd dx, dword [rsi]
mov ss, word [rdi]
retf
xchg eax, ebx
cmp eax, dword [rdi + 0x5370f60]
add eax, 0xd9ec1103
adc esi, dword [rsi]
and byte [rdx], bh
xchg eax, edi
and byte [rdx + 0x48], bh
add dl, byte [rdi]
test byte [rsi + rsi*2], cl
cmp byte [rax + 0x90e9d5f], bh
or al, 0x36
mov bh, 0x17
nop
outsd dx, dword [rsi]
fadd qword [rdx]
and eax, 0x67102ef0
clc
pop rdi
nop
mov gs, word [ebx + 0x1a03075f]
add eax, dword [rax + 0x47605c74]
xor al, 0x57
adc byte [rbx + 0x41384f67], dl
add ebx, dword [rdi]
mov al, 0x17
out dx, eax
sub al, byte [rcx]
cmp dword [rbx + 0x72], edi
nop
jno 0x401c5d
xor dword [rax + 3], esi
jne 0x401b9f
cmp dword [rax - 0x2a], ebx
cdq
mov byte [rax], bh
in al, 0x8c
add dword [rax], 0x31
out 0x50, eax
add ebx, ebx
ja 0x401c37
movabs al, byte [0xc90c88f02178a36]
and al, 0x96
mov eax, 0xd8761760
movabs dword [0x8498c15fa6473477], eax
leave
cwde
test al, 0xff
test byte [rdx + rsi*2], cl
ret 0x1ac0
mov eax, 0x37cb6430
int 0x77
add al, al
xlatb
rol dword [rbx - 0x28], 1
xchg eax, esp
lea esi, [rdi]
sbb esp, dword [rdi + 0x79ba47dd]
jb 0x401c3c
mov bl, 0
cmpsd dword [rsi], dword ptr [rdi]
mov spl, 0x61
adc byte [rbp - 0x16fdfa9c], bh
test dword [rax + rbx], edi
cmp bh, cl
add eax, dword [rdi - 0x1c]
test byte [rsi + rsi*8 + 0x1a], bh
add dword [rdi + 0x58], esi
jno 0x401cd7
sbb al, 4
xchg byte [rax + 0x4d17310b], sil
mov al, 0x5e
and byte [rip - 0x58e8fb8d], bl
add al, 0x1f
loope 0x401ca7
ret 0xc62e
in al, 4
cmpsd dword [rsi], dword ptr [rdi]
enter -0x4f9e, 0x2b
jmp 0x401cc7
adc byte [rdi], ah
fadd dword [rip + 0x47050c76]
fcom dword [rax - 0x17c8f7d0]
xchg eax, edi
mov eax, 0x6143622c
lahf
sahf
pop rax
pushfq
scasd eax, dword [rdi]
mov dl, 0xff
movsxd rdi, edi
add bl, bh
call 0x44b39137
movsxd rbx, dword cs:[rbx]
pop rdi
push r10
pop rdi
outsd dx, dword [rsi]
in eax, dx
ficom dword [rbx + 0x54]
or dword [rax + 0x67657265], esi
imul ebx, dword [rdx], 0x6d745f06
outsd dx, dword [rsi]
outsd dx, dword [rsi]
out dx, eax
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x401d10
outsd dx, dword fs:[rsi]
pop rdi
or esp, dword [edx + 0x61]
insb byte [rdi], dx
or dword [rdi + rbp*2 + 0x72], esi
fcomp st(7)
jle 0x401cfa
jae 0x401d60
jne 0x401d7c
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x401d75
sub dword gs:[rsi + rbp + 0x37], esp
xor eax, 0x8d243538
not byte [rdi]
pop rdi
imul bp, word [rsi + 0x69], 0x7208
jb 0x401d80
jns 0x401d80
mov ch, 0x30
imul ebp
div byte [rdx + 0x79]
add byte [rsi + 0xa], ah
insd dword [rdi], dx
and byte gs:[rbp + 0x6d], dh
insd dword [rdi], dx
jns 0x401d66
or eax, 0x1bac26dd
pop rdi
sub dword [rdx + rbp + 0x43], esi
pushfq
jo 0x401db1
test byte [rbp + 0x4724bfb6], 0x4c
sub r14, qword [rbx - 8]
pop rdi
pop r15
adc bh, bh
fnstsw dword [rbx + 0x74535afd]
cmp byte [rdi], r9b
imul ebp, dword [rdi + 0x31], 0x41524644
pop r15
sub eax, 0xbf73361f
int3
or eax, dword [rdi + 0x4e]
push rbp
outsd dx, dword [rsi]
fld dword [rbx + 0x52444820]
push rbx
out dx, eax
push rsp
sub al, 0x6c
ret 0x4cde
sub byte [r11 + 0x64], r15b
adc bl, bl
retf
pop rbp
sub ecx, dword [rdi + rax]
pop cx
add byte [r15 + 0x6fed7f6d], bpl
mov bh, 0x73
cmc
pop r15
xor ch, byte [rsi]
add ebx, edi
insb byte [rdi], dx
imul esp, dword [rdx + 0x5b], 0x63856b17
movabs byte cs:[0xb42b7d31a34ea2f0], al
mov bh, 0x31
xor esp, dword [rbp + 0x71]
jne 0x401da9
adc dword [rax], esi
imul rdx, qword [r11 + 0x61], -0x4044f533
add eax, dword [rbp + 0x45]
xor r8b, byte [rbp + 0x76]
insd dword [edi], dx
pop rax
pop rax
mov dh, 0x76
adc dh, bh
cmpsd dword [rsi], dword ptr [rdi]
jbe 0x401e48
push rdx
jne 0x401e2f
insb byte [rdi], dx
sub al, 0x2d
jae 0x401e6c
fucomi st(3)
xor eax, 0x93a753d
cmp ebp, -0x4d
or eax, 0x645a3145
insb byte [rdi], dx
push rax
jbe 0x401d91
pop rax
std
jle 0x401de4
pop rax
pop rdi
xor eax, dword [rsi]
adc esi, dword [rip + 0x766c6f73]
movsxd rsi, dword gs:[rax + 0x72]
pop rbx
jbe 0x401ddb
mov dh, byte [rsi - 0x6c]
push 0x1223ac6b
or ch, byte [rsi + 0x6178fb7d]
pop rdi
jb 0x401df5
push 0x1a776f72
cmp al, byte [rip + 0x16d670b6]
push rdi
xor dword [rbx], ebx
je 0x401e7a
push rdi
jae 0x401df7
sbb eax, 0x34386b99
add rax, qword [r11 + 0x69]
div qword [rsi - 0x55]
xchg eax, ecx
js 0x401eb6
outsb dx, byte [rsi]
jne 0x401ece
push -0x201ebc9
movsxd rbp, dword [rbx - 9]
push r10
test al, 0x76
jo 0x401ebc
adc bl, dl
mov bl, 0x21
insd dword [rdi], dx
xchg eax, edi
or bl, bh
pop rdx
mov fs, word ss:[ecx + 0x6e]
jae 0x401eed
cmp bh, ch
movabs al, byte [0x69780d610c2e1236]
mov al, byte [0x57257b46]
push r12
xlatb
clc
movsxd rbx, dword [rbx + 0xc]
push rsp
lodsb al, byte [rsi]
sbb ebx, dword [rbx - 0x5d]
insd dword [rdi], dx
pop rbp
test qword [r8 + r8*4 + 0x5f], r12
lodsd eax, dword [rsi]
mov eax, 0xbd81636c
nop
insd dword [rdi], dx
je 0x401f1f
cmp eax, 0x6d98423b
insd dword [rdi], dx
push rsp
xchg eax, ebx
loope 0x401ea1
btr dword [rax + 0x693e370c], esi
hlt
jp 0x401e83
xlatb
fidivr dword [rbx + 0x4570ee65]
insd dword [rdi], dx
add byte [rdx - 0x29], dh
js 0x401ed7
xor bl, byte [rbx + rbx - 0x4f9baaaf]
mov ebp, 0x76dd6c60
pop rdi
push 0x706e6493
sahf
jno 0x401f4d
sub esi, dword [rsi + rbx]
outsd dx, dword [rsi]
push rdx
jl 0x401f35
fiadd word [rax + rsi*4 - 0x3e]
ret
or esp, dword [rbp + 0x70]
xor esp, dword [rdx + 0x39]
wait
sal byte [rax], 1
sbb dh, bl
xchg ecx, edi
mov ds, word [0x6c6cb25c]
xor al, 0x57
xor al, byte [rdi + 0x66d6f091]
std
outsd dx, dword [rsi]
jo 0x401f87
movabs byte [0x4071b4ed0ad1993], al
pop rax
xchg byte ss:[rax], bl
pop rbp
or ecx, dword [rax - 0xb]
pop rdi
push rax
or eax, dword [rcx - 0x3a]
imul esp, dword [rbx], -7
movsxd rsi, dword ss:[rdi]
scasb al, byte [rdi]
nop
xor cl, byte [rdx + 0x47]
xor dword [rcx], eax
jo 0x401fb0
xchg eax, esp
lodsb al, byte [rsi]
outsb dx, byte [rsi]
xchg eax, esi
push -0x53
cmpsd dword [rsi], dword ptr [rdi]
ret
scasd eax, dword [rdi]
insb byte [rdi], dx
js 0x401edf
sal byte [rsi - 0x57], 1
movabs eax, dword [0x3076d07491c990d0]
mov esi, 0x43d90dad
outsb dx, byte [rsi]
ja 0x401fd9
stosd dword [rdi], eax
push rbp
adc dl, byte [rbx - 0x46]
ud2
cmpsb byte [rsi], byte ptr [rdi]
xchg eax, ebp
js 0x401fe5
insd dword [rdi], dx
xor dh, ah
sbb byte [rcx], bl
shr dword [rdi + 0x75], -0x6d
push rdx
ret
push rbx
pop qword [rbp - 0x1bea834b]
jne 0x401f40
xchg eax, ebx
fnsave dword [rsi + 0x73]
jns 0x402003
je 0x40200d
push 0x36dcb709
rcr dword [rbx + 0x6e077092], cl
outsd dx, dword [rsi]
mov dl, byte cs:[rdi]
pop rbx
sub eax, 0x670d6715
outsb dx, byte [rsi]
jne 0x401fe3
jne 0x401f6f
sub eax, 0x8d6235ad
imul eax, dword [rbx], 0x938120d
ja 0x401f9c
out dx, al
jns 0x402039
sbb dword [r14 - 0x29], r14d
or ch, byte [rsi - 0x3e]
pop rdx
imul ebx, eax, 0xc31b5f0c
sub eax, 0x48b5ec10
sub byte [rcx], cl
test al, 0x74
xchg eax, ebx
fistp dword [rsi + 0xa4172e3]
sub al, 0x6f
or byte [rdi + 0x1e], bl
movabs eax, dword [0x2e2b6f24af05397b]
push 0x41ecb74
xchg eax, edx
push 0x5d0d7264
movsxd rdi, dword [rdx - 0x7b949cae]
movsxd rbp, dword cs:[rcx - 0x42]
mov ebp, 0x25b3616c
loopne 0x402027
and byte [rbx + 0xb], al
pop rbx
lodsb al, byte [rsi]
shr dword [rdx + 0x59], -0x5f
imul ebx, dword ss:[rdx - 0x33], 0x68bd9b31
jnp 0x402088
movabs dword [0xfd52370735b60004], eax
add byte [rax], al
mov al, 0xa4
pop rsi
sbb eax, 0x90ff971b
pushfq
mov ebp, 0x3f07d759
sbb al, 3
ror byte [rcx + rcx*8], cl
add dword [rbx], esp
push rsp
xor cl, r8b
and byte [rax + 4], dl
and byte [rbx + 0x32], al
and al, 0x31
je 0x402037
push rax
xor cl, al
je 0x402083
jg 0x402058
cmp esp, esp
ljmp [rdi - 0x68]
cwde
and dword [rcx], ebx
nop
xor al, 5
or byte [rcx], bl
insb byte [rdi], dx
or r10, rax
ror cl, 1
jo 0x402083
sti
xchg eax, edx
nop
sbb byte [rsi + 3], dl
sahf
lahf
fadd qword [rcx]
or dword [rcx - 0x40a1445c], esi
inc edi
jbe 0x402020
mov ebp, 0x702bf07
imul edi, dword [rcx + 0x3f7480c9], -2
push rax
retf -0x7cda
pushfq
cmpsd dword [rsi], dword ptr [rdi]
nop
jmp qword [rsi]
xchg dword [rip + 0x3f537a61], eax
loopne 0x4020ea
test byte [rax - 0xb7c0f9], bl
cmp eax, dword [rdi + rdi - 0x6d1bc0be]
outsd dx, dword [esi]
enter 0x1901, 5
sbb dword [rcx + rax + 0x2506138e], eax
mov esp, 0xff076709
sbb cl, ch
mov byte [rax - 0x70c076f3], dl
mov dl, 0x21
cmp ecx, eax
jo 0x402133
adc byte [rdi], al
wait
adc dword [rcx], esp
sbb edx, dword [rdi + rdi - 0x4dc4f849]
add eax, 0x9d0f2f86
cmp al, 0x73
xchg eax, ebx
and dword [rax + 7], esp
jg 0x4020df
mov rcx, dr7
insb byte [rdi], dx
cmp dword [rdi], 0x9b99c9a3
add dword [rdi + 0x409ff07], esi
or byte [rcx + 0x43], cl
test eax, 0x245defbf
iretd
fadd qword [rdi]
jg 0x40217a
add byte [rcx - 0x6f27cdf4], dh
nop
jg 0x4020c4
insb byte [rdi], dx
sub dword [rdx + 0x32], eax
xchg eax, esp
mov edi, 0x13c9177f
sbb al, 0x3f
in al, dx
add cl, cl
jae 0x4020d9
and ah, byte [rdi + rdi - 0x59]
jg 0x4020e7
outsb dx, byte [rsi]
sub byte [rcx], bh
cmp ebx, ebx
add ecx, dword [rcx]
outsd dx, dword [rsi]
mov edi, 0xc9437480
adc bh, ah
movhps qword [rax], xmm4
mov eax, 0xff07f8c9
sub al, 0x3b
mov bl, 0x25
pop rbp
cmp byte [rdi], 0xf8
wait
cmp dword [rcx - 0x1a], edi
jg 0x402173
add dword [rsi], eax
sub eax, 0x10219064
cwde
jb 0x40211e
or al, 0xb2
mov edi, 0x20082f2f
add dword [rcx], eax
and al, 0x43
leave
fnstenv [rax]
mov al, 0xa
and eax, 0xb0326e67
lcall [rax]
and byte [rbx], al
ror byte [rip - 0x1ff7c0f0], cl
leave
test byte [rax + rcx*8], bh
enter 0x4078, 2
and byte [rsp], ch
or dword [rip + 0x17307f15], 0x3f
xchg dword [rbp - 0x40cbc7d0], eax
adc dword [rax - 0x3e], esp
mov ah, byte [rbp + 0x7b]
xchg dword [rax - 0x6a], eax
adc dword [rdx + 0x4e], ecx
mov edi, 0x7e4ebb1e
lodsd eax, dword [rsi]
or al, 0xd8
jmp qword [rax]
or bl, byte [rdi]
and dword [rax + rax + 0x69], ebp
xor cl, byte [rcx]
jg 0x4021eb
mov esp, esp
leave
and byte [rbx], bh
add ax, 0
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rip + 0x5a080216], ecx
xchg eax, edx
enter 0x2b40, 0x15
rcl dword [rcx], 1
loopne 0x402232
add byte [rax], al
adc dword [rax], ecx
add byte [rax], al
test al, 0x49
add byte [rax], al
add byte [r8], al
cmpsd dword [rsi], dword ptr [rdi]
hlt
add byte [rax], al
add bh, bh
