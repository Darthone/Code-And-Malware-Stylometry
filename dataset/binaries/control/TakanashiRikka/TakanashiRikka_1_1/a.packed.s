call 0x400eb8
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x400cd0
add ebx, ebx
je 0x400c86
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x400cbe
cmp rbp, -4
ja 0x400cbe
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x400ca6
add ecx, 4
mov dl, byte [rax]
je 0x400cce
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x400cbe
ret
cld
pop r11
cmp r8b, 2
je 0x400ce6
jmp 0x400d63
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x400cf6
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x400cde
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x400d0e
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x400cfb
sub eax, 3
jb 0x400d2c
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x400d63
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x400d53
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x400d51
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x400d40
cmp rbp, -0xd00
adc ecx, eax
call 0x400c92
jmp 0x400ce6
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x400e3c
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x400dda
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x400e26
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x400df9
push 0x3a707474
jne 0x400e52
js 0x400e12
jae 0x400e4c
outsb dx, byte cs:[rsi]
je 0x400e0b
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x400e79
jb 0x400e6b
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x400e96
jb 0x400ea9
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x211960
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x211960
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x400d74
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x400e9f
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x400e4d
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add dword [rax], eax
jmp rbp
call 0x706f0f47
jb 0x400f5f
movsxd rbp, dword [rdi]
jae 0x400f59
insb byte [rdi], dx
js 0x400f5f
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x400f3f
cmp rsi, rcx
jae 0x400f47
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x400f26
cmp al, 0x8f
ja 0x400f26
cmp byte [rsi - 2], 0xf
je 0x400f2c
sub al, 0xe8
jg 0x400f29
push rdi
cmp al, 1
ja 0x400f14
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x400f17
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x400f44
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x400f9b
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c1419
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x400fdf
mov al, 0xa
jmp 0x400fdf
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x400fbb
inc ebx
mov al, 0
jmp 0x400fe3
mov al, 2
jmp 0x400fe3
mov al, 3
jmp 0x400fe3
mov al, 0x3c
jmp 0x400fe3
push rcx
rcr ah, 1
fstp st(7)
jle 0x401024
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x401036
jg 0x401028
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a67ab
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x401082
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb61ff
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x40108a
cmp esi, 0x21585055
jne 0x40108e
jge 0x401080
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x401083
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x401087
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x401133
pop rcx
or al, 0x3b
jb 0x401139
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x4010ab
jmp 0x4010ad
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x3660fee
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf53236
in eax, dx
jg 0x4010e5
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x40112b
mov bh, 0x2a
add edi, 0x10
jmp 0x401128
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x401165
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x4011a1
jne 0x4011b8
fstpnce st(6), st(0)
jle 0x401181
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x4011b7
jrcxz 0x4011eb
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1b14f
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x40126a
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x40122a
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x582957ff
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x40129d
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x401237
and ecx, 7
or al, 0xeb
jae 0x4012a2
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x4012d7
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x401315
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x4012ce
push rax
call 0xffffffff868d0fbb
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x4012d8
std
cmp edi, esi
xchg eax, edi
jle 0x40132d
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c958b9
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x40132b
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x401319
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x401342
js 0x401382
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x401414
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad264f
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x401435
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x40143a
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc20eec
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x4013c8
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
insb byte [rdi], dx
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax + 0x20], al
mov dl, byte [rdx]
add byte [rax], al
add byte [rax], ah
add edi, edi
test byte [rdi], dl
add byte [rax], al
int 7
add byte [rax], al
add al, byte [rax]
add byte [rax], al
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x4014ee
je 0x4014f7
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x4014c0
mov dh, 0x7d
jbe 0x4014bf
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0x83
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x4014f8
sahf
sahf
add al, 0
cwde
add eax, 0x1f90d000
and byte [rdi + 0x4f80006], bl
add byte [rsi + rax + 0xf9027c8], bh
or byte [rax], al
lock or dword [rax], eax
in al, 0x13
enter 0xa07, 0
movabs al, byte [0x3e409960908000b]
or al, 0
xor byte [rip + 0x3958130a], cl
sal byte [rdi + 0xe], 0x17
wbinvd
in al, 3
in al, 0
adc edx, dword [rax]
add al, ah
add al, 0xf2
add edx, esi
adc dword [rax], eax
sbb byte [rdx + rdx], dl
add byte [rax - 0x3d13fe6a], dl
adc esi, dword [rdi]
sbb eax, 0x1e14d760
sahf
rcl byte ds:[rdi], 0x15
add byte [rax], dl
add byte [rax], bl
and byte [rdi - 0x7ffe8c0], bl
sbb byte [rax], al
add byte [rdi], ah
nop
seto byte [rax]
sbb dword [rax], eax
nop
sbb al, byte [rax]
outsb dx, byte [rsi]
retf -0x6fda
loopne 0x401555
adc eax, dword [rcx]
retf 0x4762
add al, 0
int1
dec dword [rbx + rbx]
mov edi, 0xe1a69217
sbb dword [rdi + 2], edi
jo 0x4015aa
sbb dword [rax + rcx*2 - 0x42], esp
mov al, 0x2e
cmp ebx, ecx
mov ebp, 0xa75f4421
add byte [rdx], ah
add dword [rdi], edx
jbe 0x40158b
push rbx
jp 0x4015b3
in al, 0x42
adc byte [rbx], cl
xchg byte [rdi + 0x57610ce3], dl
movsd dword [rdi], dword ptr [rsi]
xlatb
stosd dword [rdi], eax
femms
fldenv ss:[rsp + 0x148fc677]
popfq
sbb al, 0xec
ja 0x4015f4
adc bh, byte [rsi]
nop
xchg eax, ebx
adc dword [rdi], 5
add dword [rbp - 0x7237b0eb], esp
jae 0x4015c5
add dword [rdi - 0x78], edx
pop rax
or bl, ah
pop rbp
and al, 0x17
mov r11d, 0x30076232
cwde
mov bh, 0x43
ret 0x95d8
adc dword [rdi], esp
pop rcx
adc ecx, dword [rdi - 0x65]
adc ah, byte [rsi + 0x53]
push 0x17
jge 0x40160c
sbb dh, ch
xchg eax, ebp
adc dword [rdi + 0x6f5a0370], ebx
pop rbp
pop rcx
jae 0x4015d5
xchg byte [rdi], ch
add byte [rdx - 0x7bcdef32], bl
mov cl, 0xc5
out 0x60, eax
sbb ecx, dword [rdi - 0x30]
adc eax, dword [rdx]
je 0x4015ec
ror byte [rsi + rsi*2], cl
out dx, eax
sub al, byte [rdi - 0x2b]
and byte [rcx + 0x43], ah
fadd dword [rax]
in al, 0x17
clc
ja 0x40165b
iretd
or al, byte [rdx]
pop rdi
cmp eax, 0xce17b20c
xor cl, al
adc al, 0xef
rol byte [rdi + rax*2], 1
iretd
add bh, byte [rbx + 0x65]
add bl, byte [rdi - 0x70]
and esp, ebp
xor edx, dword [rdi]
pop rax
adc dword [rdi + 0x1d9c8432], esp
adc byte [rcx], al
outsd dx, dword [rsi]
jbe 0x40161d
in al, 0x10
adc al, 1
and byte [rdx], ah
sbb al, 0x5f
mov bl, 0x27
xchg dword [rax + rbp*4], ecx
xor esi, dword [rax]
adc dword [rdi + 0x6e], eax
nop
lodsb al, byte [rsi]
shr byte [rdi - 0x2f], 0x77
sbb al, 0x42
nop
and ch, ch
xor al, byte [rbx]
jb 0x4015ff
loopne 0x4016a9
add al, 0x2f
add ecx, dword [r14 + 0x5405ec0b]
add ebx, dword [rdi + 0x6e]
push rdi
mov bl, 0x67
nop
adc byte [rbx + 3], bh
mov edi, 0xce1721f0
jbe 0x4016d4
nop
or byte [rsi + 0x1720a02f], cl
and ecx, ebx
sahf
xchg eax, r9d
add al, byte [rdi - 0x30]
sbb esp, esp
in al, dx
leave
test byte [rax], al
and bpl, byte [rdi]
adc byte [rbp + 0x6c8641c], bl
cwde
ja 0x401639
movabs al, byte [0xb0ad289c8320e133]
and byte [rdi + 0x41], ah
sbb byte [rbx + rcx + 0x7609fb1], cl
nop
jne 0x40170c
mov al, 0x65
xlatb
rol dword [rdi - 0x34], 0x5f
cdqe
xor eax, 0x6710cdc8
xchg eax, ebx
movabs r10, 0x90e577ba4f22cf9a
mov bl, 0x43
or byte [rdi + 1], cl
add al, 0x2f
loop 0x40170a
sahf
sbb al, 0x6c
pop rdi
out dx, al
add al, 0x3c
and ch, byte [rsi]
movsxd rsi, dword [rsi - 0xa]
add dword gs:[rdi + 0x49f7718], ecx
or byte fs:[rbx + 0x66175140], bh
sbb eax, 0xcf201812
scasb al, byte [rdi]
add al, 0xef
sbb dword [rdi], edx
mov word [rbx - 0x4b], ss
add al, 0x87
and bh, byte [rcx + 0x60c8360c]
mov edi, 0xcd5f6ff0
sbb dword [rdi], eax
imul esp, eax, 0x10736e7
xadd dword [rsi + 0x4d7e4e4], eax
clc
jmp 0x401741
loop 0x401720
jb 0x4016d8
mov edi, 0xbba83711
inc dword [rdx + 0x3f]
shr byte [rdi + 0x63], 0x72
je 0x401797
mov al, 0x66
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
mov bh, 0xf6
outsd dx, dword [rsi]
dec dword [rdx + 0x43]
push rdx
pop rdi
push r11
push rsp
or dword [rax], eax
jb 0x4017a3
imul ebx, dword [edx], 0xb7745f06
mov bh, 0x77
ljmp [rbp + 0x5f]
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x401772
outsd dx, dword fs:[rsi]
pop rdi
or esp, dword [edx + 0x61]
insb byte [rdi], dx
or dword [rdi + rbp*2 - 0x14], esi
outsd dx, dword [rsi]
mov edi, 0x5f7372fd
jne 0x4017de
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x4017d7
sub dword gs:[rsi + rbp + 0x37], esp
xor eax, 0x46243538
jg 0x401772
or ebx, dword [rdi + 0x66]
imul ebp, dword [rsi + 0x69], 0x61727208
jns 0x4017e2
and esp, ebx
mov bh, 0x5b
loope 0x4017fc
jns 0x4017c5
or ch, byte [rbp + 0x65]
and byte [rbp + 0x6d], dh
insd dword [rdi], dx
jns 0x4017c7
wait
mov al, 0x6e
ror byte [rip + 0x2a74295f], 0x42
pushfq
pop rdx
sti
push qword [rsi + 0x70]
jo 0x4017cb
pop rdx
push rbx
je 0x4017f7
xor dword [rcx], edi
jo 0x401818
movsxd rsp, dword gs:[rbp + 0x77]
cdq
sub eax, 0xdb7d9dbb
ja 0x401829
lahf
jb 0x401833
movsxd rsi, dword [rdx + rbx + 0x38]
imul r13d, dword [r15 + 0x3b], 0xddb5bec6
xor al, 0x31
or al, 0x1b
je 0x40183b
movsxd rcx, dword [rbp + 0x69]
fld xword [rsi - 0x33]
fisttp qword [rdx + 0x300d7a69]
push rdi
outsb dx, byte [rsi]
in al, 0xfe
div byte [rdi]
wrmsr
imul ebp, dword [rcx + 0x2f], 0x424f4c47
xor r10b, al
mov ebx, 0x495fbe6f
pop rdi
js 0x40178d
push rdx
pop r15
or r8b, cl
xchg eax, esi
wait
or eax, dword [rdi + 0x4e]
push rbp
and bl, dil
test dword [rdi + 0x524448ec], ebx
cmp eax, 0x5346464f
cmp r10b, byte [r9 + rax*2 + 0x42]
sub byte [r10 - 0x3927b27b], r15b
adc byte fs:[rbx - 0x23e4908e], bl
out dx, al
cmpsd dword [rsi], dword ptr [rdi]
pop rcx
jb 0x401859
je 0x4018a6
std
div byte [rdi + 0x42494940]
pop r15
xor ch, byte [rsi]
add dword [rip + 0x6f534ec4], esi
insb byte [rdi], dx
jae 0x40189b
imul ebx, dword [rbx + 0x58], 0x581683ea
pop rax
pop rdi
xor ecx, dword [rbx]
and eax, 0xdb6dfa6d
xchg byte [rsp + rsi*2 + 0x2a], ch
pop rdi
fisub word [rdx - 0x17]
movsxd rdi, dword [rsi + 0x8bb7317]
packuswb xmm5, xmmword [rbp - 0x26]
mov bl, 0x6c
clc
clc
jbe 0x4018e2
push rdx
int3
insb byte [rdi], dx
jae 0x4018fd
leave
jo 0x401902
ja 0x401870
and ebp, dword [rbx]
imul byte [rdi + 0x35]
movsxd rbp, dword [rax + 0x5a]
imul esi, dword [rsi + 9], -0x4e
jae 0x401919
jbe 0x401907
jbe 0x4018c9
adc eax, dword [rax + rbx*4 - 0x53]
push rax
sub byte [rsp + rsi*2 - 0x1e28c4c8], bh
cmp al, 0x2c
in al, dx
fnsave dword [rcx + rcx*2]
xor dword [r13 + 0x76], eax
cmpsb byte [rsi], byte ptr [rdi]
xchg eax, ecx
xor al, 0x36
or ebx, dword [rcx + 0x2b]
cmpsd dword [rsi], dword ptr [rdi]
in al, dx
test eax, 0x591f0a99
jnp 0x40193a
lodsb al, byte [rsi]
enter 0x7863, 0x61
and dh, byte [rax - 0x58226f3e]
js 0x401944
loop 0x40191e
js 0x401945
cld
push r12
pop r15
mov esp, 0xb63f8d62
or al, 0x43
mov edx, 0xa1626154
xchg eax, esp
jrcxz 0x4018d5
push rcx
add al, 0x31
xor esi, edx
fmul dword [rdx - 0x4a411479]
packsswb mm0, qword [rbp + 0x45]
push rdx
adc esi, dword [rbx]
push rbp
mov ah, 0x46
outsd dx, dword [rsi]
sbb esp, dword [rbp - 0x74]
adc eax, 0x355345ca
mov ebx, 0x5ff64775
push rax
movsxd rsp, dword [r8 + 0x4f]
mov edi, 0x755fba64
test byte [rsi + 0x42], al
jrcxz 0x401972
jae 0x401996
push rcx
mov ecx, 0xf605b5b0
sbb byte [rcx + 0x42d761dc], 0xf6
std
call qword [rbp + 0x64c2e322]
cmp byte [rcx], dh
insb byte [rdi], dx
mov byte fs:[rdi + 0x68], bl
mov dl, 3
imul ebx, dword [rbp - 0x52948fc5], 0x6d
jmp 0x40191e
or al, byte [rbp - 0x2ff314e7]
push rcx
mov bh, 0xed
test dword [rcx + 0x5733e14e], esi
js 0x4019b7
imul edx, edx, 0x3253c04b
outsb dx, byte [rsi]
adc al, 0x9c
jnp 0x40197b
and ebx, dword [rdi]
fldenv [rax]
push -0x269efb95
push rsi
insb byte [rdi], dx
je 0x40192f
mov al, 0x5d
push 0x5249ed2d
xor ecx, dword [rdi + 0x60]
xor dword [rsi], esi
mov edx, 0x5ee86da1
xadd dword [rsi + 0x46], esp
outsb dx, byte [rsi]
movsxd rbx, dword [rcx]
or dword [rdx], edi
mov edi, ss
mov esi, 0x70797434
cdqe
push rax
mov ebx, 0x256da10
push rbx
sbb bl, byte [rsi]
xor ch, dh
sbb ecx, dword [rcx]
insd dword [rdi], dx
outsd dx, dword [rsi]
sub edi, edx
or r10, qword [r8]
or dl, byte [rbp + 0x7c]
xor byte [rsi + r8*4], r11b
test byte [rip + 0x7b5f367e], cl
mov bl, 0xfb
imul dword [rax]
or al, 0x52
jae 0x401a55
jo 0x4019cb
jbe 0x401a35
xchg dword [rcx - 0x470edae2], edx
imul rbx, qword [r11 + 0x4d], 0x6fc6423d
jne 0x401a35
outsb dx, byte [rsi]
xor byte [rbx - 0x3d], 0x4e
jbe 0x4019d5
jns 0x401a69
je 0x401a73
push 0x6dcb4b09
jae 0x401a41
jo 0x401a12
outsb dx, byte [rsi]
outsd dx, dword [rsi]
cld
sal dword [rsi + 0xd67152d], 0x67
outsb dx, byte [rsi]
jne 0x401a4a
jne 0x401a58
sub eax, 0xc5ad6f69
or al, byte [rsi + 0x938c20d]
jns 0x401a9c
or dh, byte [rbx + 0x74f7336]
sbb dword [r10], r15d
mov ecx, 0xf2b57309
pop rcx
or al, 0x5f
sbb eax, dword [rdx]
rcr dword [rsi - 0x57], -0x28
jnp 0x401a6f
or dword [rdx], esi
mov eax, 0x74de19ed
jb 0x401a12
or ch, byte [rdi + rbp*2]
or bh, al
mov edx, 0x5f87393
ret
and al, 0x6f
jmp 0x401a8d
fnstenv gs:[rdx + 0x1c688107]
push 0x3a0d7264
loopne 0x401a1d
fldcw word [rbp + rcx*2 + 0x7b6a0b31]
or ebp, dword [rip + 0x248fd156]
add byte [r14 + 0x69], r10b
movsxd rsi, dword [rsi]
sub r8, qword [rdi + rbp*4]
xor eax, 0x406b6c00
jmp 0x401a8d
add byte [rbx - 0x1882e6a0], dl
add dword [rdi + 0x392192bf], ebx
jnp 0x401aa2
sbb al, 1
movsb byte [rdi], byte ptr [rsi]
sbb dword [rbx], esp
push rsp
xchg byte [rax + rdx*4 + 0x54], spl
and byte [rax + rdx*4], al
xchg byte [r9 + rsi + 0x74], spl
je 0x401a7c
mov ebx, 0x442464a1
jg 0x401ab1
ljmp [rdi + 0x20]
or dword [rdx + rsi*2], 0xffffff98
cwde
cmp byte [rbx + rax*2], dh
xor cl, al
add eax, 0xe0b4e08
xor bl, al
adc al, 0x3f
shr byte [rax], 1
add ah, byte [rax]
xchg eax, ebx
sti
sbb ch, cl
and eax, 0x870356cd
ja 0x401a78
cmp al, 0xe1
ret
add dword [rsi - 0x41], ebx
jnp 0x401aa4
ljmp [r15 - 0x4de440f9]
and dword [rcx], edi
add al, byte cs:[rdi]
imul edi, dword [rdi], -0x34
movsb byte [rdi], byte ptr [rsi]
mov edi, 0xf25d8037
push rax
add byte [rdx], al
jp 0x401b61
js 0x401ac7
add al, 0xff
sbb eax, 0x3f4e4216
inc dword [rdx + rsi + 0x3f8320c8]
movabs al, byte [0x1801680e4b9006a0]
mov cs, ecx
and bl, byte [rax + 0x10]
adc ebp, dword [rsi + 0x4e4a1bdf]
push -0x76e500f9
jo 0x401ad7
and dword [rax], esi
jo 0x401b82
mov dl, 0x21
mov ebx, 0x3f940710
or dl, byte [rcx + 0xa06302d]
setns byte [rbx + 0x3f9dd90c]
jg 0x401b2b
or esp, esp
xchg eax, edx
or dword [rdi], edi
movabs dword [0x9ff07870804dcce], eax
insb byte [rdi], dx
sbb cl, byte [rdx - 0x57]
mov edi, 0x4a193fe0
sbb eax, esp
xor eax, 0x49b99b1
and dword [rdi + 0x24323f07], eax
leave
je 0x401b4c
nop
mov esp, esp
or dword [rsi + 7], ebp
cld
add dword [rcx + 0x30], ecx
imul edi, dword [rdx + 0x30e0ec9], 0x39d917bf
mov esp, 0xd53f2f07
or edx, dword [rsi + 0x7170f34]
ftst
add al, byte [rdi + rdi*4 - 0x7ef2c01f]
or al, 0x32
adc byte [rax], dl
out 0xc8, al
and byte [rbx], al
sar byte [rdi + 6], cl
sbb byte [rax], bl
nop
and dword [rcx], edi
cmp eax, esp
add dword [rsi], eax
adc byte [rsi + 0x52], ch
test byte [rax + rbx*4 + 0x2f], ah
enter 0x5b0e, 0x64
jg 0x401be0
out dx, eax
leave
fldenv [rcx]
and byte [rdi], bh
nop
outsb dx, byte [rsi]
xor ah, byte [rbx + rax*2]
clc
nop
mov bl, 0x8b
in al, 0x19
mov edi, 0x4bfe003c
xor cl, al
loopne 0x401bc6
cmp byte [rsp + rax*8], ah
xchg eax, ecx
rol dword [rdx + 0xf], 3
xchg dword [rbp + 0x179f3b64], eax
xor byte [rdi], bh
xor al, 0xec
mov al, 0x10
jg 0x401c18
adc dword [rbx - 0x1c], edi
add al, 0x4e
fld dword [rax]
sub byte [rdi], 0x7f
or al, 0x86
insb byte [rdi], dx
sbb dword [rcx + 0x202100bb], esp
int 0xc9
mov bl, 0xbf
nop
or dword [rsi], ebx
xor edi, dword [rcx + rdi]
test byte [rip + 0x2a907f09], cl
add al, 0
add byte [rax - 0x6f], ah
nop
add byte [rax], al
add bh, bh
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rip + 0x34080216], ecx
xor eax, 0xa79d0bc0
std
test byte [rdi], dl
add byte [rax], al
int 7
add byte [rax], al
push rax
cmp byte [rax], al
add byte [rcx + 1], cl
add bl, ch
hlt
add byte [rax], al
add bh, bh
