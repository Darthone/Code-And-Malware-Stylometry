call 0x401040
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x400e58
add ebx, ebx
je 0x400e0e
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x400e46
cmp rbp, -4
ja 0x400e46
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x400e2e
add ecx, 4
mov dl, byte [rax]
je 0x400e56
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x400e46
ret
cld
pop r11
cmp r8b, 2
je 0x400e6e
jmp 0x400eeb
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x400e7e
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x400e66
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x400e96
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x400e83
sub eax, 3
jb 0x400eb4
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x400eeb
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x400edb
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x400ed9
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x400ec8
cmp rbp, -0xd00
adc ecx, eax
call 0x400e1a
jmp 0x400e6e
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x400fc4
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x400f62
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x400fae
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x400f81
push 0x3a707474
jne 0x400fda
js 0x400f9a
jae 0x400fd4
outsb dx, byte cs:[rsi]
je 0x400f93
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x401001
jb 0x400ff3
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x40101e
jb 0x401031
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x211af7
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x211af7
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x400efc
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x401027
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x400fd5
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add byte [rax], al
jmp rbp
call 0x706f10cf
jb 0x4010e7
movsxd rbp, dword [rdi]
jae 0x4010e1
insb byte [rdi], dx
js 0x4010e7
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x4010c7
cmp rsi, rcx
jae 0x4010cf
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x4010ae
cmp al, 0x8f
ja 0x4010ae
cmp byte [rsi - 2], 0xf
je 0x4010b4
sub al, 0xe8
jg 0x4010b1
push rdi
cmp al, 1
ja 0x40109c
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x40109f
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x4010cc
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x401123
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c15a1
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x401167
mov al, 0xa
jmp 0x401167
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x401143
inc ebx
mov al, 0
jmp 0x40116b
mov al, 2
jmp 0x40116b
mov al, 3
jmp 0x40116b
mov al, 0x3c
jmp 0x40116b
push rcx
rcr ah, 1
fstp st(7)
jle 0x4011ac
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x4011be
jg 0x4011b0
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a6933
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x40120a
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb6387
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x401212
cmp esi, 0x21585055
jne 0x401216
jge 0x401208
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x40120b
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x40120f
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x4012bb
pop rcx
or al, 0x3b
jb 0x4012c1
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x401233
jmp 0x401235
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x3661176
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf533be
in eax, dx
jg 0x40126d
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x4012b3
mov bh, 0x2a
add edi, 0x10
jmp 0x4012b0
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x4012ed
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x401329
jne 0x401340
fstpnce st(6), st(0)
jle 0x401309
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x40133f
jrcxz 0x401373
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1b2d7
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x4013f2
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x4013b2
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x58295987
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x401425
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x4013bf
and ecx, 7
or al, 0xeb
jae 0x40142a
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x40145f
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x40149d
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x401456
push rax
call 0xffffffff868d1143
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x401460
std
cmp edi, esi
xchg eax, edi
jle 0x4014b5
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c95a41
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x4014b3
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x4014a1
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x4014ca
js 0x40150a
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x40159c
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad27d7
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x4015bd
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x4015c2
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc21074
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x401550
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
int3
add eax, 0xe0000
add byte [rax], al
add al, byte [rax]
add byte [rax], al
and byte [rax + 0x90], bpl
add byte [rax], al
add byte [rax], al
and byte [rcx], al
push qword [rbp + 0x67000016]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x401676
je 0x40167f
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x401648
mov dh, 0x7d
jbe 0x401647
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0x89
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x401680
sahf
sahf
add al, 0
cwde
add eax, 0x1f90d000
and byte [rdi + 0x5100006], bl
add byte [rax], dh
nop
nop
invd
add byte [rax + 9], ah
add al, ah
in al, 7
fsub dword [rdi]
or al, byte [rax]
or byte [rdi + 0x9a8000b], spl
xor al, byte [rcx + 0x170c0395]
or eax, 0xd8072b02
or dh, byte [rdi + 0xe]
cmp dword [rax + rax*4 + 0x7c], 0x1574000f
adc byte [rax], al
add byte [rax + 0x3e], 0x81
cmp al, 0x11
add byte [rdx + rdx - 0x37e9f000], dh
nop
adc eax, dword [rax]
clc
sbb eax, 0x8001460
enter -0x37ed, 7
adc eax, 0x161000
sbb dl, dh
add esp, esp
adc edx, dword [rdi]
add al, bh
sbb byte [rax], al
add byte [rax], ah
add al, 0xf2
add dword [rcx], ebx
add byte [rax - 0x211fffe6], dl
fld dword [r11 + rbx]
adc eax, dword [rcx]
add al, 0
int1
lcall [rcx + rbx*2 - 0x14]
or al, 0x1b
mov edi, 0xfb099019
xor al, 0x7f
add cl, byte [rbx]
sbb ecx, ecx
and byte [rdi], dl
jb 0x401701
or al, 0x2e
fmul st(1)
out dx, al
or eax, 0xa75f44
and al, byte [rcx]
mov al, 0x2b
and dword [rdx], esi
push rbx
jp 0x40173e
and eax, 0x80648644
xchg byte [rdi + 0x7610d876], dl
movsd dword [rdi], dword ptr [rsi]
xlatb
stosd dword [rdi], eax
or r9d, dword [r15 + 0x720c8392]
mov esp, 0xce3b452c
ret 0xcb1f
sub byte [rax], bl
test byte ss:[rax + 0x21], dh
fnstenv [rdi]
add byte [rdi - 0x52], al
mov eax, ds
adc ch, ah
add eax, 0x7630f887
and eax, 0xef747c4
cwde
adc esp, dword [rdi + 0x1f94d984]
xor al, byte [rcx]
or al, 0xf7
retf 0x4778
outsd dx, dword [rsi]
add dword [rbx], eax
pop rdx
scasb al, byte [rdi]
lodsb al, byte [rsi]
mov ecx, 0xd52f3b01
add byte [rdx + 7], dl
cmp ebx, ecx
jo 0x40176c
add dl, byte [rdi]
add eax, 0x93b06403
mov al, 0xb
sub al, byte [rdi + 0x62]
sbb dword [rax - 0x46], eax
and dword [rdi - 0x6369dfe9], eax
sbb al, 0x6c
or byte [rdx - 0x7cf26f89], ch
in al, 0xc9
xchg eax, ebx
xor dword [rcx + rax + 0x6c80e20], 0xffffff86
mov al, 0x21
in al, 0xbe
out dx, eax
pop rsp
add bh, byte [rbx + 0x65]
or dword [rdx], eax
movsb byte [rdi], byte ptr [rsi]
out dx, al
adc dword [rdi + 0x10], ebx
add dword [rdi], ebp
cmp dword [r13 + rcx - 0x45b89bdf], r8d
add byte [rax], ah
sbb dword [rbp + 0x1c45103c], 0x5f
jle 0x4017ba
jb 0x4017a5
in al, 0x40
and dh, byte [rax]
adc dword [rdi - 0x7e], eax
push rax
mov ebx, 0xf7643840
cmpsd dword [rsi], dword ptr [rdi]
add dh, byte [rdi]
ret
enter -0x68a0, 0x15
test dword [rdi + rcx*4], 0x610cd1d2
in eax, 0x47
call qword [rax]
pushfq
cmp eax, 0xc27803b
add esp, dword [rdi + 0x81721f0]
jb 0x401795
cmp eax, dword [rbx + 0x20bc2f1f]
leave
test byte [rdx], 2
enter 0x84, 0x64
nop
mov bl, 0x41
adc byte [rsi], ch
jb 0x40178b
and dword [rbx], ebx
cwde
ja 0x40183b
xor byte [rbx], 0x84
or dword [rdx + rsi*2], 0x28
movabs al, byte ds:[0x9f422e3061064f20]
add byte [rdi], al
je 0x40182d
enter 0x5241, 3
scasd eax, dword [rdi]
pop rdi
adc byte [rip - 0x3c29bc9f], cl
ja 0x4017df
nop
mov bl, 0x83
and byte [rdx], ah
add al, 0xd8
in al, 0xc9
and dword [rdi + 4], edi
add byte [rbp + 0x1a], al
add dword [rax], ecx
mov ebx, 0x30776790
hlt
cmpsd dword [rsi], dword ptr [rdi]
xor ecx, dword [rsi - 0x37]
jae 0x401851
add al, 0x19
adc byte [rdi + rdi], al
nop
pop rsi
enter 0x33c0, 0x14
add al, 0xa7
or esp, esp
cmp dword [rdi], -0x29
pop rdi
add al, 0x74
jb 0x401825
add al, 0xdf
clc
and r8b, byte [r10 + 6]
cmp ecx, ebx
adc al, 3
fsub dword [rcx + rsi]
sbb edi, dword [rdi + rsi*2 - 0x51]
sahf
xlatb
std
add byte [rbx + 0x630f4c33], cl
jb 0x4018f8
jae 0x40182f
std
dec dword [rbx]
push rcx
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
or dword [rax - 0x12], ecx
call rsi
jle 0x401905
jb 0x401907
imul ebx, dword [edx], 0x6d745f06
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x4018d2
mov bh, 0xff
div dh
outsd dx, dword fs:[rsi]
pop rdi
or esp, dword [edx + 0x61]
insb byte [rdi], dx
or dword [rdi + rbp*2 + 0x72], esi
jae 0x401922
jne 0x40193e
outsd dx, dword [rsi]
insd dword [rdi], dx
jg 0x40184c
std
in eax, dx
jo 0x40193b
sub dword gs:[rsi + rbp + 0x37], esp
xor eax, 0x5f243538
imul bp, word [rsi + 0x69], 0x5dad
call 0x72b22153
jns 0x401946
ret 0x7972
ror dword [rdx], 0x37
out dx, al
fld xword [rbp + 0x65]
and byte [rbp + 0x6d], dh
insd dword [rdi], dx
jns 0x40192b
or eax, 0xbb7f295f
pop r8
je 0x40192c
pushfq
jo 0x401976
and al, 0x47
sti
fistp dword [rbx]
insd dword [rdi], dx
sub esi, dword [rbx + 5]
pop rdi
pop r15
ja 0x401978
pop rdx
push rbx
je 0x401969
cmp byte [rdi], cl
out 0xfe, al
mov ebx, 0x316f6977
push rdx
pop r15
mov edi, 0x3e5b07cc
insb byte [rdi], dx
or eax, dword [rdi + 0x4e]
push rbp
and byte [rax + 0x44], cl
mov ebp, 0x52b27edf
push rbx
out dx, eax
push rsp
sub byte [r14 + 0x58], r10b
fadd dword [rbx + rdi*2 + 0x70c1064]
std
ja 0x4018f3
mov ebx, 0x4e594466
jle 0x4019b3
push rbx
outsd dx, dword [rsi]
insb byte [rdi], dx
jae 0x4019af
imul eax, dword [rax + 0x40], 0xbfd1aef0
pop r8
pop rax
pop rdi
xor ecx, dword [rbp + 0x62696c32]
movsxd rbx, dword [rdx]
lodsd eax, dword [rsi]
xor dword [rbp + 0x6d9da5f3], esp
fcomi st(2)
adc al, 0x74
push 0x5f776f72
sbb ah, byte fs:[rcx + 0x49]
jbe 0x401958
pop rcx
loope 0x40192d
xor al, 0x67
insd dword [rdi], dx
mov al, 0x4a
jbe 0x401a24
fmul dword [rsi]
ret 0x525f
jle 0x4019ef
insb byte [rdi], dx
jae 0x401a2b
pop rdx
xor eax, 0xfb5b6863
cld
mul dword [rbp + 0x63]
imul esi, dword [rsi + 9], 0x73
outsd dx, dword [rsi]
insb byte [rdi], dx
jbe 0x401a27
pop r13
je 0x401a34
lodsb al, byte [rsi]
std
jns 0x401a3d
movsxd rax, dword gs:[r13 + 0x31]
xor ebx, dword [rdi + 0x4d]
pop rdi
ja 0x401a41
mov ecx, 0xdd6445b6
outsb dx, byte [rsi]
mov ebx, 0x31312e2f
jo 0x401a59
sbb dh, byte [rsi - 0x7d]
push -0x3103d295
add dword [rcx - 0x32d1cda1], 0x74
cmp byte [rdx + 0x73], cl
mov dl, 0xdd
int 0xa2
outsb dx, byte [rsi]
xor al, 0x49
xor dword [r9 - 0x35], eax
or dword [ebx + edi + 0x34], ebp
movsxd rdx, dword [rbx + 0x6dbdf272]
cld
rcl dword [rsi + 0x5a6061b5], 1
add dword [rax], edx
movsxd rdi, dword [rax + 0x61]
jge 0x401a81
insd dword [rdi], dx
sub eax, dword [rbx - 0x35]
js 0x401a79
sbb dword [rcx + 0x6e], eax
jae 0x4019df
push rdi
jb 0x4019ae
js 0x401a74
push r12
lea edi, [rdi]
mov dh, 0x65
xchg eax, edx
or al, 0x43
nop
push rsp
ja 0x401a4b
in eax, dx
jne 0x401a5f
jp 0x401aab
jne 0x401aa8
jne 0x401a8a
mov dl, 0x73
mov al, 0x17
mov dl, 0xb
pop rsi
outsb dx, byte [rsi]
cmp byte [rip - 0x527be8c5], 0x2d
push rsp
xchg eax, edi
fld dword [rax + rsi*2 - 0x52]
adc byte [rdx + 0x312226ba], dh
jne 0x401a45
test ecx, ecx
jns 0x401acf
push 0x703b6460
cmp byte [rsp + rax*4], cl
lodsd eax, dword [rsi]
imul ebp, edx, 0x6d
out dx, eax
je 0x401adb
movabs dword [0x14d47274d0ef496d], eax
mov ah, 0x75
test esi, edx
xchg eax, ebp
pop rsp
popfq
adc eax, 0xba614e31
or eax, 0x4b4ec35b
jae 0x401a4a
push r10
adc esi, dword [rbx]
insd dword [rdi], dx
sbb eax, 0x69f5ed87
movsxd rbp, dword [rip + 0x6c308a49]
push rbx
test byte cs:[rsi - 0x27afc050], dh
xor ebx, dword [rcx - 0x40]
cmp dword [rsi], edi
movsxd rdx, esi
call 0xffffffffae4c7d2c
jg 0x401af7
insb byte [rdi], dx
jo 0x401ab4
fdiv st(5)
push 0x24284e2e
pop rbx
jrcxz 0x401aa2
sub al, 0xe7
xchg byte [rdi + 0x6c], ch
movsxd rdx, ebx
xor al, 0x79
outsd dx, dword gs:[rsi]
movsb byte [rdi], byte ptr [rsi]
movsxd rcx, dword gs:[rax + rdx*8 - 0x6e2ef6f2]
xor eax, 0xd8586925
xor esi, dword [rax + 0x75]
movsxd rsp, dword [rax + 0x21]
and esp, dword [rsp + rbp*2]
sub ch, byte [rdi + 0x75]
int3
mov word [rbx + 0x38b466d0], cs
and dword [rbx + 0x3b45a23b], ecx
js 0x401b3a
lodsb al, byte [rsi]
movsxd rsi, dword [rax]
sub dword [rcx + 0x73], edi
jns 0x401a9c
popfq
in al, dx
mov dh, 0x6d
js 0x401b7e
je 0x401b91
push -0x491a5af7
loopne 0x401aa9
cmp dh, byte [rax + 7]
outsb dx, byte [rsi]
outsd dx, dword [rsi]
movabs eax, dword cs:[0x67152d49db60fedd]
or eax, 0x2e756e67
jne 0x401b14
sub eax, 0xb6215ade
add byte [rip + 0x6409385a], cl
jns 0x401bba
push 0x4fe66d67
sbb dword [r14 + 0x44], r14d
loopne 0x401b7e
lodsb al, byte [rsi]
push rax
or al, 0x5f
sbb ebx, dword [rbx - 0x3f]
pop rsi
test eax, 0x9285a06
ret
je 0x401b4b
mov dh, 0x67
js 0x401be0
ret 0x2c0a
outsd dx, dword [rsi]
or byte [rdi - 0x18], al
mov bl, 5
and al, 0x6f
and dword [rsi], ebp
retf
lodsb al, byte [rsi]
push 0x726468ad
or eax, 0x66c3813a
mov bl, 0x29
xor dword [rbx], ecx
push 0x62
in al, dx
sub eax, 0x248f58b4
out 0, eax
push rsi
imul ebx, dword [rdx], 0x4cd98668
add al, 0x40
insd dword [rdi], dx
push rdi
add eax, eax
mov edx, 0x170000e9
add edx, dword [rsi - 0x10d0fe2f]
and dword [rcx], ebx
xchg eax, edx
mov bl, 0x3f
sbb al, 1
sbb dword [rax + rax*2 - 0x66], esp
and eax, dword [rdi]
push rsp
push rsp
xchg byte [rax + rcx*2 + 6], ah
and byte [rcx + rsi], al
sbb dword [rax + rcx*2 + 0x74], esp
je 0x401bf7
xchg dword [rbx + rbx - 0x980bbb6], edi
ljmp [rdi - 0x68]
or al, 0x32
enter -0x67e0, 0x38
add eax, 0x83243348
or byte [rsi + 0xb], cl
in al, dx
and byte [rbx - 0x2fc02ff3], al
add dil, bl
or al, 0x32
ftst
sbb byte [rsi - 0x22], dl
and al, 0x58
rol byte [rbx], cl
mov bh, 7
je 0x401c1e
leave
adc edi, dword [rdi]
add bl, byte [rsi - 0x41]
push qword [rbx - 0x2069f6c9]
mov edi, 0x921b21ba
xor byte [rdx], al
imul edi, dword [rdi], -2
iretd
fsub qword [rax + rax*2 + 0x60]
mov edi, 0x3080080
fsub dword [rip + 0x537aff02]
add al, 0x37
cmp dword [rdi + rdi], ebp
loopne 0x401c3f
fsub dword [rcx + 0x21]
in al, 0x60
inc dword [rdi + rdi + 0x3260b37b]
push rdi
or al, 0x20
xchg eax, edi
cmp al, 0x68
add dword [rax], ebx
mov cs, ebp
and cl, al
and byte [rbx], dl
outsd dx, dword [rsi]
insb byte [rdi], dx
sub byte [rcx], bh
loope 0x401c64
lcall [rdx]
mov dword [rdi], edi
add al, cl
xchg r8b, r10b
jo 0x401c4d
enter -0x137a, 0x10
xchg eax, esp
or al, byte [rdi - 0x4a]
rcr byte [rax], 0xa
setge byte [rdi + 0x6e]
xor ah, byte [rdi + rdi - 0x20]
jg 0x401c14
and al, 0x87
sub eax, 0xa33f0a90
in al, 0xec
int 0x2a
out 7, eax
dec dword [rcx]
rol dword [rsi - 0x40565e5c], -0x80
xchg eax, edx
movabs eax, dword [0x64192b133809064]
sbb dword [rsp + rsi*4 + 0x4844265c], esi
xchg byte [rdi - 0x61b74769], bh
loopne 0x401cb9
sbb al, 2
leave
and al, 0x58
xor esp, dword es:[rdi + 0x1cec8b1f]
fiadd word [rdi]
wait
add al, 0x4b
emms
insb byte [rdi], dx
jb 0x401cd0
ret 0xe1bf
xchg byte [rax + 6], al
cdq
adc byte [rax], dl
out 0x64, al
nop
add ecx, ebp
jg 0x401ce6
sbb byte [rax], bl
enter -0x6370, 0x1c
loopne 0x401ce9
adc byte [rdi], dh
and eax, dword [rdx + 0x32]
cwde
pop rdi
xchg dword fs:[rip - 0x10f880ce], ebp
in al, 0xec
mov al, 0x20
and byte [rdi], bh
nop
sbb dword [rdx + 0x790f8a1], edx
sbb edx, dword [rdx + 0x103f0c0b]
dec byte [rbx + 0x20]
or dword [rsi + rsi + 0x3f], 0xffffffe0
ret
sbb al, 0x19
sub al, 0xe4
push rax
and al, 0xf
add ebx, dword [rax + 0x48]
mov dh, 0x17
call qword [rdi]
xor byte [rdi], bh
or esp, dword [rcx + 0x70]
xor al, 0x7f
adc dword [rcx], ecx
pop rsp
retfq
jnp 0x401d4c
jg 0x401cea
sbb dword [rbx - 0x44fef31c], ecx
add byte [rdx - 0x742986d], bl
and byte [rdi + 0x311e0930], bh
jb 0x401d54
sbb eax, dword [rax + 9]
jg 0x401d79
sub al, byte [rax]
shl byte [rdx], 0x79
add dword [rcx + rax], 0
add byte [rax], al
and bh, bh
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rip + 0x57080216], ecx
idiv byte [rdx]
cmp byte [rcx - 0x4a2852d5], 0x16
add byte [rax], al
add byte [rax], al
js 0x401dc1
add byte [rax], al
add byte [r8], al
jmp 0x401d85
add byte [rax], al
add bh, bh
