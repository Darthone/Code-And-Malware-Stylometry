xor ebp, ebp
mov r9, rdx
pop rsi
mov rdx, rsp
and rsp, 0xfffffffffffffff0
push rax
push rsp
mov r8, sym.__libc_csu_fini
mov rcx, sym.__libc_csu_init
mov rdi, sym.main
call sym.imp.__libc_start_main
hlt
nop word [rax + rax]
mov eax, 0x60513f
push rbp
sub rax, obj.__TMC_END__
cmp rax, 0xe
mov rbp, rsp
jbe 0x401420
mov eax, 0
test rax, rax
je 0x401420
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop word [rax + rax]
pop rbp
ret
nop dword [rax]
nop word cs:[rax + rax]
mov esi, obj.__TMC_END__
push rbp
sub rsi, obj.__TMC_END__
sar rsi, 3
mov rbp, rsp
mov rax, rsi
shr rax, 0x3f
add rsi, rax
sar rsi, 1
je 0x401468
mov eax, 0
test rax, rax
je 0x401468
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop dword [rax]
pop rbp
ret
nop word [rax + rax]
cmp byte [rip + 0x203ef9], 0
jne 0x40148a
push rbp
mov rbp, rsp
call sym.deregister_tm_clones
pop rbp
mov byte [rip + 0x203ee6], 1
ret
nop dword [rax]
mov edi, obj.__JCR_LIST__
cmp qword [rdi], 0
jne 0x4014a0
jmp sym.register_tm_clones
nop dword [rax]
mov eax, 0
test rax, rax
je 0x40149b
push rbp
mov rbp, rsp
call rax
pop rbp
jmp sym.register_tm_clones
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x108
mov qword [rbp - 0x108], rdi
mov qword [rbp - 0x110], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x110]
mov esi, 3
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov ebx, dword [rax]
mov rax, qword [rbp - 0x110]
mov esi, 0
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov edx, dword [rax]
sub edx, ebx
mov dword [rax], edx
mov rax, qword [rbp - 0x110]
mov esi, 5
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov ebx, dword [rax]
mov rax, qword [rbp - 0x110]
mov esi, 2
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov edx, dword [rax]
sub edx, ebx
mov dword [rax], edx
mov rax, qword [rbp - 0x110]
mov esi, 1
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov ebx, dword [rax]
mov rax, qword [rbp - 0x110]
mov esi, 4
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov edx, dword [rax]
sub edx, ebx
mov dword [rax], edx
mov rax, qword [rbp - 0x110]
mov esi, 0
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
mov dword [rbp - 0xf0], eax
mov rax, qword [rbp - 0x110]
mov esi, 2
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
mov dword [rbp - 0xec], eax
mov rax, qword [rbp - 0x110]
mov esi, 4
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
mov dword [rbp - 0xe8], eax
cmp dword [rbp - 0xf0], 0
js 0x4015de
cmp dword [rbp - 0xec], 0
js 0x4015de
cmp dword [rbp - 0xe8], 0
jns 0x40161c
lea rax, [rbp - 0xf1]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xf1]
mov rax, qword [rbp - 0x108]
mov esi, str.IMPOSSIBLE
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xf1]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x401e37
cmp dword [rbp - 0xf0], 0
jne 0x401646
mov rax, qword [rbp - 0x110]
mov esi, 3
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
test eax, eax
jle 0x401646
mov eax, 1
jmp 0x40164b
mov eax, 0
test al, al
je 0x40168d
lea rax, [rbp - 0xf1]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xf1]
mov rax, qword [rbp - 0x108]
mov esi, str.IMPOSSIBLE
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xf1]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x401e37
cmp dword [rbp - 0xec], 0
jne 0x4016b7
mov rax, qword [rbp - 0x110]
mov esi, 5
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
test eax, eax
jle 0x4016b7
mov eax, 1
jmp 0x4016bc
mov eax, 0
test al, al
je 0x4016fe
lea rax, [rbp - 0xf1]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xf1]
mov rax, qword [rbp - 0x108]
mov esi, str.IMPOSSIBLE
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xf1]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x401e37
cmp dword [rbp - 0xe8], 0
jne 0x401728
mov rax, qword [rbp - 0x110]
mov esi, 1
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
test eax, eax
jle 0x401728
mov eax, 1
jmp 0x40172d
mov eax, 0
test al, al
je 0x40176f
lea rax, [rbp - 0xf1]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xf1]
mov rax, qword [rbp - 0x108]
mov esi, str.IMPOSSIBLE
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xf1]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x401e37
mov edx, dword [rbp - 0xe8]
mov eax, dword [rbp - 0xec]
add eax, edx
cmp eax, dword [rbp - 0xf0]
jge 0x4017c3
lea rax, [rbp - 0xf1]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xf1]
mov rax, qword [rbp - 0x108]
mov esi, str.IMPOSSIBLE
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xf1]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x401e37
mov edx, dword [rbp - 0xf0]
mov eax, dword [rbp - 0xec]
add eax, edx
cmp eax, dword [rbp - 0xe8]
jge 0x401817
lea rax, [rbp - 0xf1]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xf1]
mov rax, qword [rbp - 0x108]
mov esi, str.IMPOSSIBLE
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xf1]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x401e37
mov edx, dword [rbp - 0xe8]
mov eax, dword [rbp - 0xf0]
add eax, edx
cmp eax, dword [rbp - 0xec]
jge 0x40186b
lea rax, [rbp - 0xf1]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xf1]
mov rax, qword [rbp - 0x108]
mov esi, str.IMPOSSIBLE
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xf1]
mov rdi, rax
call sym.std::allocator_char_::_allocator
jmp 0x401e37
lea rax, [rbp - 0xf1]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0xf1]
lea rax, [rbp - 0xe0]
mov esi, 0x40383b
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0xf1]
mov rdi, rax
call sym.std::allocator_char_::_allocator
cmp dword [rbp - 0xf0], 0
jle 0x4018ca
lea rax, [rbp - 0xe0]
mov esi, str.RYB______V__________________
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator_
sub dword [rbp - 0xf0], 1
jmp 0x40190b
cmp dword [rbp - 0xec], 0
jle 0x4018f0
lea rax, [rbp - 0xe0]
mov esi, 0x40383e
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator_
sub dword [rbp - 0xec], 1
jmp 0x40190b
lea rax, [rbp - 0xe0]
mov esi, 0x403840
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator_
sub dword [rbp - 0xe8], 1
mov edx, dword [rbp - 0xf0]
mov eax, dword [rbp - 0xec]
add edx, eax
mov eax, dword [rbp - 0xe8]
add eax, edx
test eax, eax
jle 0x401a72
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
lea rdx, [rax - 1]
lea rax, [rbp - 0xe0]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
movzx eax, byte [rax]
cmp al, 0x52
sete al
test al, al
je 0x4019a5
mov eax, dword [rbp - 0xec]
cmp eax, dword [rbp - 0xe8]
jle 0x401985
lea rax, [rbp - 0xe0]
mov esi, 0x40383e
mov rdi, rax
call 0x401230
sub dword [rbp - 0xec], 1
jmp 0x40190b
lea rax, [rbp - 0xe0]
mov esi, 0x403840
mov rdi, rax
call 0x401230
sub dword [rbp - 0xe8], 1
jmp 0x40190b
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
lea rdx, [rax - 1]
lea rax, [rbp - 0xe0]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
movzx eax, byte [rax]
cmp al, 0x59
sete al
test al, al
je 0x401a24
mov eax, dword [rbp - 0xf0]
cmp eax, dword [rbp - 0xe8]
jle 0x401a04
lea rax, [rbp - 0xe0]
mov esi, str.RYB______V__________________
mov rdi, rax
call 0x401230
sub dword [rbp - 0xf0], 1
jmp 0x40190b
lea rax, [rbp - 0xe0]
mov esi, 0x403840
mov rdi, rax
call 0x401230
sub dword [rbp - 0xe8], 1
jmp 0x40190b
mov eax, dword [rbp - 0xf0]
cmp eax, dword [rbp - 0xec]
jle 0x401a52
lea rax, [rbp - 0xe0]
mov esi, str.RYB______V__________________
mov rdi, rax
call 0x401230
sub dword [rbp - 0xf0], 1
jmp 0x40190b
lea rax, [rbp - 0xe0]
mov esi, 0x40383e
mov rdi, rax
call 0x401230
sub dword [rbp - 0xec], 1
jmp 0x40190b
lea rax, [rbp - 0xe0]
mov esi, 0
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
movzx ebx, byte [rax]
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
lea rdx, [rax - 1]
lea rax, [rbp - 0xe0]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
movzx eax, byte [rax]
cmp bl, al
sete al
test al, al
je 0x401caa
mov dword [rbp - 0xe4], 1
mov eax, dword [rbp - 0xe4]
movsxd rbx, eax
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
sub rax, 1
cmp rbx, rax
setb al
test al, al
je 0x401caa
mov eax, dword [rbp - 0xe4]
movsxd rdx, eax
lea rax, [rbp - 0xe0]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
movzx ebx, byte [rax]
lea rax, [rbp - 0xe0]
mov esi, 0
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
movzx eax, byte [rax]
cmp bl, al
je 0x401b6e
mov eax, dword [rbp - 0xe4]
add eax, 1
movsxd rdx, eax
lea rax, [rbp - 0xe0]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
movzx ebx, byte [rax]
lea rax, [rbp - 0xe0]
mov esi, 0
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
movzx eax, byte [rax]
cmp bl, al
je 0x401b6e
mov eax, 1
jmp 0x401b73
mov eax, 0
test al, al
je 0x401c9e
mov eax, dword [rbp - 0xe4]
add eax, 1
movsxd rdx, eax
lea rax, [rbp - 0x60]
lea rsi, [rbp - 0xe0]
mov rcx, -1
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::substr
lea rax, [rbp - 0xa0]
lea rsi, [rbp - 0xe0]
mov ecx, 1
mov edx, 0
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::substr
mov eax, dword [rbp - 0xe4]
add eax, 1
movsxd rdx, eax
lea rax, [rbp - 0xc0]
lea rsi, [rbp - 0xe0]
mov rcx, rdx
mov edx, 0
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::substr
lea rax, [rbp - 0x80]
lea rdx, [rbp - 0xa0]
lea rcx, [rbp - 0xc0]
mov rsi, rcx
mov rdi, rax
call method.std::operator__char_std::char_traits_char__std.allocator_char__
lea rax, [rbp - 0x40]
lea rdx, [rbp - 0x60]
lea rcx, [rbp - 0x80]
mov rsi, rcx
mov rdi, rax
call method.std::operator__char_std::char_traits_char__std.allocator_char__
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0xe0]
mov rsi, rdx
mov rdi, rax
call 0x4011d0
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
lea rdx, [rax - 1]
lea rax, [rbp - 0xe0]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::resize
jmp 0x401caa
add dword [rbp - 0xe4], 1
jmp 0x401ac8
lea rdx, [rbp - 0xe0]
mov rax, qword [rbp - 0x108]
mov rsi, rdx
mov rdi, rax
call 0x401260
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401e37
mov rbx, rax
lea rax, [rbp - 0xf1]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0xf1]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0xf1]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0xf1]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0xf1]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0xf1]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0xf1]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0xf1]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401dd3
mov rbx, rax
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401de4
mov rbx, rax
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401df8
mov rbx, rax
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401e0c
mov rbx, rax
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x401e1d
mov rbx, rax
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rax, qword [rbp - 0x108]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x401e52
call sym.imp.__stack_chk_fail
add rsp, 0x108
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x208
mov qword [rbp - 0x208], rdi
mov qword [rbp - 0x210], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov dword [rbp - 0x1f8], 0
mov dword [rbp - 0x1f4], 0
cmp dword [rbp - 0x1f4], 5
jg 0x401ece
mov eax, dword [rbp - 0x1f4]
movsxd rdx, eax
mov rax, qword [rbp - 0x210]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
add dword [rbp - 0x1f8], eax
add dword [rbp - 0x1f4], 1
jmp 0x401e99
mov rax, qword [rbp - 0x210]
mov esi, 0
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov ebx, dword [rax]
mov rax, qword [rbp - 0x210]
mov esi, 3
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
cmp ebx, eax
jne 0x401f3b
mov rax, qword [rbp - 0x210]
mov esi, 0
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov ebx, dword [rax]
mov rax, qword [rbp - 0x210]
mov esi, 3
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
add eax, ebx
cmp eax, dword [rbp - 0x1f8]
jne 0x401f3b
mov eax, 1
jmp 0x401f40
mov eax, 0
test al, al
je 0x401fec
lea rax, [rbp - 0x1e0]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0x1e0]
lea rax, [rbp - 0x40]
mov esi, 0x40383b
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0x1e0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov dword [rbp - 0x1f0], 0
mov rax, qword [rbp - 0x210]
mov esi, 0
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
cmp eax, dword [rbp - 0x1f0]
setg al
test al, al
je 0x401fc5
lea rax, [rbp - 0x40]
mov esi, 0x403842
mov rdi, rax
call 0x401230
add dword [rbp - 0x1f0], 1
jmp 0x401f88
lea rdx, [rbp - 0x40]
mov rax, qword [rbp - 0x208]
mov rsi, rdx
mov rdi, rax
call 0x401260
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x4028aa
mov rax, qword [rbp - 0x210]
mov esi, 2
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov ebx, dword [rax]
mov rax, qword [rbp - 0x210]
mov esi, 5
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
cmp ebx, eax
jne 0x402059
mov rax, qword [rbp - 0x210]
mov esi, 2
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov ebx, dword [rax]
mov rax, qword [rbp - 0x210]
mov esi, 5
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
add eax, ebx
cmp eax, dword [rbp - 0x1f8]
jne 0x402059
mov eax, 1
jmp 0x40205e
mov eax, 0
test al, al
je 0x40210a
lea rax, [rbp - 0x1e0]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0x1e0]
lea rax, [rbp - 0x40]
mov esi, 0x40383b
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0x1e0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov dword [rbp - 0x1ec], 0
mov rax, qword [rbp - 0x210]
mov esi, 2
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
cmp eax, dword [rbp - 0x1ec]
setg al
test al, al
je 0x4020e3
lea rax, [rbp - 0x40]
mov esi, 0x403845
mov rdi, rax
call 0x401230
add dword [rbp - 0x1ec], 1
jmp 0x4020a6
lea rdx, [rbp - 0x40]
mov rax, qword [rbp - 0x208]
mov rsi, rdx
mov rdi, rax
call 0x401260
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x4028aa
mov rax, qword [rbp - 0x210]
mov esi, 4
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov ebx, dword [rax]
mov rax, qword [rbp - 0x210]
mov esi, 1
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
cmp ebx, eax
jne 0x402177
mov rax, qword [rbp - 0x210]
mov esi, 4
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov ebx, dword [rax]
mov rax, qword [rbp - 0x210]
mov esi, 1
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
add eax, ebx
cmp eax, dword [rbp - 0x1f8]
jne 0x402177
mov eax, 1
jmp 0x40217c
mov eax, 0
test al, al
je 0x402228
lea rax, [rbp - 0x1e0]
mov rdi, rax
call sym.std::allocator_char_::allocator
lea rdx, [rbp - 0x1e0]
lea rax, [rbp - 0x40]
mov esi, 0x40383b
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::basic_string
lea rax, [rbp - 0x1e0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov dword [rbp - 0x1e8], 0
mov rax, qword [rbp - 0x210]
mov esi, 4
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
cmp eax, dword [rbp - 0x1e8]
setg al
test al, al
je 0x402201
lea rax, [rbp - 0x40]
mov esi, 0x403848
mov rdi, rax
call 0x401230
add dword [rbp - 0x1e8], 1
jmp 0x4021c4
lea rdx, [rbp - 0x40]
mov rax, qword [rbp - 0x208]
mov rsi, rdx
mov rdi, rax
call 0x401260
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x4028aa
mov rdx, qword [rbp - 0x210]
lea rax, [rbp - 0x1e0]
mov rsi, rdx
mov rdi, rax
call method.std::vector_int_std::allocator_int__.vector
lea rax, [rbp - 0x1c0]
lea rdx, [rbp - 0x1e0]
mov rsi, rdx
mov rdi, rax
call sym.calc2_abi:cxx11_
lea rax, [rbp - 0x1e0]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::_vector
lea rax, [rbp - 0x1c0]
mov esi, str.IMPOSSIBLE
mov rdi, rax
call method.std::operator___char_std::char_traits_char__std.allocator_char__
test al, al
je 0x40229f
lea rdx, [rbp - 0x1c0]
mov rax, qword [rbp - 0x208]
mov rsi, rdx
mov rdi, rax
call 0x401260
jmp 0x4026cd
mov dword [rbp - 0x1e4], 0
mov eax, dword [rbp - 0x1e4]
movsxd rbx, eax
lea rax, [rbp - 0x1c0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
cmp rbx, rax
setb al
test al, al
je 0x4026b4
mov eax, dword [rbp - 0x1e4]
movsxd rdx, eax
lea rax, [rbp - 0x1c0]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
movzx eax, byte [rax]
cmp al, 0x52
jne 0x402312
mov rax, qword [rbp - 0x210]
mov esi, 3
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
test eax, eax
jle 0x402312
mov eax, 1
jmp 0x402317
mov eax, 0
test al, al
je 0x402422
mov rax, qword [rbp - 0x210]
mov esi, 3
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov edx, dword [rax]
sub edx, 1
mov dword [rax], edx
mov eax, dword [rbp - 0x1e4]
movsxd rdx, eax
lea rax, [rbp - 0x160]
lea rsi, [rbp - 0x1c0]
mov rcx, -1
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::substr
mov eax, dword [rbp - 0x1e4]
add eax, 1
movsxd rdx, eax
lea rax, [rbp - 0x1a0]
lea rsi, [rbp - 0x1c0]
mov rcx, rdx
mov edx, 0
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::substr
lea rax, [rbp - 0x180]
lea rcx, [rbp - 0x1a0]
mov edx, 0x40384b
mov rsi, rcx
mov rdi, rax
call sym.std::operator__char_std::char_traits_char__std::allocator_char__
lea rax, [rbp - 0x140]
lea rdx, [rbp - 0x160]
lea rcx, [rbp - 0x180]
mov rsi, rcx
mov rdi, rax
call method.std::operator__char_std::char_traits_char__std.allocator_char__
lea rdx, [rbp - 0x140]
lea rax, [rbp - 0x1c0]
mov rsi, rdx
mov rdi, rax
call 0x4011d0
lea rax, [rbp - 0x140]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x180]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x1a0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x160]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x4026a8
mov eax, dword [rbp - 0x1e4]
movsxd rdx, eax
lea rax, [rbp - 0x1c0]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
movzx eax, byte [rax]
cmp al, 0x59
jne 0x402465
mov rax, qword [rbp - 0x210]
mov esi, 5
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
test eax, eax
jle 0x402465
mov eax, 1
jmp 0x40246a
mov eax, 0
test al, al
je 0x402575
mov rax, qword [rbp - 0x210]
mov esi, 3
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov edx, dword [rax]
sub edx, 1
mov dword [rax], edx
mov eax, dword [rbp - 0x1e4]
movsxd rdx, eax
lea rax, [rbp - 0xe0]
lea rsi, [rbp - 0x1c0]
mov rcx, -1
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::substr
mov eax, dword [rbp - 0x1e4]
add eax, 1
movsxd rdx, eax
lea rax, [rbp - 0x120]
lea rsi, [rbp - 0x1c0]
mov rcx, rdx
mov edx, 0
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::substr
lea rax, [rbp - 0x100]
lea rcx, [rbp - 0x120]
mov edx, 0x40384d
mov rsi, rcx
mov rdi, rax
call sym.std::operator__char_std::char_traits_char__std::allocator_char__
lea rax, [rbp - 0xc0]
lea rdx, [rbp - 0xe0]
lea rcx, [rbp - 0x100]
mov rsi, rcx
mov rdi, rax
call method.std::operator__char_std::char_traits_char__std.allocator_char__
lea rdx, [rbp - 0xc0]
lea rax, [rbp - 0x1c0]
mov rsi, rdx
mov rdi, rax
call 0x4011d0
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x100]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x120]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x4026a8
mov eax, dword [rbp - 0x1e4]
movsxd rdx, eax
lea rax, [rbp - 0x1c0]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::operator__
movzx eax, byte [rax]
cmp al, 0x42
jne 0x4025b8
mov rax, qword [rbp - 0x210]
mov esi, 1
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov eax, dword [rax]
test eax, eax
jle 0x4025b8
mov eax, 1
jmp 0x4025bd
mov eax, 0
test al, al
je 0x4026a8
mov rax, qword [rbp - 0x210]
mov esi, 3
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov edx, dword [rax]
sub edx, 1
mov dword [rax], edx
mov eax, dword [rbp - 0x1e4]
movsxd rdx, eax
lea rax, [rbp - 0x60]
lea rsi, [rbp - 0x1c0]
mov rcx, -1
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::substr
mov eax, dword [rbp - 0x1e4]
add eax, 1
movsxd rdx, eax
lea rax, [rbp - 0xa0]
lea rsi, [rbp - 0x1c0]
mov rcx, rdx
mov edx, 0
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::substr
lea rax, [rbp - 0x80]
lea rcx, [rbp - 0xa0]
mov edx, 0x40384f
mov rsi, rcx
mov rdi, rax
call sym.std::operator__char_std::char_traits_char__std::allocator_char__
lea rax, [rbp - 0x40]
lea rdx, [rbp - 0x60]
lea rcx, [rbp - 0x80]
mov rsi, rcx
mov rdi, rax
call method.std::operator__char_std::char_traits_char__std.allocator_char__
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x1c0]
mov rsi, rdx
mov rdi, rax
call 0x4011d0
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
add dword [rbp - 0x1e4], 1
jmp 0x4022a9
lea rdx, [rbp - 0x1c0]
mov rax, qword [rbp - 0x208]
mov rsi, rdx
mov rdi, rax
call 0x401260
lea rax, [rbp - 0x1c0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x4028aa
mov rbx, rax
lea rax, [rbp - 0x1e0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x1e0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x1e0]
mov rdi, rax
call sym.std::allocator_char_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x1e0]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::_vector
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x140]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x4027ba
mov rbx, rax
lea rax, [rbp - 0x180]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x4027ce
mov rbx, rax
lea rax, [rbp - 0x1a0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x4027e2
mov rbx, rax
lea rax, [rbp - 0x160]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x402890
mov rbx, rax
lea rax, [rbp - 0xc0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x40280d
mov rbx, rax
lea rax, [rbp - 0x100]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x402821
mov rbx, rax
lea rax, [rbp - 0x120]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x402835
mov rbx, rax
lea rax, [rbp - 0xe0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x402890
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x40285a
mov rbx, rax
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x40286b
mov rbx, rax
lea rax, [rbp - 0xa0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x40287f
mov rbx, rax
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x402890
mov rbx, rax
lea rax, [rbp - 0x1c0]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rax, qword [rbp - 0x208]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x4028c5
call sym.imp.__stack_chk_fail
add rsp, 0x208
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x88
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
lea rax, [rbp - 0x90]
mov rsi, rax
mov edi, obj.std::cin
call sym.std::istream::operator__
mov dword [rbp - 0x88], 1
mov eax, dword [rbp - 0x90]
cmp dword [rbp - 0x88], eax
jg 0x402a40
lea rax, [rbp - 0x8c]
mov rsi, rax
mov edi, obj.std::cin
call sym.std::istream::operator__
lea rax, [rbp - 0x60]
mov rdi, rax
call 0x402dd0
lea rdx, [rbp - 0x60]
lea rax, [rbp - 0x80]
mov esi, 6
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::vector
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::allocator_int_::_allocator
mov dword [rbp - 0x84], 0
cmp dword [rbp - 0x84], 5
jg 0x40299c
mov eax, dword [rbp - 0x84]
movsxd rdx, eax
lea rax, [rbp - 0x80]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::operator__
mov rsi, rax
mov edi, obj.std::cin
call sym.std::istream::operator__
add dword [rbp - 0x84], 1
jmp 0x402965
lea rdx, [rbp - 0x80]
lea rax, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call method.std::vector_int_std::allocator_int__.vector
lea rax, [rbp - 0x40]
lea rdx, [rbp - 0x60]
mov rsi, rdx
mov rdi, rax
call sym.calc_abi:cxx11_
mov esi, 0x403851
mov edi, obj.std::cout
call sym.std::operator___std::char_traits_char__
mov rdx, rax
mov eax, dword [rbp - 0x88]
mov esi, eax
mov rdi, rdx
call 0x401190
mov esi, 0x403858
mov rdi, rax
call sym.std::operator___std::char_traits_char__
mov rdx, rax
lea rax, [rbp - 0x40]
mov rsi, rax
mov rdi, rdx
call sym.std::operator___char_std::char_traits_char__std::allocator_char__
mov esi, sym.std::endl_char_std::char_traits_char__
mov rdi, rax
call sym.std::ostream::operator__
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::_vector
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::_vector
add dword [rbp - 0x88], 1
jmp 0x402908
mov eax, 0
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x402ab1
jmp 0x402aac
mov rbx, rax
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::allocator_int_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x40]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_basic_string
jmp 0x402a84
mov rbx, rax
lea rax, [rbp - 0x60]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::_vector
jmp 0x402a95
mov rbx, rax
lea rax, [rbp - 0x80]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::_vector
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x88
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov dword [rbp - 4], edi
mov dword [rbp - 8], esi
cmp dword [rbp - 4], 1
jne 0x402af6
cmp dword [rbp - 8], 0xffff
jne 0x402af6
mov edi, obj.std::__ioinit
call sym.std::ios_base::Init::Init
mov edx, obj.__dso_handle
mov esi, obj.std::__ioinit
mov edi, sym.std::ios_base::Init::_Init
call sym.imp.__cxa_atexit
nop
leave
ret
push rbp
mov rbp, rsp
mov esi, 0xffff
mov edi, 1
call sym.__static_initialization_and_destruction_0
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x28], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::size
add rax, rbx
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::capacity
cmp rax, qword [rbp - 0x18]
jae 0x402b7e
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::capacity
cmp rax, qword [rbp - 0x18]
jb 0x402b7e
mov eax, 1
jmp 0x402b83
mov eax, 0
mov byte [rbp - 0x19], al
cmp byte [rbp - 0x19], 0
je 0x402bae
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x38]
mov esi, 0
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::insert
mov rdi, rax
call sym.std::move_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rdx, rax
jmp 0x402bcc
mov rdx, qword [rbp - 0x38]
mov rax, qword [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::append
mov rdi, rax
call sym.std::move_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rdx, rax
mov rax, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call 0x401260
mov rax, qword [rbp - 0x28]
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 2
add rax, rdx
pop rbp
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x28
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_M_get_Tp_allocator
mov rdx, rax
lea rax, [rbp - 0x29]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__alloc_traits_std::allocator_int__::_S_select_on_copy
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::size
mov rcx, rax
mov rax, qword [rbp - 0x38]
lea rdx, [rbp - 0x29]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_Vector_base
lea rax, [rbp - 0x29]
mov rdi, rax
call sym.std::allocator_int_::_allocator
mov rax, qword [rbp - 0x38]
mov rdi, rax
call method.std::_Vector_base_int_std::allocator_int__._M_get_Tp_allocator
mov r13, rax
mov rax, qword [rbp - 0x38]
mov rbx, qword [rax]
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::end
mov r12, rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::begin
mov rcx, r13
mov rdx, rbx
mov rsi, r12
mov rdi, rax
call sym.std::__uninitialized_copy_a___gnu_cxx::__normal_iterator_intconst__std::vector_int_std::allocator_int____int__int_
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 8], rdx
nop
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x402d0e
jmp 0x402d09
mov rbx, rax
lea rax, [rbp - 0x29]
mov rdi, rax
call sym.std::allocator_int_::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::__Vector_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x28
pop rbx
pop r12
pop r13
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Vector_base_int_std::allocator_int__._M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_int__int_
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::compare
test eax, eax
sete al
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call 0x401210
mov rdi, rax
call sym.std::move_std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char____
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call 0x401260
mov rax, qword [rbp - 8]
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int_::new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int_::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_Vector_base
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_int_std::allocator_int__::_M_default_initialize
jmp 0x402e63
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::__Vector_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 2
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_int__::select_on_container_copy_construction
mov rax, qword [rbp - 0x18]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x402eda
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_int_::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_Vector_impl::_Vector_impl
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_M_create_storage
jmp 0x402f5d
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_Vector_impl::__Vector_impl
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 2
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_Vector_impl::__Vector_impl
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax]
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_intconst__std::vector_int_std::allocator_int___::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x403005
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax + 8]
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_intconst__std::vector_int_std::allocator_int___::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x40305a
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 8], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_copy___gnu_cxx::__normal_iterator_intconst__std::vector_int_std::allocator_int____int__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_int__
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Vector_base_int_std::allocator_int__._M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_default_n_a_int__unsignedlong_int_
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_int_::allocator
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call method.__gnu_cxx::new_allocator_int_.new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_int_::allocator
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_int_std::allocator_int__::_M_allocate
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 2
add rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x403246
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_int__::deallocate
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_copy_true_::__uninit_copy___gnu_cxx::__normal_iterator_intconst__std::vector_int_std::allocator_int____int__
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_true_::__destroy_int__
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::__uninitialized_default_n_int__unsignedlong_
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x403324
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_int__::allocate
jmp 0x403329
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int_::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::copy___gnu_cxx::__normal_iterator_intconst__std::vector_int_std::allocator_int____int__
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::__uninitialized_default_n_1_true_::__uninit_default_n_int__unsignedlong_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int_::allocate
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::__miter_base___gnu_cxx::__normal_iterator_intconst__std::vector_int_std::allocator_int____
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__miter_base___gnu_cxx::__normal_iterator_intconst__std::vector_int_std::allocator_int____
mov rcx, rax
mov rax, qword [rbp - 0x28]
mov rdx, rax
mov rsi, rbx
mov rdi, rcx
call sym.std::__copy_move_a2_false___gnu_cxx::__normal_iterator_intconst__std::vector_int_std::allocator_int____int__
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov dword [rbp - 0xc], 0
lea rdx, [rbp - 0xc]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::fill_n_int__unsignedlong_int_
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4034a8
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_int_::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x4034da
call sym.std::__throw_bad_alloc
mov rax, qword [rbp - 0x10]
shl rax, 2
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Iter_base___gnu_cxx::__normal_iterator_intconst__std::vector_int_std::allocator_int____false_::_S_base
leave
ret
push rbp
mov rbp, rsp
push r12
push rbx
sub rsp, 0x20
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov rdi, rax
call sym.std::__niter_base_int__
mov r12, rax
mov rax, qword [rbp - 0x30]
mov rdi, rax
call sym.std::__niter_base___gnu_cxx::__normal_iterator_intconst__std::vector_int_std::allocator_int____
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__niter_base___gnu_cxx::__normal_iterator_intconst__std::vector_int_std::allocator_int____
mov rdx, r12
mov rsi, rbx
mov rdi, rax
call sym.std::__copy_move_a_false_intconst__int__
add rsp, 0x20
pop rbx
pop r12
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__niter_base_int__
mov rcx, rax
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x10]
mov rsi, rax
mov rdi, rcx
call sym.std::__fill_n_a_int__unsignedlong_int_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0x3fffffffffffffff
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.std::_Iter_base___gnu_cxx::__normal_iterator_intconst__std::vector_int_std::allocator_int____true_::_S_base
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Iter_base_int__false_::_S_base
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::__copy_move_false_true_std::random_access_iterator_tag_::__copy_m_int_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x28]
mov eax, dword [rax]
mov dword [rbp - 0xc], eax
mov rax, qword [rbp - 0x20]
mov qword [rbp - 8], rax
cmp qword [rbp - 8], 0
je 0x40365a
mov rax, qword [rbp - 0x18]
mov edx, dword [rbp - 0xc]
mov dword [rax], edx
sub qword [rbp - 8], 1
add qword [rbp - 0x18], 4
jmp 0x40363e
mov rax, qword [rbp - 0x18]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 0x10], rdi
lea rax, [rbp - 0x10]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_intconst__std::vector_int_std::allocator_int___::base
mov rax, qword [rax]
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
sub rdx, rax
mov rax, rdx
sar rax, 2
mov qword [rbp - 8], rax
cmp qword [rbp - 8], 0
je 0x4036db
mov rax, qword [rbp - 8]
lea rdx, [rax*4]
mov rcx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x28]
mov rsi, rcx
mov rdi, rax
call sym.imp.memmove
mov rax, qword [rbp - 8]
lea rdx, [rax*4]
mov rax, qword [rbp - 0x28]
add rax, rdx
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push r15
push r14
mov r15d, edi
push r13
push r12
lea r12, [rip + 0x2016d6]
push rbp
lea rbp, [rip + 0x2016de]
push rbx
mov r14, rsi
mov r13, rdx
sub rbp, r12
sub rsp, 8
sar rbp, 3
call sym._init
test rbp, rbp
je 0x403756
xor ebx, ebx
nop dword [rax + rax]
mov rdx, r13
mov rsi, r14
mov edi, r15d
call qword [r12 + rbx*8]
add rbx, 1
cmp rbx, rbp
jne 0x403740
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
nop word cs:[rax + rax]
ret
add byte [rax], al
sub rsp, 8
add rsp, 8
ret
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add al, 0
add byte [rax], al
or byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], 0
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add al, 0
add byte [rax], al
or byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, 0
add byte [rax], al
add eax, 0x6000000
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], cl
or byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
or al, byte [rax]
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
or al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
dec dword [rcx + 0x4d]
push r8
push r11
push rbx
add byte [r8], r8b
push rdx
add byte [rcx], bl
add byte [rdx + 0x47], dl
add byte [rcx + 0x56], bl
add byte [rdx + 0x4f], al
add byte [rdi], al
push rsi
add byte [rdi], cl
jae 0x4038ba
and byte [rbx], ah
add byte [rdx], bh
and byte [rax], al
add byte [rcx], al
add dword [rbx], ebx
add edi, dword [rbx]
sbb byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rbx*8], ah
jmp qword [rdx + rax]
add byte [rbx + rbx*8 - 1], ah
push qword [rdx + rax]
add byte [rax], al
pop rdx
fdiv st(7), st(0)
ljmp [rdx + rax - 0x1a000000]
call rsp
add al, byte [rax]
add byte [rbx - 0x10], dh
cld
add al, byte [rax]
add byte [rdi - 0xe], bl
dec dword [rdx + rcx - 0xd630000]
ljmp [rdx + rcx - 0xd4e0000]
jmp qword [rbx + rax]
add byte [rax], al
sal dl, 0xff
inc dword [rbx + rax]
add byte [rdx + 0x6cfffff3], cl
add eax, dword [rax]
add byte [rdx - 0x7300000d], ch
add eax, dword [rax]
add byte [rsi - 0x4300000c], bh
add eax, dword [rax]
add byte [rdx], al
cmc
jmp rsp
add eax, dword [rax]
add byte [rsi*8 + 0x404ffff], ch
add byte [rax], al
je 0x4038cf
jmp qword [rsp + rax]
add byte [rax], al
nop
cmc
inc dword [rsp + rax]
add byte [rbp + rsi*8 + 0x464ffff], ch
add byte [rax], al
idiv bh
dec dword [rsp + rax - 0x9cc0000]
ljmp [rsp + rax - 0x9800000]
dec esp
add al, 0
add byte [rsi - 0x1300000a], cl
add al, 0
add byte [rdx + 0xcfffff6], ch
add eax, 0xf7080000
push qword [rax - 0x8a80000]
lcall [rbp + rax]
add byte [rdi + rsi*8 + 0x57cffff], ch
add byte [rax], al
add al, bh
lcall [rbp + rax - 0x7f20000]
mov esp, 0x3f000005
clc
fadd qword [rip - 0x7960000]
cld
add eax, 0xf8760000
lcall [rsi + rax]
add byte [rax], al
clc
cmp al, 6
add byte [rax], al
clc
lcall [rsi + rax]
add dh, ch
clc
jl 0x403974
add byte [rax], al
adc al, 0xf9
lcall [rsi + rax - 0x6a20000]
mov esp, 0xb8000006
stc
fadd qword [rsi]
add byte [rax], al
out dx, al
stc
cld
add byte [rax], al
or edi, edx
lcall [rdi + rax]
add byte [rax], al
cmp al, 0xfa
cmp al, 7
add byte [rax], al
cli
lcall [rdi + rax]
add byte [rdx + rdi*8 + 0x77cffff], cl
add byte [rax], al
pushfq
cli
lcall [rdi + rax - 0x5310000]
mov esp, 0xfd000007
cli
fadd qword [rdi]
add byte [rax], al
sub bh, bl
cld
add byte [rax], al
cmp ebx, edi
lcall [rax + rcx]
add byte [rax], al
sti
cmp al, 8
add byte [rax], al
sti
lcall [rax + rcx]
add byte [rdi + 0x7cfffffb], ch
or byte [rax], al
add bl, bh
sti
jmp qword [rax + rcx - 0x3b20000]
inc esp
or byte [rax], al
add byte [rax - 0x1b000004], dl
or byte [rax], al
add byte [rdx + 0x4fffffc], ch
or dword [rax], eax
add byte [rdx], al
std
ljmp [rcx + rcx]
add byte [rax], al
cmp bh, ch
dec dword [rcx + rcx]
add byte [rsi - 3], cl
ljmp [rcx + rcx]
add byte [rbp + rdi*8 - 1], bl
dec dword [rcx + rcx - 0x28a0000]
ljmp [rcx + rcx - 0x2700000]
dec esp
or dword [rax], eax
add cl, al
std
in al, dx
or dword [rax], eax
add byte [rsi + rdi*8], al
dec dword [rdx + rcx]
add byte [rax], al
and esi, edi
ljmp [rdx + rcx]
add byte [rax], al
dec dword [rdx + rcx]
add byte [rsi + rdi*8 + 0xa6cffff], dl
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
dec esp
or al, byte [rax]
add byte [rdi + rdi*8], dl
call qword [rbx + rcx]
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x403a97
add dword [rbx], ebx
or al, 7
or byte [rax + 0x14100701], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sub cl, bl
ljmp [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x403ac7
add dword [rbx], ebx
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov eax, 0x30ffffd6
add al, byte [rax]
add byte [rax], al
adc byte [rsi + 0xe], al
sbb byte [rdx + 0xf], cl
or esi, dword [rdi + 8]
add byte [rax], 0x3f
sbb bh, byte [rbx]
sub dh, byte [rbx]
and al, 0x22
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x50], edi
push rdx
add byte [rcx], al
js 0x403b09
add edx, dword [rax + 0x13]
add byte [rbx], al
sbb ecx, dword [rdi + rax]
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
cmpsb byte [rsi], byte ptr [rdi]
fcos
jmp qword [rsi + 0x4000009]
mov word [rbx + 0x40], es
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add qword [rbx], 3
cdq
or dword [rdi + rax], ecx
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], r8b
add byte [rbx], ah
push qword [rbx + 0xa]
add byte [rax], al
add al, 0xf1
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add qword [rbx], 3
or cl, byte [rdi + rax]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
je 0x403b5e
add byte [rax], al
outsd dx, dword [rsi]
in eax, dx
in al, dx
add dword [rax], eax
add byte [rsi + rax*4], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add qword [rbx], 3
fild word [rcx]
or al, 7
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
fadd qword [rax]
add byte [rax], al
xchg bh, ch
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
cld
add byte [rax], al
add byte [rdi + rbp*8 - 1], dh
dec edx
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
ror byte [rdi + rax], 8
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
and al, 1
add byte [rax], al
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
add al, 1
add byte [rax], al
call qword [rbx]
add dword [rax], eax
add byte [rdx + rbp*4], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0xc010503
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
xor al, 1
add byte [rax], al
cli
inc dword [rax + rax]
add byte [rdx + rax*8], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jg 0x403c43
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add dword [rax], eax
add byte [rsi], dl
int1
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x20000001
int1
inc dword [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
fadd qword [rcx]
add byte [rax], al
int1
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
add dword [rax], eax
add byte [rcx + rsi*8 - 1], al
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
fadd qword [rcx]
add byte [rax], al
int1
jmp qword [rdx]
add byte [rax], al
add al, 0xc6
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add r8b, byte [rax]
add byte [rdx - 0xf], bh
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, byte fs:[rax]
add byte [rax + 0x4cfffff1], al
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
test byte [rdx], al
add byte [rax], al
lodsb al, byte [rsi]
int1
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add al, byte [rax]
add byte [rdx + 0x1bfffff1], bl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
test byte [rdx], al
add byte [rax], al
xchg eax, esi
int1
lcall [rsi]
add byte [rax], al
add al, 0xd6
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rsp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
lodsb al, byte [rsi]
add al, byte [rax]
add ah, cl
int1
call qword [rax]
add byte [rax], al
add al, 0xe2
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rbx + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
adc al, 3
add byte [rax], al
hlt
int1
call qword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xor al, 3
add byte [rax], al
sub dl, dh
call qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
push rsp
add eax, dword [rax]
add byte [rdx + rsi*8 - 1], bl
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x403e21
add byte [rax], al
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
add eax, dword [rax]
add byte [rbx - 0xe], bl
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 3
add byte [rax], al
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add eax, dword [rax]
add byte [rdx - 0xe], dl
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
add eax, dword [rax]
add byte [rsi], bh
inc dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jle 0x403ebf
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 4
add byte [rax], al
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 4
add byte [rax], al
push -0xe
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
add al, 0
add byte [rax - 0xe], dh
dec dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
je 0x403f22
add byte [rax], al
lcall [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
xchg eax, esp
add al, 0
add ah, dl
push qword [rip]
adc byte [rsi + 0x60d4302], al
jo 0x403f5f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 4
add byte [rax], al
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0
add bh, ah
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
add al, 0
add al, bh
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 5
add byte [rax], al
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 5
add byte [rax], al
or bl, dh
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
add eax, 0xf2f80000
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x404023
add byte [rax], al
or esi, ebx
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
xchg eax, esp
add eax, 0xf3190000
ljmp [rip]
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 5
add byte [rax], al
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add eax, 0xf3150000
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
add eax, 0xf31e0000
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 6
add byte [rax], al
sub bl, dh
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
xor al, 6
add byte [rax], al
sub esi, ebx
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add byte [rax], al
call qword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
jl 0x40412c
add byte [rax], al
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jge 0x404147
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov esp, 0x9e000006
lcall [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
mov word [rbx], es
add dword [rdx + rax], 0x4c
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 6
add byte [rax], al
cmp byte [rax], al
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jae 0x4041af
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 7
add byte [rax], al
out 0xf3, al
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 7
add byte [rax], al
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
enter -0xd, -1
sbb al, byte [rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
ret 0xfff3
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rdi], al
add byte [rax], al
mov esp, 0x31fffff3
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
int 0xf3
inc dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jle 0x40426f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 7
add byte [rax], al
in eax, dx
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 8
add byte [rax], al
fcomi st(3)
jmp qword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ah, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
and al, 8
add byte [rax], al
and ah, dh
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or byte [rax], r8b
add bl, cl
out 0xff, eax
add byte ds:[rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jns 0x40430f
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
or byte fs:[rax], al
add cl, ch
out 0xff, eax
call qword [rip]
adc byte [rsi + 0x60d4302], al
push rax
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax + rcx - 0xc300000], al
jmp qword [rbp]
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b8], es
cmp byte [rbx + 0x400e4d07], al
jb 0x40436a
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
adc al, 0
add byte [rax], al
int3
or byte [rax], al
add al, bh
inc dword [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
int 2
add eax, 0xbe0010a1
add eax, dword [rip - 0x50ffef42]
add al, 5
fist dword [rax]
add byte [rax + 0x10f80505], ah
add ah, dh
add eax, 0x119505
enter 0x506, -0x4e
adc dword [rax], eax
pushfq
add eax, 0xda0011cf
add eax, 0x860011ec
or ch, ah
add eax, 0x860012e4
add eax, 0xb00012d3
add eax, 0xcd0012bf
add eax, 0xe40012ab
add eax, 0xfa00129a
add eax, 0xe1001289
syscall
in al, 0x12
add byte [rcx + 0x2c810], bh
add bh, bh
inc dword [rcx]
nop
add dword [rsi + 0x11850502], ecx
add bl, bl
add al, byte [rip - 0x53ffee5e]
add al, 5
mov esp, 0x4f90011
add eax, 0xca0011d9
add eax, 0x970011f3
add eax, 0xe0001290
add eax, 0x7f90000
add eax, 0x9c0012aa
or al, ch
add dword [rcx + 0xaa90014], esi
add eax, 0xc7001383
or al, byte [rip - 0x18ffed11]
or al, byte [rip - 0x7fffed25]
or eax, dword [rip - 0x23ffed39]
or edi, dword [rbx - 0x4f]
adc al, 0
cld
or al, 5
adc eax, dword [rax]
or eax, 0x13c205
mov edx, 0x13ae050d
add bl, dl
or eax, 0x139a05
scasd eax, dword [rdi]
js 0x404417
adc al, 0
int3
syscall
movabs al, byte [0x148c050fe70014]
dec byte [rdi]
add eax, 0x940013fb
adc byte [rip - 0x62ffec16], al
adc dword [rcx - 0xfffffd], esi
inc dword [rcx]
and byte [rdx], ch
xor eax, 0x57b0000
xchg dword [rbx], eax
add byte [rdi + 0x3c32101], bh
add dh, ch
add dword [rip - 0x2fffc4e], eax
add dword [rcx + 3], eax
add byte [rbx + rax - 0xffffbf], bl
inc dword [rcx]
adc al, 0x3d
add eax, 0x55f0000
iretd
add dword [rax], eax
lodsd eax, dword [rsi]
add dword [rip - 0x1bfffe17], eax
add dword [rdi], ebx
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
or al, 0x27
add eax, 0x53a0000
add byte [r14 + 5], dl
add byte [rax], al
inc dword [rcx]
or byte [rsi], dh
add eax, 0x552003d
add byte [rax], al
inc dword [rcx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
adc al, 0x40
add byte [rax], al
add byte [rax], al
add cl, bh
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
jo 0x404e0e
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 5], dh
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, cl
add eax, 0
add byte [rax], al
or al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rax
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
or eax, 0
add byte [rax], al
add byte [rdi + rsi + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax + 0x4006], ch
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbx
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
or eax, 0x40
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bh
ljmp [rdi]
add byte [rax], al
add byte [rax + 0xd], dl
add byte [rax], al
add byte [rax], al
add bh, bh
ljmp [rdi]
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
ljmp [rdi]
add byte [rax], al
add ah, bh
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4011], dl
add byte [rax], al
add byte [rsi + 0x4011], ah
add byte [rax], al
add byte [rsi + 0x4011], dh
add byte [rax], al
add dh, al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
out 0x11, al
add byte [rax], al
add byte [rax], al
add dh, dh
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
adc al, byte es:[rax]
add byte [rax], al
add byte [rax], al
adc al, byte ss:[rax]
add byte [rax], al
add byte [rax], al
adc r8b, byte [rax]
add byte [rax], al
add byte [rax], al
push rsi
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
jbe 0x40509c
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4012], al
add byte [rax], al
add byte [rsi + 0x4012], dl
add byte [rax], al
add byte [rsi + 0x4012], ah
add byte [rax], al
add byte [rsi + 0x4012], dh
add byte [rax], al
add dh, al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
out 0x12, al
add byte [rax], al
add byte [rax], al
add dh, dh
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
adc eax, dword es:[rax]
add byte [rax], al
add byte [rax], al
adc eax, dword ss:[rax]
add byte [rax], al
add byte [rax], al
adc r8d, dword [rax]
add byte [rax], al
add byte [rax], al
push rsi
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
adc ax, word [rax]
add byte [rax], al
add byte [rax], al
jbe 0x40511d
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4013], al
add byte [rax], al
add byte [rsi + 0x4013], dl
add byte [rax], al
add byte [rsi + 0x4013], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x43], al
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x4051b0
je 0x4051b9
and byte [rip + 0x302e342e], dh
sub eax, 0x75627536
outsb dx, byte [rsi]
je 0x4051c7
xor dword [rsi + 0x31], edi
xor byte cs:[rsi + rbp], dh
xor al, 0x29
and byte [rip + 0x302e342e], dh
and byte [rdx], dh
xor byte [rcx], dh
xor byte ss:[rsi], dh
xor byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add al, byte [rax]
push rsp
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, dword [rax]
je 0x4051c4
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], al
cwde
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, 0x4002d000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], al
add byte [rax + 0x4006], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], al
add ah, bh
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], cl
add byte [rax + 0xd], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], cl
add al, ah
or eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or al, byte [rax]
sub byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], cl
add byte [rax + 0x11], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], cl
adc byte [rcx], 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x4013b000], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], cl
add al, al
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rdi + rsi + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], dl
add byte [rax + 0x4037], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], dl
add byte [rax + rdi + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], dl
add byte [rax + 0x3a], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], dl
add byte [rbx + rax*2 + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc al, 0
call 0x40b3aa
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x604df800], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], dl
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], bl
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], bl
add byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], bl
add byte [rax], ch
push rcx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], bl
add byte [rax + 0x51], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add al, dh
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], dh
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0x14], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rcx], al
add byte [rbx], bl
add byte [rax + 0x53], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add dword [rax], eax
adc eax, 0x604df800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, byte [rax]
add byte [rax + 0x4014], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], al
add byte [rax + rax], dl
call 0x40b542
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x4000000], ah
add cl, dh
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000000], ch
add byte [rax], dl
add byte [rax + 0x4037], cl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, al
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rcx + 0x4037], cl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bl
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rdx + 0x4037], cl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
add byte [rax], al
add byte [rcx], al
add byte [rbx], bl
add byte [rcx + 0x53], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dh
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rdi + rsi + 0x40], cl
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x4037], dl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add dword [rax], eax
add byte [rcx], al
add byte [rax], dl
add byte [rcx + 0x4037], dl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 1], al
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
xchg eax, edx
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 1], dl
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
xchg eax, esp
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
je 0x4055f3
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
cwde
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, esp
add dword [rax], eax
add byte [rcx], al
add byte [rax], dl
add byte [rdi + rsi + 0x40], bl
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dh, 1
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
movabs al, byte [0x400000000004037]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dl
add dword [rax], eax
add byte [rcx], al
add byte [rax], dl
add byte [rdi + rsi + 0x40], ah
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
cld
add dword [rax], eax
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x4037], ch
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rdx]
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
lodsb al, byte [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp eax, 0x1000002
add byte [rax], dl
add byte [rax + 0x4037], dh
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rdx
add al, byte [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rdi + rsi + 0x40], dh
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
js 0x4056b4
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
mov eax, 0x4037
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, edi
add al, byte [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rdi + rsi + 0x40], bh
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000002
add byte [rax], dl
add al, al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 2, eax
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
lsl eax, dword [rax]
add byte [rcx], al
add byte [rax], dl
add al, cl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rcx], al
add byte [rax], dl
add ah, cl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rdi
add eax, dword [rax]
add byte [rcx], al
add byte [rax], dl
add al, dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rcx], al
add byte [rax], dl
add ah, dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
stosd dword [rdi], eax
add eax, dword [rax]
add byte [rcx], al
add byte [rax], dl
add al, bl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rcx], al
add byte [rax], dl
add ah, bl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax + rax], eax
add byte [rcx], al
add byte [rax], dl
add al, ah
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub al, byte [rax + rax]
add byte [rcx], al
add byte [rax], dl
add ah, ah
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rcx], al
add byte [rax], dl
add al, ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
js 0x4057ee
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
in al, dx
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add al, 0
add byte [rcx], al
add byte [rax], dl
add al, dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
int3
add al, 0
add byte [rcx], al
add byte [rax], dl
add ah, dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rcx], al
add byte [rax], dl
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb dword [rip + 0x10000], eax
adc byte [rax], al
cld
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x10000
adc byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x10000
adc byte [rax], al
add al, 0x38
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
lea eax, [rip + 0x10000]
adc byte [rax], al
or byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov bl, 5
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
or al, 0x38
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fadd qword [rip + 0x10000]
adc byte [rax], al
adc byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rsi]
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
adc al, 0x38
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub byte [rsi], al
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
sbb byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rdx
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
sbb al, 0x38
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jge 0x405928
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
and byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs dword [0x2800100001000006], eax
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
leave
add byte [rax], al
add al, byte [rax]
add byte [rbx + 0x402a], bh
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bh
add byte [rax], al
add al, byte [rax]
add cl, bh
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
adc eax, 0
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add dword [rax], eax
adc al, byte [rax]
mov byte [rbx + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 7], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
pop rsp
cmp byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rsi
add byte [rax], al
add dword [rax], eax
sbb dword [rax], eax
add byte [rax + 0x60], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rax], ch
add byte [rax], al
add byte [rax + rax], dl
clc
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 7], bh
add byte [rax], al
add byte [rax], al
adc al, 0
call 0x40ba82
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000007], dl
add byte [rdi], dl
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0xf], bh
add byte [rax], al
and byte [rax], al
sbb al, byte [rax]
sub byte [rcx + 0x60], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000007], bl
add byte [rsi], cl
add byte [rsi], cl
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bh
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
push rcx
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax + rcx], dl
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x32], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 8], dh
add byte [rax], al
and al, byte [rax]
add al, ch
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs eax, dword [0x12000008]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x12000008], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], al
or dword [rax], eax
add byte [rdx], dl
add byte [rsi], cl
add byte [rax + 0x37], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
or dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 9], ch
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov esp, 0x22000009
add byte [rsi], cl
add byte [rdx + 0x4035], ch
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0xf], bh
add byte [rax], al
adc al, byte [rax]
add al, al
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x2200000a
add byte [rsi], cl
add al, ch
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
sldt word [rax]
add byte [rax], al
add byte [rax], al
add byte [rip + 0x2200000a], bh
add byte [rsi], cl
add byte [rbx + 0x4036], cl
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, ebx
or al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + rbp + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov bl, 0xa
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x2e], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
or al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x2000000b], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rcx], ch
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx], ah
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov word [rbx], cs
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs al, byte [0xd2000e002200000b]
xor byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x31], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
or dword [rax], eax
add byte [rdx], dl
add byte [rdi], cl
add byte [rdi + rsi + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dl
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add al, dl
sub eax, 0x40
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
loope 0x405cbd
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rdi], al
add byte [rax], al
adc al, byte [rax]
add byte [rsi + 0x4014], dh
add byte [rax], al
add byte [rsi + 9], ah
add byte [rax], al
add byte [rsi], al
or al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x2200000c], ah
add byte [rsi], cl
add dl, dl
xor byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2200000c], bl
add byte [rsi], cl
add byte [rbx + 0x4030], bl
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2200000c], bh
add byte [rsi], cl
add byte [rax + 0x31], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
in eax, dx
or al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc cl, byte [rip + 0x220000]
add byte [rsi], al
sub al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdi], ch
or eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or rax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, ebp
or eax, 0x220000
add byte [rdx], bl
sub eax, 0x40
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1200000d], ch
add byte [rax], al
add byte [rax + 0x12], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, dl
or eax, 0x220000
add dl, ch
add byte cs:[rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, 0x1200000e
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0xe], ah
add byte [rax], al
and al, byte [rax]
add byte [rdx + rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rip], dh
add byte [rax], al
add byte [rcx + 0x1100000e], dl
add byte [rax], dl
add byte [rax + 0x4037], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs al, byte [0x5c000e002200000e]
xor byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, dl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rdi], cl
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x32], cl
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rdi + 0xf], bl
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jns 0x405ed1
add byte [rax], al
adc byte [rax], al
sbb al, byte [rax]
sub byte [rcx + 0x60], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2200000f], al
add byte [rsi], cl
add byte [rsi], al
xor eax, 0x40
add byte [rax], al
pop rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ah
sldt word [rax]
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte cs:[rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x4033], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x10], bl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x31], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x30], ch
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bh
adc byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi + rbp + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb dword [rcx], edx
add byte [rax], al
and al, byte [rax]
add dh, al
xor byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp eax, 0x22000011
add byte [rsi], cl
add byte [rsi], al
sub al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x11], bl
add byte [rax], al
adc dword [rdx], eax
sbb al, byte [rax]
cmp byte [rcx + 0x60], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x11], ah
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4032], bl
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x11], bh
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
push rdx
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000011], dl
add byte [rsi], cl
add byte [rax + 0x402e], dl
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add bl, dl
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rcx + 0x33], bl
add byte [rax], al
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add byte [rcx + 0x12], cl
add byte [rax], al
adc dword [rdx], eax
sbb al, byte [rax]
xor byte [rcx + 0x60], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x12], dl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4035], bh
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, al
adc al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x36], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, ch
adc al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add al, ch
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
sldt word [rax]
add byte [rax], al
add byte [rax], al
add byte [rip + 0x12000013], dl
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, 0x22000013
add byte [rsi], cl
add ah, ch
sub eax, 0x40
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dl, byte [rbx]
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x32], cl
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rcx + 0x13], dh
add byte [rax], al
and al, byte [rax]
add al, dl
sub eax, 0x40
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
jle 0x4060e5
add byte [rax], al
and al, byte [rax]
add byte [rax], cl
xor byte [rax], al
add byte [rax], al
add byte [rax], al
push rsp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x12000013], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000013], ch
add byte [rsi], cl
add byte [rsi + 0x4033], bh
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, bl
adc eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add ah, ch
xor eax, 0x40
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax + rax], dl
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], bl
sub eax, 0x40
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rcx], ah
adc al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + rbp], bl
add byte [rax], al
add byte [rax], al
add dl, cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x14], ch
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x22000014
add byte [rsi], cl
add al, dh
add byte ss:[rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bh
adc al, 0
add byte [rax], dl
add byte [rbx], bl
add byte [rax], bh
push rcx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
adc eax, 0x220000
add byte [rdx + 0x4031], bh
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp edx, dword [rip + 0x220000]
add byte [rdx + 0x31], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x15], cl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edx, 0x22000015
add byte [rsi], cl
add byte [rsi + 0x35], bl
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bl
adc eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x220000
add dh, ah
sub eax, dword [rax]
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, 0x16
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0x16
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x34], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
outsd dx, dword [rsi]
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ret 0x16
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x36], ah
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rcx + 0x17], ch
add byte [rax], al
and al, byte [rax]
add byte [rip + 0x4036], bl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
js 0x4062e9
add byte [rax], al
adc byte [rax], al
sbb eax, dword [rax]
js 0x40633d
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, cl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
in eax, dx
add byte [rax], al
adc al, byte [rax]
add byte [rsi + rbx + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rbx + 0xa], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, 0x12000018
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
sbb byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x2d], bl
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000018], al
add byte [rsi], cl
add byte [rbx], ch
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte cs:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000018], dh
add byte [rsi], cl
add ah, ch
xor al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rbx], ah
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
and byte [rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rbx], ch
add byte [rdx], ah
add byte [rsi], cl
add ah, bl
add byte cs:[rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000019], ah
add byte [rsi], cl
add dl, ch
add byte cs:[rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, cl
sbb dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rbp + 0x4033], dl
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bh
sbb dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rbx], cl
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], cl
add byte cs:[rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
push 0x1a
add byte [rax], al
adc byte [rax], al
sbb al, byte [rax]
cmp byte [rcx + 0x60], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1a], dh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ebx, dword [rdx]
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
push rax
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
lodsb al, byte [rsi]
sbb al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add al, bh
xor al, byte [rax]
add byte [rax], al
add byte [rax], al
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
xlatb
sbb al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1b], cl
add byte [rax], al
and al, byte [rax]
add ah, ch
sub eax, 0x40
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rax
sbb eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x4035], dl
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
test byte [rbx], bl
add byte [rax], al
and al, byte [rax]
add byte [rdi + rbp + 0x40], dh
add byte [rax], al
push rbx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x1200001b], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200001b], dh
add byte [rsi], cl
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
ficomp dword [rbx]
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rbx], bh
add byte [rax], al
and al, byte [rax]
add dh, bl
xor byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x1c], ch
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4034], ch
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cwde
sbb al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x402d], cl
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0x1c, al
add byte [rax], al
and al, byte [rax]
add byte [rax], cl
add byte cs:[rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0x1d
add byte [rax], al
and al, byte [rax]
add byte [rbx], cl
xor al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x1d], dl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4032], bh
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2200001d], cl
add byte [rsi], cl
add dl, dl
xor eax, 0x40
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
enter 0x1d, 0
adc al, byte [rax]
add bh, cl
sub byte [rax], al
add byte [rax], al
add byte [rax], al
in al, dx
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
adc eax, dword [rax]
add byte [rdx], dl
add byte [rbx], cl
add byte [rax + 0x11], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, cl
sbb eax, 0x220000
add dh, al
xor byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
int1
sbb eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x72], ah
je 0x4066b8
je 0x4066bc
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
pop rdi
pop rdi
add byte [rbp + 0x72], ah
imul esi, dword gs:[ebx + 0x74], 0x745f7265
insd dword [rdi], dx
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x40666e
pop rdi
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x4066ec
jb 0x4066f2
pop rdi
jne 0x4066fb
add byte [rbx + 0x6f], ah
insd dword [rdi], dx
jo 0x4066f5
je 0x4066f1
xor eax, 0x5f003538
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x406711
jb 0x406717
pop rdi
jne 0x406720
pop rdi
imul bp, word [rsi + 0x69], 0x615f
jb 0x406723
jns 0x406713
outsb dx, byte gs:[rsi]
je 0x40672a
jns 0x4066ba
jb 0x40671e
insd dword [rdi], dx
pop rdi
jne 0x406730
insd dword [rdi], dx
jns 0x4066c6
pop rdi
pop rdi
jb 0x40672c
insd dword [rdi], dx
pop rdi
jne 0x40673e
insd dword [rdi], dx
jns 0x406733
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40673e
jns 0x40673e
outsb dx, byte gs:[rsi]
je 0x406755
jns 0x4066e5
movsxd rsi, dword cs:[rax + 0x70]
add byte [rdi + 0x5a], bl
push rbx
je 0x40673c
xor dword [rcx], edi
jo 0x40675d
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x406775
jb 0x406778
movsxd rsi, dword [rax + rax + 0x5f]
pop rdx
push rbx
je 0x406757
xor dword [rbx], esi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x406776
jb 0x406781
add byte [rdi + 0x5a], bl
push rbx
je 0x40676c
imul esp, dword ss:[rdi + 0x6e], 0x65726f
pop rdi
pop rdx
push rbx
je 0x406779
cmp byte [rdi + 0x5f], bl
imul ebp, dword [rdi + 0x69], 0x74696e
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4067a0
movsxd rdi, dword [rax + 0x78]
xor r14b, byte [rcx]
pop rdi
pop rdi
jne 0x4067bb
je 0x4067b0
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4067c7
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x5a5f0045
push rbx
je 0x4067af
xor dword [rax], esi
jb 0x4067ca
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx]
pop rdi
pop rdx
push rbx
je 0x4067c1
xor dword [rcx], esi
je 0x4067eb
jns 0x4067da
je 0x4067ec
pop rdi
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx]
pop rdi
pop rdx
push rbx
je 0x4067d4
xor dword [rax], esi
outsd dx, dword fs:[rsi]
jo 0x406803
pop rdi
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx]
pop rdi
pop rdx
push rbx
je 0x4067cc
xor eax, 0x65676572
js 0x406801
movsxd rbp, dword [rdi + 0x6e]
jae 0x40681b
outsb dx, byte [rsi]
je 0x40681e
xor rax, 0x73616369
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x4067eb
xor eax, 0x65676572
js 0x406820
movsxd rbp, dword [rdi + 0x6e]
jae 0x40683a
outsb dx, byte [rsi]
je 0x40683d
outsb dx, byte ss:[rsi]
outsd dx, dword [rsi]
jae 0x406845
jae 0x406818
add byte [rdi + 0x5a], bl
push rbx
je 0x40680b
xor eax, 0x65676572
js 0x406840
movsxd rbp, dword [rdi + 0x6e]
jae 0x40685a
outsb dx, byte [rsi]
je 0x40685d
cmp byte [rdi + 0x70], r13b
je 0x406859
insd dword [rdi], dx
imul edi, dword [rdx + 0x65], 0x5a5f0045
push rbx
je 0x40682d
xor eax, 0x65676572
js 0x406862
movsxd rbp, dword [rdi + 0x6e]
jae 0x40687c
outsb dx, byte [rsi]
je 0x40687f
movsxd rbp, dword [rdi + 0x6c]
insb byte [rdi], dx
je 0x40687a
add byte [r15 + 0x5a], r11b
push rbx
je 0x40684e
xor eax, 0x65676572
js 0x406883
movsxd rbp, dword [rdi + 0x6e]
jae 0x40689d
outsb dx, byte [rsi]
je 0x4068a0
xor qword [rax], r14
push r11
movsxd rsi, dword [rdx + 0x69]
jo 0x4068ae
add byte [r15 + 0x5a], r11b
push rbx
je 0x406873
xor eax, 0x65676572
js 0x4068a8
movsxd rbp, dword [rdi + 0x6e]
jae 0x4068c2
outsb dx, byte [rsi]
je 0x4068c5
xor rax, 0x69736162
movsxd rax, dword [rbp]
pop rdi
pop rdx
push rbx
je 0x406892
xor eax, 0x65676572
js 0x4068c7
movsxd rbp, dword [rdi + 0x6e]
jae 0x4068e1
outsb dx, byte [rsi]
je 0x4068e4
cmp byte [rbp + 0x78], r12b
je 0x4068dc
outsb dx, byte [rsi]
add byte fs:[r15 + 0x5a], r11b
push rbx
je 0x4068b4
xor eax, 0x65676572
js 0x4068e9
movsxd rbp, dword [rdi + 0x6e]
jae 0x406903
outsb dx, byte [rsi]
je 0x406906
xor r12, qword [rcx + 0x77]
imul eax, dword [rbp], 0x5f
pop rdx
push rbx
je 0x4068d1
xor eax, 0x65676572
js 0x406906
movsxd rbp, dword [rdi + 0x6e]
jae 0x406920
outsb dx, byte [rsi]
je 0x406923
xor al, 0x67
jb 0x40691a
jo 0x4068fc
add byte [rdi + 0x5a], bl
push rbx
je 0x4068ef
xor eax, 0x65676572
js 0x406924
movsxd rbp, dword [rdi + 0x6e]
jae 0x40693e
outsb dx, byte [rsi]
je 0x406941
xor rax, 0x65726765
jo 0x40691b
add byte [rdi + 0x5a], bl
push rbx
je 0x40690e
xor eax, 0x65676572
js 0x406943
movsxd rbp, dword [rdi + 0x6e]
jae 0x40695d
outsb dx, byte [rsi]
je 0x406960
xor qword [rbx], r14
insd dword [rdi], dx
je 0x406957
push 0x6665645f
jne 0x406968
je 0x406943
add byte [rdi + 0x5a], bl
push rbx
je 0x406936
xor eax, 0x65676572
js 0x40696b
movsxd rbp, dword [rdi + 0x6e]
jae 0x406985
outsb dx, byte [rsi]
je 0x406988
xor qword [rbx], r14
insd dword [rdi], dx
je 0x40697f
push 0x746f6e5f
pop rdi
outsd dx, dword [rsi]
insb byte [rdi], dx
add byte [r15 + 0x5a], r11b
push rbx
je 0x40695e
xor eax, 0x65676572
js 0x406993
movsxd rbp, dword [rdi + 0x6e]
jae 0x4069ad
outsb dx, byte [rsi]
je 0x4069b0
xor qword [rbx], r14
insd dword [rdi], dx
je 0x4069a7
push 0x746f6e5f
pop rdi
outsd dx, dword gs:[rsi]
insb byte [rdi], dx
add byte [r15 + 0x5a], r11b
push rbx
je 0x406986
xor eax, 0x65676572
js 0x4069bb
movsxd rbp, dword [rdi + 0x6e]
jae 0x4069d5
outsb dx, byte [rsi]
je 0x4069d8
xor qword [rbx], r14
insd dword [rdi], dx
je 0x4069cf
push 0x746f6e5f
pop rdi
outsd dx, dword [rsi]
ja 0x4069bb
add byte [rdi + 0x5a], bl
push rbx
je 0x4069ae
xor eax, 0x65676572
js 0x4069e3
movsxd rbp, dword [rdi + 0x6e]
jae 0x4069fd
outsb dx, byte [rsi]
je 0x406a00
xor qword [rbx], r14
insd dword [rdi], dx
je 0x4069f7
push 0x746f6e5f
pop rdi
outsd dx, dword gs:[rsi]
ja 0x4069e3
add byte [rdi + 0x5a], bl
push rbx
je 0x4069d6
xor eax, 0x65676572
js 0x406a0b
movsxd rbp, dword [rdi + 0x6e]
jae 0x406a25
outsb dx, byte [rsi]
je 0x406a28
cmp qword [rbp + 0x61], r13
je 0x406a1e
push 0x796e615f
add byte [r15 + 0x5a], r11b
push rbx
je 0x4069f9
xor eax, 0x65676572
js 0x406a2e
movsxd rbp, dword [rdi + 0x6e]
jae 0x406a48
outsb dx, byte [rsi]
je 0x406a4b
xor qword [rbp*2 + 0x68637461], r14
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
je 0x406a44
outsb dx, byte [rsi]
jne 0x406a54
insb byte [rdi], dx
add byte [r15 + 0x5a], r11b
push rbx
je 0x406a22
xor eax, 0x65676572
js 0x406a57
movsxd rbp, dword [rdi + 0x6e]
jae 0x406a71
outsb dx, byte [rsi]
je 0x406a74
xor qword [rsi], r14
insd dword [rdi], dx
je 0x406a6b
push 0x6e6f635f
je 0x406a78
outsb dx, byte [rsi]
jne 0x406a81
jne 0x406a87
add byte [r15 + 0x5a], r11b
push rbx
je 0x406a4d
xor eax, 0x65676572
js 0x406a82
movsxd rbp, dword [rdi + 0x6e]
jae 0x406a9c
outsb dx, byte [rsi]
je 0x406a9f
xor qword [rsi], r14
insd dword [rdi], dx
je 0x406a96
push 0x6572705f
jbe 0x406a99
jbe 0x406a9e
imul ebp, dword [rbp + rax*2], 0x534e5a5f
je 0x406a78
xor eax, 0x65676572
js 0x406aad
movsxd rbp, dword [rdi + 0x6e]
jae 0x406ac7
outsb dx, byte [rsi]
je 0x406aca
xor qword [rsi], r14
outsd dx, dword [rsi]
jb 0x406acb
je 0x406ac0
jne 0x406ad3
je 0x406aae
add byte [rdi + 0x5a], bl
push rbx
je 0x406aa1
xor eax, 0x65676572
js 0x406ad6
movsxd rbp, dword [rdi + 0x6e]
jae 0x406af0
outsb dx, byte [rsi]
je 0x406af3
xor qword [rax], r14
outsw dx, word [rsi]
jb 0x406af4
je 0x406ae9
jae 0x406af1
add byte fs:[r15 + 0x5a], r11b
push rbx
je 0x406ac6
xor eax, 0x65676572
js 0x406afb
movsxd rbp, dword [rdi + 0x6e]
jae 0x406b15
outsb dx, byte [rsi]
je 0x406b18
xor qword [rsi], r14
outsd dx, dword [rsi]
jb 0x406b19
je 0x406b0e
outsb dx, byte [rsi]
outsd dx, dword [rsi]
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x406afc
add byte [rdi + 0x5a], bl
push rbx
je 0x406aef
xor eax, 0x65676572
js 0x406b24
movsxd rbp, dword [rdi + 0x6e]
jae 0x406b3e
outsb dx, byte [rsi]
je 0x406b41
xor qword [rdi], r14
outsw dx, word [rsi]
jb 0x406b42
je 0x406b37
imul si, word [rdx + 0x73], 0x5f74
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
jns 0x406b28
add byte [rdi + 0x5a], bl
push rbx
je 0x406b1b
xor eax, 0x65676572
js 0x406b50
movsxd rbp, dword [rdi + 0x6e]
jae 0x406b6a
outsb dx, byte [rsi]
je 0x406b6d
xor qword [rbx], r14
jb 0x406b72
outsd dx, dword [rsi]
jb 0x406b62
movsxd rbp, dword [rdi + 0x6c]
insb byte [rdi], dx
je 0x406b6f
add byte [r15 + 0x5a], r11b
push rbx
je 0x406b43
xor eax, 0x65676572
js 0x406b78
movsxd rbp, dword [rdi + 0x6e]
jae 0x406b92
outsb dx, byte [rsi]
je 0x406b95
xor qword [rcx], r14
jb 0x406b9a
outsd dx, dword [rsi]
jb 0x406b8a
movsxd rsi, dword [rcx + rdi*2 + 0x70]
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x406b69
xor eax, 0x65676572
js 0x406b9e
movsxd rbp, dword [rdi + 0x6e]
jae 0x406bb8
outsb dx, byte [rsi]
je 0x406bbb
xor qword [rdx], r14
jb 0x406bc0
outsd dx, dword [rsi]
jb 0x406bb0
jae 0x406bb7
jo 0x406bbc
add byte [r15 + 0x5a], r11b
push rbx
je 0x406b90
xor eax, 0x65676572
js 0x406bc5
movsxd rbp, dword [rdi + 0x6e]
jae 0x406bdf
outsb dx, byte [rsi]
je 0x406be2
xor qword [rbx], r14
jb 0x406be7
outsd dx, dword [rsi]
jb 0x406bd7
movsxd rbp, dword [rbx + 0x72]
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x406bb8
xor eax, 0x65676572
js 0x406bed
movsxd rbp, dword [rdi + 0x6e]
jae 0x406c07
outsb dx, byte [rsi]
je 0x406c0a
xor qword [rcx], r14
jb 0x406c0f
outsd dx, dword [rsi]
jb 0x406bff
jb 0x406c04
movsxd rbp, dword [rbx + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x406bde
xor eax, 0x65676572
js 0x406c13
movsxd rbp, dword [rdi + 0x6e]
jae 0x406c2d
outsb dx, byte [rsi]
je 0x406c30
xor qword [rcx], r14
jb 0x406c35
outsd dx, dword [rsi]
jb 0x406c25
jo 0x406c29
jb 0x406c2f
outsb dx, byte [rsi]
add byte [r15 + 0x5a], r11b
push rbx
je 0x406c04
xor eax, 0x65676572
js 0x406c39
movsxd rbp, dword [rdi + 0x6e]
jae 0x406c53
outsb dx, byte [rsi]
je 0x406c56
xor qword [rcx], r14
jb 0x406c5b
outsd dx, dword [rsi]
jb 0x406c4b
jb 0x406c50
movsxd rsp, dword [rbp + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x406c2a
xor eax, 0x65676572
js 0x406c5f
movsxd rbp, dword [rdi + 0x6e]
jae 0x406c79
outsb dx, byte [rsi]
je 0x406c7c
xor qword [0x726f7272], r14
pop rdi
jb 0x406c79
movsxd rsp, dword [rbp + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x406c53
xor eax, 0x65676572
js 0x406c88
movsxd rbp, dword [rdi + 0x6e]
jae 0x406ca2
outsb dx, byte [rsi]
je 0x406ca5
xor qword [rcx], r14
jb 0x406caa
outsd dx, dword [rsi]
jb 0x406c9a
jb 0x406c9e
outsb dx, byte [rsi]
add byte gs:[r15d + 0x5a], r11b
push rbx
je 0x406c79
xor eax, 0x65676572
js 0x406cae
movsxd rbp, dword [rdi + 0x6e]
jae 0x406cc8
outsb dx, byte [rsi]
je 0x406ccb
xor qword [rcx], r14
jb 0x406cd0
outsd dx, dword [rsi]
jb 0x406cc0
jae 0x406cd3
movsxd rsp, dword [rbp + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x406c9f
xor eax, 0x65676572
js 0x406cd4
movsxd rbp, dword [rdi + 0x6e]
jae 0x406cee
outsb dx, byte [rsi]
je 0x406cf1
xor qword [rip + 0x6f727265], r14
jb 0x406ce6
jb 0x406cf1
jo 0x406cf3
je 0x406cd6
add byte [rdi + 0x5a], bl
push rbx
je 0x406cc9
xor eax, 0x65676572
js 0x406cfe
movsxd rbp, dword [rdi + 0x6e]
jae 0x406d18
outsb dx, byte [rsi]
je 0x406d1b
xor qword [rsi], r14
jb 0x406d20
outsd dx, dword [rsi]
jb 0x406d10
movsxd rbp, dword [rdi + 0x6d]
jo 0x406d22
js 0x406d22
je 0x406d34
add byte [r15 + 0x5a], r11b
push rbx
je 0x406cf4
xor eax, 0x65676572
js 0x406d29
movsxd rbp, dword [rdi + 0x6e]
jae 0x406d43
outsb dx, byte [rsi]
je 0x406d46
xor qword [rcx], r14
jb 0x406d4b
outsd dx, dword [rsi]
jb 0x406d3b
jae 0x406d52
movsxd rbp, dword [rbx + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x406d21
pop rdi
pop rdi
je 0x406d50
imul ebp, dword [rsp + rcx*2 + 0x31], 0x5f535f39
imul ebp, dword [rsi + 0x76], 0x64696c61
pop rdi
jae 0x406d75
je 0x406d69
pop rdi
imul esp, dword [rbp + rax*2], 0x31345a5f
pop rdi
pop rdi
jae 0x406d85
je 0x406d7d
movsxd rbx, dword [rdi + 0x69]
outsb dx, byte [rsi]
imul esi, dword [rcx + rbp*2 + 0x61], 0x617a696c
je 0x406d8b
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
outsb dx, byte [rsi]
pop rdi
jae 0x406da1
jb 0x406da4
movsxd rsi, dword [rcx + rbp*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
xor byte [rcx + 0x69], ch
add byte [rdi + 0x47], bl
pop rdi
pop rdi
jae 0x406db9
pop rdi
pop r15
pop rdi
pop rdx
xor eax, 0x636c6163
xor al, byte [rdx + 0x35]
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
push rbx
je 0x406d90
jbe 0x406dc1
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
add byte [rdi + 0x5f], bl
push rdx
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push r10
pop rdi
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push rbp
pop rdi
pop rdi
push rdx
pop r15
push rdx
add byte [rdi + 0x47], bl
pop rdi
push rbx
push r12
pop rdi
push rsp
pop r15
add byte [rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x406e18
jns 0x406e18
outsb dx, byte gs:[rsi]
add byte fs:[rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x406e29
jns 0x406e29
jae 0x406e40
jb 0x406e43
add byte [rdi + 0x44], bl
pop rcx
add byte [r15 + 0x5a], bl
push rbx
je 0x406e12
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x406e47
push r10
push rbx
je 0x406e1f
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x406e5e
movsxd rbx, dword [rdi + 0x73]
je 0x406e6c
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x406e67
je 0x406e7c
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
je 0x406e4f
jb 0x406e86
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x406e8a
pop rdi
jb 0x406e8d
jb 0x406e91
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rsp
pop rdi
xor al, 0x74
jns 0x406ea7
push r11
cmp byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x406e76
movsxd rbp, dword [rcx + 0x6e]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x406e8a
cmp byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x406ee5
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x406ed4
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x406eed
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul rdx, qword [r11 + 0x74], 0x63657636
je 0x406f06
jb 0x406ee2
imul edx, dword [rbx + 0x61], 0x45456949
push r8
imul eax, dword [rbp + 0x54], 0x5f545f30
push rbx
pop r15
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x406f1a
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x406f23
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x406f17
imul eax, dword [rbp + 0x31], 0x61656430
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
imul ebp, dword [rbp], 0x534e5a5f
outsd dx, dword [rsi]
insb byte [rdi], dx
jae 0x406f2e
imul eax, dword [rax + 0x40], 0x42494c47
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x406f35
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x406f74
movsxd rbx, dword [rdi + 0x73]
je 0x406f82
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x406f7d
je 0x406f92
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jb 0x406f95
jae 0x406f9b
jp 0x406f99
insd dword [rdi], dx
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5f], bl
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul bp, word [rsi + 0x69], 0x5f00
pop rdx
push rbx
je 0x406f94
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x406fd3
movsxd rbx, dword [rdi + 0x73]
je 0x406fe1
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x406fdc
je 0x406ff1
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
imul ebp, dword ss:[rsi + 0x73], 0x45747265
insd dword [rdi], dx
push rdx
push r11
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push r11
je 0x406fe9
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x407028
movsxd rbx, dword [rdi + 0x73]
je 0x407036
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x407031
je 0x407046
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jae 0x407059
jae 0x40705b
jb 0x40702e
insd dword [rdi], dx
insd dword [rdi], dx
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x407033
xor byte [rdi + 0x49], bl
je 0x40706c
jb 0x407068
jae 0x407072
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x407075
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40708e
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul rdx, qword [r11 + 0x74], 0x63657636
je 0x4070a7
jb 0x407083
imul edx, dword [rbx + 0x61], 0x45456949
xor byte [rbp + 0x45], al
pop rdi
push rbx
pop rdi
jae 0x4070b5
push r11
pop rdi
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4070be
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4070c7
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4070bb
imul eax, dword [rbp + 0x43], 0x4b524531
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4070b4
xor dword [rdi + 0x5f], ebx
movsxd rbp, dword [rdi + 0x70]
jns 0x4070ea
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x4070f4
xor byte [rbp + 0x4c], al
xor dword [rbp + 0x53], eax
je 0x4070cd
jb 0x4070ff
outsb dx, byte [rsi]
outsd dx, dword fs:[rsi]
insd dword [rdi], dx
pop rdi
movsxd rsp, dword [rbx + 0x65]
jae 0x40711c
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x407116
cmp byte [r15d + 0x5f], r11b
movsxd rbp, dword [rdi + 0x70]
jns 0x40711e
insd dword [rdi], dx
imul rax, qword [r13 + 0x45], 0x505f5450
push r11
xor ebx, dword [rdi + 0x53]
pop rdi
push rbx
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x40710a
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40714b
imul rdx, qword [r11 + 0x61], 0x45456949
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push r11
je 0x407130
jbe 0x407161
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x5f007645
pop rdx
push rbx
je 0x40714d
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40718c
movsxd rbx, dword [rdi + 0x73]
je 0x40719a
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x407195
je 0x4071aa
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
push r11
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5f], bl
insd dword [edi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x4071da
jb 0x4071dd
pop rdi
pop rdi
add byte [rdi + 0x4a], bl
jbe 0x4071cf
push rdx
imul esi, dword gs:[ebx + 0x74], 0x6c437265
jae 0x4071f0
jae 0x407180
pop rdi
pop rdx
push rbx
je 0x4071b7
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4071f0
je 0x407205
imul esi, dword [rbx + rsi*2 + 0x49], 0x69496153
xor r14d, dword [r15]
jae 0x407207
insb byte [rdi], dx
movsxd rsi, dword gs:[rdi + rbx*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
movsxd rbp, dword [rdi + 0x6e]
je 0x407210
imul ebp, dword [rsi + 0x65], 0x6f635f72
jo 0x407231
pop rdi
movsxd rbp, dword [rdi + 0x6e]
jae 0x407232
jb 0x407235
movsxd rsi, dword [rcx + rbp*2 + 0x6f]
outsb dx, byte [rsi]
push r10
push r11
xor byte [rdi], bl
pop rdi
pop rdx
insb byte [rdi], dx
push rax
jbe 0x407213
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x407249
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x407252
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x407246
imul eax, dword [rbp + 0x44], 0x764531
pop rdi
pop rdx
push rbx
imul rax, qword [r13 + 0x43], 0x4b524531
push rbx
pop rdi
add byte [rdi + 0x5a], bl
push rbx
imul rax, qword [r13 + 0x43], 0x764532
pop rdi
pop rdx
push rbx
je 0x40725f
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rbx + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x6174735f
jb 0x4072c6
pop rdi
insd dword [rdi], dx
imul ebp, dword [rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x4072ce
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4072d7
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4072cb
imul eax, dword [rbp + 0x44], 0x764532
pop rdi
pop rdx
push rbx
je 0x4072c6
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x407305
movsxd rbx, dword [rdi + 0x73]
je 0x407313
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40730e
je 0x407323
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jo 0x407332
outsb dx, byte gs:[rsi]
push r8
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x407317
pop rdi
jae 0x407358
jb 0x407355
jns 0x407331
push rax
imul ebp, dword [rcx + 0x45], 0x535f5476
xor dword [rdi + 0x52], ebx
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x407332
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x407373
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rdx], esi
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x407364
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4073a5
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [r13 + 0x6d], eax
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40738e
jbe 0x4073bf
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [r13 + 0x52], eax
push r11
xor dword [rdi], ebx
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
je 0x4073dd
js 0x4073e3
je 0x4073bc
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x4073c6
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x407405
movsxd rbx, dword [rdi + 0x73]
je 0x407413
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40740e
je 0x407423
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jo 0x40740c
push r8
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x407411
jbe 0x407442
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40742c
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rsp + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40744a
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40748b
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rdx], esi
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x407441
pop rdi
push r12
pop r15
jb 0x4074af
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x4074ce
jae 0x4074ad
push rbx
je 0x407498
xor dword [rbx + 0x68], esp
jb 0x4074cc
je 0x4074e1
imul esi, dword [rbx + rsi*2 + 0x49], 0x52454563
push rbx
je 0x4074ac
xor esp, dword [rdx + 0x61]
jae 0x4074e9
movsxd rbx, dword [rdi + 0x6f]
jae 0x4074f9
jb 0x4074ec
insd dword [rdi], dx
movsxd rdx, dword [r15 + rbx*2 + 0x45]
push rbx
xor eax, 0x634b505f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x4074d9
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40751a
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rbx], esi
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
imul ebp, dword [rbp], 0x5f4f495f
jae 0x40754b
imul ebp, dword fs:[rsi + 0x5f], 0x64657375
add byte [rdi + 0x5a], bl
push rbx
je 0x407517
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x407558
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rcx], edi
pop rdi
pop r15
je 0x407563
push rsp
jo 0x407566
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x407556
jbe 0x407513
pop rdi
pop rdx
push rbx
je 0x407550
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x40758f
movsxd rbx, dword [rdi + 0x73]
je 0x40759d
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x407598
je 0x4075ad
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x4f], eax
push rbx
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4075c9
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4075e2
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul rdx, qword [r11 + 0x74], 0x63657636
je 0x4075fb
jb 0x4075d7
imul edx, dword [rbx + 0x61], 0x45456949
xor al, byte [r13 + 0x52]
push r11
xor bl, byte [rdi]
pop rdi
push r12
pop r15
jb 0x40760b
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5f], bl
je 0x407620
pop rdi
jae 0x407636
jb 0x407639
add byte [rdi + 0x5a], bl
push rbx
je 0x4075fc
xor al, 0x5f
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x407632
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x40763c
pop rdi
xor cl, byte [rcx + 0x4c]
xor byte [rbp + 0x4e], al
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x407646
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40765f
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul rdx, qword [r11 + 0x74], 0x63657636
je 0x407678
jb 0x407654
imul edx, dword [rbx + 0x61], 0x45456949
push r8
imul eax, dword [rbp + 0x54], 0x30545f31
pop rdi
push rbx
pop r15
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x407661
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4076a0
movsxd rbx, dword [rdi + 0x73]
je 0x4076ae
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4076a9
je 0x4076be
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [rbp + 0x76], r8d
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x4076a5
xor bl, byte [rdi + 0x44]
jae 0x4076ee
jb 0x4076eb
jns 0x4076dd
jne 0x4076f9
xor dword [rbp + 0x45], eax
cmp dword [rdi + 0x5f], ebx
jae 0x407702
jb 0x4076ff
jns 0x4076db
push rax
imul eax, dword [rbp + 0x45], 0x535f5476
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x4076d4
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x407715
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rdx], esi
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x407706
xor bl, byte [rdi + 0x5f]
jne 0x407747
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x407762
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x407753
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40776c
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul rdx, qword [r11 + 0x74], 0x63657636
je 0x407785
jb 0x407761
imul edx, dword [rbx + 0x61], 0x45456949
push r8
imul ebp, dword [rcx + 0x45], 0x545f3054
pop rdi
push rbx
pop r15
push rbx
cmp dword [rdi + 0x52], ebx
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x407770
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4077b1
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4077c2
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4077cb
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4077bf
imul eax, dword [rbp + 0x43], 0x764531
pop rdi
pop rdx
push rbx
je 0x4077b9
jbe 0x4077ea
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor al, byte [r13 + 0x52]
push r11
xor dword [rdi], ebx
pop rdi
pop rdi
push rsp
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4077e3
pop rdi
jae 0x407824
jb 0x407821
jns 0x4077fd
push rax
imul eax, dword [rbp + 0x76], 0x31535f54
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4077f7
movsxd rbp, dword [rdi + 0x75]
je 0x407808
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40783e
movsxd rdi, dword [rax + 0x78]
xor dword [rdi + rbx*2], esi
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbx, dword [rdi + 0x74]
jb 0x407850
imul esi, dword [rbx + rsi*2 + 0x49], 0x69496153
xor dword [r15], r14d
pop rdi
push rbx
pop rdi
jae 0x407865
insb byte [rdi], dx
movsxd rsi, dword gs:[rdi + rbx*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x407852
push rdx
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40784b
xor byte [rdi + 0x5f], bl
jne 0x40788c
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x4078a7
xor dword [rbp + 0x45], eax
xor dword [rbx], esi
pop rdi
pop rdi
jne 0x4078a8
imul ebp, dword [rsi + 0x69], 0x6f635f74
jo 0x4078bc
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4078ab
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4078c4
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul rdx, qword [r11 + 0x74], 0x63657636
je 0x4078dd
jb 0x4078b9
imul edx, dword [rbx + 0x61], 0x45456949
push r8
imul eax, dword [rbp + 0x45], 0x545f3054
pop rdi
push rbx
pop r15
push rbx
pop rdi
add byte [rdi + 0x5f], bl
jae 0x4078fd
pop rdi
push 0x6c646e61
add byte gs:[rdi + 0x5a], bl
push rbx
je 0x4078cc
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
cmp qword gs:[rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x407910
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x407929
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul rdx, qword [r11 + 0x74], 0x63657636
je 0x407942
jb 0x40791e
imul edx, dword [rbx + 0x61], 0x45456949
push rbx
je 0x407914
xor dword [rdi + 0x4e], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x407979
jo 0x407967
push r11
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x40793e
xor byte [rdi + 0x49], bl
je 0x407977
jb 0x407973
jae 0x40797d
push r8
imul ecx, dword [rdx + 0x30], 0x5f374545
push rbx
pop rdi
jae 0x40798d
push r11
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x407996
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40799f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x407993
imul eax, dword [rbp + 0x43], 0x4b524532
push rbx
xor dword [rdi], ebx
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul ebp, dword [rsi + 0x69], 0x5a5f0074
push rbx
imul rax, qword [r13 + 0x44], 0x764532
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4079db
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4079f4
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul rdx, qword [r11 + 0x74], 0x63657636
je 0x407a0d
jb 0x4079e9
imul edx, dword [rbx + 0x61], 0x45456949
xor dword [r13 + 0x52], eax
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
imul rax, qword [r13 + 0x43], 0x764531
pop rdi
pop rdx
push r11
je 0x4079fb
jbe 0x407a2c
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor esp, dword [rbp + 0x6e]
jbe 0x4079da
insd dword [rdi], dx
insd dword [rdi], dx
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x407a46
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x407a26
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x407a5f
je 0x407a74
imul esi, dword [rbx + rsi*2 + 0x49], 0x69496153
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor byte [rdi + 0x6d], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x407a53
xor ebx, dword [rdi + 0x5f]
movsxd rbp, dword [rdi + 0x70]
jns 0x407a89
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x407a93
pop rdi
xor byte [rbp + 0x50], al
imul rdx, qword [r8 + 0x69], 0x5f315445
push rsp
xor byte [rdi + 0x53], bl
xor al, 0x5f
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x407a84
jbe 0x407ab5
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x407ad6
insb byte [rdi], dx
movsxd rdx, dword [r11 + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x407ad1
je 0x407ae6
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
je 0x407abc
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x407afb
movsxd rbx, dword [rdi + 0x73]
je 0x407b09
imul ebp, dword [rsi + 0x67], 0x545f5449
xor byte [rdi + 0x54], bl
xor dword [rdi + 0x45], ebx
push r11
cmp byte [rdi + 0x53], bl
cmp dword [rdi], ebx
pop rdi
pop rdx
push r11
je 0x407aeb
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x407b2a
movsxd rbx, dword [rdi + 0x73]
je 0x407b38
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x407b33
je 0x407b48
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp byte [rbx + 0x61], ah
jo 0x407b49
movsxd rbp, dword [rcx + 0x74]
jns 0x407b32
jbe 0x407b2f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x407b69
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x407b82
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul rdx, qword [r11 + 0x74], 0x63657636
je 0x407b9b
jb 0x407b77
imul edx, dword [rbx + 0x61], 0x45456949
xor al, 0x62
jae 0x407ba0
jbe 0x407b3e
pop rdi
pop rdi
jae 0x407bb6
pop rdi
jae 0x407bba
jb 0x407bbd
add byte [rdi + 0x5a], bl
push rbx
je 0x407b81
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x407bc2
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rdi], esi
pop rdi
pop r15
movsxd rsi, dword [rdx + 0x65]
je 0x407bd5
pop rdi
jae 0x407be7
outsd dx, dword [rsi]
jb 0x407bd7
insd dword [edi], dx
add byte [rdi + 0x5a], bl
push rbx
imul rax, qword [r13 + 0x43], 0x4b524532
push rbx
pop rdi
add byte [rdi + 0x5f], bl
jae 0x407c03
movsxd rbp, dword [rbx + 0x5f]
movsxd rbp, dword [rax + 0x6b]
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x407be4
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x407c23
movsxd rbx, dword [rdi + 0x73]
je 0x407c31
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x407c2c
je 0x407c41
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jo 0x407c50
outsb dx, byte gs:[rsi]
push r10
push r11
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x407c35
imul bp, word [rsp + rbp*2 + 0x5f], 0x496e
push rax
imul ebp, dword [rbp + 0x69], 0x535f5445
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push r12
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
movsxd rax, dword [r13 + 0x44]
xor dword [rbp + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x407c6f
jbe 0x407ca0
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
imul edi, dword [rax + 0x45], 0x5a5f006d
push rbx
imul esi, dword [rdx + 0x73], 0x40695245
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x407c9c
pop rdi
pop rdi
jne 0x407cdd
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x407ced
je 0x407ce2
outsb dx, byte [rsi]
pop rdi
xor dword [rcx + 0x4c], ecx
xor dword [rbp + 0x45], eax
xor dword [rax], edi
pop rdi
pop rdi
jne 0x407d00
imul ebp, dword [rsi + 0x69], 0x65645f74
jne 0x407d09
je 0x407cfe
outsb dx, byte [rsi]
push r8
imul ebp, dword [rbp + 0x45], 0x535f5445
xor ebx, dword [rdi + 0x54]
xor byte [rdi], bl
pop rdi
pop rdx
push r11
je 0x407ced
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x407d2c
movsxd rbx, dword [rdi + 0x73]
je 0x407d3a
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x407d35
je 0x407d4a
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
movsxd rbp, dword [rdi + 0x6d]
jo 0x407d4c
jb 0x407d52
push r8
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push r11
je 0x407d40
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x407d7f
movsxd rbx, dword [rdi + 0x73]
je 0x407d8d
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x407d88
je 0x407d9d
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x407d87
xor byte [rdi + 0x49], bl
je 0x407dc0
jb 0x407dbc
jae 0x407dc6
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x407dc9
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x407de2
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul rdx, qword [r11 + 0x74], 0x63657636
je 0x407dfb
jb 0x407dd7
imul edx, dword [rbx + 0x61], 0x45456949
xor dword [rbp + 0x45], eax
pop rdi
push rbx
pop rdi
jae 0x407e09
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x407ddf
xor byte [rdi + 0x5f], bl
imul bp, word [rsp + rbp*2 + 0x5f], 0x5f6e
push r8
imul ebp, dword [rbp + 0x69], 0x5f394e45
pop rdi
outsb dx, byte [esi]
jne 0x407e26
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
pop rdi
pop rdi
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
pop rdi
imul esp, dword [rsi + 0x49], 0x53727358
je 0x407e0f
xor dword [rdi + 0x5f], ebx
imul esi, dword [rbx + 0x5f], 0x6c616373
jb 0x407e34
push rsp
xor dword [rdi + 0x45], ebx
pop rdi
pop rdi
jbe 0x407e55
insb byte [rdi], dx
jne 0x407e5c
push r12
pop rdi
pop rdi
pop rdi
je 0x407e79
jo 0x407e67
push r11
pop rdi
push rsp
xor byte [rdi + 0x52], bl
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
outsd dx, dword [rsi]
insb byte [rdi], dx
jae 0x407e5c
push rax
push rdx
push rbx
outsd dx, dword [rsi]
push rbx
pop rdi
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
xor al, 0x63
insb byte [rdi], dx
movsxd rax, dword [rdx + 0x35]
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
push rbx
je 0x407e74
jbe 0x407ea5
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
add byte [rdi + 0x5a], bl
push rbx
je 0x407e83
pop rdi
pop rdi
je 0x407ebf
jb 0x407ec8
ja 0x407eba
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsi, dword [rsi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x407edd
jno 0x407ec3
movsxd rdx, dword [rbx + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x407ee3
je 0x407ef8
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rdx
push rbx
je 0x407ed1
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x407f10
movsxd rbx, dword [rdi + 0x73]
je 0x407f1e
imul ebp, dword [rsi + 0x67], 0x545f5449
xor byte [rdi + 0x54], bl
xor dword [rdi + 0x45], ebx
push r8
push r11
xor eax, 0x5a5f005f
push rbx
je 0x407ef7
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x407f30
je 0x407f45
imul esi, dword [rbx + rsi*2 + 0x49], 0x69496153
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor byte [rdi + 0x50], bl
imul ebp, dword [rbp], 0x74535a5f
xor dword [rdx], esi
pop rdi
pop rdi
insd dword [rdi], dx
imul esi, dword [rbp + 0x72], 0x7361625f
cmp qword gs:[rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x407f6d
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x407f86
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul rdx, qword [r11 + 0x74], 0x63657636
je 0x407f9f
jb 0x407f7b
imul edx, dword [rbx + 0x61], 0x45456949
push rbx
je 0x407f71
xor dword [rdi + 0x4d], ebx
imul esi, dword [rbp + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x407fd6
jo 0x407fc4
push r11
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x407f9d
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
movsxd rdx, dword [r11 + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x407fd7
je 0x407fec
imul esi, dword [rbx + rsi*2 + 0x49], 0x52454563
push rbx
je 0x407fb7
xor esp, dword [rdx + 0x61]
jae 0x407ff4
movsxd rbx, dword [rdi + 0x6f]
jae 0x408004
jb 0x407ff7
insd dword [rdi], dx
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push rbx
pop rdi
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push r11
je 0x407fe4
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x408025
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rcx], edi
pop rdi
pop r15
je 0x408030
push rsp
jo 0x408033
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408023
jbe 0x407fe0
pop rdi
pop rdx
push rbx
je 0x408017
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x408058
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rdx], esi
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x40800e
pop rdi
pop rdx
push rbx
je 0x408045
xor eax, 0x6e755f5f
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x408096
je 0x40808b
outsb dx, byte [rsi]
push r8
imul ebp, dword [rbp + 0x45], 0x31535f54
pop rdi
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x408078
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4080b7
movsxd rbx, dword [rdi + 0x73]
je 0x4080c5
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4080c0
je 0x4080d5
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [r13 + 0x50], eax
movsxd rdx, dword [r10 + 0x4b]
push rbx
xor ebx, dword [rdi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x4080c8
jbe 0x4080f9
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [r13 + 0x6d], eax
push rdx
push r11
xor byte [rdi], bl
pop rdi
je 0x408111
add byte [rdi + 0x5a], bl
push rbx
movsxd rax, dword [r13 + 0x43]
xor dword [rbp + 0x76], eax
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdi
js 0x408148
pop rdi
jo 0x408138
jb 0x408148
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
imul esi, dword [rcx + rdi*2 + 0x5f], 0x40403076
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x408123
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x408164
imul rdx, qword [r11 + 0x61], 0x45456949
xor dword [rcx], esi
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x408188
jae 0x408167
movsxd rdx, dword [rbx + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408187
je 0x40819c
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rdx
push rbx
je 0x40816c
xor esp, dword [rdx + 0x61]
jae 0x4081a9
movsxd rbx, dword [rdi + 0x6f]
jae 0x4081b9
jb 0x4081ac
insd dword [rdi], dx
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push rbx
pop rdi
push rdx
push rbx
je 0x408190
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4081cf
movsxd rbx, dword [rdi + 0x73]
je 0x4081dd
imul ebp, dword [rsi + 0x67], 0x5f345349
push rbx
xor eax, 0x5f31545f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
imul rax, qword [r13 + 0x44], 0x764531
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x408202
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40820b
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4081ff
imul eax, dword [rbp + 0x38], 0x5f78616d
jae 0x408228
jp 0x408226
jbe 0x4081c4
pop rdi
pop rdx
push r11
je 0x408201
jbe 0x408232
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor eax, 0x69676562
outsb dx, byte [rsi]
jbe 0x4081e2
pop rdi
pop rdx
outsb dx, byte [rsi]
ja 0x408254
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40822c
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40826d
imul rdx, qword [r11 + 0x61], 0x45456949
xor al, byte [r13 + 0x6d]
push rdx
push r11
xor byte [rdi], bl
pop rdi
push rbp
outsb dx, byte [rsi]
ja 0x408288
outsb dx, byte [rsi]
pop rdi
push rdx
jae 0x40829b
insd dword [rdi], dx
pop r15
xor ebp, dword [rsi]
xor byte [rax], al
pop rdi
pop rdx
push rbx
je 0x40826f
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4082ae
movsxd rbx, dword [rdi + 0x73]
je 0x4082bc
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4082b7
je 0x4082cc
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
imul edi, dword [rax + 0x45], 0x4740406d
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x4082b8
jbe 0x4082e9
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor dh, byte [rcx]
pop rdi
pop r15
jne 0x408307
je 0x4082fc
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x5f006d45
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x408313
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40831c
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408310
imul eax, dword [rbp + 0x38], 0x6f6c6c61
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x4082d8
pop rdi
pop rdx
push rbx
je 0x40834d
insb byte [rdi], dx
movsxd rdx, dword [r11 + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x408348
je 0x40835d
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
je 0x408333
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x408372
movsxd rbx, dword [rdi + 0x73]
je 0x408380
imul ebp, dword [rsi + 0x67], 0x545f5449
xor byte [rdi + 0x54], bl
xor dword [rdi + 0x45], ebx
push r11
cmp byte [rdi + 0x50], bl
push r11
xor eax, 0x5a5f005f
push rbx
je 0x408362
jbe 0x408393
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
xor al, byte [r13 + 0x6d]
push rdx
push r11
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40837d
movsxd rbp, dword [rdi + 0x70]
jns 0x408397
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4083b5
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4083ce
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
imul rdx, qword [r11 + 0x74], 0x63657636
je 0x4083e7
jb 0x4083c3
imul edx, dword [rbx + 0x61], 0x45456949
push r8
imul eax, dword [rbp + 0x54], 0x5f545f30
push rbx
pop r15
push rbx
cmp dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x4083c9
pop rdi
pop rdi
jne 0x40840a
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x40841a
je 0x40840f
outsb dx, byte [rsi]
pop rdi
push r8
imul ebp, dword [rbp + 0x69], 0x535f5445
xor dword [rdi + 0x54], ebx
xor byte [rdi + 0x52], bl
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x408400
xor bl, byte [rdi + 0x5f]
outsb dx, byte [rsi]
imul esi, dword [rbp + 0x72], 0x7361625f
push r8
imul eax, dword [rbp + 0x4e], 0x31317453
pop rdi
imul r14, qword [rbp + r12*2 + 0x72], 0x7361625f
push r12
pop rdi
xor dword [r11], r14d
imul esi, dword [rbp + 0x72], 0x726f7461
pop rdi
je 0x40847a
jo 0x408468
push r11
xor bl, byte [rdi]
insd dword [rdi], dx
imul ebp, dword [rsi], 0x394e5a5f
pop rdi
pop rdi
outsb dx, byte [esi]
jne 0x408476
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40847f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x408473
imul eax, dword [rbp + 0x43], 0x764532
pop rdi
pop rdx
push rbx
je 0x40846e
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x4084ad
movsxd rbx, dword [rdi + 0x73]
je 0x4084bb
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4084b6
je 0x4084cb
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
push rbx
push r8
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rax], al
jae 0x4084fa
insd dword [rdi], dx
je 0x4084e5
add byte [rsi], ch
jae 0x4084fd
jb 0x4084ff
add byte [rsi], ch
jae 0x4084f9
jae 0x408507
jb 0x408509
add byte [rsi], ch
imul ebp, dword [rsi + 0x74], 0x707265
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x40850a
sub rax, 0x676174
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x408518
outsb dx, byte cs:[esi]
jne 0x4084e6
jne 0x408524
insb byte [rdi], dx
sub eax, 0x2e006469
outsb dx, byte [esi]
jne 0x4084f4
push 0x687361
jns 0x40853d
jae 0x40854a
insd dword [rdi], dx
add byte [rsi], ch
jns 0x408545
jae 0x40854d
jb 0x4084db
outsb dx, byte cs:[esi]
jne 0x40850e
jbe 0x408547
jb 0x408557
imul ebp, dword [rdi + 0x6e], 0x6e672e00
jne 0x40851b
jbe 0x408554
jb 0x408564
imul ebp, dword [rdi + 0x6e], 0x2e00725f
jb 0x40855f
insb byte [rdi], dx
jns 0x40856e
add byte [rsi], ch
jb 0x408569
insb byte [rdi], dx
jo 0x408575
je 0x40850b
imul ebp, dword cs:[rsi + 0x69], 0x702e0074
insb byte [rdi], dx
je 0x408544
outsd dx, dword [esi]
je 0x40851a
je 0x408582
js 0x408593
add byte [rsi], ch
imul bp, word [rsi + 0x69], 0x2e00
jb 0x408598
je 0x40858e
add byte [rsi], ch
push 0x6172665f
insd dword [rdi], dx
pop rdi
push 0x2e007264
push 0x6172665f
insd dword [rdi], dx
add byte gs:[rsi], ch
movsxd rsp, dword [ebx + 0x5f]
js 0x4085b1
jo 0x4085c5
pop rdi
je 0x4085b5
insb byte [rdi], dx
add byte gs:[rsi], ch
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x4085c3
jns 0x408564
imul bp, word cs:[rsi + 0x69], 0x615f
jb 0x4085df
jns 0x408570
push 0x63
jb 0x408575
jns 0x4085e7
insd dword [rdi], dx
imul esp, dword [rbx], 0x746f672e
jo 0x4085f1
je 0x408587
je 0x4085ed
add byte [rsi], ch
jae 0x408604
add byte [rsi], ch
movsxd rbp, dword [rdi + 0x6d]
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x40859b
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add dh, dh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rax + 2], bl
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rdx], 1
add byte [rax], al
add byte [rax], al
add al, dl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add al, bl
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
test al, 6
add byte [rax], al
add byte [rax], al
add byte [rax + 6], ch
add byte [rax], al
add byte [rbx + 6], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsi
add byte [rax], al
add bh, bh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, bh
or al, 0x40
add byte [rax], al
add byte [rax], al
add ah, bh
or al, 0
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xd], dl
add byte [rax], al
add byte [rax], al
add byte [rax + 0xd], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, 0
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x4087ff
add byte [rax], al
add byte [rax], al
add al, ah
or eax, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x40000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x19000000
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x11], bl
add byte [rax], al
add byte [rax], al
add byte [rax + 0x11], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4011], al
add byte [rax], al
add byte [rax + 0x11], al
add byte [rax], al
add byte [rax], dh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x10000], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4013], dh
add byte [rax], al
add byte [rax + 0x13], dh
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x1000000], bl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
rcl byte [rbx], 0
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x23], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000000], ah
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rsi + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdi + rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4037], al
add byte [rax], al
add byte [rax + 0x37], al
add byte [rax], al
add bl, bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1000000], dh
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rdi + 0x40], bl
add byte [rax], al
add byte [rax], al
add byte [rax + rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x3a], bh
add byte [rax], al
add byte [rax], al
add byte [rax + 0x3a], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 9
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
leave
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rax*2 + 0x40], cl
add byte [rax], al
mov word [rbx], es
add byte [rax], al
add byte [rax], al
add byte [rdx + 1], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fild dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
add byte [rax], al
add byte [rax], al
add al, ch
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0, eax
add byte [rax], al
sldt word [rax]
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add al, bh
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
lock add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], bl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add al, bh
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rcx], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x60], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, byte [rcx]
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub byte [rcx + 0x60], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ch
push rcx
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rcx], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rcx
add byte [rax], al
add byte [rax], al
add byte [rax], bh
push rcx
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x1000001
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
push rcx
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jge 0x408c7e
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x51], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
rcl byte [rax + rax], 1
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp eax, 0x1e
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
