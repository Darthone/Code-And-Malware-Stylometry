xor ebp, ebp
mov r9, rdx
pop rsi
mov rdx, rsp
and rsp, 0xfffffffffffffff0
push rax
push rsp
mov r8, sym.__libc_csu_fini
mov rcx, sym.__libc_csu_init
mov rdi, sym.main
call sym.imp.__libc_start_main
hlt
nop word [rax + rax]
mov eax, 0x6030cf
push rbp
sub rax, obj.__TMC_END__
cmp rax, 0xe
mov rbp, rsp
jbe 0x400c50
mov eax, 0
test rax, rax
je 0x400c50
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop word [rax + rax]
pop rbp
ret
nop dword [rax]
nop word cs:[rax + rax]
mov esi, obj.__TMC_END__
push rbp
sub rsi, obj.__TMC_END__
sar rsi, 3
mov rbp, rsp
mov rax, rsi
shr rax, 0x3f
add rsi, rax
sar rsi, 1
je 0x400c98
mov eax, 0
test rax, rax
je 0x400c98
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop dword [rax]
pop rbp
ret
nop word [rax + rax]
cmp byte [rip + 0x202669], 0
jne 0x400cba
push rbp
mov rbp, rsp
call sym.deregister_tm_clones
pop rbp
mov byte [rip + 0x202656], 1
ret
nop dword [rax]
mov edi, obj.__JCR_LIST__
cmp qword [rdi], 0
jne 0x400cd0
jmp sym.register_tm_clones
nop dword [rax]
mov eax, 0
test rax, rax
je 0x400ccb
push rbp
mov rbp, rsp
call rax
pop rbp
jmp sym.register_tm_clones
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x88
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov esi, obj.n
mov edi, obj.std::cin
call 0x400b40
mov rdx, rax
lea rax, [rbp - 0x68]
mov rsi, rax
mov rdi, rdx
call 0x400b40
mov eax, dword [rip + 0x2025f8]
cdqe
mov rsi, rax
mov edi, obj.horses
call sym.std::vector_std::pair_longlong_longdouble__std::allocator_std::pair_longlong_longdouble___::resize
mov dword [rbp - 0x60], 0
mov eax, dword [rip + 0x2025dc]
cmp dword [rbp - 0x60], eax
jge 0x400d8f
mov eax, dword [rbp - 0x60]
cdqe
mov rsi, rax
mov edi, obj.horses
call sym.std::vector_std::pair_longlong_longdouble__std::allocator_std::pair_longlong_longdouble___::operator__
lea rbx, [rax + 0x10]
mov eax, dword [rbp - 0x60]
cdqe
mov rsi, rax
mov edi, obj.horses
call sym.std::vector_std::pair_longlong_longdouble__std::allocator_std::pair_longlong_longdouble___::operator__
mov rsi, rax
mov edi, obj.std::cin
call sym.std::istream::operator__
mov rsi, rbx
mov rdi, rax
call 0x400b20
add dword [rbp - 0x60], 1
jmp 0x400d3e
mov dword [rbp - 0x5c], 0
mov eax, dword [rip + 0x202584]
cmp dword [rbp - 0x5c], eax
jge 0x400e1c
mov dword [rbp - 0x58], 0
mov eax, dword [rip + 0x202572]
cmp dword [rbp - 0x58], eax
jge 0x400e13
lea rax, [rbp - 0x30]
mov rsi, rax
mov edi, obj.std::cin
call sym.std::istream::operator__
mov rax, qword [rbp - 0x30]
cmp rax, -1
jne 0x400dee
mov eax, dword [rbp - 0x5c]
cmp eax, dword [rbp - 0x58]
jne 0x400de0
mov qword [rbp - 0x30], 0
jmp 0x400dee
movabs rax, 0x38d7ea4c68000
mov qword [rbp - 0x30], rax
mov rax, qword [rbp - 0x30]
mov edx, dword [rbp - 0x58]
movsxd rdx, edx
mov ecx, dword [rbp - 0x5c]
movsxd rcx, ecx
shl rcx, 7
add rdx, rcx
mov qword [rdx*8 + obj.dist], rax
add dword [rbp - 0x58], 1
jmp 0x400da8
add dword [rbp - 0x5c], 1
jmp 0x400d96
mov dword [rbp - 0x54], 0
mov eax, dword [rip + 0x2024f7]
cmp dword [rbp - 0x54], eax
jge 0x400efe
mov dword [rbp - 0x50], 0
mov eax, dword [rip + 0x2024e1]
cmp dword [rbp - 0x50], eax
jge 0x400ef5
mov dword [rbp - 0x4c], 0
mov eax, dword [rip + 0x2024cb]
cmp dword [rbp - 0x4c], eax
jge 0x400eec
mov eax, dword [rbp - 0x54]
cdqe
mov edx, dword [rbp - 0x50]
movsxd rdx, edx
shl rdx, 7
add rax, rdx
mov rdx, qword [rax*8 + obj.dist]
mov eax, dword [rbp - 0x4c]
cdqe
mov ecx, dword [rbp - 0x54]
movsxd rcx, ecx
shl rcx, 7
add rax, rcx
mov rax, qword [rax*8 + obj.dist]
add rax, rdx
mov qword [rbp - 0x30], rax
mov eax, dword [rbp - 0x4c]
cdqe
mov edx, dword [rbp - 0x50]
movsxd rdx, edx
shl rdx, 7
add rax, rdx
shl rax, 3
lea rdx, [rax + obj.dist]
lea rax, [rbp - 0x30]
mov rsi, rax
mov rdi, rdx
call sym.std::min_longlong_
mov rax, qword [rax]
mov edx, dword [rbp - 0x4c]
movsxd rdx, edx
mov ecx, dword [rbp - 0x50]
movsxd rcx, ecx
shl rcx, 7
add rdx, rcx
mov qword [rdx*8 + obj.dist], rax
add dword [rbp - 0x4c], 1
jmp 0x400e4f
add dword [rbp - 0x50], 1
jmp 0x400e39
add dword [rbp - 0x54], 1
jmp 0x400e23
mov dword [rbp - 0x48], 0
mov eax, dword [rip + 0x202415]
cmp dword [rbp - 0x48], eax
jge 0x401001
mov dword [rbp - 0x44], 0
mov eax, dword [rip + 0x2023ff]
cmp dword [rbp - 0x44], eax
jge 0x400ff8
mov eax, dword [rbp - 0x44]
cdqe
mov edx, dword [rbp - 0x48]
movsxd rdx, edx
shl rdx, 7
add rax, rdx
shl rax, 4
add rax, obj.dist2
fld xword [rip + 0x1064]
fstp xword [rax]
mov eax, dword [rbp - 0x44]
cdqe
mov edx, dword [rbp - 0x48]
movsxd rdx, edx
shl rdx, 7
add rax, rdx
mov rbx, qword [rax*8 + obj.dist]
mov eax, dword [rbp - 0x48]
cdqe
mov rsi, rax
mov edi, obj.horses
call sym.std::vector_std::pair_longlong_longdouble__std::allocator_std::pair_longlong_longdouble___::operator__
mov rax, qword [rax]
cmp rbx, rax
setle al
test al, al
je 0x400fef
mov eax, dword [rbp - 0x44]
cdqe
mov edx, dword [rbp - 0x48]
movsxd rdx, edx
shl rdx, 7
add rax, rdx
mov rax, qword [rax*8 + obj.dist]
mov qword [rbp - 0x90], rax
fild qword [rbp - 0x90]
fstp xword [rbp - 0x90]
mov eax, dword [rbp - 0x48]
cdqe
mov rsi, rax
mov edi, obj.horses
call sym.std::vector_std::pair_longlong_longdouble__std::allocator_std::pair_longlong_longdouble___::operator__
fld xword [rax + 0x10]
fld xword [rbp - 0x90]
fdivrp st(1)
mov eax, dword [rbp - 0x44]
cdqe
mov edx, dword [rbp - 0x48]
movsxd rdx, edx
shl rdx, 7
add rax, rdx
shl rax, 4
add rax, obj.dist2
fstp xword [rax]
add dword [rbp - 0x44], 1
jmp 0x400f1b
add dword [rbp - 0x48], 1
jmp 0x400f05
mov dword [rbp - 0x40], 0
mov eax, dword [rip + 0x202312]
cmp dword [rbp - 0x40], eax
jge 0x4010eb
mov dword [rbp - 0x3c], 0
mov eax, dword [rip + 0x2022fc]
cmp dword [rbp - 0x3c], eax
jge 0x4010e2
mov dword [rbp - 0x38], 0
mov eax, dword [rip + 0x2022e6]
cmp dword [rbp - 0x38], eax
jge 0x4010d9
mov eax, dword [rbp - 0x40]
cdqe
mov edx, dword [rbp - 0x3c]
movsxd rdx, edx
shl rdx, 7
add rax, rdx
shl rax, 4
add rax, obj.dist2
fld xword [rax]
mov eax, dword [rbp - 0x38]
cdqe
mov edx, dword [rbp - 0x40]
movsxd rdx, edx
shl rdx, 7
add rax, rdx
shl rax, 4
add rax, obj.dist2
fld xword [rax]
faddp st(1)
fstp xword [rbp - 0x30]
mov eax, dword [rbp - 0x38]
cdqe
mov edx, dword [rbp - 0x3c]
movsxd rdx, edx
shl rdx, 7
add rax, rdx
shl rax, 4
lea rdx, [rax + obj.dist2]
lea rax, [rbp - 0x30]
mov rsi, rax
mov rdi, rdx
call sym.std::min_longdouble_
fld xword [rax]
mov eax, dword [rbp - 0x38]
cdqe
mov edx, dword [rbp - 0x3c]
movsxd rdx, edx
shl rdx, 7
add rax, rdx
shl rax, 4
add rax, obj.dist2
fstp xword [rax]
add dword [rbp - 0x38], 1
jmp 0x401034
add dword [rbp - 0x3c], 1
jmp 0x40101e
add dword [rbp - 0x40], 1
jmp 0x401008
mov dword [rbp - 0x34], 0
mov eax, dword [rbp - 0x68]
cmp dword [rbp - 0x34], eax
jge 0x40115e
lea rax, [rbp - 0x64]
mov rsi, rax
mov edi, obj.std::cin
call 0x400b40
mov rdx, rax
lea rax, [rbp - 0x30]
mov rsi, rax
mov rdi, rdx
call 0x400b40
mov eax, dword [rbp - 0x64]
lea edx, [rax - 1]
mov eax, dword [rbp - 0x30]
sub eax, 1
cdqe
movsxd rdx, edx
shl rdx, 7
add rax, rdx
shl rax, 4
add rax, obj.dist2
fld xword [rax]
fstp qword [rbp - 0x78]
movsd xmm0, qword [rbp - 0x78]
mov edi, str._6f
mov eax, 1
call sym.imp.printf
add dword [rbp - 0x34], 1
jmp 0x4010f2
mov esi, sym.std::endl_char_std::char_traits_char__
mov edi, obj.std::cout
call sym.std::ostream::operator__
nop
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x401182
call sym.imp.__stack_chk_fail
add rsp, 0x88
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
lea rax, [rbp - 0x10]
mov rsi, rax
mov edi, obj.std::cin
call 0x400b40
mov dword [rbp - 0xc], 1
mov eax, dword [rbp - 0x10]
cmp dword [rbp - 0xc], eax
jg 0x4011e2
mov eax, dword [rbp - 0xc]
mov esi, eax
mov edi, str.Case___d:
mov eax, 0
call sym.imp.printf
call sym.solve
add dword [rbp - 0xc], 1
jmp 0x4011bb
mov eax, 0
mov rdx, qword [rbp - 8]
xor rdx, qword fs:[0x28]
je 0x4011fb
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov dword [rbp - 4], edi
mov dword [rbp - 8], esi
cmp dword [rbp - 4], 1
jne 0x401256
cmp dword [rbp - 8], 0xffff
jne 0x401256
mov edi, obj.std::__ioinit
call sym.std::ios_base::Init::Init
mov edx, obj.__dso_handle
mov esi, obj.std::__ioinit
mov edi, sym.std::ios_base::Init::_Init
call sym.imp.__cxa_atexit
mov edi, obj.horses
call sym.std::vector_std::pair_longlong_longdouble__std::allocator_std::pair_longlong_longdouble___::vector
mov edx, obj.__dso_handle
mov esi, obj.horses
mov edi, sym.std::vector_std::pair_longlong_longdouble__std::allocator_std::pair_longlong_longdouble___::_vector
call sym.imp.__cxa_atexit
nop
leave
ret
push rbp
mov rbp, rsp
mov esi, 0xffff
mov edi, 1
call sym.__static_initialization_and_destruction_0
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::pair_longlong_longdouble__std::allocator_std::pair_longlong_longdouble___::_Vector_base
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_std::pair_longlong_longdouble__std::allocator_std::pair_longlong_longdouble___::size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x4012ed
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_std::pair_longlong_longdouble__std::allocator_std::pair_longlong_longdouble___::size
mov rdx, rax
mov rax, qword [rbp - 0x10]
sub rax, rdx
mov rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::pair_longlong_longdouble__std::allocator_std::pair_longlong_longdouble___::_M_default_append
jmp 0x401325
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::vector_std::pair_longlong_longdouble__std::allocator_std::pair_longlong_longdouble___::size
cmp rax, qword [rbp - 0x10]
seta al
test al, al
je 0x401325
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 5
add rdx, rax
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::pair_longlong_longdouble__std::allocator_std::pair_longlong_longdouble___::_M_erase_at_end
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 5
add rax, rdx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
cmp rdx, rax
jge 0x40136d
mov rax, qword [rbp - 0x10]
jmp 0x401371
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
fld xword [rax]
mov rax, qword [rbp - 8]
fld xword [rax]
fucomip st(1)
fstp st(0)
jbe 0x401397
mov rax, qword [rbp - 0x10]
jmp 0x40139b
mov rax, qword [rbp - 8]
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::pair_longlong_longdouble__::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::pair_longlong_longdouble__std::allocator_std::pair_longlong_longdouble___::_Vector_impl::_Vector_impl
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 5
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::pair_longlong_longdouble__std::allocator_std::pair_longlong_longdouble___::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::pair_longlong_longdouble__std::allocator_std::pair_longlong_longdouble___::_Vector_impl::__Vector_impl
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 5
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
cmp qword [rbp - 0x40], 0
je 0x40164a
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 8]
sub rdx, rax
mov rax, rdx
sar rax, 5
cmp rax, qword [rbp - 0x40]
jb 0x4014c1
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_std::pair_longlong_longdouble__std::allocator_std::pair_longlong_longdouble___::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 8]
mov rcx, qword [rbp - 0x40]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_default_n_a_std::pair_longlong_longdouble___unsignedlong_std::pair_longlong_longdouble__
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 8], rdx
jmp 0x40164a
mov rcx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x38]
mov edx, str.vector::_M_default_append
mov rsi, rcx
mov rdi, rax
call sym.std::vector_std::pair_longlong_longdouble__std::allocator_std::pair_longlong_longdouble___::_M_check_len
mov qword [rbp - 0x28], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_longlong_longdouble__std::allocator_std::pair_longlong_longdouble___::size
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::pair_longlong_longdouble__std::allocator_std::pair_longlong_longdouble___::_M_allocate
mov qword [rbp - 0x18], rax
mov rax, qword [rbp - 0x18]
mov qword [rbp - 0x30], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_std::pair_longlong_longdouble__std::allocator_std::pair_longlong_longdouble___::_M_get_Tp_allocator
mov rcx, rax
mov rax, qword [rbp - 0x38]
mov rsi, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__uninitialized_move_if_noexcept_a_std::pair_longlong_longdouble___std::pair_longlong_longdouble___std::allocator_std::pair_longlong_longdouble___
mov qword [rbp - 0x30], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_std::pair_longlong_longdouble__std::allocator_std::pair_longlong_longdouble___::_M_get_Tp_allocator
mov rdx, rax
mov rcx, qword [rbp - 0x40]
mov rax, qword [rbp - 0x30]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_default_n_a_std::pair_longlong_longdouble___unsignedlong_std::pair_longlong_longdouble__
mov qword [rbp - 0x30], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_std::pair_longlong_longdouble__std::allocator_std::pair_longlong_longdouble___::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::pair_longlong_longdouble___std::pair_longlong_longdouble__
mov rax, qword [rbp - 0x38]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 5
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov rcx, qword [rax]
mov rax, qword [rbp - 0x38]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::pair_longlong_longdouble__std::allocator_std::pair_longlong_longdouble___::_M_deallocate
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x18]
mov qword [rax], rdx
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x30]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 0x28]
shl rax, 5
mov rdx, rax
mov rax, qword [rbp - 0x18]
add rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 0x10], rdx
jmp 0x40164a
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_std::pair_longlong_longdouble__std::allocator_std::pair_longlong_longdouble___::_M_get_Tp_allocator
mov rdx, rax
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::pair_longlong_longdouble___std::pair_longlong_longdouble__
mov rax, qword [rbp - 0x38]
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x18]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::pair_longlong_longdouble__std::allocator_std::pair_longlong_longdouble___::_M_deallocate
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
nop
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::pair_longlong_longdouble__std::allocator_std::pair_longlong_longdouble___::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::pair_longlong_longdouble___std::pair_longlong_longdouble__
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax + 8], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::pair_longlong_longdouble__::allocator
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_longlong_longdouble__::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x401724
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_longlong_longdouble___::deallocate
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::__uninitialized_default_n_std::pair_longlong_longdouble___unsignedlong_
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x48], rdx
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_longlong_longdouble__std::allocator_std::pair_longlong_longdouble___::max_size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_longlong_longdouble__std::allocator_std::pair_longlong_longdouble___::size
sub rbx, rax
mov rdx, rbx
mov rax, qword [rbp - 0x40]
cmp rdx, rax
setb al
test al, al
je 0x4017bf
mov rax, qword [rbp - 0x48]
mov rdi, rax
call sym.std::__throw_length_error
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_longlong_longdouble__std::allocator_std::pair_longlong_longdouble___::size
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_longlong_longdouble__std::allocator_std::pair_longlong_longdouble___::size
mov qword [rbp - 0x28], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::max_unsignedlong_
mov rax, qword [rax]
add rax, rbx
mov qword [rbp - 0x20], rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_longlong_longdouble__std::allocator_std::pair_longlong_longdouble___::size
cmp rax, qword [rbp - 0x20]
ja 0x40181f
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_longlong_longdouble__std::allocator_std::pair_longlong_longdouble___::max_size
cmp rax, qword [rbp - 0x20]
jae 0x40182d
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::vector_std::pair_longlong_longdouble__std::allocator_std::pair_longlong_longdouble___::max_size
jmp 0x401831
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x401845
call sym.imp.__stack_chk_fail
add rsp, 0x48
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x401878
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_longlong_longdouble___::allocate
jmp 0x40187d
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov qword [rbp - 0x30], rcx
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_std::pair_longlong_longdouble___std::move_iterator_std::pair_longlong_longdouble____
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__make_move_if_noexcept_iterator_std::pair_longlong_longdouble___std::move_iterator_std::pair_longlong_longdouble____
mov rdi, rax
mov rdx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x28]
mov rcx, rdx
mov rdx, rax
mov rsi, rbx
call sym.std::__uninitialized_copy_a_std::move_iterator_std::pair_longlong_longdouble____std::pair_longlong_longdouble___std::pair_longlong_longdouble__
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::pair_longlong_longdouble___
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_longlong_longdouble__::new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_longlong_longdouble__::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::__uninitialized_default_n_1_false_::__uninit_default_n_std::pair_longlong_longdouble___unsignedlong_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.std::_Vector_base_std::pair_longlong_longdouble__std::allocator_std::pair_longlong_longdouble___._M_get_Tp_allocator
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_longlong_longdouble___::max_size
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 0x10]
mov rax, qword [rax]
cmp rdx, rax
jae 0x4019c3
mov rax, qword [rbp - 0x10]
jmp 0x4019c7
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_longlong_longdouble__::allocate
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rdx, qword [rbp - 0x18]
lea rax, [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::move_iterator_std::pair_longlong_longdouble___::move_iterator
mov rax, qword [rbp - 0x10]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x401a39
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 8], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_copy_std::move_iterator_std::pair_longlong_longdouble____std::pair_longlong_longdouble___
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_true_::__destroy_std::pair_longlong_longdouble___
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov qword [rbp - 8], rax
cmp qword [rbp - 0x20], 0
je 0x401b00
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__addressof_std::pair_longlong_longdouble__
mov rdi, rax
call sym.std::_Construct_std::pair_longlong_longdouble__
sub qword [rbp - 0x20], 1
add qword [rbp - 8], 0x20
jmp 0x401ad9
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_longlong_longdouble__::max_size
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_longlong_longdouble__::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x401b5e
call sym.std::__throw_bad_alloc
mov rax, qword [rbp - 0x10]
shl rax, 5
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_copy_false_::__uninit_copy_std::move_iterator_std::pair_longlong_longdouble____std::pair_longlong_longdouble___
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
fldz
fstp xword [rax + 0x10]
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rsi, rax
mov edi, 0x20
call 0x40126e
test rax, rax
je 0x401c21
mov rdi, rax
call sym.std::pair_longlong_longdouble_::pair
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0x7ffffffffffffff
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x30], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword [rbp - 0x38]
mov qword [rbp - 0x18], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call 0x401ce5
test al, al
je 0x401ca5
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_iterator_std::pair_longlong_longdouble___::operator_
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__addressof_std::pair_longlong_longdouble__
mov rsi, rbx
mov rdi, rax
call sym.std::_Construct_std::pair_longlong_longdouble__std::pair_longlong_longdouble__
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::move_iterator_std::pair_longlong_longdouble___::operator__
add qword [rbp - 0x18], 0x20
jmp 0x401c55
mov rax, qword [rbp - 0x18]
jmp 0x401cde
mov rdi, rax
call sym.imp.__cxa_begin_catch
mov rdx, qword [rbp - 0x18]
mov rax, qword [rbp - 0x38]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::pair_longlong_longdouble___
call sym.imp.__cxa_rethrow
mov rbx, rax
call sym.imp.__cxa_end_catch
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::operator___std::pair_longlong_longdouble___
xor eax, 1
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
lea rdx, [rax + 0x20]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_std::pair_longlong_longdouble__
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rax
mov edi, 0x20
call 0x40126e
test rax, rax
je 0x401da1
mov rdx, qword [rbx]
mov qword [rax], rdx
mov rdx, qword [rbx + 8]
mov qword [rax + 8], rdx
mov rdx, qword [rbx + 0x10]
mov qword [rax + 0x10], rdx
mov rdx, qword [rbx + 0x18]
mov qword [rax + 0x18], rdx
nop
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::move_iterator_std::pair_longlong_longdouble___::base
mov rbx, rax
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::move_iterator_std::pair_longlong_longdouble___::base
cmp rbx, rax
sete al
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::pair_longlong_longdouble__std::allocator_std::pair_longlong_longdouble___::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::pair_longlong_longdouble___std::pair_longlong_longdouble__
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::pair_longlong_longdouble__std::allocator_std::pair_longlong_longdouble___::__Vector_base
nop
leave
ret
nop dword [rax + rax]
push r15
push r14
mov r15d, edi
push r13
push r12
lea r12, [rip + 0x200f96]
push rbp
lea rbp, [rip + 0x200f9e]
push rbx
mov r14, rsi
mov r13, rdx
sub rbp, r12
sub rsp, 8
sar rbp, 3
call sym._init
test rbp, rbp
je 0x401e96
xor ebx, ebx
nop dword [rax + rax]
mov rdx, r13
mov rsi, r14
mov edi, r15d
call qword [r12 + rbx*8]
add rbx, 1
cmp rbx, rbp
jne 0x401e80
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
nop word cs:[rax + rax]
ret
add byte [rax], al
sub rsp, 8
add rsp, 8
ret
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add al, 0
add byte [rax], al
or byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], 0
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add al, 0
add byte [rax], al
or byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, 0
add byte [rax], al
add eax, 0x6000000
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], cl
or byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
or al, byte [rax]
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
or al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
jmp qword [rax]
and byte [rip + 0x43006636], ah
jae 0x401fe6
and byte [rbx], ah
and eax, 0x76003a64
jbe 0x401fee
movsxd rsi, dword [rdi + rbp*2 + 0x72]
cmp bh, byte [rdx]
pop rdi
pop r15
jne 0x402004
je 0x401ff9
jo 0x40200d
outsb dx, byte gs:[rsi]
add byte fs:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rbp + 0x4026e8d4], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rbx], ebx
add edi, dword [rbx]
hlt
add dword [rax], eax
add byte [rip - 0x30000000], bh
inc dword [rax + 2]
add byte [rax], al
xor ah, ch
call qword [rax]
add al, byte [rax]
add byte [rsi], ah
in eax, dx
dec dword [rax - 0x33fffffe]
int1
push qword [rax + 0x3d000002]
call qword [rax - 0x66fffff7]
fmul dword [rcx]
add byte [rax], al
scasb al, byte [rdi]
ljmp [rax + 2]
add byte [rax], al
sal dl, 0xff
push rax
add al, byte [rax]
add ah, bl
lcall [rax]
add eax, dword [rax]
add byte [rax - 0xd], ch
cmp byte [rbx], al
add byte [rax], al
mov bl, dh
lcall [rax + 3]
add byte [rax], al
mov bl, 0xf3
js 0x40202d
add byte [rax], al
fdivrp st(3)
lcall [rax - 0x5fffffd]
mov eax, 0x16000003
hlt
fadd dword [rbx]
add byte [rax], al
hlt
inc dword [rax]
add al, 0
add byte [rsp + rsi*8 + 0x420ffff], cl
add byte [rax], al
xchg eax, edx
idiv bh
dec dword [rax + 4]
add byte [rax], al
fdiv st(6)
push qword [rax + 4]
add byte [rax], al
idiv edi
call qword [rax + 0x32000004]
idiv edi
push qword [rax + 0x68000004]
idiv edi
call rax
add al, 0
add byte [rsi - 9], dh
push rax
add al, 0
add byte [rax + 0x10fffff7], ah
add eax, 0xf88c0000
cmp byte [rip - 0x7410000], al
lcall [rax + 5]
add byte [rax], al
adc edi, ecx
inc dword [rax + 0x3e000005]
stc
jmp qword [rax + 0x5a000005]
stc
inc eax
add eax, 0xf9650000
jmp rax
add eax, 0xf9930000
inc dword [rax]
add byte [rax], al
mov esp, 0x20fffff9
add byte [rax], al
fdivp st(1)
inc dword [rax + 6]
add byte [rax], al
or edx, edi
jmp qword [rax + 6]
add byte [rax], al
xor edi, edx
inc dword [rax + 0x7b000006]
cli
jmp qword [rax - 0x53fffffa]
cli
inc eax
add byte [rax], al
sar dl, cl
jmp rax
add byte [rax], al
fdivp st(2)
inc dword [rax]
add byte [rax], al
add ebx, edi
jmp qword [rax]
add byte [rax], al
sti
inc dword [rax + 7]
add byte [rax], al
sti
jmp qword [rax + 7]
add byte [rax], al
outsb dx, byte [rsi]
sti
inc dword [rax - 0x4ffffff9]
sti
jmp qword [rax - 0x35fffff9]
sti
inc eax
add byte [rax], al
sti
sti
jmp rax
add byte [rax], al
or bh, ah
inc dword [rax]
or byte [rax], al
add byte [rax], bl
cld
jmp qword [rax]
or byte [rax], al
add byte [rdi], dh
cld
inc dword [rax + 8]
add byte [rax], al
cld
jmp qword [rax + 8]
add byte [rax], al
js 0x40215a
inc dword [rax + 0x25000008]
std
ljmp [rax + 0x4e000008]
std
dec eax
or byte [rax], al
add byte [rsi - 3], ch
call 0x7f402185
std
dec dword [rax]
or dword [rax], eax
add byte [rbp + 0x28fffffd], cl
or dword [rax], eax
add cl, ch
std
call qword [rax + 9]
add byte [rax], al
and bh, dh
push qword [rax + 9]
add byte [rax], al
xor al, 0xfe
push qword [rax - 0x7ffffff7]
clc
or dword [rax], eax
add al, dh
inc dword [rax + 0xa]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x4021d7
add dword [rbx], ebx
or al, 7
or byte [rax + 0x14100701], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sbb dl, ch
ljmp [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x402207
add dword [rbx], ebx
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov al, ch
call qword [rax + 1]
add byte [rax], al
add byte [rsi], cl
adc byte [rsi + 0xe], al
sbb byte [rdx + 0xf], cl
or esi, dword [rdi + 8]
add byte [rax], 0x3f
sbb bh, byte [rbx]
sub dh, byte [rbx]
and al, 0x22
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], r8b
add byte [rsi], bh
call qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add byte fs:[rax], al
add byte [rsi - 0x59000016], dl
add al, 0
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add qword [rbx], 3
cdq
add al, 0xc
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov word [rax], es
add byte [rax], al
adc al, 0xef
push qword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add ch, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x50], edi
push rdx
add byte [rcx], al
js 0x4022b1
add esi, dword [rax + 0x300400b]
sbb ecx, dword [rdi + rax]
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
enter -0x11, -1
sbb eax, dword [rax]
add byte [rax], al
add al, 0x1c
sub al, byte [rax]
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
add byte [rax], al
add byte [rdi + rbp*8 + 0x8cffff], bh
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0x8070c]
add byte [rax + rax], bl
add byte [rax], al
adc al, 1
add byte [rax], al
sub al, dh
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 1
add byte [rax], al
sub al, dh
ljmp [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
add dword [rax], eax
add byte [rbx], dh
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x40235f
add byte [rax], al
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
add dword [rax], eax
add byte [rdx], bh
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
or al, 1
add byte [rax], al
call qword [rax]
add byte [rax], al
add al, 0x20
sub al, byte [rax]
adc byte [rsi + 0x60d4302], al
add cl, byte [rbx + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
fadd qword [rcx]
add byte [rax], al
pop rsi
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
push rsp
add dword [rax], eax
add byte [rax + rsi*8 - 1], ah
inc dword [rsi]
add al, byte [rax]
add byte [rsp], al
sub al, byte [rax]
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
cld
add dword [rdi + rax], ecx
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
jl 0x40240f
add byte [rax], al
inc dword [rbp]
add byte [rax], al
add al, 0x4c
sub al, byte [rax]
adc byte [rsi + 0x60d4302], al
add al, byte [rax + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add r8b, byte [rax]
add byte [rax - 0xe], ah
add byte ds:[rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jns 0x402457
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
add al, byte [rax]
add byte [rsi - 0xe], bh
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rdx], es
add byte [rax], al
jp 0x40246c
push qword [rip]
adc byte [rsi + 0x60d4302], al
jo 0x402497
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
add al, byte [rax]
add byte [rax + 0xefffff2], dl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
add al, byte [rax]
add byte [rsi - 0xe], bh
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
in al, dx
add al, byte [rax]
add byte [rax - 0x1300000e], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
loop 0x4024fb
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 3
add byte [rax], al
push qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
xor al, 3
add byte [rax], al
pop rdi
call qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add eax, dword [rax]
add byte [rbx + 0x2afffff3], cl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x402569
add byte [rax], al
xchg eax, esi
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add eax, dword [rax]
add byte [rdx + 0xbfffff3], dl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x7d000003
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
fadd qword [rbx]
add byte [rax], al
mov esi, ebx
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
add eax, dword [rax]
add byte [rbx + rsi*8 + 0x22ffff], dl
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
pop rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 4
add byte [rax], al
xchg eax, esi
ljmp [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 4
add byte [rax], al
movabs eax, dword [0x2afffff3]
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add al, 0
add byte [rbx + 0x48fffff3], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rbx + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
jl 0x40266a
add byte [rax], al
sal ebx, cl
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add al, 0
add ah, ah
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0xea000004
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fadd qword [rax + rax]
add dh, dl
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
add al, 0
add cl, bl
inc dword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sbb al, 5
add byte [rax], al
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 5
add byte [rax], al
clc
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pop rsp
add eax, 0xf3e60000
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jge 0x402767
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
jl 0x40276b
add byte [rax], al
or ah, dh
lcall [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
pushfq
add eax, 0xf4020000
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov esp, 0x13000005
hlt
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
fadd qword [rip - 0xbfe0000]
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
cld
add eax, 0xf3f00000
lcall [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rdx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sbb al, 6
add byte [rax], al
out dx, eax
ljmp [rip]
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
sbb al, 0
add byte [rax], al
cmp al, 6
add byte [rax], al
cld
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
mov ah, 5
add byte [rax], al
ljmp [rbp + 0x4000000]
push rax
sub al, byte [rax]
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
movabs dword [0x1c00000008070c], eax
add byte [rax], al
test byte [rsi], al
add byte [rax], al
jne 0x402866
ljmp [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
movsxd rcx, dword [rdi + rax]
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add byte [rax], al
jle 0x402886
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
jle 0x4028a6
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 6
add byte [rax], al
outsd dx, dword [rsi]
hlt
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
add al, 7
add byte [rax], al
pop rbp
hlt
lcall [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rdx
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
sub al, 7
add byte [rax], al
xchg eax, ecx
hlt
cmp dword [rax], eax
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x6f
or al, 7
or byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
stosb byte [rdi], al
hlt
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
add byte [rax], al
movsd dword [rdi], dword ptr [rsi]
call 0x9d295d
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
in al, 6
add byte [rax], al
jl 0x40296e
inc dword [rax + rax]
add byte [rsp + rbp*2], al
sub al, byte [rax]
adc byte [rsi + 0x60d4302], al
jg 0x40299b
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov ah, 7
add byte [rax], al
mov ecx, 0x15ffffe8
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rax
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], r8b
add ah, dl
add byte [rax], al
xor ah, 0xff
jmp qword [rbp]
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b8], es
cmp byte [rbx + 0x400e4d07], al
jb 0x4029fa
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
adc al, 0
add byte [rax], al
sbb al, 8
add byte [rax], al
test al, 0xf4
inc dword [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
add bh, bh
add esp, dword [rip + 0x54601a01]
add byte [rax], al
in eax, 1
sub esp, dword [rbp + 0x2b80103]
cmp al, byte [rax]
add dl, cl
add esp, dword [rcx]
jmp 0x402a40
add cl, bh
add eax, dword [rip + 0x10000]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, bh
inc dword [rcx]
add bh, bh
add ebx, dword [rcx]
add dword [rdi], ecx
sub eax, dword [rip + 0x18e0173]
add eax, 0xa1000193
add dword [rip + 0x10000], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ror byte [rax + rax*2], 0
add byte [rax], al
add byte [rax], al
pop rcx
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
movabs al, byte [0x400c]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 1], ah
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 1], bh
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jo 0x402e4c
add byte [rax], al
add byte [rax], al
add byte [rip], cl
add byte [rax], al
add byte [rsi + rbx + 0x40], dh
add byte [rax], al
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
call 0x408e92
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
sub eax, 0x60
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax + 5], bl
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor eax, 2
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rax], ah
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x402f13
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4008], dl
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 8], cl
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
ljmp [rdi]
add byte [rax], al
add al, cl
add byte [rax], al
add byte [rax], al
add bh, bh
ljmp [rdi]
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
ljmp [rdi]
add byte [rax], al
add byte [rsi + 0x4007], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x400a], ah
add byte [rax], al
add byte [rsi + 0x400a], dh
add byte [rax], al
add dh, al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
out 0xa, al
add byte [rax], al
add byte [rax], al
add dh, dh
or al, byte [rax]
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
or eax, dword es:[rax]
add byte [rax], al
add byte [rax], al
or eax, dword ss:[rax]
add byte [rax], al
add byte [rax], al
or r8d, dword [rax]
add byte [rax], al
add byte [rax], al
push rsi
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
or ax, word [rax]
add byte [rax], al
add byte [rax], al
jbe 0x40308d
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x400b], al
add byte [rax], al
add byte [rsi + 0x400b], dl
add byte [rax], al
add byte [rsi + 0x400b], ah
add byte [rax], al
add byte [rsi + 0x400b], dh
add byte [rax], al
add dh, al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x403140
je 0x403149
and byte [rip + 0x302e342e], dh
sub eax, 0x75627536
outsb dx, byte [rsi]
je 0x403157
xor dword [rsi + 0x31], edi
xor byte cs:[rsi + rbp], dh
xor al, 0x29
and byte [rip + 0x302e342e], dh
and byte [rdx], dh
xor byte [rcx], dh
xor byte ss:[rsi], dh
xor byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add al, byte [rax]
push rsp
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, dword [rax]
je 0x403154
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], al
cwde
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, 0x4002d000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], al
add byte [rax + 5], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], al
add byte [rsi + 0x4007], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], cl
add al, cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], cl
add byte [rax + 8], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], cl
add byte [rax + 0x4008], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], cl
add byte [rax + 0xa], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], cl
nop
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or eax, 0x400be000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], cl
add al, dh
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rsi + rbx + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc byte [rax], al
rcr byte [rsi], 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], dl
add al, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], dl
add byte [rax + 0x4021], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], dl
add byte [rdx + rbp], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], dl
call 0x40931a
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x602df800], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], dl
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], bl
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], bl
add byte [rax], al
xor byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
sbb al, byte [rax]
mov eax, 0x6030
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], bl
add al, ah
xor byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax], ah
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0xc], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0x400c], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rcx], al
add byte [rbx], bl
add byte [rax], dl
xor esp, dword [rax]
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbx
add byte [rax], al
add byte [rcx], al
add byte [rip + 0x602df800], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, byte [rax]
add al, al
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], al
add byte [rax + rax], dl
call 0x4094b2
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x4000000], ah
add cl, dh
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000000], ch
add byte [rax], dl
add al, dl
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, al
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add cl, dl
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bl
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add dl, dl
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
add byte [rax], al
add byte [rcx], al
add byte [rbx], bl
add byte [rax + 0x33], bl
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dh
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add ah, dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rcx], al
add byte [rax], dl
add al, bl
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add dword [rax], eax
add byte [rcx], al
add byte [rax], dl
add cl, bl
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 1], al
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
ficomp dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 1], dl
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
fcomp qword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
je 0x403583
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
loopne 0x4035a8
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, esp
add dword [rax], eax
add byte [rcx], al
add byte [rax], dl
add ah, ah
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dh, 1
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
call 0x4075db
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xlatb
add dword [rax], eax
add byte [rcx], al
add byte [rax], dl
add ah, ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cld
add dword [rax], eax
add byte [rcx], al
add byte [rax], dl
add al, dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rdx]
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
hlt
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp eax, 0x1000002
add byte [rax], dl
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rdx
add al, byte [rax]
add byte [rcx], al
add byte [rax], dl
add ah, bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
js 0x403644
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
add byte [rdi], bl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, edi
add al, byte [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rdi + rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000002
add byte [rax], dl
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 2, eax
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
or al, 0x1f
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
lsl eax, dword [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rdi + rbx], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rdi
add eax, dword [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rdi + rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
stosd dword [rdi], eax
add eax, dword [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rdi + rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax + rax], eax
add byte [rcx], al
add byte [rax], dl
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub al, byte [rax + rax]
add byte [rcx], al
add byte [rax], dl
add byte [rdi + rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rcx], al
add byte [rax], dl
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
js 0x40377e
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
xor al, 0x1f
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add al, 0
add byte [rcx], al
add byte [rax], dl
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
int3
add al, 0
add byte [rcx], al
add byte [rax], dl
add byte [rdi + rbx], bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x1f], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb dword [rip + 0x10000], eax
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x10000
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x10000
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
lea eax, [rip + 0x10000]
adc byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov bl, 5
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
push rsp
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fadd qword [rip + 0x10000]
adc byte [rax], al
pop rax
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rsi]
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
pop rsp
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub byte [rsi], al
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rdx
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jge 0x4038b8
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
push 0x401f
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs dword [0x7000100001000006], eax
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
add byte [rax], al
add al, byte [rax]
add ch, bh
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
pop rsp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bh
add byte [rax], al
add al, byte [rax]
add byte [rcx + 0x12], bl
add byte [rax], al
add byte [rax], al
add byte [rip], dl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add byte [rax], al
add dword [rax], eax
adc al, byte [rax]
sbb byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rax], ah
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
rcr byte [rdi], 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
add byte [rax], al
add dword [rax], eax
sbb dword [rax], eax
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 7], cl
add byte [rax], al
add byte [rax], al
adc al, 0
clc
sub eax, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsi
add byte [rax], al
add byte [rax], al
adc al, 0
call 0x4099f2
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 7], dh
add byte [rax], al
add dword [rax], eax
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ch
or eax, 0x200000
sbb al, byte [rax]
mov eax, 0x6030
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 7], bh
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
loopne 0x403a3a
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000007], dl
add byte [rsi], cl
add byte [rip + 0x4019], ah
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, cl
add byte [rax], al
and al, byte [rax]
add byte [rbx], bh
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte es:[rax], al
add byte [rdx], ah
add byte [rsi], cl
add dl, dh
add byte [rax], al
add byte [rax], al
add byte [rip], dh
add byte [rax], al
add byte [rbx + 8], ah
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov cs, word [rax]
add byte [rax], al
and al, byte [rax]
add cl, cl
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, bl
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x4016], bl
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rcx], dl
add byte [rax], al
and al, byte [rax]
add dh, bh
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub ecx, dword [rcx]
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
xor esp, dword [rsi]
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor cl, byte [rcx]
add byte [rax], al
adc al, byte [rax]
add byte [rax + 0x401e], dh
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 9], al
add byte [rax], al
and al, byte [rax]
add byte [rsi], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, 0x120000
add al, dh
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
jp 0x403b43
add byte [rax], al
and al, byte [rax]
add dh, dl
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x22000009], ah
add byte [rsi], cl
add byte [rdx + rbx + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x4013], bh
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dh
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi + 0x4013], bl
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
or al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], bl
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rsp
or al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], ch
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rdx], 0x200000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
or al, byte [rax]
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rcx + 0x220000], ah
add byte [rdx + 0x401a], dl
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dl
or al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, ah
or al, byte [rax]
add byte [rdx], dl
add byte [rsi], cl
add dh, ah
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi + 4], ah
add byte [rax], al
add al, dh
or al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add ch, ah
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rsi], cl
sbb eax, 0x40
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp al, 9
add byte [rax], al
adc al, byte [rax]
add byte [rsi + rbx + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or r8d, dword [r8]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0xb], ah
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg byte [rbx], cl
add byte [rax], al
and al, byte [rax]
add dh, dl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200000b], bl
add byte [rsi], cl
add byte [rdi], bh
sbb eax, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bl
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add dh, dl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dh
or eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
or al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], ah
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0xc], dl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x17], ah
add byte [rax], al
add byte [rax], al
add ah, ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x2200000c], al
add byte [rsi], cl
add byte [rsp + rdx + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rsp + rcx + 0x220000], bh
add byte [rdx + rdx + 0x40], bl
add byte [rax], al
mov word [rax], es
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 0xc, al
add byte [rax], al
and al, byte [rax]
add byte [rsi], ah
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rsi], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
or eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub dword [rip + 0x220000], ecx
add byte [rsi + 0x12], ch
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
or eax, 0x120000
add byte [rax], al
adc byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0xd], dl
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jb 0x403dff
add byte [rax], al
adc dword [rax], eax
adc byte [rax], al
rcr byte [rsi], 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rip + 0x220000], 0x1bf7000e
add byte [rax], al
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add byte [rbx + 0x2200000d], ch
add byte [rsi], cl
add byte [rax + 0x4012], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
or eax, 0x200000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, 0x100000
sbb al, byte [rax]
mov eax, 0x6030
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dh
or eax, 0x220000
add byte [rsi + 0x401a], bl
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
and al, byte [rax]
add byte [rsi], ch
sbb eax, 0x40
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rbx
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x401a], dl
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2200000e], cl
add byte [rsi], cl
add byte [rax + 0x1b], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2200000e], dh
add byte [rsi], cl
add byte [rax + 0x13], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
add byte [rax], al
and al, byte [rax]
add dh, dl
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
push rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, dh
add byte [rax], al
adc dword [rdx], eax
sbb al, byte [rax]
enter 0x6030, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
add byte [rdx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
sldt word [rax]
adc dword [rdx], eax
sbb al, byte [rax]
sal byte [rax], 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rcx], ah
add byte [rax], al
and al, byte [rax]
add dh, bh
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp ecx, dword [rdi]
add byte [rax], al
adc al, byte [rax]
add byte [rax + 0x1e], al
add byte [rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
sldt word [r8]
and al, byte [rax]
add ah, dh
sbb eax, 0x40
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rax + 0xf], dh
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4012], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200000f], dl
add byte [rsi], cl
add byte [rbp + 0x1d], cl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add dl, al
sldt word [rax]
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fimul dword [rdi]
add byte [rax], al
and al, byte [rax]
add dl, ah
sbb eax, 0x40
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x22000010
add byte [rsi], cl
add byte [rbx + 0x19], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rdx], bh
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x1b], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x10], ah
add byte [rax], al
adc byte [rax], al
sbb eax, dword [rax]
enter 0x6030, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jno 0x404042
add byte [rax], al
and al, byte [rax]
add al, bl
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rdx + 0x220000], al
add byte [rcx + 0x401d], ch
add byte [rax], al
add byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rdx + 0x120000], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
rcl byte [rax], 1
add byte [rax], al
and al, byte [rax]
add byte [rsp + rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add dl, cl
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rdx], ch
add byte [rax], al
and al, byte [rax]
add byte [rax], ch
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x11], ch
add byte [rax], al
and al, byte [rax]
add byte [rdx], bl
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cdq
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add al, bl
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rdx + 0x120000], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rdi], al
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
and byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + 0x13], dh
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, bl
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + 0x401b], bh
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
adc al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add bl, dh
sbb dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x12], ah
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4019], bl
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x12], bh
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x16], dl
add byte [rax], al
add byte [rax], al
add byte [rbp], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov al, 0x12
add byte [rax], al
and al, byte [rax]
add cl, al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
add byte [rcx + 7], bl
add byte [rax], al
adc byte [rax], al
sbb eax, dword [rax]
xor esp, dword [rsi]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x12000013
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
adc eax, dword [rax]
add byte [rcx], dl
add byte [rbx], bl
add byte [rax + 0x33], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
sub dword [rbx], edx
add byte [rax], al
and al, byte [rax]
add bh, dh
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
sub eax, 0
add byte [rax], al
add byte [rbx + 0x13], dl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
outsd dx, dword [rsi]
adc eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x12000013], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000013], ch
add byte [rsi], cl
add bl, dl
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
sub al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
ficom dword [rbx]
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
xor esp, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
fist word [rbx]
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
nop
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x14], al
add byte [rax], al
and al, byte [rax]
add byte [rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x10000014], cl
add byte [rdx], bl
add al, cl
xor byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
adc al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x4013], bh
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rdx + 0x120000], bh
add byte [rax], al
mov al, 0xb
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ch, bl
adc al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
adc al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
adc eax, 0x220000
add byte [rax + rbx + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bh
adc eax, 0x220000
add ah, dh
sbb eax, 0x40
add byte [rax], al
add byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rbp + rdx], ah
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], bh
sbb al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rbp], ch
add byte [rax], al
add ch, al
adc eax, 0x220000
add byte [rbp + 0x1d], cl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add dl, dh
adc eax, 0x220000
add byte [rcx + rbx + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x4013], bl
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x16], bl
add byte [rax], al
and al, byte [rax]
add byte [rdi + 0x18], bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000016], ch
add byte [rsi], cl
add byte [rdx + 0x401b], cl
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, dh
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4016], bl
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
adc al, byte [rax]
add byte [rcx + rdx + 0x40], cl
add byte [rax], al
jno 0x404432
add byte [rax], al
add byte [rax], al
add byte [rax], al
sldt word [r8]
adc al, byte [rax]
or eax, dword [rax]
jo 0x40444c
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add byte [rax], al
and al, byte [rax]
add byte [rsi], ch
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsxd rsi, dword [rdx + 0x74]
jae 0x4044e2
jne 0x4044d6
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
pop rdi
pop rdi
add byte [rbp + 0x72], ah
imul esi, dword gs:[ebx + 0x74], 0x745f7265
insd dword [rdi], dx
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x404496
pop rdi
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x404514
jb 0x40451a
pop rdi
jne 0x404523
add byte [rbx + 0x6f], ah
insd dword [rdi], dx
jo 0x40451d
je 0x404519
xor eax, 0x5f003538
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x404539
jb 0x40453f
pop rdi
jne 0x404548
pop rdi
imul bp, word [rsi + 0x69], 0x615f
jb 0x40454b
jns 0x40453b
outsb dx, byte gs:[rsi]
je 0x404552
jns 0x4044e2
jb 0x404546
insd dword [rdi], dx
pop rdi
jne 0x404558
insd dword [rdi], dx
jns 0x4044ee
pop rdi
pop rdi
jb 0x404554
insd dword [rdi], dx
pop rdi
jne 0x404566
insd dword [rdi], dx
jns 0x40455b
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x404566
jns 0x404566
outsb dx, byte gs:[rsi]
je 0x40457d
jns 0x40450d
movsxd rsi, dword cs:[rax + 0x70]
add byte [rdi + 0x5a], bl
push rbx
je 0x404564
xor dword [rcx], edi
jo 0x404585
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x40459d
jb 0x4045a0
movsxd rsi, dword [rax + rax + 0x5f]
pop rdx
push rbx
je 0x40457f
xor dword [rbx], esi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40459e
jb 0x4045a9
add byte [rdi + 0x5a], bl
push rbx
je 0x404594
imul esp, dword ss:[rdi + 0x6e], 0x65726f
pop rdi
pop rdx
push rbx
je 0x4045a1
cmp byte [rdi + 0x5f], bl
imul ebp, dword [rdi + 0x69], 0x74696e
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4045c8
movsxd rdi, dword [rax + 0x78]
xor r14b, byte [rcx]
pop rdi
pop rdi
jne 0x4045e3
je 0x4045d8
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4045ef
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x5a5f0045
push rbx
je 0x4045d7
xor dword [rax], esi
jb 0x4045f2
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx]
pop rdi
pop rdx
push rbx
je 0x4045e9
xor dword [rcx], esi
je 0x404613
jns 0x404602
je 0x404614
pop rdi
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx]
pop rdi
pop rdx
push rbx
je 0x4045fc
xor dword [rax], esi
outsd dx, dword fs:[rsi]
jo 0x40462b
pop rdi
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx]
pop rdi
pop rdx
push rbx
je 0x4045f4
xor eax, 0x65676572
js 0x404629
movsxd rbp, dword [rdi + 0x6e]
jae 0x404643
outsb dx, byte [rsi]
je 0x404646
xor rax, 0x73616369
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x404613
xor eax, 0x65676572
js 0x404648
movsxd rbp, dword [rdi + 0x6e]
jae 0x404662
outsb dx, byte [rsi]
je 0x404665
outsb dx, byte ss:[rsi]
outsd dx, dword [rsi]
jae 0x40466d
jae 0x404640
add byte [rdi + 0x5a], bl
push rbx
je 0x404633
xor eax, 0x65676572
js 0x404668
movsxd rbp, dword [rdi + 0x6e]
jae 0x404682
outsb dx, byte [rsi]
je 0x404685
cmp byte [rdi + 0x70], r13b
je 0x404681
insd dword [rdi], dx
imul edi, dword [rdx + 0x65], 0x5a5f0045
push rbx
je 0x404655
xor eax, 0x65676572
js 0x40468a
movsxd rbp, dword [rdi + 0x6e]
jae 0x4046a4
outsb dx, byte [rsi]
je 0x4046a7
movsxd rbp, dword [rdi + 0x6c]
insb byte [rdi], dx
je 0x4046a2
add byte [r15 + 0x5a], r11b
push rbx
je 0x404676
xor eax, 0x65676572
js 0x4046ab
movsxd rbp, dword [rdi + 0x6e]
jae 0x4046c5
outsb dx, byte [rsi]
je 0x4046c8
xor qword [rax], r14
push r11
movsxd rsi, dword [rdx + 0x69]
jo 0x4046d6
add byte [r15 + 0x5a], r11b
push rbx
je 0x40469b
xor eax, 0x65676572
js 0x4046d0
movsxd rbp, dword [rdi + 0x6e]
jae 0x4046ea
outsb dx, byte [rsi]
je 0x4046ed
xor rax, 0x69736162
movsxd rax, dword [rbp]
pop rdi
pop rdx
push rbx
je 0x4046ba
xor eax, 0x65676572
js 0x4046ef
movsxd rbp, dword [rdi + 0x6e]
jae 0x404709
outsb dx, byte [rsi]
je 0x40470c
cmp byte [rbp + 0x78], r12b
je 0x404704
outsb dx, byte [rsi]
add byte fs:[r15 + 0x5a], r11b
push rbx
je 0x4046dc
xor eax, 0x65676572
js 0x404711
movsxd rbp, dword [rdi + 0x6e]
jae 0x40472b
outsb dx, byte [rsi]
je 0x40472e
xor r12, qword [rcx + 0x77]
imul eax, dword [rbp], 0x5f
pop rdx
push rbx
je 0x4046f9
xor eax, 0x65676572
js 0x40472e
movsxd rbp, dword [rdi + 0x6e]
jae 0x404748
outsb dx, byte [rsi]
je 0x40474b
xor al, 0x67
jb 0x404742
jo 0x404724
add byte [rdi + 0x5a], bl
push rbx
je 0x404717
xor eax, 0x65676572
js 0x40474c
movsxd rbp, dword [rdi + 0x6e]
jae 0x404766
outsb dx, byte [rsi]
je 0x404769
xor rax, 0x65726765
jo 0x404743
add byte [rdi + 0x5a], bl
push rbx
je 0x404736
xor eax, 0x65676572
js 0x40476b
movsxd rbp, dword [rdi + 0x6e]
jae 0x404785
outsb dx, byte [rsi]
je 0x404788
xor qword [rbx], r14
insd dword [rdi], dx
je 0x40477f
push 0x6665645f
jne 0x404790
je 0x40476b
add byte [rdi + 0x5a], bl
push rbx
je 0x40475e
xor eax, 0x65676572
js 0x404793
movsxd rbp, dword [rdi + 0x6e]
jae 0x4047ad
outsb dx, byte [rsi]
je 0x4047b0
xor qword [rbx], r14
insd dword [rdi], dx
je 0x4047a7
push 0x746f6e5f
pop rdi
outsd dx, dword [rsi]
insb byte [rdi], dx
add byte [r15 + 0x5a], r11b
push rbx
je 0x404786
xor eax, 0x65676572
js 0x4047bb
movsxd rbp, dword [rdi + 0x6e]
jae 0x4047d5
outsb dx, byte [rsi]
je 0x4047d8
xor qword [rbx], r14
insd dword [rdi], dx
je 0x4047cf
push 0x746f6e5f
pop rdi
outsd dx, dword gs:[rsi]
insb byte [rdi], dx
add byte [r15 + 0x5a], r11b
push rbx
je 0x4047ae
xor eax, 0x65676572
js 0x4047e3
movsxd rbp, dword [rdi + 0x6e]
jae 0x4047fd
outsb dx, byte [rsi]
je 0x404800
xor qword [rbx], r14
insd dword [rdi], dx
je 0x4047f7
push 0x746f6e5f
pop rdi
outsd dx, dword [rsi]
ja 0x4047e3
add byte [rdi + 0x5a], bl
push rbx
je 0x4047d6
xor eax, 0x65676572
js 0x40480b
movsxd rbp, dword [rdi + 0x6e]
jae 0x404825
outsb dx, byte [rsi]
je 0x404828
xor qword [rbx], r14
insd dword [rdi], dx
je 0x40481f
push 0x746f6e5f
pop rdi
outsd dx, dword gs:[rsi]
ja 0x40480b
add byte [rdi + 0x5a], bl
push rbx
je 0x4047fe
xor eax, 0x65676572
js 0x404833
movsxd rbp, dword [rdi + 0x6e]
jae 0x40484d
outsb dx, byte [rsi]
je 0x404850
cmp qword [rbp + 0x61], r13
je 0x404846
push 0x796e615f
add byte [r15 + 0x5a], r11b
push rbx
je 0x404821
xor eax, 0x65676572
js 0x404856
movsxd rbp, dword [rdi + 0x6e]
jae 0x404870
outsb dx, byte [rsi]
je 0x404873
xor qword [rbp*2 + 0x68637461], r14
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
je 0x40486c
outsb dx, byte [rsi]
jne 0x40487c
insb byte [rdi], dx
add byte [r15 + 0x5a], r11b
push rbx
je 0x40484a
xor eax, 0x65676572
js 0x40487f
movsxd rbp, dword [rdi + 0x6e]
jae 0x404899
outsb dx, byte [rsi]
je 0x40489c
xor qword [rsi], r14
insd dword [rdi], dx
je 0x404893
push 0x6e6f635f
je 0x4048a0
outsb dx, byte [rsi]
jne 0x4048a9
jne 0x4048af
add byte [r15 + 0x5a], r11b
push rbx
je 0x404875
xor eax, 0x65676572
js 0x4048aa
movsxd rbp, dword [rdi + 0x6e]
jae 0x4048c4
outsb dx, byte [rsi]
je 0x4048c7
xor qword [rsi], r14
insd dword [rdi], dx
je 0x4048be
push 0x6572705f
jbe 0x4048c1
jbe 0x4048c6
imul ebp, dword [rbp + rax*2], 0x534e5a5f
je 0x4048a0
xor eax, 0x65676572
js 0x4048d5
movsxd rbp, dword [rdi + 0x6e]
jae 0x4048ef
outsb dx, byte [rsi]
je 0x4048f2
xor qword [rsi], r14
outsd dx, dword [rsi]
jb 0x4048f3
je 0x4048e8
jne 0x4048fb
je 0x4048d6
add byte [rdi + 0x5a], bl
push rbx
je 0x4048c9
xor eax, 0x65676572
js 0x4048fe
movsxd rbp, dword [rdi + 0x6e]
jae 0x404918
outsb dx, byte [rsi]
je 0x40491b
xor qword [rax], r14
outsw dx, word [rsi]
jb 0x40491c
je 0x404911
jae 0x404919
add byte fs:[r15 + 0x5a], r11b
push rbx
je 0x4048ee
xor eax, 0x65676572
js 0x404923
movsxd rbp, dword [rdi + 0x6e]
jae 0x40493d
outsb dx, byte [rsi]
je 0x404940
xor qword [rsi], r14
outsd dx, dword [rsi]
jb 0x404941
je 0x404936
outsb dx, byte [rsi]
outsd dx, dword [rsi]
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x404924
add byte [rdi + 0x5a], bl
push rbx
je 0x404917
xor eax, 0x65676572
js 0x40494c
movsxd rbp, dword [rdi + 0x6e]
jae 0x404966
outsb dx, byte [rsi]
je 0x404969
xor qword [rdi], r14
outsw dx, word [rsi]
jb 0x40496a
je 0x40495f
imul si, word [rdx + 0x73], 0x5f74
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
jns 0x404950
add byte [rdi + 0x5a], bl
push rbx
je 0x404943
xor eax, 0x65676572
js 0x404978
movsxd rbp, dword [rdi + 0x6e]
jae 0x404992
outsb dx, byte [rsi]
je 0x404995
xor qword [rbx], r14
jb 0x40499a
outsd dx, dword [rsi]
jb 0x40498a
movsxd rbp, dword [rdi + 0x6c]
insb byte [rdi], dx
je 0x404997
add byte [r15 + 0x5a], r11b
push rbx
je 0x40496b
xor eax, 0x65676572
js 0x4049a0
movsxd rbp, dword [rdi + 0x6e]
jae 0x4049ba
outsb dx, byte [rsi]
je 0x4049bd
xor qword [rcx], r14
jb 0x4049c2
outsd dx, dword [rsi]
jb 0x4049b2
movsxd rsi, dword [rcx + rdi*2 + 0x70]
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x404991
xor eax, 0x65676572
js 0x4049c6
movsxd rbp, dword [rdi + 0x6e]
jae 0x4049e0
outsb dx, byte [rsi]
je 0x4049e3
xor qword [rdx], r14
jb 0x4049e8
outsd dx, dword [rsi]
jb 0x4049d8
jae 0x4049df
jo 0x4049e4
add byte [r15 + 0x5a], r11b
push rbx
je 0x4049b8
xor eax, 0x65676572
js 0x4049ed
movsxd rbp, dword [rdi + 0x6e]
jae 0x404a07
outsb dx, byte [rsi]
je 0x404a0a
xor qword [rbx], r14
jb 0x404a0f
outsd dx, dword [rsi]
jb 0x4049ff
movsxd rbp, dword [rbx + 0x72]
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x4049e0
xor eax, 0x65676572
js 0x404a15
movsxd rbp, dword [rdi + 0x6e]
jae 0x404a2f
outsb dx, byte [rsi]
je 0x404a32
xor qword [rcx], r14
jb 0x404a37
outsd dx, dword [rsi]
jb 0x404a27
jb 0x404a2c
movsxd rbp, dword [rbx + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x404a06
xor eax, 0x65676572
js 0x404a3b
movsxd rbp, dword [rdi + 0x6e]
jae 0x404a55
outsb dx, byte [rsi]
je 0x404a58
xor qword [rcx], r14
jb 0x404a5d
outsd dx, dword [rsi]
jb 0x404a4d
jo 0x404a51
jb 0x404a57
outsb dx, byte [rsi]
add byte [r15 + 0x5a], r11b
push rbx
je 0x404a2c
xor eax, 0x65676572
js 0x404a61
movsxd rbp, dword [rdi + 0x6e]
jae 0x404a7b
outsb dx, byte [rsi]
je 0x404a7e
xor qword [rcx], r14
jb 0x404a83
outsd dx, dword [rsi]
jb 0x404a73
jb 0x404a78
movsxd rsp, dword [rbp + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x404a52
xor eax, 0x65676572
js 0x404a87
movsxd rbp, dword [rdi + 0x6e]
jae 0x404aa1
outsb dx, byte [rsi]
je 0x404aa4
xor qword [0x726f7272], r14
pop rdi
jb 0x404aa1
movsxd rsp, dword [rbp + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x404a7b
xor eax, 0x65676572
js 0x404ab0
movsxd rbp, dword [rdi + 0x6e]
jae 0x404aca
outsb dx, byte [rsi]
je 0x404acd
xor qword [rcx], r14
jb 0x404ad2
outsd dx, dword [rsi]
jb 0x404ac2
jb 0x404ac6
outsb dx, byte [rsi]
add byte gs:[r15d + 0x5a], r11b
push rbx
je 0x404aa1
xor eax, 0x65676572
js 0x404ad6
movsxd rbp, dword [rdi + 0x6e]
jae 0x404af0
outsb dx, byte [rsi]
je 0x404af3
xor qword [rcx], r14
jb 0x404af8
outsd dx, dword [rsi]
jb 0x404ae8
jae 0x404afb
movsxd rsp, dword [rbp + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x404ac7
xor eax, 0x65676572
js 0x404afc
movsxd rbp, dword [rdi + 0x6e]
jae 0x404b16
outsb dx, byte [rsi]
je 0x404b19
xor qword [rip + 0x6f727265], r14
jb 0x404b0e
jb 0x404b19
jo 0x404b1b
je 0x404afe
add byte [rdi + 0x5a], bl
push rbx
je 0x404af1
xor eax, 0x65676572
js 0x404b26
movsxd rbp, dword [rdi + 0x6e]
jae 0x404b40
outsb dx, byte [rsi]
je 0x404b43
xor qword [rsi], r14
jb 0x404b48
outsd dx, dword [rsi]
jb 0x404b38
movsxd rbp, dword [rdi + 0x6d]
jo 0x404b4a
js 0x404b4a
je 0x404b5c
add byte [r15 + 0x5a], r11b
push rbx
je 0x404b1c
xor eax, 0x65676572
js 0x404b51
movsxd rbp, dword [rdi + 0x6e]
jae 0x404b6b
outsb dx, byte [rsi]
je 0x404b6e
xor qword [rcx], r14
jb 0x404b73
outsd dx, dword [rsi]
jb 0x404b63
jae 0x404b7a
movsxd rbp, dword [rbx + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x404b49
pop rdi
pop rdi
je 0x404b78
imul ebp, dword [rsp + rcx*2 + 0x31], 0x5f535f39
imul ebp, dword [rsi + 0x76], 0x64696c61
pop rdi
jae 0x404b9d
je 0x404b91
pop rdi
imul esp, dword [rbp + rax*2], 0x31345a5f
pop rdi
pop rdi
jae 0x404bad
je 0x404ba5
movsxd rbx, dword [rdi + 0x69]
outsb dx, byte [rsi]
imul esi, dword [rcx + rbp*2 + 0x61], 0x617a696c
je 0x404bb3
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
outsb dx, byte [rsi]
pop rdi
jae 0x404bc9
jb 0x404bcc
movsxd rsi, dword [rcx + rbp*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
xor byte [rcx + 0x69], ch
add byte [rdi + 0x47], bl
pop rdi
pop rdi
jae 0x404be1
pop rdi
pop r15
outsb dx, byte [rsi]
add byte [rdi + 0x5f], bl
push rdx
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push r10
pop rdi
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push rbp
pop rdi
pop rdi
push rdx
pop r15
push rdx
add byte [rdi + 0x47], bl
pop rdi
push rbx
push r12
pop rdi
push rsp
pop r15
add byte [rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x404c21
jns 0x404c21
outsb dx, byte gs:[rsi]
add byte fs:[rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x404c32
jns 0x404c32
jae 0x404c49
jb 0x404c4c
add byte [rdi + 0x44], bl
pop rcx
add byte [r15 + 0x5a], bl
push rbx
je 0x404c1a
movsxd rbp, dword [rcx + 0x6e]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x404c2f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x404c68
je 0x404c7d
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x404c4a
jo 0x404c79
imul esi, dword [rdx + 0x49], 0x45456578
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor bl, byte [rdi + 0x50]
push rbx
xor dword [rdi + 0x6d], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x404c6e
xor bl, byte [rdi + 0x5f]
jne 0x404caf
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x404cca
pop rdi
push r11
je 0x404c88
xor ebp, dword [rbp + 0x6f]
jbe 0x404cc1
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x404c9e
jo 0x404ccd
imul esi, dword [rdx + 0x49], 0x45456578
push rbx
xor ebx, dword [rdi + 0x53]
xor bl, byte [rdi + 0x45]
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop rdi
push rbx
xor eax, 0x6153525f
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x404cc5
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x404d06
push r11
je 0x404cd9
jo 0x404d08
imul esi, dword [rdx + 0x49], 0x53456578
push r11
xor dword [rdi + 0x45], ebx
xor dword [r11], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor dword [rdi + 0x6d], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x404d02
xor byte [rdi + 0x5f], bl
je 0x404d3d
jb 0x404d46
ja 0x404d38
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
je 0x404d47
pop rdi
jb 0x404d55
outsd dx, dword [rsi]
jb 0x404d36
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x404d2d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x404d66
je 0x404d7b
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x404d48
jo 0x404d77
imul esi, dword [rdx + 0x49], 0x45456578
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor bl, byte [rdi + 0x6d]
add byte [rax + 0x72], dh
imul ebp, dword [rsi + 0x74], 0x47404066
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x404d79
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x404dba
push r11
je 0x404d8d
jo 0x404dbc
imul esi, dword [rdx + 0x49], 0x53456578
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
jbe 0x404d7c
pop rdi
pop rdx
push rbx
push r11
je 0x404db9
jo 0x404de8
imul esi, dword [rdx + 0x49], 0x45456578
xor al, byte [r13 + 0x76]
add byte [rax + 0x6f], ch
jb 0x404e0a
jae 0x404d9a
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul bp, word [rsi + 0x69], 0x5f00
pop rdx
push rbx
je 0x404de1
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x404e1a
je 0x404e2f
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x404dfc
jo 0x404e2b
imul esi, dword [rdx + 0x49], 0x45456578
cmp byte [r13 + 0x61], r13b
js 0x404e36
jae 0x404e42
jp 0x404e40
push r10
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x404e19
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x404e5a
push r11
je 0x404e2d
jo 0x404e5c
imul esi, dword [rdx + 0x49], 0x53456578
push r11
xor dword [rdi + 0x45], ebx
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x404e4b
pop rdi
jae 0x404e8c
jb 0x404e89
jns 0x404e65
push rax
push rbx
je 0x404e54
jo 0x404e83
imul esi, dword [rdx + 0x49], 0x45456578
jbe 0x404e7f
pop rdi
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x404e67
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x404ea8
push r11
je 0x404e7b
jo 0x404eaa
imul esi, dword [rdx + 0x49], 0x53456578
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x404e93
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x404ed4
push r11
je 0x404ea7
jo 0x404ed6
imul esi, dword [rdx + 0x49], 0x53456578
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x404e96
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x404eff
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x404f08
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x404efc
push rbx
je 0x404eea
jo 0x404f19
imul esi, dword [rdx + 0x49], 0x45456578
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x404f00
jbe 0x404f31
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x404f08
jo 0x404f37
imul esi, dword [rdx + 0x49], 0x53456578
push r11
xor dword [rdi + 0x45], ebx
imul r15d, dword [r8 + 0x45], 0x5f5f006d
insd dword [edi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x404f66
jb 0x404f69
pop rdi
pop rdi
add byte [rdi + 0x4a], bl
jbe 0x404f5b
push rdx
imul esi, dword gs:[ebx + 0x74], 0x6c437265
jae 0x404f7c
jae 0x404f0c
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x404f75
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x404f7e
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x404f72
push rbx
je 0x404f60
jo 0x404f8f
imul esi, dword [rdx + 0x49], 0x45456578
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
insb byte [rdi], dx
push rax
jbe 0x404f81
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
xor eax, 0x766c6f73
jbe 0x404f58
pop rdi
pop rdx
push rbx
je 0x404fcb
push r8
push rbx
je 0x404f97
jo 0x404fc6
imul esi, dword [rdx + 0x49], 0x45456578
push rdx
push r11
je 0x404fa3
xor ebp, dword [rbp + 0x6f]
jbe 0x404fdc
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x404fbf
xor ebp, dword [rbp + 0x6f]
jbe 0x404ff8
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x404fd5
jo 0x405004
imul esi, dword [rdx + 0x49], 0x45456578
jo 0x40501c
jbe 0x404faf
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
jb 0x40501c
je 0x405021
jb 0x40502a
ja 0x404ffd
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x405007
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rbx + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
push r11
je 0x40502b
jo 0x40505a
imul esi, dword [rdx + 0x49], 0x45456578
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x405041
outsw dx, word [rsi]
jb 0x405085
jb 0x405075
push r11
je 0x405049
jo 0x405078
imul esi, dword [rdx + 0x49], 0x45456578
push r12
pop rdi
push rdx
push rbx
je 0x405057
jb 0x40508e
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x405092
pop rdi
jb 0x405095
jb 0x405099
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor bl, byte [rdi + 0x45]
xor al, 0x74
jns 0x4050b0
add byte gs:[r15 + 0x5a], r11b
push rbx
push r11
je 0x405080
jo 0x4050af
imul esi, dword [rdx + 0x49], 0x45456578
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5f], bl
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x6174735f
jb 0x4050da
pop rdi
insd dword [rdi], dx
imul ebp, dword [rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push r11
je 0x4050b1
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4050f2
push r11
je 0x4050c5
jo 0x4050f4
imul esi, dword [rdx + 0x49], 0x53456578
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r15d
pop rdi
pop r15
je 0x405109
push rsp
jo 0x40510c
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4050fc
jbe 0x4050b9
pop rdi
pop rdx
push r11
je 0x4050f6
jbe 0x405127
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x4050fe
jo 0x40512d
imul esi, dword [rdx + 0x49], 0x53456578
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
pop r15
movsxd rbp, dword [rax + 0x65]
movsxd rbp, dword [rbx + 0x5f]
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
insd dword [rdi], dx
push rax
movsxd rax, dword [r8]
pop rdi
pop rdx
push rbx
je 0x40512a
jbe 0x40515b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x405132
jo 0x405161
imul esi, dword [rdx + 0x49], 0x53456578
push r11
xor dword [rdi + 0x45], ebx
xor dword [r15], r14d
pop rdi
pop r15
jne 0x405185
je 0x40517a
jo 0x40518e
outsb dx, byte gs:[rsi]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x405160
jbe 0x405191
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x405168
jo 0x405197
imul esi, dword [rdx + 0x49], 0x53456578
push r11
xor dword [rdi + 0x45], ebx
jb 0x4051ac
jae 0x4051b2
jp 0x4051b0
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push r11
je 0x40518b
jbe 0x4051bc
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x405193
jo 0x4051c2
imul esi, dword [rdx + 0x49], 0x53456578
push r11
xor dword [rdi + 0x45], ebx
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x5f007645
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
je 0x4051e5
js 0x4051eb
je 0x4051c4
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x6e5a5f00
ja 0x405203
push rax
jbe 0x405199
pop rdi
pop rdx
push rbx
je 0x4051d7
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rsp + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
push r12
pop r15
jb 0x40522c
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x49], bl
pop r15
jae 0x405254
imul ebp, dword fs:[rsi + 0x5f], 0x64657375
add byte [rdi + 0x5a], bl
push rbx
je 0x40521f
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x405269
jb 0x40526c
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x405231
jo 0x405260
imul esi, dword [rdx + 0x49], 0x4a456578
jbe 0x40525a
push rsp
pop rdi
jo 0x40525e
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x40524f
jbe 0x405280
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x405257
jo 0x405286
imul esi, dword [rdx + 0x49], 0x53456578
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x76], eax
add byte [rdi + 0x49], bl
push rsp
pop r15
jb 0x4052a4
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5f], bl
je 0x4052b9
pop rdi
jae 0x4052cf
jb 0x4052d2
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4052c8
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4052d1
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4052c5
push rbx
je 0x4052b3
jo 0x4052e2
imul esi, dword [rdx + 0x49], 0x45456578
xor dword [rax], esi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor bl, byte [rdi + 0x6d]
add byte [rdi + 0x5a], bl
push r11
je 0x4052d3
xor ebp, dword [rbp + 0x6f]
jbe 0x40530c
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4052e9
jo 0x405318
imul esi, dword [rdx + 0x49], 0x45456578
jbe 0x4052c3
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40532c
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x405335
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405329
push rbx
je 0x405317
jo 0x405346
imul esi, dword [rdx + 0x49], 0x45456578
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x405328
xor ebp, dword [rbp + 0x6f]
jbe 0x405361
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x40533e
jo 0x40536d
imul esi, dword [rdx + 0x49], 0x45456578
xor al, byte [r13 + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x405352
insd dword [rdi], dx
imul ebp, dword [rsi + 0x49], 0x4b524578
push rsp
pop rdi
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x405367
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4053a8
push r11
je 0x40537b
jo 0x4053aa
imul esi, dword [rdx + 0x49], 0x53456578
push r11
xor dword [rdi + 0x45], ebx
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5f], bl
push rsp
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x4053a1
movsxd rbp, dword [rdi + 0x75]
je 0x4053b2
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdi
jae 0x4053f3
pop rdi
push 0x6c646e61
add byte gs:[rdi + 0x5a], bl
push rbx
push r11
je 0x4053c9
jo 0x4053f8
imul esi, dword [rdx + 0x49], 0x45456578
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5f], bl
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul ebp, dword [rsi + 0x69], 0x5a5f0074
push rbx
je 0x4053ef
jbe 0x405420
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x4053f7
jo 0x405426
imul esi, dword [rdx + 0x49], 0x53456578
push r11
xor dword [rdi + 0x45], ebx
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x405414
jbe 0x405445
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40541c
jo 0x40544b
imul esi, dword [rdx + 0x49], 0x53456578
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x405433
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x40547d
jb 0x405480
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x405445
jo 0x405474
imul esi, dword [rdx + 0x49], 0x49456578
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x405471
push rsp
pop rdi
jo 0x405475
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
imul esi, dword [rdx + 0x73], 0x40655245
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push r11
je 0x40547a
xor ebp, dword [rbp + 0x6f]
jbe 0x4054b3
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x405490
jo 0x4054bf
imul esi, dword [rdx + 0x49], 0x45456578
xor al, 0x62
jae 0x4054cf
jbe 0x40546d
pop rdi
pop rdx
push rbx
je 0x4054a4
xor eax, 0x6e755f5f
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x4054f5
je 0x4054ea
outsb dx, byte [rsi]
push r8
push rbx
je 0x4054c5
jo 0x4054f4
imul esi, dword [rdx + 0x49], 0x6d456578
push r12
pop rdi
push rbx
xor ebx, dword [rdi + 0x54]
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4054db
xor ebp, dword [rbp + 0x6f]
jbe 0x405514
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4054f1
jo 0x405520
imul esi, dword [rdx + 0x49], 0x45456578
xor dword [r13 + 0x53], eax
xor bl, byte [rdi]
pop rdi
pop rdi
jae 0x405545
pop rdi
jae 0x405549
jb 0x40554c
add byte [rdi + 0x5a], bl
push rbx
je 0x405513
jo 0x405542
imul esi, dword [rdx + 0x49], 0x43456578
xor dword [rbp + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x405556
jno 0x40553c
push rax
push rbx
je 0x40552b
jo 0x40555a
imul esi, dword [rdx + 0x49], 0x45456578
push rdx
push r11
je 0x405537
xor ebp, dword [rbp + 0x6f]
jbe 0x405570
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push r11
pop rdi
add byte [rdi + 0x5f], bl
jae 0x405594
movsxd rbp, dword [rbx + 0x5f]
movsxd rbp, dword [rax + 0x6b]
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x4055a2
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4055ab
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40559f
push rbx
je 0x40558d
jo 0x4055bc
imul esi, dword [rdx + 0x49], 0x45456578
cmp byte [rbp + 0x61], ch
js 0x4055c6
jae 0x4055d2
jp 0x4055d0
jbe 0x40556e
pop rdi
pop rdx
push rbx
je 0x4055a4
xor dword [rdi + 0x5f], ebx
jb 0x4055e0
jae 0x4055f0
outsd dx, dword [rsi]
push r11
je 0x4055b7
jo 0x4055e6
imul esi, dword [rdx + 0x49], 0x45456578
push rax
push rsp
pop rdi
push rdx
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x4055cb
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40560c
push r11
je 0x4055df
jo 0x40560e
imul esi, dword [rdx + 0x49], 0x53456578
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r15d
pop rdi
pop r15
je 0x405623
push rsp
jo 0x405626
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405616
jbe 0x4055d3
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40563c
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x405645
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405639
push rbx
je 0x405627
jo 0x405656
imul esi, dword [rdx + 0x49], 0x45456578
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x40563b
jo 0x40566a
imul esi, dword [rdx + 0x49], 0x43456578
xor al, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
imul esi, dword [rdx + 0x73], 0x40695245
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x405664
insd dword [rdi], dx
imul ebp, dword [rsi + 0x49], 0x4b524565
push rsp
pop rdi
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x405679
xor bl, byte [rdi + 0x44]
jae 0x4056c2
jb 0x4056bf
jns 0x4056b1
jne 0x4056cd
xor dword [rbp + 0x45], eax
cmp dword [rdi + 0x5f], ebx
jae 0x4056d6
jb 0x4056d3
jns 0x4056af
push rax
push rbx
je 0x40569e
jo 0x4056cd
imul esi, dword [rdx + 0x49], 0x45456578
jbe 0x4056ca
pop rdi
push rbx
xor eax, 0x5a5f005f
push rbx
je 0x4056b3
xor bl, byte [rdi + 0x5f]
insd dword [rdi], dx
imul esp, dword [rbp + 0x5f], 0x6d
outsd dx, dword [rsi]
jbe 0x4056f1
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x4056f8
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x4056da
jo 0x405709
imul esi, dword [rdx + 0x49], 0x53456578
je 0x4056e2
xor ebp, dword [rbp + 0x6f]
jbe 0x40571b
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r11
xor bl, byte [rdi + 0x45]
push r12
xor byte [rdi + 0x54], bl
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x405703
insd dword [rdi], dx
js 0x40571d
insd dword [rdi], dx
push r10
push r12
pop rdi
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40571d
jbe 0x40574e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x405725
jo 0x405754
imul esi, dword [rdx + 0x49], 0x53456578
push r11
xor dword [rdi + 0x45], ebx
xor dword [rip + 0x655f4d5f], r14d
jb 0x40576a
jae 0x405770
pop rdi
je 0x40576e
outsb dx, byte gs:[rsi]
push r8
push rbx
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x405750
pop rdi
pop rdi
jne 0x405791
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x4057a1
je 0x405796
outsb dx, byte [rsi]
pop rdi
xor dword [rcx + 0x4c], ecx
xor byte [rbp + 0x45], al
xor dword [rax], edi
pop rdi
pop rdi
jne 0x4057b4
imul ebp, dword [rsi + 0x69], 0x65645f74
jne 0x4057bd
je 0x4057b2
outsb dx, byte [rsi]
push r8
push rbx
je 0x40578d
jo 0x4057bc
imul esi, dword [rdx + 0x49], 0x6d456578
push r12
pop rdi
push rbx
xor eax, 0x5f30545f
add byte [rdi + 0x5a], bl
push rbx
outsd dx, dword [rsi]
insb byte [rdi], dx
jae 0x4057ba
push rax
push rdx
push rbx
outsd dx, dword [rsi]
push rbx
pop rdi
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
imul esi, dword fs:[rbx + 0x74], 0x5a5f0032
push rbx
je 0x4057c7
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x405811
jb 0x405814
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x4057d9
jo 0x405808
imul esi, dword [rdx + 0x49], 0x49456578
jbe 0x405802
push rsp
pop rdi
jo 0x405806
push rsp
xor byte [rdi], bl
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
outsb dx, byte gs:[rsi]
pop rdi
movsxd rsp, dword [rcx + 0x74]
movsxd rbp, dword [rax + 0x40]
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x40580d
pop rdi
pop rdi
je 0x405849
jb 0x405852
ja 0x405844
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsi, dword [rsi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
imul esi, dword [rdx + 0x73], 0x40785245
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x405852
pop rdi
jae 0x405893
jb 0x405890
jns 0x40586c
push rax
push rbx
je 0x40585b
jo 0x40588a
imul esi, dword [rdx + 0x49], 0x53456578
xor dword [rdi + 0x45], ebx
jbe 0x405889
pop rdi
push rbx
xor ebx, dword [rdi + 0x52]
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rcx + rbp*2 + 0x73], ah
je 0x405847
pop rdi
pop rdx
push rbx
je 0x405880
outsb dx, byte gs:[rsi]
insb byte [rdi], dx
movsxd rdx, dword [r11 + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x4058ba
je 0x4058cf
imul esi, dword [rbx + rsi*2 + 0x49], 0x52454563
push rbx
je 0x40589a
xor esp, dword [rdx + 0x61]
jae 0x4058d7
movsxd rbx, dword [rdi + 0x6f]
jae 0x4058e7
jb 0x4058da
insd dword [rdi], dx
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push rbx
pop rdi
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
imul ebp, dword gs:[esi + 0x5f], 0x63746163
push 0x58434040
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
push rbx
je 0x4058e4
pop rdi
pop rdi
jne 0x405925
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x405935
je 0x40592a
outsb dx, byte [rsi]
pop rdi
push r8
push rbx
je 0x405907
jo 0x405936
imul esi, dword [rdx + 0x49], 0x6d456578
push rbx
xor dword [rdi + 0x45], ebx
push rsp
pop rdi
push rbx
xor ebx, dword [rdi + 0x54]
xor byte [rdi + 0x52], bl
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x65], bl
je 0x405958
add byte [rdi + 0x5a], bl
push rbx
je 0x40592f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x405970
push r11
je 0x405943
jo 0x405972
imul esi, dword [rdx + 0x49], 0x53456578
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5f], bl
js 0x4059a1
pop rdi
jo 0x405991
jb 0x4059a1
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
imul esi, dword [rcx + rdi*2 + 0x5f], 0x40403076
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
outsb dx, byte [rsi]
ja 0x4059b7
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
push rbp
outsb dx, byte [rsi]
ja 0x4059c6
outsb dx, byte [rsi]
pop rdi
push rdx
jae 0x4059d9
insd dword [rdi], dx
pop r15
xor ebp, dword [rsi]
xor byte [rax], al
pop rdi
pop rdx
push rbx
je 0x4059a7
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4059e8
push r11
je 0x4059bb
jo 0x4059ea
imul esi, dword [rdx + 0x49], 0x53456578
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x4059e3
jbe 0x405a14
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x4059eb
jo 0x405a1a
imul esi, dword [rdx + 0x49], 0x53456578
push r11
xor dword [rdi + 0x45], ebx
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x405a04
xor byte [rdi + 0x5f], bl
jne 0x405a45
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x405a60
xor byte [rbp + 0x45], al
xor dword [rbx], esi
pop rdi
pop rdi
jne 0x405a61
imul ebp, dword [rsi + 0x69], 0x6f635f74
jo 0x405a75
push r11
je 0x405a31
xor ebp, dword [rbp + 0x6f]
jbe 0x405a6a
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x405a47
jo 0x405a76
imul esi, dword [rdx + 0x49], 0x45456578
push rbx
xor eax, 0x5445455f
xor byte [rdi + 0x54], bl
pop rdi
push rbx
cmp byte [rdi + 0x53], bl
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x405a63
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x405aad
jb 0x405ab0
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x405a75
jo 0x405aa4
imul esi, dword [rdx + 0x49], 0x4a456578
push rbx
xor dword [rdi + 0x45], ebx
jbe 0x405aa1
push rsp
pop rdi
jo 0x405aa5
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push r11
je 0x405a97
jbe 0x405ac8
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x405a9f
jo 0x405ace
imul esi, dword [rdx + 0x49], 0x53456578
push r11
xor dword [rdi + 0x45], ebx
cmp byte [r13 + 0x61], r13b
js 0x405adf
jae 0x405aeb
jp 0x405ae9
jbe 0x405a87
pop rdi
pop rdx
push rbx
je 0x405abe
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x405aff
push r11
je 0x405ad2
jo 0x405b01
imul esi, dword [rdx + 0x49], 0x53456578
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x405ac1
pop rdi
pop rdx
push rbx
je 0x405af9
xor al, 0x5f
pop rdi
jne 0x405b39
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f6d5f64
jbe 0x405b40
pop rdi
imul esp, dword [rsi + 0x5f], 0x78656f6e
movsxd rsp, dword [rbp + 0x70]
je 0x405b47
push r8
push rbx
je 0x405b22
jo 0x405b51
imul esi, dword [rdx + 0x49], 0x53456578
xor bl, byte [rdi + 0x53]
push r11
xor dword [rdi + 0x45], ebx
push r12
xor byte [rdi + 0x54], bl
pop rdi
push rbx
xor eax, 0x5f34535f
push rdx
push rsp
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x405b47
cmp byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x405ba2
push r11
je 0x405b5e
xor ebp, dword [rbp + 0x6f]
jbe 0x405b97
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push rbx
je 0x405b74
jo 0x405ba3
imul esi, dword [rdx + 0x49], 0x45456578
push rbx
xor ebx, dword [rdi + 0x45]
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop rdi
push rbx
xor eax, 0x5a5f005f
push rbx
je 0x405b90
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x405bd1
push r11
je 0x405ba4
jo 0x405bd3
imul esi, dword [rdx + 0x49], 0x53456578
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
jbe 0x405b93
insd dword [rdi], dx
imul ebp, dword [rsi], 0x394e5a5f
pop rdi
pop rdi
outsb dx, byte [esi]
jne 0x405c01
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x405c0a
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405bfe
push rbx
je 0x405bec
jo 0x405c1b
imul esi, dword [rdx + 0x49], 0x45456578
cmp byte [rcx + 0x6c], ah
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x405bd0
add byte [rsi], ch
jae 0x405c4d
insd dword [rdi], dx
je 0x405c38
add byte [rsi], ch
jae 0x405c50
jb 0x405c52
add byte [rsi], ch
jae 0x405c4c
jae 0x405c5a
jb 0x405c5c
add byte [rsi], ch
imul ebp, dword [rsi + 0x74], 0x707265
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x405c5d
sub rax, 0x676174
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x405c6b
outsb dx, byte cs:[esi]
jne 0x405c39
jne 0x405c77
insb byte [rdi], dx
sub eax, 0x2e006469
outsb dx, byte [esi]
jne 0x405c47
push 0x687361
jns 0x405c90
jae 0x405c9d
insd dword [rdi], dx
add byte [rsi], ch
jns 0x405c98
jae 0x405ca0
jb 0x405c2e
outsb dx, byte cs:[esi]
jne 0x405c61
jbe 0x405c9a
jb 0x405caa
imul ebp, dword [rdi + 0x6e], 0x6e672e00
jne 0x405c6e
jbe 0x405ca7
jb 0x405cb7
imul ebp, dword [rdi + 0x6e], 0x2e00725f
jb 0x405cb2
insb byte [rdi], dx
jns 0x405cc1
add byte [rsi], ch
jb 0x405cbc
insb byte [rdi], dx
jo 0x405cc8
je 0x405c5e
imul ebp, dword cs:[rsi + 0x69], 0x702e0074
insb byte [rdi], dx
je 0x405c97
outsd dx, dword [esi]
je 0x405c6d
je 0x405cd5
js 0x405ce6
add byte [rsi], ch
imul bp, word [rsi + 0x69], 0x2e00
jb 0x405ceb
je 0x405ce1
add byte [rsi], ch
push 0x6172665f
insd dword [rdi], dx
pop rdi
push 0x2e007264
push 0x6172665f
insd dword [rdi], dx
add byte gs:[rsi], ch
movsxd rsp, dword [ebx + 0x5f]
js 0x405d04
jo 0x405d18
pop rdi
je 0x405d08
insb byte [rdi], dx
add byte gs:[rsi], ch
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x405d16
jns 0x405cb7
imul bp, word cs:[rsi + 0x69], 0x615f
jb 0x405d32
jns 0x405cc3
push 0x63
jb 0x405cc8
jns 0x405d3a
insd dword [rdi], dx
imul esp, dword [rbx], 0x746f672e
jo 0x405d44
je 0x405cda
je 0x405d40
add byte [rsi], ch
jae 0x405d57
add byte [rsi], ch
movsxd rbp, dword [rdi + 0x6d]
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x405cee
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add dh, dh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rax + 2], bl
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rdx], 1
add byte [rax], al
add byte [rax], al
add al, dl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + 2], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rax
add eax, 0x40
add byte [rax], al
pop rax
add eax, 0
add byte [rax], al
xor eax, 2
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4007], cl
add byte [rax], al
add byte [rsi + 7], cl
add byte [rax], al
add byte [rsi], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
add byte [rax], al
add byte [rax], al
add al, cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], 0
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, 0
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x40000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4008], dl
add byte [rax], al
add byte [rax + 8], dl
add byte [rax], al
add al, ah
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rip + 0x19000000], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0xa], dh
add byte [rax], al
add byte [rax], al
add byte [rax + 0xa], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x400a], dl
add byte [rax], al
add byte [rax + 0xa], dl
add byte [rax], al
add byte [rax + 1], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, esp
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
loopne 0x406055
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
popfq
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add dl, al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000000], ah
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + rbx + 0x40], dh
add byte [rax], al
mov ah, 0x1e
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
add byte [rax], al
add byte [rax], al
add al, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov cl, 0
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rcr byte [rdi], 0x40
add byte [rax], al
add byte [rax], al
add al, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
hlt
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4021], bh
add byte [rax], al
add byte [rax + 0x21], bh
add byte [rax], al
add byte [rax + rcx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rbp], bl
add byte [rax], al
add byte [rax], al
add byte [rdx + rbp], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rsp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fild dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
sub eax, 0x60
add byte [rax], al
call 0x40623a
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ah
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
sub eax, 0x60
add byte [rax], al
clc
sub eax, 0
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte cs:[rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte cs:[rax], al
add byte [rax], al
add byte [rax], al
lock add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], bl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rcx], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add dword [rax], eax
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x6030], bh
add byte [rax], al
add byte [rax + 0x30], bh
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add dword [rax], eax
add byte [rax], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
xor byte [rax], ah
add byte [rax], al
add byte [rax], al
enter 0x30, 0
add byte [rax], al
add byte [rax], al
add byte [rdx], 6
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x1000001], dl
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
xor byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
rcr byte [rbx], 1
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax + 0x13], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push 0x44
add byte [rax], al
add byte [rax + 0x17], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
