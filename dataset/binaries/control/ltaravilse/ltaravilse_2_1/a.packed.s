call 0x401500
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x401318
add ebx, ebx
je 0x4012ce
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x401306
cmp rbp, -4
ja 0x401306
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x4012ee
add ecx, 4
mov dl, byte [rax]
je 0x401316
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x401306
ret
cld
pop r11
cmp r8b, 2
je 0x40132e
jmp 0x4013ab
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x40133e
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x401326
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x401356
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x401343
sub eax, 3
jb 0x401374
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x4013ab
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x40139b
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x401399
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x401388
cmp rbp, -0xd00
adc ecx, eax
call 0x4012da
jmp 0x40132e
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x401484
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x401422
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x40146e
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x401441
push 0x3a707474
jne 0x40149a
js 0x40145a
jae 0x401494
outsb dx, byte cs:[rsi]
je 0x401453
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x4014c1
jb 0x4014b3
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x4014de
jb 0x4014f1
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x212d50
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x212d50
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x4013bc
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x4014e7
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x401495
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add al, byte [rax]
jmp rbp
call 0x706f158f
jb 0x4015a7
movsxd rbp, dword [rdi]
jae 0x4015a1
insb byte [rdi], dx
js 0x4015a7
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x401587
cmp rsi, rcx
jae 0x40158f
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x40156e
cmp al, 0x8f
ja 0x40156e
cmp byte [rsi - 2], 0xf
je 0x401574
sub al, 0xe8
jg 0x401571
push rdi
cmp al, 1
ja 0x40155c
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x40155f
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x40158c
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x4015e3
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c1a61
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x401627
mov al, 0xa
jmp 0x401627
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x401603
inc ebx
mov al, 0
jmp 0x40162b
mov al, 2
jmp 0x40162b
mov al, 3
jmp 0x40162b
mov al, 0x3c
jmp 0x40162b
push rcx
rcr ah, 1
fstp st(7)
jle 0x40166c
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x40167e
jg 0x401670
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a6df3
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x4016ca
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb6847
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x4016d2
cmp esi, 0x21585055
jne 0x4016d6
jge 0x4016c8
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x4016cb
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x4016cf
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x40177b
pop rcx
or al, 0x3b
jb 0x401781
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x4016f3
jmp 0x4016f5
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x3661636
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf5387e
in eax, dx
jg 0x40172d
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x401773
mov bh, 0x2a
add edi, 0x10
jmp 0x401770
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x4017ad
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x4017e9
jne 0x401800
fstpnce st(6), st(0)
jle 0x4017c9
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x4017ff
jrcxz 0x401833
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1b797
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x4018b2
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x401872
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x58295e47
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x4018e5
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x40187f
and ecx, 7
or al, 0xeb
jae 0x4018ea
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x40191f
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x40195d
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x401916
push rax
call 0xffffffff868d1603
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x401920
std
cmp edi, esi
xchg eax, edi
jle 0x401975
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c95f01
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x401973
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x401961
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x40198a
js 0x4019ca
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x401a5c
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad2c97
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x401a7d
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x401a82
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc21534
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x401a10
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
js 0x401a99
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
and dword [rdx], ebp
xchg eax, edx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x3428ff04], al
add byte [rax], al
adc eax, 0x200000f
add byte [rax], al
add byte [rdi], bl
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x401b36
je 0x401b3f
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x401b08
mov dh, 0x7d
jbe 0x401b07
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x401b40
sahf
sahf
add al, 0
cwde
add eax, 0x1f90d000
and byte [rdi + 0x5580006], bl
add byte [rsi - 0x6fd837f9], cl
invd
add al, cl
or dword [rax], eax
or spl, bpl
adc ecx, eax
or al, byte [rax]
nop
or eax, dword [rax]
jo 0x401b35
adc dword ds:[rbp + 0xd170c03], 0x9f0be000
add al, dh
add byte [rsi + rbx + 0x201f204c], dh
adc byte [rax], al
rcl byte [rcx], 0
stc
add dword [rdx - 0x47ffede1], esi
and dword [rax], esp
jg 0x401ad5
cld
adc eax, dword [rax]
sbb al, 0x2a
adc al, 0
call 0x4fd07b8e
and byte [rdi], cl
adc eax, 0x16f800
add byte [rsi], ch
enter -0x6fd9, 0xf
add byte [rax], cl
sbb byte [rax], al
clc
in al, 3
in al, 7
sbb dword [rax], eax
add byte [rax], dh
sbb al, byte [rax]
mov eax, 0x9e409b2
sbb eax, dword [rax]
loopne 0x401ba4
adc ebx, eax
xchg eax, ecx
mov esp, 0x417019b
add cl, dh
dec dword [rbx + rbx]
mov ebx, 0xbfb2b869
sbb dword [rdi + 0x400c2002], edx
xchg byte [rax + rdx*4 + 9], ah
sbb esp, dword [rax + 0x2e]
fstp qword [rbx]
xchg eax, edx
movabs al, byte [0xb3b0644210355f44]
xor ebx, dword [rdi + 1]
push rbx
or al, 0xc9
push rdi
jp 0x401c08
rol byte [rsi - 0x77b513df], 0x97
movsd dword [rdi], dword ptr [rsi]
xlatb
wait
je 0x401b6a
stosd dword [rdi], eax
sal byte [rdi - 0x3a], 1
sbb dword [rdx - 0x242ee83f], edx
rol dl, cl
insb byte [rdi], dx
call 0x667374a3
sbb dword [rdi + rsi*8 - 0x2c], esp
add al, 0x83
or eax, 0x11ec9c9
fdiv dword [rax]
fst dword [rax + 0x4324320c]
fcmovb st(0), st(1)
xchg ah, ah
in al, dx
push rbp
add dword [rdi - 0x24], ebx
je 0x401c1d
sbb dword [rdx - 0x6f1b6b20], edx
and dword [rcx], ebx
mov dh, 0xe8
xlatb
xchg eax, edx
xchg byte [r12 + rbp*8 - 4], spl
enter -0x6370, 0x1c
sbb eax, dword [rdx]
hlt
cmp eax, 0x324320c9
clc
pop rdx
cld
mov ecx, 0x780c8390
add byte [rdi], bl
xchg eax, edi
sbb dword [rax + rcx*2 + 6], esp
add al, 0xbf
or byte [rdi - 0x18de6f9c], al
or al, 0xf
add ecx, dword [rdx + rsi]
and al, 0x27
adc byte [rdi], dh
adc al, 0x43
xor cl, al
nop
pop rdi
sbb byte [rdx + 0x20c90c83], al
sbb al, 0xab
and byte [rax - 0x29dbcdf4], dl
and al, 0x41
xchg ah, ah
in al, 1
add al, 0x28
sub cl, byte [rax + 6]
sbb dword [rdx - 0x6fcfb0d4], edx
and dword [rcx], ebx
js 0x401ca5
movsb byte [rdi], byte ptr [rsi]
xchg eax, edx
xchg byte [r8 + rdi - 0x34], spl
cmp al, 0x72
sbb edx, esi
sbb dword [rip + 0x724320c9], eax
xor spl, byte [rbx + rax*4]
or al, 0x67
lea r14, [rdx]
enter 0xc90, 0x50
mov bl, 0x54
leave
and byte [rbx - 0x24], al
pop rax
add al, byte [rsi]
sbb dword [rax + rcx*2 + 0x4e], esp
pop rsp
sub byte [rax - 0x7a], ah
nop
and dword [rdx + 0x64], edx
jge 0x401cb3
sbb dword [rdx + 0x70a36841], edx
sahf
sbb al, 0xac
or byte [r15 - 0x37], dil
std
adc dword [rdx - 0x70], esi
pop rsp
stc
pop rcx
adc bh, byte [rsi]
and eax, 0xa571570
push rdi
adc al, byte [rbx + 0x5f506437]
sbb byte [rdi], dl
mov esp, 0x47085807
and al, 7
add eax, 0x195d8832
xlatb
wait
adc bl, byte [rax]
mov ebx, 0x57142f4d
pop rsi
insb byte [rdi], dx
call 0xffffffffd940646c
loopne 0x401c92
cmpsd dword [rsi], dword ptr [rdi]
in al, dx
or eax, 0x2f672077
xor dword [rdi + 0x7a], 7
lea esi, [rdi + 0x18]
add dword [rdi], edx
nop
xor al, 0x22
and eax, 0x170f4019
sbb dword [rsp + rbx + 0x1a3bcfe4], 0x31
xor ecx, eax
leave
xchg eax, ebx
or dl, dh
xor eax, 0x65760e63
add eax, 0x2f8e0035
leave
sbb dword [rsi + 0x2a4e4190], eax
ficomp dword [rsp + rbp*2]
nop
rcr dword [rdi - 0x68], 0x3e
adc al, 9
leave
ror dword [rsi - 0x62], -2
sbb byte [rbx], bl
xlatb
sub ecx, dword [rcx]
scasb al, byte [rdi]
sbb dword [rdx + rsi*8 + 0x40], ebp
xor esp, dword [rsi + 0x17]
xor dl, byte [rdx]
xor cl, al
leave
mov al, 0x1e
add al, byte [rdx + 6]
sbb ebp, dword [rdi]
ror dword [rsi + 0x1a], 0x2f
or eax, 0x760e4ecf
cmpsd dword [rsi], dword ptr [rdi]
jp 0x401da4
adc edx, dword [rax - 0x1c]
in al, 0xc9
shl dword [rdi + 0x1a6c09a6], 0x26
jbe 0x401da5
sbb eax, ecx
mov edx, 0xf217f413
in al, 0x90
or al, 0x9e
or bl, byte cs:[rdx]
sbb dword [rbx + 0xb720c83], edx
pop rsp
sub byte [rbx], dl
mov ebx, 0x209077b2
or dword [rdx], 0x1790000b
test dword [rsp + rbp*2], ebx
or byte [rdi + rbx*2 - 0x1089e56e], ah
add ah, cl
ror byte [rdx], cl
jg 0x401d9d
cmpsd dword [rsi], dword ptr [rdi]
out 0xc, al
in al, 0x20
cmpsb byte [rsi], byte ptr [rdi]
add al, 0xf0
in eax, 0x1c
sahf
sbb al, 0xe4
sub byte [rax], ah
or ecx, dword [rsi]
sbb eax, 0xe114657b
cmp al, 0x7f
or r14d, dword [r15 - 0x3e]
and esp, ebp
add ah, byte [rcx + 0x17]
xchg byte [rbx], cl
mov al, 0xb
jns 0x401dbb
popfq
ja 0x401e28
sbb eax, dword [rdx + 6]
sbb ecx, dword [rsi]
fcomi st(2)
pop rdi
or edi, dword [rcx + 0x76]
or byte [rcx], dl
or al, 0x47
and byte [rbx], bl
sbb al, 0x76
jb 0x401daf
push rcx
in al, dx
or al, 0xe4
leave
xor ebx, dword [rsi + 0x627144c]
add bh, byte [rsp + rcx - 0xd8df1b1]
pushfq
adc cl, byte [rsi - 0x9ebd9f4]
add bh, byte [rbx + 0x21]
prefetchw byte [rdi + 0x6470d29]
wait
insb byte [rdi], dx
jb 0x401e99
and esi, dword [rcx]
adc byte [rax], al
jmp 0x56afc2bb
and byte [r15 + 0x726689a4], r8b
adc edi, eax
rol byte [rcx - 0x1b1be3f3], 9
neg dword [rbx]
sub eax, 0xec210dab
sahf
adc byte [rdx], 0xd0
pop rdi
or dword [rdi], eax
nop
scasb al, byte [rdi]
adc bh, dh
or eax, 0xe41c9caf
in al, 0x9e
sbb ah, byte [rbx]
xor ecx, dword [rsi]
add bh, byte cs:[rcx]
sbb byte [rbx + 0xe5b9f11], al
fcom dword [rax + 0xe89f49c]
cmpsd dword [rsi], dword ptr [rdi]
jo 0x401e2a
enter 0x4e41, 0x3a
adc rsp, qword [rdi - 0x6df137d5]
fidiv dword [rsi + 0x17]
hlt
adc dword [rdx], eax
cmp eax, 0x6b3d6fc8
int 0x3a
getsec
sub byte [rdi], dl
adc byte [rcx], al
jne 0x401ee2
sahf
xadd byte [rdi + rcx], ah
adc byte [rsi + 0x7a], cl
cmp dword [rdi + 0x3b], 0x67402f0f
sahf
sbb al, 0x64
pmuludq mm3, qword gs:[rip - 0x37e89fbc]
jo 0x401ecb
xchg eax, ebp
and eax, esi
ret 0x4de0
sbb eax, 0x270fc2bf
cmp dword [rdi], esp
or al, 0xf
loop 0x401ed5
adc byte [rax + 0x533c9c83], dl
sbb dword [rcx], ebp
cmp al, 0x10
or qword [rdi], r9
adc bh, al
sbb ebx, dword [rdi]
jno 0x401ef5
in al, 0x20
iretd
cmpsd dword [rsi], dword ptr [rdi]
fcomp dword [rbx]
test byte [rax], dl
and byte [rdi], al
sbb esp, esp
test eax, 0xa410b439
xchg eax, ebx
sbb dword [rbp - 0x30], 0x2f
and al, 0x1c
adc al, 0x77
fcom dword [rax + 0x11061c9c]
retf 0x172c
add eax, 0x1728390b
imul edx, dword [rcx], 0x27
add eax, 0x997b02f6
adc dword [rdi + 0x698f11ac], esp
push rsi
add esp, 8
and bh, dl
or eax, dword [rcx + 0x11c42727]
jae 0x401f41
dec dword [rsi]
jb 0x401fa4
mov al, 0xda
mov ebx, 0x12130f1b
enter 0x2720, 0x4f
sbb dword [rax + 0x63], ecx
and byte [rbx + 0x2b9e320c], al
jns 0x401f51
sbb esp, esp
in al, 0x52
mov r8b, 0xc1
sbb dl, byte [rax + 0x5921784f]
xchg eax, edi
xor esp, dword [rsi - 0x70]
js 0x401ee1
popfq
add eax, 0x1323d713
nop
leave
loop 0x401fce
xchg eax, ebp
out dx, eax
sub dword [rbx], edx
or byte [rbx], bl
ret 0x532e
outsd dx, dword [rsi]
jns 0x401f3c
and dword [rbp + rdx*4 - 0x53], esp
adc esi, dword [rdi]
rcr dword [rax], cl
cmp cl, byte [rsp + 0x2578f21]
cmp esp, dword [rdi]
mov edi, 0x279013df
adc al, 0x5f
sahf
int1
add al, byte [rbp + 0x14]
iretd
mov dword [rbx - 0xe], edx
int1
mov dword [rdi + rsi*4], edx
sbb dl, byte [rax + 0x72437f14]
test byte [rdx], 0xbc
adc al, 0x77
mov al, 0xdd
cmp byte [rbp + rcx + 0x817f021], al
adc eax, 0x10693907
lcall [rax]
out dx, eax
xor edi, dword [rdi]
adc eax, 0x205e4f27
adc eax, 0xc5ad1c38
or esp, esp
and ch, al
adc eax, 0x41c815f2
sahf
jl 0x401ff4
and bl, byte [rdi]
pushfq
cmp al, 0xa1
pop rcx
mov edi, 0x5e54187f
enter -0x7c6d, -0x57
mov bl, byte [rbx]
int1
jp 0x401fca
or eax, dword [rdi + rbx*2 - 0x7338e8d5]
adc dword [rsi - 0x64], eax
jg 0x402073
insb byte [rdi], dx
nop
mov bl, 0x57
xor byte [rdi], dl
pop rdi
sbb byte cs:[rdi + r15*8 + 0x72633fff], sil
je 0x402089
je 0x40208d
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
or ebp, edi
fstp st(2), st(0)
or byte [rbp + 0x72], ah
imul ebx, dword gs:[edx], 0x6d745f06
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x402035
fstp st(6), st(0)
fisub word [rcx]
outsd dx, dword fs:[rsi]
pop rdi
or esp, dword [edx + 0x61]
insb byte [rdi], dx
or dword [rdi + rbp*2 + 0x72], esi
jae 0x4020b0
jne 0x4020cc
mov al, 0xbf
std
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x4020c9
sub dword gs:[rsi + rbp + 0x37], esp
xor eax, 0x5f243538
in ax, dx
idiv bh
in eax, dx
imul ebp, dword [rsi + 0x69], 0x61727208
jns 0x4020d4
outsb dx, byte gs:[rsi]
je 0x4020eb
jns 0x40207b
or ch, byte [rbp + 0x65]
and byte [rbx + rbx + 0x6d75f730], ch
insd dword [rdi], dx
jns 0x4020bb
or eax, 0x2a74295f
mov edi, 0x9c4326dd
jo 0x402106
and al, 0x5a
push rbx
je 0x4020e7
xor dword [rcx], edi
jo 0x402108
movsxd rsp, dword gs:[rbp + 0x77]
fbstp tbyte [rsi + 0x772d99d6]
outsb dx, byte [rsi]
lahf
jb 0x402123
movsxd rsi, dword [rdx + rbx - 0x4d]
fstp st(2)
xor esi, dword [rax + 0x75]
movsxd rsp, dword [rcx + 0x72]
cmp eax, 0xdbbd1467
fdecstp
imul esp, dword ss:[rdi + 0x6e], 0x380c650f
imul ebp, dword [edi + 0x5d], 0xdb5b6fdd
cmp qword [rdx + r11], r9
jne 0x40211d
js 0x402153
xor r14b, byte [rcx]
mov bl, 0x65
fdivr dword [rdi - 0x29]
mov dh, 0x66
cmpsb byte [rsi], byte ptr [rdi]
insb byte [rdi], dx
ja 0x40212a
imul ebx, dword [rdi + 0x70], 0x6f
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x7b065745
xor byte [rbx], bl
sbb dword [rcx], edx
xor ebx, ebx
pop rax
jmp 0x402097
pop rdi
adc dh, byte [eax]
cmc
jo 0x402148
mov bl, 0xd
mov bh, 0x37
pop rbp
adc dh, byte [rcx]
xor eax, 0xa5786540
or bl, bl
mov dh, 0xb7
jae 0x40216a
xor eax, 0x45b66153
fst qword [rsi + rsi*8]
in eax, dx
test al, 0x73
jne 0x40218f
jae 0x40214e
cmp byte [rdi + 0x69], bl
sub esi, dword [rbx + rbp + 0x7a696dec]
or al, byte [rcx]
inc dword [rbp + 0x205856df]
movsd dword [rdi], dword ptr [rsi]
push r11
pop rdx
cmp eax, dword [rbp + 0x244a69b5]
xor eax, 0x16a9a562
mov dh, 0xb6
ret 0xd86
outsb dx, byte [rsi]
adc ah, byte [rdx + rcx - 0x45]
nop
ret 0x8721
ja 0x4021d2
sbb al, 0x64
push rdi
fdiv dword [rsi + 0x34]
adc dword [eax + 0x7b], esi
xchg byte [rax + 0x5b], dh
loop 0x4021e6
fisub word [rbx + 0x68]
lodsb al, byte [rsi]
movabs eax, dword [0x101362915127ca90]
enter 0x5804, 0x27
test dword gs:[rbp + 0x774fb640], eax
scasb al, byte [rdi]
mov al, 0x6d
jbe 0x4021d1
or edi, dword es:[rcx + 0x4a]
xor al, 0x32
nop
mov ch, 0x4b
outsb dx, byte [rsi]
jmp 0x40213f
retf 0x1ade
outsb dx, byte [rsi]
adc dword [rsi], ebx
sub dword [rdi + 0x75], ebp
jae 0x4021da
sub esp, 0x18709b6d
jbe 0x402234
jbe 0x40221b
imul edx, dword [rbp + 0x5d], 0x34d2b825
sub ax, 0x306a
mov dh, 0xca
sub cl, bl
int 0x35
sbb ecx, eax
mov edx, 0x37f57015
sub byte [rax], ah
fistp dword [rdx - 0x35]
add eax, 0x542b6c17
xchg byte [rcx + 0x69], ch
xor edx, dword [rdx + rsi*2 - 0x6fcd0b15]
cmp eax, 0x742731d8
jns 0x402264
and eax, 0x52bd9432
imul esp, ebp, -0x5c
je 0x4021c9
mov dh, 0x52
sub dword [rbx], esp
out 0x1b, eax
je 0x4021e3
test eax, 0x72629dcc
sub byte [rip + 0x6e4b6170], ah
sbb eax, ecx
adc ah, byte [rax]
cdq
xor al, 0x6d
xchg eax, esp
int 0xe
sub byte fs:[rsi + 0x24], cl
and bh, byte [rcx]
xchg eax, ebp
mov ch, 0x6e
sbb byte [rbx + rsi*2 + 0x70], dh
lodsb al, byte [rsi]
rcl byte [rsp - 0x799a48cb], 1
sub dword [rax + 6], edi
xchg eax, ebx
sub esi, dword [rsi]
sub al, 0x78
imul ebx, dword [rdx + rax*8 + 0x55], 0x747a8c56
cmp edi, dword [rax]
ror dword [rsi], 0x1c
pop fs
je 0x4021fc
add dword [rdi + 0x53], ebx
test dword [rdi - 0x42dd3cc0], esi
movabs byte [0xd68c6067af92264], al
jns 0x402293
bswap ebp
jne 0x4022c7
sar byte [rbx + 0x7a206941], 1
or eax, 0x70337f56
cmp eax, 0x69300f2b
imul esp, ebx, 0x2f6fee02
xor r14b, byte [rbx + 0x5f]
cdqe
mov esi, esi
fild word [rcx - 0x7d]
push rdx
pop r15
or r9b, byte [rbx]
sub dword [rip + 0x470b364f], 0x4e
push rbp
and byte [rax - 3], cl
adc bh, byte [rdi]
fld dword [rdx + rdx*2 + 0x3d]
push rbx
push rsp
sub eax, 0x28e0c26c
mov edx, 0x6e0c1064
ja 0x402291
wait
jb 0x40233d
pop rcx
test bh, bh
in eax, dx
jbe 0x402303
movsxd rbx, dword [rdi]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x12
rcr dl, 1
xor bl, byte [rax]
leave
mov ah, 0xf4
test eax, 0x13a25b70
xchg eax, ebx
add dh, byte [rsp + rsi - 0x75]
mov al, 7
lodsd eax, dword [rsi]
jo 0x402341
js 0x402288
add byte [rsp + 0x5bfb6c6d], dl
push rdx
push rbx
xor bl, byte [rdi + 0x50]
push rbx
insd dword [rdi], dx
push rsp
xor cl, byte [rsi + rax*2]
sub ah, byte [rip + 0x6e755fe1]
add dl, byte [rsi + 0x61335f72]
fdiv st(5)
lahf
outsd dx, dword [rsi]
jbe 0x402350
pop rsp
fcmovnu st(0), st(4)
test byte [rcx + 0x50], 0x53
push rbx
xor ebx, dword [rdi + 0x47]
int 0x30
movabs eax, dword [0x5f350236085b6f75]
push rdx
jne 0x402391
push rsi
test al, 0xc1
sub esi, dword [rcx + 0x7a561c0d]
xchg eax, ebx
xor eax, 0x20d606f7
mov ds, word gs:[rsi + 0x1603294]
mov ebx, 0x975f4d41
xchg eax, ebx
xor byte [rbx - 0x5d], bl
jo 0x402340
je 0x4023c9
ja 0x4023c3
sti
jne 0x402370
pop rdi
jbe 0x4023ab
test byte [rax], 0xe1
push rax
movsxd rdi, r13d
cmp dl, bh
fsubr dword [rbp - 0x2f9ded2b]
out dx, al
je 0x4023e2
sub al, 5
mov dh, 0x3d
pop rdi
xor ch, byte [rsi]
add dword [rip + 0x7b2121b3], esi
out dx, eax
cwde
imul ebx, dword [rax + 0x76453243], 0x21107039
movsxd rdx, dword [rsi]
push -0x5d3afc36
mov cl, 0xb1
push rsp
movsxd rsi, dword [rdi]
sal dword [rcx - 0x4c7ea52f], cl
in al, 0x73
jnp 0x4023b4
out 0x3e, al
mov esi, 0x9fb44b52
xor dword [rcx + 0x14f1f842], r10d
add dword [rdx + rax*8 + 0x6f], eax
jns 0x402379
mov esp, 0x76f2d814
push rsp
xor ecx, dword [rbp - 0x38]
and esp, esi
and al, 0x19
xchg dword [rsi], esi
pop rcx
movabs eax, dword [0xc9d8f7cf12ed6151]
sub al, 0xed
jbe 0x402429
push 0x60b00f8e
imul edi, dword [rax + 0x45], 0x3e354e1d
ficom dword [r11 + 0x4a6b1c6e]
jbe 0x402471
mov al, 0x43
cmp ebx, dword [rax]
js 0x402444
insb byte [rdi], dx
cdq
jno 0x40247a
xchg eax, ecx
int1
mov bl, 0x29
movabs dword [0xd684da5776506c64], eax
loopne 0x40244a
jae 0x40243c
mov dword [rcx + 0x40], ecx
xchg eax, esp
mov eax, 0x90624210
sbb dl, byte [rdx + 0x56856c26]
cmpsd dword [rsi], dword ptr [rdi]
push rdi
imul esi, edi, 0x1a
sub eax, 0x619a7499
pop rdi
enter 0x72d5, 0x2d
jrcxz 0x4024b6
ja 0x40244e
test byte [rbp + 0x3154bd60], ch
xor edi, dword cs:[rbp + 0x5c677375]
sbb edi, ecx
je 0x402482
xchg rax, r14
cmpsb byte [rsi], byte ptr [rdi]
mul dword [rcx - 0x3e]
adc ebp, dword [rdi + 0x25]
lodsb al, byte [rsi]
adc byte [rdi + 0x1b], dh
mov esi, dword [rcx + 0x1d64d84d]
popfq
push rdx
jne 0x4024d8
insd dword [rdi], dx
jmp 0x72d97d3e
movabs al, byte [0xc14f065b21d86358]
xor al, 0xe8
push rsp
sbb dl, byte [rbx]
pushf
xor dword [rdi + 0x34809370], edi
and al, 0xbd
xor byte [rsi], 0x4b
jmp 0x40240e
lodsd eax, dword [rsi]
cmp qword [rdi - 0x10], r12
sub al, 0x70
lea ecx, [rbx + 0x24]
pushfq
mov al, 0xf4
cmc
pop rdx
js 0x40250a
sub eax, 0x1f84389a
imul ecx, dword [rbx], -0x25
sub bl, al
add dword [rcx + rbp], eax
xor esi, dword [rdi]
loope 0x402440
xor ah, byte [rcx + 0x48647161]
int 0x5b
cmp byte [rip - 0x6a887be3], dh
lea ebp, [rdi + 0x6d]
xchg eax, esp
xor al, 0x28
mov dword [rdi - 0x3e], 0xa0ca9683
outsb dx, byte [rsi]
adc byte [rsi - 0x30895489], dh
or r8d, dword [rdx]
mov esp, 0x41af3ec6
or al, 0xd0
mov ch, 0x1b
push rsp
int1
sbb ecx, dword [rdi + 0x30]
push rsp
movabs al, byte [0xac3632a477647cd0]
xchg eax, esi
adc dword [rip - 0x6234bccf], ebx
ror byte [rbx], 0x4d
ficom word [rax - 0x16]
jo 0x402557
mov ebp, 0x94cca919
out dx, al
std
jns 0x402553
imul esp, dword [rdx], 0x61407781
mul dword [rcx - 0x50]
add ch, byte [rcx + 0x52]
push rax
rol byte [rbx + rsi], cl
push rax
adc r15, qword [rdx]
mov ch, 0x33
sub al, 0x43
cmp byte [r15 + 0x7f26684a], sil
xor al, 0xd0
retf 0x136d
push rsp
mov dl, 0xc3
fsub dword [rax]
add al, 0x4d
push 0x5f
sbb byte [rsi], ch
ror dword [rip + 0x344ddb09], 1
jne 0x4025c3
mov eax, 0x30b21cb8
pop rdi
pop rdi
push 0x4a640438
cmp bh, byte [rcx]
push r11
or dword [rdi], esp
or byte [rdi + rbx*4 + 0x44], ch
mov word [rdi - 0x5f3bc7b6], ss
adc edx, dword [rdx + rcx*8 + 0x78]
and dword [rsi], 0x16
and eax, 0x2cc16c84
or al, 0x65
ret 0xf2a6
vsubsd xmm14, xmm8, qword [rsi]
outsd dx, dword [rsi]
xor eax, 0x90e0c235
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jo 0x4025e3
ret 0x722c
insd dword [rdi], dx
jns 0x402548
mov word [rdx], es
test ecx, ecx
xor dword [rdi - 0x3f618638], ecx
pop rbx
mov dh, 0x21
and byte [rbx + 0x19ae7165], dl
add eax, 0xd9441942
xchg eax, edx
sbb al, 0x6d
add esp, dword [rsi + 0x12]
test al, 0xf5
xchg eax, esi
add cl, byte [rbp + rsi*2 + 0x51c8d48f]
adc byte [rax + 0x3e], dh
xor esp, dword [rcx]
jo 0x40263a
stosb byte [rdi], al
outsd dx, dword [rsi]
insw word [rdi], dx
push rax
and eax, 0x19630c10
mov dl, 0x65
sub al, 0xc0
cdq
sub byte [rbx], dl
and edi, dword [rcx - 0x16e9b87c]
imul ecx, dword [rbx + 0x11483201], 0x76dd3565
add al, 0x84
pop rdx
test byte [r10 + rbx - 0x75], r12b
add dword [rsi], edx
xor rax, 0x41683a14
sbb ebp, dword [rbx + 0x7b]
push rax
movabs al, byte [0x2c2512b866802700]
adc byte [rsi + 0x5e], ch
jo 0x402687
call 0xfffffffff4a6e7c2
xchg dword [rdx - 0x62], ecx
add dword [rdx + rdx*2], -0xe
js 0x40266c
insd dword [rdi], dx
repne stosb byte [rdi], al
adc eax, 0x4c3599c2
out 0x50, eax
sal cl, cl
je 0x40267e
stosd dword [rdi], eax
jne 0x402695
mov dword [rbx + rsi*2], edx
in al, 0x30
cmp byte ds:[rsp + 0x30], bh
xchg byte [rdx], ah
enter 0x4a35, -0x4b
sub eax, 0x61731e92
loopne 0x402653
fild dword [rdi]
push rbx
jl 0x4026b5
sub al, 0xa4
push r10
xor dl, byte [rbx - 0x97d9e70]
mov r9b, 7
insd dword [rdi], dx
or al, 0xa9
outsd dx, dword [rsi]
or eax, 0x950b3745
mov word [rdx], es
xor eax, 0x8d180e02
in al, 0x84
call 0x19e92cf8
sbb eax, 0xb3093246
lodsb al, byte [rsi]
pop rax
sbb dword [rax], esi
mov dh, 0xde
mov ch, byte [rbx + rbx*4 - 0x74]
mov dh, 0xc7
movsxd rsp, r9d
lea esp, [rcx - 0x61]
movsxd rsi, dword [rax + 0x5261c43e]
mov bh, 0xed
pop rdi
outsd dx, dword [rsi]
push rbx
int3
xor ebp, dword [rip + 0x3c626de8]
jns 0x402710
sbb eax, 0x62d3858c
push rdi
outsb dx, byte [rsi]
cmp byte [rax + 8], cl
xchg eax, ebx
jns 0x402656
mov al, 0xde
lodsb al, byte [rsi]
nop
add ah, byte [rbx - 0x7a3861f9]
and byte [rdi + 0x48], 0x5f
or al, 0x29
nop
fucomp st(0)
or dl, byte [rbx + rsi*2 + 0x3076e374]
xchg eax, edi
lodsd eax, dword [rsi]
or eax, 0xc8b38999
push rbp
adc ah, byte [rsi + rdi + 0x64a380b0]
movsxd rsi, dword [rsi + 0x4343316d]
cmpsb byte [rsi], byte ptr [rdi]
xor bl, bl
xor esp, edx
sub cl, byte [rbx + 0x1820f24]
add dword fs:[rsi - 0x3fcf6af9], eax
xor bl, byte [r8]
lodsb al, byte [rsi]
xor edx, dword [rsi + rax*8]
and dword [rip + 0x5b35a825], ebx
push rbx
or eax, 0x81c19072
adc byte [rdi], ch
add spl, byte [rcx + 0x180b5684]
and si, word [rdx - 0x5b0bd5a6]
lodsb al, byte [rsi]
xchg eax, ecx
fdivr st(3), st(0)
xor esi, dword [rsi + rcx*2]
leave
fisubr word [rbx + 0x61]
sbb bl, byte [rbx]
push rdx
loope 0x40270b
mov cl, 0x95
xor eax, 0xe3205243
cmp byte [rcx + 0x60], al
xchg eax, ebp
add dword [rbx], ebp
movsxd rax, dword [rcx + 0x16]
xor dl, dl
shr dword [rsi + 0x2b], 1
adc byte [rax], bh
adc eax, 0x8e80c42b
xchg eax, edx
add dword [rdx - 0x44d8891f], esp
lea esi, [rdi + 0x6d797338]
fbld tbyte [rdx + 7]
je 0x4027e0
push 0x61b5d6e5
or dword [rsi - 0x47], edx
jo 0x40277f
outsb dx, byte [rsi]
outsd dx, dword [rsi]
ja 0x40273d
mov dh, 0x8e
mov ebx, 0xd67152d
push 0x1475622e
imul esi, esp, 6
loop 0x4027f2
sub eax, 0x360d2a69
jae 0x402804
lodsd eax, dword [rsi]
sar dword [rax], 9
jns 0x40280a
lodsb al, byte [rsi]
add eax, 0x7619b3a6
or ch, bl
or al, 0xd8
mov ebx, 0x1b5f26e4
xlatb
insb byte [rdi], dx
sub byte [rcx], cl
neg byte [rsp + rdi*4 + 0x2d]
int 0x74
jb 0x40276b
or ch, byte [rdi + rcx]
jo 0x40274e
fsubr qword [rdi + 8]
out dx, eax
add eax, 0x23d127ce
insd dword [rdi], dx
and al, 0x6f
mov byte [rsi], ch
push -0x22a5976c
mov dl, 0x12
adc ecx, dword [rip + 0x2c2d635d]
jo 0x40283b
adc byte [rbp + rdi*4 - 0x3a1cee94], bh
insb byte [rdi], dx
xchg eax, esi
or ebp, dword [r10 + 0x63]
jb 0x40278f
int3
outsw dx, word [rsi]
stosd dword [rdi], eax
add byte [rax + 0x7b], ch
pop rsi
sbb dl, cl
pop rsp
adc dword [rsp + rcx], eax
push rdx
std
push 0xd955a8
add byte [rdi + 1], bl
wait
push rbp
sub al, 0x23
nop
or al, 0xc9
cdq
sbb al, 1
or al, 0x32
and ch, cl
and eax, dword [rdi]
push rsp
push rsp
xor spl, byte [r11 + r8*4]
and byte [rcx + rsi], al
or dword [rdx + rsi], 0x24
je 0x4028a0
and al, 0x43
fimul word [0xfffffffffffff644]
outsd dx, dword [rsi]
sbb dword [rax + rdx*4 - 0x68], esp
cwde
cmp byte [rip + 0x41921801], al
or byte [rsi + 0x63], cl
and byte [rbx - 0x2fc0c9e4], al
sal byte [rdx], 1
ftst
in al, dx
mov byte [rdx], al
sti
sbb byte [rbx + 0x560cd258], ch
add esp, edi
test byte [rdi], dh
xor eax, 0x25a01302
fstp qword [rsi - 0x41]
dec dword [rdi]
mov dl, 0x21
cmp dword [rbx + 7], edi
mov edi, 0x4d070236
movsb byte [rdi], byte ptr [rsi]
sbb ebp, dword [rbx + 0x3f]
dec al
sbb esp, esp
int3
cmpsd dword [rsi], dword ptr [rdi]
add byte [rsi], 0xff
adc byte [rsi + 0x4f7a5374], 4
or byte [rcx], bh
loope 0x4028df
pop rdi
or qword [rsi + rsi*2], 0x58
inc dword [rdi + rdi + 0x392e9042]
enter -0x6fe0, -0x20
add dword [rcx], ebx
xchg eax, ebx
sbb byte [r8 - 0x72], al
adc eax, dword [rsi]
jb 0x402872
wait
push rsp
jg 0x4028bb
lcall [rdx]
or dword [rcx + rbx*8], 0x50
mov dword [rdi], edi
nop
nop
enter -0x1bd2, 0x20
push rax
add dword [rax], edx
wait
add byte [rbp - 0xc06b94], al
cmp esi, dword [rdx + 0xf2f8605]
popfq
cmp al, 0x73
xchg eax, ebx
and eax, esi
jg 0x4028a0
adc ah, byte [rcx]
cmp dword [rcx + rax*4 + 0x3f], ebp
movabs dword [0x9ff07470566e672], eax
or al, byte [rdx - 0x2e]
push rax
test eax, 0xc3cec8bf
jo 0x40297a
cmp edx, dword [rcx]
and edi, dword [rbx + 0x7c73fb1]
xchg eax, edx
mov esp, esp
fnstcw word [rdi - 0xc]
add dword [rdi + 0x14066e09], edi
mov dword [rdi], 0x8bb2143f
in al, 0x64
or cl, cl
and eax, 0xef066e67
call qword [rax + rcx*4 + 0x49]
ror dword [rip + 0x30e0edb], cl
js 0x4028e1
mov edi, 0xa4064d10
sbb esp, edi
psubb mm3, mm1
mov ecx, 0xff07c100
add byte [rbx + 0x2e376284], bl
int 0x66
movabs r10, 0xccf272433f1f9bf8
jg 0x402948
add dword [rsi], eax
adc byte [rbx + rbx*2 - 0x38], ah
and byte [rax - 0x1be3d041], bl
and bl, byte [rcx]
or byte [rcx], al
add dword [rax + rsi*4 - 0x80], ebp
nop
xor byte [edi], bh
sbb dword [rdx + 0xab8e4a1], edx
mov eax, 0x370402ee
jg 0x40298f
sbb dword [rax + 0x6cc8e008], edx
in al, 0x80
add al, byte [rsi]
and byte [rip + 0x2161c17f], dl
sbb esi, dword [rax]
xor al, 0x30
cmp ebp, dword [rsp + rax*4]
mov edi, 0x247b1107
push r11
push rdx
iretd
pop rbx
pop rax
and byte [rcx - 0x6c64441], al
mov ch, 0x32
fdivr st(7)
push -0x4f78e0ed
add dword [rdi + rbx*2 + 0x44687f09], esp
add byte [rdx + rdx*4], ch
push 0x17
add byte [rax], al
add byte [rax], al
adc bh, bh
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rip - 0x15f7fdea], ecx
cdq
jrcxz 0x4029fa
mov word [rdx - 0x48], fs
mov edx, 0x3428
adc eax, 0xf000000f
add byte fs:[rax], al
add al, byte [r8]
hlt
add byte [rax], al
add bh, bh
