call 0x401b50
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x401968
add ebx, ebx
je 0x40191e
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x401956
cmp rbp, -4
ja 0x401956
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x40193e
add ecx, 4
mov dl, byte [rax]
je 0x401966
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x401956
ret
cld
pop r11
cmp r8b, 2
je 0x40197e
jmp 0x4019fb
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x40198e
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x401976
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x4019a6
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x401993
sub eax, 3
jb 0x4019c4
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x4019fb
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x4019eb
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x4019e9
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x4019d8
cmp rbp, -0xd00
adc ecx, eax
call 0x40192a
jmp 0x40197e
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x401ad4
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x401a72
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x401abe
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x401a91
push 0x3a707474
jne 0x401aea
js 0x401aaa
jae 0x401ae4
outsb dx, byte cs:[rsi]
je 0x401aa3
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x401b11
jb 0x401b03
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x401b2e
jb 0x401b41
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x2137db
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x2137db
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x401a0c
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x401b37
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x401ae5
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add al, byte [rax]
jmp rbp
call 0x706f1bdf
jb 0x401bf7
movsxd rbp, dword [rdi]
jae 0x401bf1
insb byte [rdi], dx
js 0x401bf7
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x401bd7
cmp rsi, rcx
jae 0x401bdf
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x401bbe
cmp al, 0x8f
ja 0x401bbe
cmp byte [rsi - 2], 0xf
je 0x401bc4
sub al, 0xe8
jg 0x401bc1
push rdi
cmp al, 1
ja 0x401bac
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x401baf
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x401bdc
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x401c33
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c20b1
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x401c77
mov al, 0xa
jmp 0x401c77
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x401c53
inc ebx
mov al, 0
jmp 0x401c7b
mov al, 2
jmp 0x401c7b
mov al, 3
jmp 0x401c7b
mov al, 0x3c
jmp 0x401c7b
push rcx
rcr ah, 1
fstp st(7)
jle 0x401cbc
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x401cce
jg 0x401cc0
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a7443
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x401d1a
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb6e97
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x401d22
cmp esi, 0x21585055
jne 0x401d26
jge 0x401d18
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x401d1b
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x401d1f
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x401dcb
pop rcx
or al, 0x3b
jb 0x401dd1
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x401d43
jmp 0x401d45
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x3661c86
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf53ece
in eax, dx
jg 0x401d7d
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x401dc3
mov bh, 0x2a
add edi, 0x10
jmp 0x401dc0
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x401dfd
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x401e39
jne 0x401e50
fstpnce st(6), st(0)
jle 0x401e19
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x401e4f
jrcxz 0x401e83
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1bde7
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x401f02
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x401ec2
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x58296497
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x401f35
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x401ecf
and ecx, 7
or al, 0xeb
jae 0x401f3a
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x401f6f
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x401fad
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x401f66
push rax
call 0xffffffff868d1c53
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x401f70
std
cmp edi, esi
xchg eax, edi
jle 0x401fc5
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c96551
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x401fc3
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x401fb1
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x401fda
js 0x40201a
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x4020ac
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad32e7
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x4020cd
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x4020d2
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc21b84
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x402060
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
sub eax, 0xe000009
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], dh
mov byte [rax], ah
nop
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
cmp byte [rdx], bl
add byte [rax], al
or byte [r8], r8b
add byte [rdx], al
add byte [rax], al
add byte [rdi], bl
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x402186
je 0x40218f
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x402158
mov dh, 0x7d
jbe 0x402157
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x402190
sahf
sahf
add al, 0
cwde
add eax, 0x1f90d000
and byte [rdi + 0x6300006], bl
add byte [rdx + rcx + 0xfc807c8], bh
or byte [rax], al
or byte [rbx], cl
or dword [rax], eax
fdiv st(2)
add esp, esp
adc ecx, dword [rdx]
add byte [rax], ah
or al, 0xb
add al, al
sti
add al, 0xf2
add dword [rax + rax], ecx
loopne 0x402191
add byte [rax + 0x604f4710], dh
in eax, 0
lldt word [rdi - 0x70]
seto byte [rax]
adc byte [rax], al
adc dword [rax], eax
adc ecx, eax
enter 0x3120, 0x12
add byte [rax + 0x13], bh
add cl, bh
add esp, esp
add byte [rbx + rsi + 0x3de80014], dl
cmp byte [rdx + rax + 0x79], 0x15
add al, bh
add byte [rax], al
fdiv dword ds:[rsi]
cmp dword [rdi + rdx], 0x3f471808
xchg eax, ebp
add esp, esp
sbb dword [rax], eax
add byte [rax + 0x1a], al
cmp eax, dword [rax + 0x3e]
adc dword [rdi], 0x4120001b
sbb al, 0x13
sbb eax, 0x129bbc9
add al, 0
int1
dec dword [rbx + rbx*4]
xchg byte [rbx], ch
mov ebx, dword [rbx]
mov edi, 0x80029719
adc ecx, dword [rax + 6]
cdq
mov al, 0x40
sbb eax, eax
fadd dword [rbp + 0x2e641c]
adc al, 0x44
pop rdi
cmp edi, ecx
sbb eax, dword [rax]
push rax
add dword [r15], edx
push rbx
nop
or al, 0x76
and eax, 0x20477a4f
ret 0x84ae
enter -0x687a, -0x5b
xlatb
sbb ebp, dword [rbx + 0x268f1347]
cmp byte [rdi - 0x70], spl
fist dword [rcx + 0x1f]
sbb edx, ebp
nop
xor edi, eax
sbb eax, edx
xchg byte [rax], dl
add byte [rdi + 4], al
push 0x1195ef09
lahf
add dword [rdi - 9], eax
and eax, 0x2f2d5d8c
adc al, 0x1f
sbb dword [rcx + 0x51076129], esi
outsd dx, dword [rsi]
sbb eax, 0x495e3640
add al, 0x3f
and byte [rdx + 1], bl
adc byte [rsi], ch
jrcxz 0x4021f6
sbb byte [rax], cl
jo 0x4021f4
mov al, 0x2b
imul ebp, ebp, 0
wait
mov dl, 7
cmp ebx, ecx
jo 0x4022e2
push rax
xor byte [rdx], al
add al, 0x32
fmul st(1)
and byte [rbx], dl
sub al, byte [rdi - 0x3e]
mov ebp, 0xe710d843
sbb al, byte [rdx]
mov edi, 0x95c84334
sub dword [rip + 0x3210c812], edi
adc byte [rcx - 0x7e], 0x76
popfq
mov r12d, 0x2fd67f01
cmp al, 0x1b
in al, dx
adc byte [rdx + 0x2f14ef00], bh
cmp dword [rax], ecx
add bh, byte [rbx]
test byte [rbx + rdi*8 - 0x79e8fcb5], bl
nop
and esp, esp
push -0x7c
fnstsw dword [rax + 0x21]
or ecx, dword [rdi + rdx*2 + 0xf]
add al, byte [rax + rax*2]
movabs al, byte [0x633f11171e1f40bb]
or byte [rcx], bl
insb byte [rdi], dx
add al, 0x2f
sub eax, 0xbe373f47
add dword [rax + rdx + 0x57024754], esp
or byte [rcx - 0x62], al
cmp eax, 0x4602179
adc byte [rcx], al
sbb byte [rdx + 0x774e41], dl
test byte [rcx], bh
fmul st(1)
shl dword [rdi], -0x20
out dx, eax
xchg eax, esp
add al, 0xc8
and esp, ebp
add ah, ah
add eax, 0x17beca6c
push rsi
add eax, 0x62a71bbf
xchg byte [rax - 0x66e882df], sil
and dword [rax + rcx + 0x19], esp
mov cl, 0xdb
ret 0x1793
fsubr dword [rsi]
cmpsd dword [rsi], dword ptr [rdi]
cmp dword [rcx], eax
pop rax
jb 0x40231f
xchg eax, ebx
add dword [rsi], -0x70
sbb al, 0x40
xor r10b, byte [r11]
xchg eax, edx
out dx, eax
adc byte [rdx - 0x5d], dh
leave
out dx, eax
sbb al, byte [rsi - 0x2f64f9dc]
int1
jb 0x4022d2
sbb eax, 0x70447c2
sbb al, 0x34
enter 0x3510, 0x48
and cl, al
xor dword [rdi + rbx*8], 0xffffffd0
add ebp, dword [rdi]
movsxd rcx, esi
or dword [rdi], ebp
mov edi, esi
push rdi
add bl, bh
mov gs, word [rdi]
hlt
add ebp, dword [rdi + rdx*2]
movsxd rsi, dword [rdx + 0x74]
jae 0x402317
imul di, di, -0xa
jmp qword [rbx]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
or dword [rax], eax
jb 0x4023f9
imul ebx, dword [edx], 0xf77b7b06
jg 0x4023fc
je 0x40240c
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x4023c8
outsd dx, dword fs:[rsi]
pop rdi
or esp, dword [edx + 0x61]
insb byte [rdi], dx
or esi, edi
neg bl
jg 0x402429
outsd dx, dword [rsi]
jb 0x40242b
pop rdi
jne 0x402434
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x40242d
sub dword gs:[rsi + rbp + 0x37], esp
xor eax, 0xb7f43538
mov edi, 0x665f24c0
imul ebp, dword [rsi + 0x69], 0x61727208
jns 0x402438
mov ecx, 0xd6fb76f
jb 0x40245a
add byte [rsi + 0xa], ah
insd dword [rdi], dx
and byte gs:[rbp + 0x6d], dh
insd dword [rdi], dx
jns 0x40241e
fld qword [rax + 0x74295f0d]
sub al, byte [rdx - 0x64]
outsb dx, byte [rsi]
mov ah, 0xfd
in eax, dx
jo 0x40246d
and al, 0x47
sub r14, qword [rbx + 0x50]
pop rdi
movabs r15, 0x6163355a06dff2c5
insb byte [rdi], dx
movsxd rsi, dword [rdx]
js 0x40239d
xor dword [rbx + 0x74], edx
jbe 0x40248c
fucomi st(5)
frstor dword [rbp + 0x63]
outsb dx, byte [rsi]
imul rdx, qword [r11 + 0x61], 0x2f454503
pop rdx
adc ecx, dword [rax + rdi - 0x47]
out dx, al
frstor dword [rdi]
imul ebp, dword [rdi + 0x50], 0x41524663
pop r15
faddp st(1)
xchg eax, esi
setnp bl
or eax, dword [rdi + 0x4e]
push rbp
and bl, dil
test dword [rdi + 0x524448ec], ebx
imul ecx, dword [rdi + 0x46], 0x46
push rbx
push rsp
sub byte [r13 - 0x6527b27b], r8b
adc byte fs:[rbx], ch
cmp esi, dword [rsi - 0x47]
imul eax, dword [rdi], 0x66
pop rcx
jle 0x4024aa
movsxd rbx, dword [rdi]
mov cl, 0x46
push qword [rsi + 0x40]
pop r8
pop rax
pop rdi
xor esi, esi
adc eax, 0x46b7fb6d
clc
je 0x4024f9
jb 0x402502
ja 0x4024f4
insb byte [rdi], dx
or dword [edi], ebx
fstp dword [rbx + 0x6b]
mov bh, 0x50
movsxd rbp, dword [r10]
push rbx
outsd dx, dword [rsi]
adc al, 0xde
imul byte [rbx + r14*2 + 0x45]
imul edx, dword [rsi], 0x63626935
xchg eax, ecx
mov es, word [r13 + 0x28]
add eax, 0x36315153
add byte [rsi + 0x64740b6d], dh
sbb ah, byte [rcx - 0x76]
jbe 0x40253f
pop rbx
jnp 0x402547
enter 0x6f34, 0x75
mov bl, 0x6f
pop di
mov ah, 0x7d
mov ch, 9
jmp 0x402549
insd dword [rdi], dx
je 0x402559
jp 0x402510
movabs byte cs:[0xf46d6767d85661fc], al
and al, 0x4a
jbe 0x40254f
push rdx
test byte [rdi + 0x431160ed], 0x6c
jae 0x402509
pop rdx
insb byte [rdi], dx
push rax
imul edi, edi, 0x4e53b42f
imul rdx, qword [r11 + 0x65707974], 0x49
movsxd rax, dword [rbp + 0x31]
xor ebx, dword [rdi + 0x4d]
insb byte [rdi], dx
test dh, dh
pop rdi
ja 0x402583
call 0x2e6d6a4a
mov ss, eax
mov ss, word [rip + 0x3774e6b7]
xor dword [rdx], esi
ja 0x40259b
jmp 0x40250e
sal byte [rbx + 0x69], 0x63
jne 0x4025a8
fidiv dword [rcx]
movsxd rbp, dword [rax + 0xc]
outsb dx, byte [rsi]
imul ecx, dword [rsi + 0x3dac8361], 0x73
push rax
fsubr st(3), st(0)
jbe 0x40250e
fcom qword [rbp + 0x45]
cmp dword [rcx + 0x458c6165], edi
push rdx
xor dl, byte [rsi + rax]
or ebx, dword [rcx - 0x45]
push rbx
cmp al, bh
mov sil, 0xbb
imul edi, dword [rdx + 0x4e], 0x65
xor al, 0x49
jns 0x4025ac
xor dword [rbx - 0x25], edi
enter 0x3678, 0x74
jp 0x4025ea
insd dword [rdi], dx
cdqe
mov al, 0xb2
movsxd rsi, dword [rax + rbx*4 + 0x30]
insd dword [rdi], dx
fld xword [rcx + 0x3b]
or ecx, edi
pop rdi
xor bl, byte [rip + 0x6168162e]
enter -0x29be, -0x46
pop rdi
mov cl, 0x78
sbb qword [r8 + 0x42ccd4b], r9
pop rax
xor byte [rax + rdi*2 + 0x18201361], cl
mov edx, 0xc26d8d63
pop rbx
push rdx
jnp 0x4025d2
push r12
in eax, dx
or al, 0x5d
xlatb
clc
imul eax, dword [rbx - 0x15], 0x9c626154
sbb ecx, dword [rdi - 0x78]
add eax, 0x5f2edb36
jne 0x402606
sub ch, byte fs:[rax]
jb 0x402553
mov ah, 0xb5
fldenv [r9 + 2]
pop rdi
sbb ebx, dword [rcx]
mov ds, word [rip + 0x34785b43]
movsxd rsi, dword [rax - 0x3c]
pop rsi
test eax, 0x73641eb5
and al, 0xd6
cmp al, 0x82
test bh, al
xor dl, cl
and ecx, dword [rdi]
and byte [rsi + rsi], dh
xor al, 0x73
ja 0x402658
jo 0x402605
push rbx
in al, 6
mov bh, 0xe1
or r12b, byte [rcx]
outsd dx, dword [rsi]
xor bpl, byte [r13 + 0x64]
jae 0x40260b
lodsb al, byte [rsi]
xor eax, 0x3f4aa6cc
adc eax, ecx
xor al, 0xd8
insb byte [rdi], dx
xor esi, dword [rax + 0x2d]
std
push 0x58
mov ebx, 0x3f645ad0
push rbx
xor ebp, dword [rcx - 0x4bd297a3]
pop rsi
cmp dword [rax], eax
mov ch, 0x7c
outsd dx, dword [rsi]
jns 0x402649
jmp 0x20a3117d
or eax, 0x7e161297
xor eax, 0x68416c66
jp 0x402664
sub al, 0xdb
mov dh, 0xed
movsxd rbp, dword [rbx - 0x18]
push 0x6c826603
mov dl, 0xb6
add ah, byte [rdi - 0x63]
imul edi, dword [rbx], 0x61406991
mov ecx, 0x3931bc93
outsd dx, dword [rsi]
stosb byte [edi], al
add edx, dword [rdi + 0x21]
int 0x6a
and ebp, dword [rbx - 0x4c]
push rbx
fmul dword [rip - 0x54b5fbd4]
jo 0x4026aa
add dword [r11], 0x34a51843
enter 0x1bc7, -0x38
and al, ah
sub eax, 0x5b091c7a
mul dword [rbx + 0x4b]
sub dword gs:[rbx + 0x14], 0x45b5f6da
pop rdi
insb byte [rdi], dx
cmp dword [rbx + 0x5dae026], ebx
pop rdx
xchg byte [rsi + 0x24283076], dl
mov ebx, 0x32c12837
xor dword [rsi], ebp
xor ecx, dword [rbp + 0x6e]
ja 0x402639
ret
mov ch, 0x95
insd dword [rdi], dx
adc dl, byte [rbp - 0x3f]
fiadd word fs:[rcx + 0x61f74278]
insd dword [rdi], dx
leave
xor byte [rcx + 0x43037033], bh
fdivr dword [rbx - 0x6f0ca6bb]
cwde
mov dl, 0x2e
jns 0x402689
xor esi, esi
cmp cl, dh
fisub dword [rdx - 0x67]
add dh, ch
cmp al, byte [rax]
or bh, byte [rbx]
fldcw word [rbp + 0x77]
movabs al, byte [0x727407629f6d7973]
push -0x565234f7
or eax, 0x7704e1e
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jrcxz 0x402713
mov dh, 0x75
cmpsd dword [rsi], dword ptr [rdi]
sub eax, 0x670d6715
outsb dx, byte [rsi]
jne 0x40273d
jne 0x40272b
imul eax, dword [rbp + 0x2d6476d8], 0x4c
add byte [rip - 0x62f6c7a0], cl
mov ch, 0x99
jnp 0x402787
jns 0x402793
sbb dword [r14 - 0x7e], r14d
wait
mov al, 0xd6
hlt
imul esi, ebp, 0xcb1b5f0c
insd dword [rdi], dx
add eax, 0x2823ad7b
or dword [rcx], esi
je 0x4026d6
fistp dword [rsi + 0xa6772e9]
sub al, 0x6f
or byte [rdi + rax*2 + 0x5381ee8], dl
and al, 0x6f
fnsave dword gs:[rdx - 0x6b9776f9]
push 0x5d0d7264
movsxd rbp, ebx
pop rdx
pop rbx
sbb eax, 0x70747870
in al, 0xbd
insb byte [rdi], dx
adc dword [rdi + 0x38496cd], eax
or ebp, dword [r10 - 0x25]
push -0x5e5efd4f
and eax, 0x4cd16800
mov bl, 0xd9
jnp 0x4027e2
and byte [rax + rbx*2], al
xchg eax, ebp
insd dword [rdi], dx
int 0x6b
push rdx
std
add byte [rax], al
adc dword [rbx - 0x80], ecx
add dword [rdi], esp
or al, 0xc9
cdq
wait
sbb al, 1
xor ah, byte [rax]
int 0x90
and eax, dword [rdi]
push rsp
xor ah, byte [rbx + rax*4]
or al, 0x54
and byte [rsp + rcx], al
xor ah, byte [rbx + rax*2]
xor dword [rsp + rsi*2 - 0x22], esi
or eax, 0x44248325
jg 0x4027b2
ljmp [rdi + 0x19]
nop
cwde
cwde
cmp byte [rcx], bl
xchg eax, edx
add eax, 0xc1904e08
movsb byte [rdi], byte ptr [rsi]
or edx, eax
rcr byte [rcx + 0x6076726c], 1
add edi, ebx
sbb byte [rsi + 0x2c], al
imul eax, dword [rsi], 0x8bf70356
in al, 9
outsd dx, dword [rsi]
mov word [rbx + rbx*4], es
adc al, 0x4b
mov edx, 0x1fffbf5e
nop
or eax, 0x48bfd9c9
add al, byte [rdi]
mov r12b, byte [rip - 0x1c09423]
sbb esp, esp
in al, dx
cmpsd dword [rsi], dword ptr [rdi]
rol byte [rsi], 1
cmp dword [rax + rcx], ebp
push rbx
jp 0x402869
fcom dword [rcx + 0x737302d]
jg 0x40281e
xchg eax, ebx
xor bl, al
test byte [rdi], bh
xchg eax, edi
and byte [rdi + 0x3f077b3c], dl
movabs al, byte [0x138e0c20c82a1902]
sub byte [rcx], bh
loope 0x402888
lcall [rdx]
nop
xchg byte [r9 + rcx*4 + 0x3f], bpl
loopne 0x402827
jb 0x40281c
add dword [rax], edx
xchg eax, esp
or al, 0x37
sub eax, dword [rdx + 0xf]
jbe 0x4028bf
or ecx, dword [rdi]
popfq
mov edi, 0xcdccf205
jg 0x4027f9
adc al, byte [rsp - 0x205cc050]
or eax, 0x76e6725
dec dword [rcx]
test eax, 0x24209373
mov edi, 0x84bf0747
insb byte [rdi], dx
sub byte [rcx], bh
sal byte [rcx + 0x6e67253f], 0x46
sysret
jg 0x4028e2
mov ecx, 0xbf0d90c9
js 0x40289d
and dword [rcx + 0x1c7f9e48], edi
add cl, cl
jns 0x402832
wait
adc eax, 0x273f07ff
add dword [rbx - 0x80], ecx
out 0x22, al
fisttp dword [rsi]
leave
cdq
wait
adc dword [rdi - 0x36ef00f9], eax
xor byte [rbx + rax*2 - 0x19], 0x3f
psubb mm7, qword [rbx]
and byte [rax + 0x3ff3ff07], bh
or byte [rbp + 0x52], 0x2c
jg 0x40290a
mov bl, 0x25
pop rbp
clc
wait
and dword [rcx], edi
jns 0x4028bf
jg 0x4028cc
add dword [rsi], eax
mov dl, 0x2d
nop
adc byte [rax + 0x720e3fbf], bl
xchg eax, ecx
or al, 0x3f
or byte [rcx], al
add ecx, ebx
and byte [rax + rcx*2 + 0x57], al
xor ah, byte [rbx + rax*2]
leave
clc
or bh, al
mov byte [rip + 0x7f076e08], al
xor eax, ecx
add dword [rbx - 0x71], ebp
or bh, bh
and byte [rcx + 0x41], al
or eax, 0x3f9c90c9
cmp byte [rax], ah
adc eax, 0x83647067
jg 0x40294a
mov r15d, 0xb0ecb34
and dword [rdi], eax
adc dword [rbx - 0x6c], edi
pushfq
jno 0x40298a
push rdx
jg 0x40294b
lodsb al, byte [rsi]
push rdi
and edi, dword ss:[rbx - 0xbec000]
add ecx, dword [rax + 0x73]
bnd js 0x402945
xor cl, byte [rcx]
and al, 0x4f
jg 0x4028fd
push 7
pop rax
add byte [rax + rax], ah
add bh, bh
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rip - 0x3cf7fdea], ecx
and al, 0xf0
stc
sub byte [rsi + 0x1a383b], cl
add byte [rdi + 8], al
add byte [rax], al
pop rbx
add byte [rax], al
add al, byte [r8]
xchg eax, ebp
hlt
add byte [rax], al
add bh, bh
