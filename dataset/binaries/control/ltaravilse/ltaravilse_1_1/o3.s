xor ebp, ebp
mov r9, rdx
pop rsi
mov rdx, rsp
and rsp, 0xfffffffffffffff0
push rax
push rsp
mov r8, sym.__libc_csu_fini
mov rcx, sym.__libc_csu_init
mov rdi, sym.main
call sym.imp.__libc_start_main
hlt
nop word [rax + rax]
mov eax, 0x60410f
push rbp
sub rax, obj.__TMC_END__
cmp rax, 0xe
mov rbp, rsp
jbe 0x4013b0
mov eax, 0
test rax, rax
je 0x4013b0
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop word [rax + rax]
pop rbp
ret
nop dword [rax]
nop word cs:[rax + rax]
mov esi, obj.__TMC_END__
push rbp
sub rsi, obj.__TMC_END__
sar rsi, 3
mov rbp, rsp
mov rax, rsi
shr rax, 0x3f
add rsi, rax
sar rsi, 1
je 0x4013f8
mov eax, 0
test rax, rax
je 0x4013f8
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop dword [rax]
pop rbp
ret
nop word [rax + rax]
cmp byte [rip + 0x202f49], 0
jne 0x40141a
push rbp
mov rbp, rsp
call sym.deregister_tm_clones
pop rbp
mov byte [rip + 0x202f36], 1
ret
nop dword [rax]
mov edi, obj.__JCR_LIST__
cmp qword [rdi], 0
jne 0x401430
jmp sym.register_tm_clones
nop dword [rax]
mov eax, 0
test rax, rax
je 0x40142b
push rbp
mov rbp, rsp
call rax
pop rbp
jmp sym.register_tm_clones
nop word cs:[rax + rax]
push r15
push r14
mov r14, rdi
push r13
push r12
push rbp
push rbx
sub rsp, 0xe8
mov rax, qword fs:[0x28]
mov qword [rsp + 0xd8], rax
xor eax, eax
mov rax, qword [rsi]
mov ebp, dword [rax]
mov ebx, dword [rax + 8]
mov r12d, dword [rax + 0x10]
mov edx, dword [rax + 0xc]
mov ecx, dword [rax + 0x14]
mov esi, dword [rax + 4]
sub ebp, edx
sub ebx, ecx
sub r12d, esi
mov dword [rax], ebp
mov dword [rax + 8], ebx
mov dword [rax + 0x10], r12d
mov edi, ebp
mov eax, ebx
shr edi, 0x1f
shr eax, 0x1f
or dil, al
jne 0x4014bd
mov eax, r12d
shr eax, 0x1f
test al, al
jne 0x4014bd
test edx, edx
jle 0x401518
test ebp, ebp
jne 0x401518
lea rax, [r14 + 0x10]
movabs rcx, 0x424953534f504d49
mov qword [r14 + 8], 0xa
mov qword [r14 + 0x10], rcx
mov byte [r14 + 0x1a], 0
mov qword [r14], rax
mov eax, 0x454c
mov word [r14 + 0x18], ax
mov rcx, qword [rsp + 0xd8]
xor rcx, qword fs:[0x28]
mov rax, r14
jne 0x401c2a
add rsp, 0xe8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop dword [rax]
test ebx, ebx
jne 0x401520
test ecx, ecx
jg 0x4014bd
test esi, esi
jle 0x401529
test r12d, r12d
je 0x4014bd
lea eax, [rbx + r12]
cmp ebp, eax
jg 0x4014bd
lea r13d, [rbp + rbx]
cmp r12d, r13d
jg 0x4014bd
lea eax, [rbp + r12]
cmp ebx, eax
jg 0x4014bd
lea rax, [rsp + 0x20]
test ebp, ebp
mov qword [rsp + 0x18], 0
mov byte [rsp + 0x20], 0
mov r8d, 1
mov qword [rsp + 0x10], rax
je 0x4016e0
lea rdi, [rsp + 0x10]
mov ecx, str.RYB____________________________________________________________r______V__________________E____________
xor edx, edx
xor esi, esi
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_replace
sub ebp, 1
lea r13d, [rbp + rbx]
movabs r15, 0x7fffffffffffffff
nop dword [rax + rax]
lea eax, [r13 + r12]
test eax, eax
jle 0x4015f8
mov rax, qword [rsp + 0x18]
mov rdx, qword [rsp + 0x10]
movzx edx, byte [rdx + rax - 1]
cmp dl, 0x52
je 0x401640
cmp dl, 0x59
je 0x401680
cmp ebp, ebx
jle 0x401670
cmp rax, r15
je 0x401c2f
lea rdi, [rsp + 0x10]
mov edx, 1
mov esi, str.RYB____________________________________________________________r______V__________________E____________
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
sub ebp, 1
lea r13d, [rbp + rbx]
lea eax, [r13 + r12]
test eax, eax
jg 0x4015a1
mov rax, qword [rsp + 0x10]
mov rcx, qword [rsp + 0x18]
movzx esi, byte [rax]
lea rdi, [rcx - 1]
cmp sil, byte [rax + rcx - 1]
je 0x401740
lea rdx, [r14 + 0x10]
mov qword [r14], rdx
lea rdx, [rsp + 0x20]
cmp rax, rdx
je 0x401830
mov qword [r14], rax
mov rax, qword [rsp + 0x20]
mov qword [r14 + 0x10], rax
mov qword [r14 + 8], rcx
jmp 0x4014e9
nop
cmp ebx, r12d
jle 0x4016a0
cmp rax, r15
je 0x401c16
lea rdi, [rsp + 0x10]
mov edx, 1
mov esi, 0x403066
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
sub ebx, 1
lea r13d, [rbp + rbx]
jmp 0x401598
nop
cmp rax, r15
jne 0x40164e
mov edi, 0x40306a
call sym.std::__throw_length_error
nop
cmp ebp, r12d
jle 0x4016d0
cmp rax, r15
jne 0x4015d3
mov edi, 0x40306a
call sym.std::__throw_length_error
nop dword [rax + rax]
cmp rax, r15
je 0x401c20
lea rdi, [rsp + 0x10]
mov edx, 1
mov esi, 0x403068
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
sub r12d, 1
jmp 0x401598
nop word cs:[rax + rax]
cmp rax, r15
jne 0x4016a9
mov edi, 0x40306a
call sym.std::__throw_length_error
nop
test ebx, ebx
je 0x401702
lea rdi, [rsp + 0x10]
mov ecx, 0x403066
xor edx, edx
xor esi, esi
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_replace
sub ebx, 1
mov r13d, ebx
jmp 0x401589
lea rdi, [rsp + 0x10]
mov ecx, 0x403068
xor edx, edx
xor esi, esi
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_replace
sub r12d, 1
jmp 0x401589
mov rbx, rax
mov rdi, qword [rsp + 0x10]
lea rax, [rsp + 0x20]
cmp rdi, rax
je 0x401735
call sym.operatordelete
mov rdi, rbx
call sym.imp._Unwind_Resume
nop dword [rax]
cmp rdi, 1
jbe 0x401614
mov edx, 2
mov ebx, 1
jmp 0x40176c
nop word cs:[rax + rax]
add edx, 1
cmp rdi, rbx
jbe 0x401614
cmp sil, byte [rax + rbx]
movsxd rbx, edx
je 0x401760
lea rbp, [rax + rbx]
cmp sil, byte [rbp]
je 0x401760
cmp rbx, rcx
ja 0x401c39
sub rcx, rbx
lea rax, [rsp + 0xa0]
cmp rcx, 0xf
mov r12, rcx
mov qword [rsp], rcx
mov qword [rsp + 0x90], rax
ja 0x401b4a
cmp rcx, 1
je 0x401ba1
test rcx, rcx
mov rdx, rax
jne 0x401b70
lea rax, [rsp + 0x60]
mov qword [rsp + 0x98], r12
mov byte [rdx + r12], 0
cmp qword [rsp + 0x18], 0
mov rdx, qword [rsp + 0x10]
mov qword [rsp + 0x50], rax
mov eax, 1
cmove rax, qword [rsp + 0x18]
mov rcx, rdx
add rcx, rax
je 0x401847
test rdx, rdx
jne 0x401847
mov edi, str.basic_string::_M_construct_null_not_valid
call sym.std::__throw_logic_error
mov rbx, rax
mov rdi, qword [rsp + 0x90]
lea rax, [rsp + 0xa0]
cmp rdi, rax
je 0x401721
call sym.operatordelete
jmp 0x401721
nop dword [rax]
mov rax, qword [rsp + 0x20]
mov rdx, qword [rsp + 0x28]
mov qword [r14 + 0x10], rax
mov qword [r14 + 0x18], rdx
jmp 0x401635
cmp rax, 1
jne 0x401854
movzx edx, byte [rdx]
mov byte [rsp + 0x60], dl
mov qword [rsp + 0x58], rax
mov byte [rsp + rax + 0x60], 0
lea rax, [rsp + 0x40]
cmp qword [rsp + 0x18], rbx
mov rbp, qword [rsp + 0x10]
cmovbe rbx, qword [rsp + 0x18]
mov qword [rsp + 0x30], rax
mov rax, rbp
add rax, rbx
je 0x4018b0
test rbp, rbp
jne 0x4018b0
mov edi, str.basic_string::_M_construct_null_not_valid
call sym.std::__throw_logic_error
mov rbx, rax
mov rdi, qword [rsp + 0x50]
lea rax, [rsp + 0x60]
cmp rdi, rax
je 0x401809
call sym.operatordelete
jmp 0x401809
nop
cmp rbx, 0xf
mov qword [rsp + 8], rbx
ja 0x401b0d
cmp rbx, 1
je 0x401b8f
test rbx, rbx
lea rax, [rsp + 0x40]
jne 0x401b2d
mov qword [rsp + 0x38], rbx
mov byte [rax + rbx], 0
lea rsi, [rsp + 0x40]
mov rcx, qword [rsp + 0x30]
mov r8, qword [rsp + 0x38]
mov rdx, qword [rsp + 0x58]
cmp rcx, rsi
lea rax, [r8 + rdx]
je 0x401bb4
mov rsi, qword [rsp + 0x40]
cmp rax, rsi
mov rsi, qword [rsp + 0x50]
jbe 0x401afe
lea rdi, [rsp + 0x60]
cmp rsi, rdi
je 0x401c0c
mov rdi, qword [rsp + 0x60]
cmp rax, rdi
ja 0x401afe
lea rdi, [rsp + 0x50]
xor edx, edx
xor esi, esi
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_replace
lea rdx, [rsp + 0x80]
mov qword [rsp + 0x70], rdx
mov rcx, qword [rax]
lea rdx, [rax + 0x10]
cmp rcx, rdx
je 0x401be5
mov qword [rsp + 0x70], rcx
mov rcx, qword [rax + 0x10]
mov qword [rsp + 0x80], rcx
mov rcx, qword [rax + 8]
lea rsi, [rsp + 0x80]
mov byte [rax + 0x10], 0
mov qword [rsp + 0x78], rcx
mov qword [rax], rdx
mov rcx, qword [rsp + 0x70]
mov qword [rax + 8], 0
mov r8, qword [rsp + 0x78]
mov rdx, qword [rsp + 0x98]
cmp rcx, rsi
lea rax, [r8 + rdx]
je 0x401bbe
mov rsi, qword [rsp + 0x80]
cmp rax, rsi
mov rsi, qword [rsp + 0x90]
jbe 0x401aef
lea rdi, [rsp + 0xa0]
cmp rsi, rdi
je 0x401c02
mov rdi, qword [rsp + 0xa0]
cmp rax, rdi
ja 0x401aef
lea rdi, [rsp + 0x90]
xor edx, edx
xor esi, esi
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_replace
lea rdx, [rsp + 0xc0]
mov qword [rsp + 0xb0], rdx
mov rcx, qword [rax]
lea rdx, [rax + 0x10]
cmp rcx, rdx
je 0x401bc8
mov qword [rsp + 0xb0], rcx
mov rcx, qword [rax + 0x10]
mov qword [rsp + 0xc0], rcx
mov rcx, qword [rax + 8]
lea rdi, [rsp + 0x10]
lea rsi, [rsp + 0xb0]
mov byte [rax + 0x10], 0
mov qword [rsp + 0xb8], rcx
mov qword [rax], rdx
mov qword [rax + 8], 0
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
mov rdi, qword [rsp + 0xb0]
lea rax, [rsp + 0xc0]
cmp rdi, rax
je 0x401a72
call sym.operatordelete
mov rdi, qword [rsp + 0x70]
lea rax, [rsp + 0x80]
cmp rdi, rax
je 0x401a89
call sym.operatordelete
mov rdi, qword [rsp + 0x30]
lea rax, [rsp + 0x40]
cmp rdi, rax
je 0x401a9d
call sym.operatordelete
mov rdi, qword [rsp + 0x50]
lea rax, [rsp + 0x60]
cmp rdi, rax
je 0x401ab1
call sym.operatordelete
mov rdi, qword [rsp + 0x90]
lea rax, [rsp + 0xa0]
cmp rdi, rax
je 0x401acb
call sym.operatordelete
mov rax, qword [rsp + 0x18]
lea rdi, [rsp + 0x10]
xor edx, edx
lea rsi, [rax - 1]
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::resize
mov rax, qword [rsp + 0x10]
mov rcx, qword [rsp + 0x18]
jmp 0x401614
lea rdi, [rsp + 0x70]
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
jmp 0x4019f7
lea rdi, [rsp + 0x30]
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
jmp 0x40193e
lea rsi, [rsp + 8]
lea rdi, [rsp + 0x30]
xor edx, edx
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_create
mov rdx, qword [rsp + 8]
mov qword [rsp + 0x30], rax
mov qword [rsp + 0x40], rdx
mov rdx, rbx
mov rsi, rbp
mov rdi, rax
call sym.imp.memcpy
mov rbx, qword [rsp + 8]
mov rax, qword [rsp + 0x30]
jmp 0x4018d7
lea rdi, [rsp + 0x90]
xor edx, edx
mov rsi, rsp
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_create
mov rdx, qword [rsp]
mov qword [rsp + 0x90], rax
mov qword [rsp + 0xa0], rdx
mov rdx, r12
mov rsi, rbp
mov rdi, rax
call sym.imp.memcpy
mov r12, qword [rsp]
mov rdx, qword [rsp + 0x90]
jmp 0x4017c2
movzx eax, byte [rbp]
mov byte [rsp + 0x40], al
lea rax, [rsp + 0x40]
jmp 0x4018d7
movzx edx, byte [rbp]
mov byte [rsp + 0xa0], dl
mov rdx, rax
jmp 0x4017c2
mov esi, 0xf
jmp 0x401906
mov esi, 0xf
jmp 0x4019b3
mov rcx, qword [rax + 0x10]
mov rbx, qword [rax + 0x18]
mov qword [rsp + 0xc0], rcx
mov qword [rsp + 0xc8], rbx
jmp 0x401a2b
mov rcx, qword [rax + 0x10]
mov rbx, qword [rax + 0x18]
mov qword [rsp + 0x80], rcx
mov qword [rsp + 0x88], rbx
jmp 0x40196c
mov edi, 0xf
jmp 0x4019dd
mov edi, 0xf
jmp 0x401927
mov edi, 0x40306a
call sym.std::__throw_length_error
mov edi, 0x40306a
call sym.std::__throw_length_error
call sym.imp.__stack_chk_fail
mov edi, 0x40306a
call sym.std::__throw_length_error
mov rdx, rbx
mov esi, 0x40307f
mov edi, str._s:___pos__which_is__zu____this__size____which_is__zu_
xor eax, eax
call sym.std::__throw_out_of_range_fmt
mov rdi, qword [rsp + 0x70]
mov rbx, rax
lea rax, [rsp + 0x80]
cmp rdi, rax
je 0x401c67
call sym.operatordelete
mov rdi, qword [rsp + 0x30]
lea rax, [rsp + 0x40]
cmp rdi, rax
je 0x401892
call sym.operatordelete
jmp 0x401892
mov rbx, rax
jmp 0x401c67
nop dword [rax]
push r15
push r14
push r13
push r12
push rbp
push rbx
mov rbp, rsi
sub rsp, 0x188
mov rsi, qword [rsi]
mov rax, qword fs:[0x28]
mov qword [rsp + 0x178], rax
xor eax, eax
mov qword [rsp + 8], rdi
mov eax, dword [rsi + 4]
mov edi, dword [rsi]
mov edx, dword [rsi + 8]
mov r8d, dword [rsi + 0xc]
mov ecx, dword [rsi + 0x10]
add eax, edi
add eax, edx
add eax, r8d
add eax, ecx
add eax, dword [rsi + 0x14]
cmp r8d, edi
je 0x401ec8
cmp edx, dword [rsi + 0x14]
je 0x402ab8
cmp ecx, dword [rsi + 4]
je 0x401fb8
mov rbx, qword [rbp + 8]
xor ecx, ecx
mov qword [rsp + 0x50], 0
mov qword [rsp + 0x58], 0
mov qword [rsp + 0x60], 0
sub rbx, rsi
mov rdx, rbx
mov r12, rbx
sar rdx, 2
test rdx, rdx
mov rax, rdx
je 0x401d5e
movabs rax, 0x3fffffffffffffff
cmp rdx, rax
ja 0x402f12
mov rdi, rbx
call sym.operatornew
mov rsi, qword [rbp]
mov rdx, qword [rbp + 8]
mov rcx, rax
sub rdx, rsi
mov rax, rdx
mov r12, rdx
sar rax, 2
add rbx, rcx
test rax, rax
mov qword [rsp + 0x50], rcx
mov qword [rsp + 0x58], rcx
mov qword [rsp + 0x60], rbx
jne 0x4020d0
lea rdx, [rcx + r12]
lea rsi, [rsp + 0x50]
lea rdi, [rsp + 0x70]
mov qword [rsp + 0x58], rdx
call sym.calc2_abi:cxx11_
mov rdi, qword [rsp + 0x50]
test rdi, rdi
je 0x401da0
call sym.operatordelete
lea rdi, [rsp + 0x70]
mov esi, 0x40309d
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::compare
test eax, eax
je 0x402088
mov rax, qword [rsp + 0x78]
mov rdx, qword [rsp + 0x70]
test rax, rax
mov rcx, rax
je 0x4022de
lea rax, [rsp + 0x100]
mov r12d, 1
xor ebx, ebx
lea r15, [rsp + 0x140]
mov qword [rsp + 0x10], rax
jmp 0x401e10
nop dword [rax]
cmp al, 0x59
je 0x402338
cmp al, 0x42
je 0x4025d8
movsxd rbx, r12d
add r12d, 1
cmp rbx, rcx
jae 0x4022d9
lea r13, [rdx + rbx]
movzx eax, byte [r13]
cmp al, 0x52
jne 0x401df0
mov rsi, qword [rbp]
mov eax, dword [rsi + 0xc]
test eax, eax
jle 0x401e00
sub eax, 1
cmp rcx, rbx
mov dword [rsi + 0xc], eax
jb 0x402ec8
sub rcx, rbx
lea rax, [rsp + 0xc0]
cmp rcx, 0xf
mov rbx, rcx
mov qword [rsp + 0x28], rcx
mov qword [rsp + 0xb0], rax
ja 0x4028b0
cmp rcx, 1
je 0x402998
test rcx, rcx
mov rdx, rax
jne 0x402d6c
mov qword [rsp + 0xb8], rbx
mov byte [rdx + rbx], 0
movsxd rbx, r12d
cmp qword [rsp + 0x78], rbx
mov r14, qword [rsp + 0x70]
mov r13, rbx
cmovbe r13, qword [rsp + 0x78]
lea rax, [rsp + 0xa0]
mov qword [rsp + 0x90], rax
mov rax, r14
add rax, r13
je 0x4020e8
test r14, r14
jne 0x4020e8
mov edi, str.basic_string::_M_construct_null_not_valid
call sym.std::__throw_logic_error
nop dword [rax + rax]
add r8d, r8d
cmp eax, r8d
jne 0x401ce3
lea r13, [rsp + 0x150]
mov byte [rsp + 0x160], 0
mov ecx, dword [rsi]
xor ebx, ebx
mov qword [rsp + 0x158], 0
movabs r12, 0x7fffffffffffffff
lea rax, [r13 + 0x10]
test ecx, ecx
mov qword [rsp + 0x150], rax
jg 0x401f2d
jmp 0x402d30
nop dword [rax + rax]
mov rax, r12
sub rax, qword [rsp + 0x158]
cmp rax, 1
jbe 0x402e40
mov edx, 2
mov esi, 0x403094
mov rdi, r13
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
mov rax, qword [rbp]
add ebx, 1
cmp dword [rax], ebx
jg 0x401f18
mov rsi, qword [rsp + 8]
mov rax, qword [rsp + 0x150]
add r13, 0x10
lea rdx, [rsi + 0x10]
cmp rax, r13
mov qword [rsi], rdx
je 0x402d3f
mov qword [rsi], rax
mov rax, qword [rsp + 0x160]
mov qword [rsi + 0x10], rax
mov rax, qword [rsp + 0x158]
mov qword [rsi + 8], rax
mov rax, rsi
mov rsi, qword [rsp + 0x178]
xor rsi, qword fs:[0x28]
jne 0x402e90
add rsp, 0x188
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop word [rax + rax]
add ecx, ecx
cmp eax, ecx
jne 0x401cf5
lea r13, [rsp + 0x150]
mov byte [rsp + 0x160], 0
xor ebx, ebx
mov qword [rsp + 0x158], 0
movabs r12, 0x7fffffffffffffff
lea rax, [r13 + 0x10]
mov qword [rsp + 0x150], rax
mov eax, dword [rsi + 0x10]
test eax, eax
jg 0x40201d
jmp 0x402e05
nop word [rax + rax]
mov rax, r12
sub rax, qword [rsp + 0x158]
cmp rax, 1
jbe 0x402e19
mov edx, 2
mov esi, 0x40309a
mov rdi, r13
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
mov rax, qword [rbp]
add ebx, 1
cmp dword [rax + 0x10], ebx
jg 0x402008
mov rsi, qword [rsp + 8]
mov rax, qword [rsp + 0x150]
add r13, 0x10
lea rdx, [rsi + 0x10]
cmp rax, r13
mov qword [rsi], rdx
jne 0x401f6b
mov rbx, qword [rsp + 8]
mov rax, qword [rsp + 0x160]
mov rdx, qword [rsp + 0x168]
mov qword [rbx + 0x10], rax
mov rsi, rbx
mov qword [rbx + 0x18], rdx
jmp 0x401f7a
nop dword [rax]
mov rbx, qword [rsp + 8]
lea rdx, [rsp + 0x80]
mov rax, rbx
add rax, 0x10
mov qword [rbx], rax
mov rax, qword [rsp + 0x70]
cmp rax, rdx
je 0x402dc5
mov qword [rbx], rax
mov rax, qword [rsp + 0x80]
mov rsi, rbx
mov qword [rbx + 0x10], rax
mov rax, qword [rsp + 0x78]
mov qword [rsi + 8], rax
mov rax, rsi
jmp 0x401f89
mov rdi, rcx
mov rdx, r12
call sym.imp.memmove
mov rcx, rax
jmp 0x401d79
nop dword [rax + rax]
cmp r13, 0xf
mov qword [rsp + 0x30], r13
ja 0x402860
cmp r13, 1
je 0x4029b0
test r13, r13
lea rax, [rsp + 0xa0]
jne 0x402d64
mov qword [rsp + 0x98], r13
mov byte [rax + r13], 0
movabs rax, 0x7fffffffffffffff
cmp qword [rsp + 0x98], rax
je 0x402e60
lea rdi, [rsp + 0x90]
mov edx, 1
mov esi, 0x403095
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
mov qword [rsp + 0x130], r15
mov rcx, qword [rax]
lea rdx, [rax + 0x10]
cmp rcx, rdx
je 0x402bb8
mov qword [rsp + 0x130], rcx
mov rcx, qword [rax + 0x10]
mov qword [rsp + 0x140], rcx
mov rcx, qword [rax + 8]
mov qword [rsp + 0x138], rcx
mov qword [rax], rdx
mov byte [rax + 0x10], 0
mov rcx, qword [rsp + 0x130]
mov qword [rax + 8], 0
mov r8, qword [rsp + 0x138]
mov rdx, qword [rsp + 0xb8]
cmp rcx, r15
lea rax, [r8 + rdx]
je 0x4029d0
mov rsi, qword [rsp + 0x140]
cmp rax, rsi
mov rsi, qword [rsp + 0xb0]
jbe 0x402320
lea rdi, [rsp + 0xc0]
cmp rsi, rdi
je 0x402c18
mov rdi, qword [rsp + 0xc0]
cmp rax, rdi
ja 0x402320
lea rdi, [rsp + 0xb0]
xor edx, edx
xor esi, esi
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_replace
lea r13, [rsp + 0x150]
lea rdx, [r13 + 0x10]
mov qword [rsp + 0x150], rdx
mov rcx, qword [rax]
lea rdx, [rax + 0x10]
cmp rcx, rdx
je 0x402b98
mov qword [rsp + 0x150], rcx
mov rcx, qword [rax + 0x10]
mov qword [rsp + 0x160], rcx
mov rcx, qword [rax + 8]
lea rdi, [rsp + 0x70]
mov rsi, r13
add r13, 0x10
mov qword [rsp + 0x158], rcx
mov qword [rax], rdx
mov qword [rax + 8], 0
mov byte [rax + 0x10], 0
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
mov rdi, qword [rsp + 0x150]
cmp rdi, r13
je 0x40227c
call sym.operatordelete
mov rdi, qword [rsp + 0x130]
cmp rdi, r15
je 0x40228e
call sym.operatordelete
mov rdi, qword [rsp + 0x90]
lea rax, [rsp + 0xa0]
cmp rdi, rax
je 0x4022a8
call sym.operatordelete
mov rdi, qword [rsp + 0xb0]
lea rax, [rsp + 0xc0]
cmp rdi, rax
je 0x4022c2
call sym.operatordelete
mov rcx, qword [rsp + 0x78]
add r12d, 1
mov rdx, qword [rsp + 0x70]
cmp rbx, rcx
jb 0x401e10
mov rax, qword [rsp + 0x78]
mov rbx, qword [rsp + 8]
mov rcx, rbx
add rcx, 0x10
mov qword [rbx], rcx
lea rcx, [rsp + 0x80]
cmp rdx, rcx
je 0x402de5
mov qword [rbx], rdx
mov rdx, qword [rsp + 0x80]
mov rsi, rbx
mov qword [rbx + 0x10], rdx
mov qword [rsi + 8], rax
mov rax, rsi
jmp 0x401f89
nop dword [rax]
lea rdi, [rsp + 0x130]
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
jmp 0x402206
nop word [rax + rax]
mov rsi, qword [rbp]
mov eax, dword [rsi + 0x14]
test eax, eax
jle 0x401e00
sub eax, 1
cmp rcx, rbx
mov dword [rsi + 0x14], eax
jb 0x402ee8
lea r14, [rsp + 0x110]
sub rcx, rbx
cmp rcx, 0xf
mov rbx, rcx
mov qword [rsp + 0x38], rcx
lea rax, [r14 + 0x10]
mov qword [rsp + 0x110], rax
ja 0x402950
cmp rcx, 1
je 0x402a80
test rcx, rcx
mov rdx, rax
jne 0x402da5
lea rax, [rsp + 0xe0]
mov qword [rsp + 0x118], rbx
mov byte [rdx + rbx], 0
movsxd rbx, r12d
cmp qword [rsp + 0x78], rbx
mov qword [rsp + 0xd0], rax
mov r13, rbx
mov rax, qword [rsp + 0x70]
cmovbe r13, qword [rsp + 0x78]
mov rsi, rax
mov qword [rsp + 0x18], rax
add rsi, r13
je 0x4023e8
test rax, rax
jne 0x4023e8
mov edi, str.basic_string::_M_construct_null_not_valid
call sym.std::__throw_logic_error
nop dword [rax + rax]
cmp r13, 0xf
mov qword [rsp + 0x40], r13
ja 0x402900
cmp r13, 1
je 0x402a98
test r13, r13
lea rax, [rsp + 0xe0]
jne 0x402dad
mov qword [rsp + 0xd8], r13
mov byte [rax + r13], 0
movabs rax, 0x7fffffffffffffff
cmp qword [rsp + 0xd8], rax
je 0x402e95
lea rdi, [rsp + 0xd0]
mov edx, 1
mov esi, 0x403098
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
mov qword [rsp + 0x130], r15
mov rcx, qword [rax]
lea rdx, [rax + 0x10]
cmp rcx, rdx
je 0x402c28
mov qword [rsp + 0x130], rcx
mov rcx, qword [rax + 0x10]
mov qword [rsp + 0x140], rcx
mov rcx, qword [rax + 8]
mov qword [rsp + 0x138], rcx
mov byte [rax + 0x10], 0
mov qword [rax], rdx
mov rcx, qword [rsp + 0x130]
mov qword [rax + 8], 0
mov r8, qword [rsp + 0x138]
mov rdx, qword [rsp + 0x118]
cmp rcx, r15
lea rax, [r8 + rdx]
je 0x402b88
mov rsi, qword [rsp + 0x140]
cmp rax, rsi
mov rsi, qword [rsp + 0x110]
jbe 0x4025c0
lea rdi, [r14 + 0x10]
cmp rsi, rdi
je 0x402c68
mov rdi, qword [rsp + 0x120]
cmp rax, rdi
ja 0x4025c0
xor edx, edx
xor esi, esi
mov rdi, r14
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_replace
lea r13, [rsp + 0x150]
lea rdx, [r13 + 0x10]
mov qword [rsp + 0x150], rdx
mov rcx, qword [rax]
lea rdx, [rax + 0x10]
cmp rcx, rdx
je 0x402c48
mov qword [rsp + 0x150], rcx
mov rcx, qword [rax + 0x10]
mov qword [rsp + 0x160], rcx
mov rcx, qword [rax + 8]
lea rdi, [rsp + 0x70]
mov rsi, r13
add r13, 0x10
mov qword [rsp + 0x158], rcx
mov qword [rax], rdx
mov qword [rax + 8], 0
mov byte [rax + 0x10], 0
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
mov rdi, qword [rsp + 0x150]
cmp rdi, r13
je 0x402573
call sym.operatordelete
mov rdi, qword [rsp + 0x130]
cmp rdi, r15
je 0x402585
call sym.operatordelete
mov rdi, qword [rsp + 0xd0]
lea rax, [rsp + 0xe0]
cmp rdi, rax
je 0x40259f
call sym.operatordelete
mov rdi, qword [rsp + 0x110]
add r14, 0x10
cmp rdi, r14
jne 0x4022bd
jmp 0x4022c2
nop dword [rax]
lea rdi, [rsp + 0x130]
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
jmp 0x4024fd
nop word [rax + rax]
mov rsi, qword [rbp]
mov eax, dword [rsi + 4]
test eax, eax
jle 0x401e00
sub eax, 1
cmp rcx, rbx
mov dword [rsi + 4], eax
jb 0x402f63
sub rcx, rbx
mov qword [rsp + 0x130], r15
cmp rcx, 0xf
mov rbx, rcx
mov qword [rsp + 0x48], rcx
ja 0x4029e0
cmp rcx, 1
je 0x402bd8
test rcx, rcx
mov rax, r15
jne 0x402dbd
mov qword [rsp + 0x138], rbx
mov byte [rax + rbx], 0
movsxd rbx, r12d
cmp qword [rsp + 0x78], rbx
mov rax, qword [rsp + 0x10]
mov r13, rbx
mov r14, qword [rsp + 0x70]
cmovbe r13, qword [rsp + 0x78]
mov qword [rsp + 0xf0], rax
mov rax, r14
add rax, r13
je 0x402670
test r14, r14
jne 0x402670
mov edi, str.basic_string::_M_construct_null_not_valid
call sym.std::__throw_logic_error
nop
cmp r13, 0xf
mov qword [rsp + 0x50], r13
ja 0x402a30
cmp r13, 1
je 0x402bf0
test r13, r13
mov rax, qword [rsp + 0x10]
jne 0x402db5
mov qword [rsp + 0xf8], r13
mov byte [rax + r13], 0
movabs rax, 0x7fffffffffffffff
cmp qword [rsp + 0xf8], rax
je 0x402fb8
lea rdi, [rsp + 0xf0]
mov edx, 1
mov esi, 0x40309b
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
lea r14, [rsp + 0x110]
lea rdx, [r14 + 0x10]
mov qword [rsp + 0x110], rdx
mov rcx, qword [rax]
lea rdx, [rax + 0x10]
cmp rcx, rdx
je 0x402c78
mov qword [rsp + 0x110], rcx
mov rcx, qword [rax + 0x10]
mov qword [rsp + 0x120], rcx
mov rcx, qword [rax + 8]
lea rsi, [r14 + 0x10]
mov qword [rsp + 0x118], rcx
mov byte [rax + 0x10], 0
mov qword [rax], rdx
mov rcx, qword [rsp + 0x110]
mov qword [rax + 8], 0
mov r8, qword [rsp + 0x118]
mov rdx, qword [rsp + 0x138]
cmp rcx, rsi
lea rax, [r8 + rdx]
je 0x402c08
mov rsi, qword [rsp + 0x120]
cmp rax, rsi
mov rsi, qword [rsp + 0x130]
jbe 0x402850
cmp rsi, r15
je 0x402cb8
mov rdi, qword [rsp + 0x140]
cmp rax, rdi
ja 0x402850
lea rdi, [rsp + 0x130]
xor edx, edx
xor esi, esi
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_replace
lea r13, [rsp + 0x150]
lea rdx, [r13 + 0x10]
mov qword [rsp + 0x150], rdx
mov rcx, qword [rax]
lea rdx, [rax + 0x10]
cmp rcx, rdx
je 0x402c98
mov qword [rsp + 0x150], rcx
mov rcx, qword [rax + 0x10]
mov qword [rsp + 0x160], rcx
mov rcx, qword [rax + 8]
lea rdi, [rsp + 0x70]
mov rsi, r13
add r13, 0x10
mov qword [rsp + 0x158], rcx
mov qword [rax], rdx
mov qword [rax + 8], 0
mov byte [rax + 0x10], 0
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::swap
mov rdi, qword [rsp + 0x150]
cmp rdi, r13
je 0x402809
call sym.operatordelete
mov rdi, qword [rsp + 0x110]
add r14, 0x10
cmp rdi, r14
je 0x40281f
call sym.operatordelete
mov rdi, qword [rsp + 0xf0]
cmp rdi, qword [rsp + 0x10]
je 0x402833
call sym.operatordelete
mov rdi, qword [rsp + 0x130]
cmp rdi, r15
jne 0x4022bd
jmp 0x4022c2
nop dword [rax]
mov rdi, r14
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
jmp 0x402793
nop dword [rax]
lea rsi, [rsp + 0x30]
lea rdi, [rsp + 0x90]
xor edx, edx
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_create
mov rdi, rax
mov qword [rsp + 0x90], rax
mov rax, qword [rsp + 0x30]
mov qword [rsp + 0xa0], rax
mov rdx, r13
mov rsi, r14
call sym.imp.memcpy
mov r13, qword [rsp + 0x30]
mov rax, qword [rsp + 0x90]
jmp 0x402112
nop dword [rax]
lea rsi, [rsp + 0x28]
lea rdi, [rsp + 0xb0]
xor edx, edx
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_create
mov rdi, rax
mov qword [rsp + 0xb0], rax
mov rax, qword [rsp + 0x28]
mov qword [rsp + 0xc0], rax
mov rdx, rbx
mov rsi, r13
call sym.imp.memcpy
mov rbx, qword [rsp + 0x28]
mov rdx, qword [rsp + 0xb0]
jmp 0x401e72
nop dword [rax]
lea rsi, [rsp + 0x40]
lea rdi, [rsp + 0xd0]
xor edx, edx
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_create
mov rdi, rax
mov qword [rsp + 0xd0], rax
mov rax, qword [rsp + 0x40]
mov qword [rsp + 0xe0], rax
mov rsi, qword [rsp + 0x18]
mov rdx, r13
call sym.imp.memcpy
mov r13, qword [rsp + 0x40]
mov rax, qword [rsp + 0xd0]
jmp 0x402412
nop dword [rax + rax]
lea rsi, [rsp + 0x38]
xor edx, edx
mov rdi, r14
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_create
mov rdi, rax
mov qword [rsp + 0x110], rax
mov rax, qword [rsp + 0x38]
mov qword [rsp + 0x120], rax
mov rdx, rbx
mov rsi, r13
call sym.imp.memcpy
mov rbx, qword [rsp + 0x38]
mov rdx, qword [rsp + 0x110]
jmp 0x402395
nop dword [rax]
movzx edx, byte [r13]
mov byte [rsp + 0xc0], dl
mov rdx, rax
jmp 0x401e72
nop dword [rax]
movzx eax, byte [r14]
mov byte [rsp + 0xa0], al
lea rax, [rsp + 0xa0]
jmp 0x402112
nop dword [rax + rax]
mov esi, 0xf
jmp 0x4021c2
nop word [rax + rax]
lea rsi, [rsp + 0x48]
lea rdi, [rsp + 0x130]
xor edx, edx
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_create
mov rdi, rax
mov qword [rsp + 0x130], rax
mov rax, qword [rsp + 0x48]
mov qword [rsp + 0x140], rax
mov rdx, rbx
mov rsi, r13
call sym.imp.memcpy
mov rbx, qword [rsp + 0x48]
mov rax, qword [rsp + 0x130]
jmp 0x402629
nop dword [rax]
lea rsi, [rsp + 0x50]
lea rdi, [rsp + 0xf0]
xor edx, edx
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_create
mov rdi, rax
mov qword [rsp + 0xf0], rax
mov rax, qword [rsp + 0x50]
mov qword [rsp + 0x100], rax
mov rdx, r13
mov rsi, r14
call sym.imp.memcpy
mov r13, qword [rsp + 0x50]
mov rax, qword [rsp + 0xf0]
jmp 0x402697
nop dword [rax]
movzx edx, byte [r13]
mov byte [rsp + 0x120], dl
mov rdx, rax
jmp 0x402395
nop dword [rax]
mov rax, qword [rsp + 0x18]
movzx eax, byte [rax]
mov byte [rsp + 0xe0], al
lea rax, [rsp + 0xe0]
jmp 0x402412
nop dword [rax]
add edx, edx
cmp eax, edx
jne 0x401cec
lea r13, [rsp + 0x150]
mov byte [rsp + 0x160], 0
mov edx, dword [rsi + 8]
xor ebx, ebx
mov qword [rsp + 0x158], 0
movabs r12, 0x7fffffffffffffff
lea rax, [r13 + 0x10]
test edx, edx
mov qword [rsp + 0x150], rax
jg 0x402b1d
jmp 0x402d74
nop word [rax + rax]
mov rax, r12
sub rax, qword [rsp + 0x158]
cmp rax, 1
jbe 0x402e50
mov edx, 2
mov esi, 0x403097
mov rdi, r13
call sym.std::__cxx11::basic_string_char_std::char_traits_char__std::allocator_char__::_M_append
mov rax, qword [rbp]
add ebx, 1
cmp dword [rax + 8], ebx
jg 0x402b08
mov rsi, qword [rsp + 8]
mov rax, qword [rsp + 0x150]
add r13, 0x10
lea rdx, [rsi + 0x10]
cmp rax, r13
mov qword [rsi], rdx
je 0x402d83
mov qword [rsi], rax
mov rax, qword [rsp + 0x160]
mov rcx, rsi
mov qword [rsi + 0x10], rax
mov rax, qword [rsp + 0x158]
mov qword [rcx + 8], rax
mov rax, rcx
jmp 0x401f89
nop word [rax + rax]
mov esi, 0xf
jmp 0x4024c2
nop word [rax + rax]
mov rsi, qword [rax + 0x10]
mov rdi, qword [rax + 0x18]
mov qword [rsp + 0x160], rsi
mov qword [rsp + 0x168], rdi
jmp 0x40223e
nop dword [rax]
mov rsi, qword [rax + 0x10]
mov rdi, qword [rax + 0x18]
mov qword [rsp + 0x140], rsi
mov qword [rsp + 0x148], rdi
jmp 0x40217a
nop dword [rax]
movzx eax, byte [r13]
mov byte [rsp + 0x140], al
mov rax, r15
jmp 0x402629
nop dword [rax]
movzx eax, byte [r14]
mov byte [rsp + 0x100], al
mov rax, qword [rsp + 0x10]
jmp 0x402697
nop dword [rax]
mov esi, 0xf
jmp 0x402757
nop word [rax + rax]
mov edi, 0xf
jmp 0x4021ec
nop word [rax + rax]
mov rsi, qword [rax + 0x10]
mov rdi, qword [rax + 0x18]
mov qword [rsp + 0x140], rsi
mov qword [rsp + 0x148], rdi
jmp 0x40247a
nop dword [rax]
mov rsi, qword [rax + 0x10]
mov rdi, qword [rax + 0x18]
mov qword [rsp + 0x160], rsi
mov qword [rsp + 0x168], rdi
jmp 0x402535
nop dword [rax]
mov edi, 0xf
jmp 0x4024e8
nop word [rax + rax]
mov rsi, qword [rax + 0x10]
mov rdi, qword [rax + 0x18]
mov qword [rsp + 0x120], rsi
mov qword [rsp + 0x128], rdi
jmp 0x40270b
nop dword [rax]
mov rsi, qword [rax + 0x10]
mov rdi, qword [rax + 0x18]
mov qword [rsp + 0x160], rsi
mov qword [rsp + 0x168], rdi
jmp 0x4027cb
nop dword [rax]
mov edi, 0xf
jmp 0x402779
mov rbx, rax
mov rdi, qword [rsp + 0xb0]
lea rax, [rsp + 0xc0]
cmp rdi, rax
je 0x402cdf
call sym.operatordelete
mov rdi, qword [rsp + 0x70]
lea rax, [rsp + 0x80]
cmp rdi, rax
je 0x402cf6
call sym.operatordelete
mov rdi, rbx
call sym.imp._Unwind_Resume
mov rbx, rax
mov rdi, qword [rsp + 0x110]
add r14, 0x10
cmp rdi, r14
jne 0x402cda
jmp 0x402cdf
mov rbx, rax
mov rdi, qword [rsp + 0x130]
lea rax, [rsp + 0x140]
cmp rdi, rax
jne 0x402cda
jmp 0x402cdf
nop
mov rbx, qword [rsp + 8]
mov rax, rbx
add rax, 0x10
mov qword [rbx], rax
mov rcx, qword [rsp + 8]
mov rax, qword [rsp + 0x160]
mov rdx, qword [rsp + 0x168]
mov qword [rcx + 0x10], rax
mov rsi, rcx
mov qword [rcx + 0x18], rdx
jmp 0x401f7a
mov rdi, rax
jmp 0x40288c
mov rdi, rax
jmp 0x4028dc
mov rcx, qword [rsp + 8]
mov rax, rcx
add rax, 0x10
mov qword [rcx], rax
mov rcx, qword [rsp + 8]
mov rax, qword [rsp + 0x160]
mov rdx, qword [rsp + 0x168]
mov qword [rcx + 0x10], rax
mov qword [rcx + 0x18], rdx
jmp 0x402b6e
mov rdi, rax
jmp 0x402977
mov rdi, rax
jmp 0x40292c
mov rdi, rax
jmp 0x402a5c
mov rdi, r15
jmp 0x402a0c
mov rax, qword [rsp + 0x80]
mov rdx, qword [rsp + 0x88]
mov rsi, rbx
mov qword [rbx + 0x10], rax
mov qword [rbx + 0x18], rdx
jmp 0x4020bf
mov rsi, rbx
mov rcx, qword [rsp + 0x80]
mov rbx, qword [rsp + 0x88]
mov qword [rsi + 0x10], rcx
mov qword [rsi + 0x18], rbx
jmp 0x402310
mov rbx, qword [rsp + 8]
mov rax, rbx
add rax, 0x10
mov qword [rbx], rax
jmp 0x40205c
mov edi, 0x40306a
call sym.std::__throw_length_error
mov rdi, qword [rsp + 0x150]
add r13, 0x10
mov rbx, rax
cmp rdi, r13
jne 0x402cf1
jmp 0x402cf6
mov edi, 0x40306a
call sym.std::__throw_length_error
jmp 0x402e23
nop dword [rax]
mov edi, 0x40306a
call sym.std::__throw_length_error
jmp 0x402e23
nop dword [rax]
mov edi, 0x40306a
call sym.std::__throw_length_error
mov rbx, rax
mov rdi, qword [rsp + 0x90]
lea rax, [rsp + 0xa0]
cmp rdi, rax
je 0x402cc5
call sym.operatordelete
jmp 0x402cc5
call sym.imp.__stack_chk_fail
mov edi, 0x40306a
call sym.std::__throw_length_error
mov rbx, rax
mov rdi, qword [rsp + 0xd0]
lea rax, [rsp + 0xe0]
cmp rdi, rax
je 0x402d01
call sym.operatordelete
jmp 0x402d01
nop dword [rax]
mov rdx, rbx
mov esi, 0x40307f
mov edi, str._s:___pos__which_is__zu____this__size____which_is__zu_
xor eax, eax
call sym.std::__throw_out_of_range_fmt
mov rbx, rax
jmp 0x402cdf
nop dword [rax]
mov rdx, rbx
mov esi, 0x40307f
mov edi, str._s:___pos__which_is__zu____this__size____which_is__zu_
xor eax, eax
call sym.std::__throw_out_of_range_fmt
mov rdi, qword [rsp + 0x50]
mov rbx, rax
test rdi, rdi
jne 0x402cf1
jmp 0x402cf6
call sym.std::__throw_bad_alloc
mov rdi, qword [rsp + 0x130]
mov rbx, rax
lea rax, [rsp + 0x140]
cmp rdi, rax
je 0x402ea2
call sym.operatordelete
jmp 0x402ea2
mov rdi, qword [rsp + 0x130]
mov rbx, rax
lea rax, [rsp + 0x140]
cmp rdi, rax
je 0x402e6d
call sym.operatordelete
jmp 0x402e6d
mov rdx, rbx
mov esi, 0x40307f
mov edi, str._s:___pos__which_is__zu____this__size____which_is__zu_
xor eax, eax
call sym.std::__throw_out_of_range_fmt
mov rdi, qword [rsp + 0x110]
add r14, 0x10
mov rbx, rax
cmp rdi, r14
je 0x402f90
call sym.operatordelete
mov rdi, qword [rsp + 0xf0]
lea rax, [rsp + 0x100]
cmp rdi, rax
je 0x402d17
call sym.operatordelete
jmp 0x402d17
mov rbx, rax
jmp 0x402f90
mov edi, 0x40306a
call sym.std::__throw_length_error
nop word cs:[rax + rax]
nop dword [rax]
mov eax, esi
ret
nop word cs:[rax + rax]
nop dword [rax]
push r15
push r14
mov r15d, edi
push r13
push r12
lea r12, [rip + 0x200df6]
push rbp
lea rbp, [rip + 0x200dfe]
push rbx
mov r14, rsi
mov r13, rdx
sub rbp, r12
sub rsp, 8
sar rbp, 3
call sym._init
test rbp, rbp
je 0x403036
xor ebx, ebx
nop dword [rax + rax]
mov rdx, r13
mov rsi, r14
mov edi, r15d
call qword [r12 + rbx*8]
add rbx, 1
cmp rbx, rbp
jne 0x403020
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
nop word cs:[rax + rax]
ret
add byte [rax], al
sub rsp, 8
add rsp, 8
ret
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add al, byte [rax]
push rdx
add byte [rcx], bl
add byte [rdx + 0x61], spl
jae 0x4030d7
movsxd rbx, dword [rdi + 0x73]
je 0x4030e5
imul ebp, dword [rsi + 0x67], 0x70613a3a
jo 0x4030e1
outsb dx, byte [rsi]
add byte fs:[rdx + 0x61], ah
jae 0x4030ec
movsxd rbx, dword [rdi + 0x73]
je 0x4030fa
imul ebp, dword [rsi + 0x67], 0x75733a3a
jae 0x403106
jb 0x403094
push rdx
add byte [r9 + 0x56], r11b
add byte [rdx + 0x4f], al
add byte [rcx + 0x4d], cl
push rax
push r11
push rbx
add byte [r11 + 0x61], r8b
jae 0x403111
and byte [rbx], ah
add byte [rdx], bh
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, 0x5f203a73
pop rdi
jo 0x40312f
jae 0x4030e2
sub byte [rdi + 0x68], dh
imul esp, dword [rbx + 0x68], 0x20736920
and eax, 0x2029757a
and byte ds:[rax + rbp*2 + 0x69], dh
jae 0x403105
jae 0x403144
jp 0x403142
sub byte [rcx], ch
and byte [rax], ch
ja 0x40314b
imul esp, dword [rbx + 0x68], 0x20736920
and eax, 0x29757a
add byte [rdx + 0x61], ah
jae 0x40315d
movsxd rbx, dword [rdi + 0x73]
je 0x40316b
imul ebp, dword [rsi + 0x67], 0x4d5f3a3a
pop rdi
movsxd rbp, dword [rdi + 0x6e]
jae 0x40317a
jb 0x40317d
movsxd rsi, dword [rax + 0x6e]
jne 0x40317a
insb byte [rdi], dx
and byte [rsi + 0x6f], ch
je 0x403134
jbe 0x403177
insb byte [rdi], dx
imul esp, dword [rax + rax], 0
add byte [rcx], al
add dword [rbx], ebx
add edi, dword [rbx]
push rsp
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add al, al
jmp qword [rax - 0x60000000]
ljmp [rax + 1]
loop 0x40313e
clc
add dword [rax], eax
add byte [rax], dh
loop 0x403146
push qword [rax]
add byte [rax], al
xor bl, ah
inc dword [rax]
add dword [rax], eax
add byte [rax - 0x15], dh
call qword [rax + 1]
add byte [rax], al
mov al, 0xfe
dec eax
add byte [rax], al
add al, al
call qword [rax]
add al, byte [rax]
add byte [rax], dh
lcall [rax + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x403197
add dword [rbx], ebx
or al, 7
or byte [rax + 0x14100701], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
mov eax, 0x2affffe1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x4031c7
add dword [rbx], ebx
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
sbb ch, bl
call rax
add dword [rax], eax
add byte [rax], al
adc byte [rsi + 0xe], al
sbb byte [rdx + 0xf], cl
or esi, dword [rdi + 8]
add byte [rax], 0x3f
sbb bh, byte [rbx]
sub dh, byte [rbx]
and al, 0x22
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], r8b
add al, ah
std
inc dword [rbx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x50], edi
push rdx
add byte [rcx], al
js 0x403221
add esp, dword [rax + 0x10]
add byte [rbx], al
sbb ecx, dword [rdi + rax]
or byte [rax + 0x4c000001], dl
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
sub dl, ah
cmp dword [rax], ecx
add byte [rax], al
add al, 0x94
xor eax, dword [rax]
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bf], es
cmp byte [rbx - 0x5ff1b8f9], al
add al, byte [rdx]
cmpsb byte [rsi], byte ptr [rdi]
or cl, byte [rsi]
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rbx + rcx + 0x54], al
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], bl
push qword [rdx]
adc eax, dword [rax]
add byte [rbx + rbx*8], al
xor eax, dword [rax]
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1bf], es
cmp byte [rbx - 0x3ff1b5f9], al
add eax, dword [rbx]
add eax, dword [rbx]
or cl, byte [rsi]
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rdi + 0xb], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add ah, cl
add byte [rax], al
add al, dh
call qword [rdi + 2]
add byte [rax], al
add al, 0x95
xor al, 0x40
add byte [rdx + 0xe], al
adc byte [rsi + 0x180e4202], cl
lea eax, [rbx]
and byte [rsp + rax - 0x79d7f1bf], cl
add eax, 0x83300e41
nop
add dword [rbx], eax
add dword [rdx], ecx
xor byte [rcx + 0xe], al
sub byte [rcx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rdx + 0xb], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
je 0x40331f
add byte [rax], al
add al, ah
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rbp + 0xe], bl
or byte [rax], al
add byte [rax], r8b
add byte [rcx + rax - 0x3580000], cl
jmp qword [rbp]
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b8], es
cmp byte [rbx + 0x400e4d07], al
jb 0x403372
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
adc al, 0
add byte [rax], al
add dword [rax], eax
add al, dl
cld
inc dword [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
lodsb al, byte [rsi]
add bl, byte [rcx + 0x5ce03]
call 0x4038a9
mov cl, 7
add eax, 0xba0007b6
or byte [rip - 0x16fff741], al
or dword [rip - 0x5dffef4c], eax
or eax, dword [rip - 0x74fff003]
or eax, 0x5ce05
movsb byte [rdi], byte ptr [rsi]
or eax, 0xffd05
mov bl, 0xd
add eax, 0xc90010b4
or eax, 0x8bf05
xchg dword [rsi], ecx
test byte [rcx], 0xce
add eax, 0x1ffff00
mov ch, 1
mov cl, 1
add eax, 0x1fc0000
add eax, 0x9a0024ec
add al, byte [rip - 0x51ffdb34]
add al, 5
mov dl, 0x20
add byte [rdx + 0x23ba0505], ch
add byte [rdx + 0x23930507], bl
add byte [rcx + 0x23da0509], bh
add cl, dh
or ch, byte [rdx + rax - 0x31ffda53]
add eax, 0xb90020ee
syscall
and al, 0
call 0xffffffff87420931
and eax, 0x513da00
test byte [rcx], ah
add byte [rsi + 0x26a30514], bh
add dh, bh
adc eax, 0x25e701ca
add bh, bl
add eax, 0xaf0020b2
sbb byte [rip - 0xffdb34], al
sbb byte [rip - 0x35ffdf12], al
sbb dword [rdx + 0x24cc01], ebx
scasd eax, dword [rdi]
sbb eax, dword [rip - 0x65ffde7c]
sbb eax, 0x23ca05
jmp 0x403980
mov fs, word [rbx]
add eax, 0xb5002393
and eax, dword [rip - 0x3affdc46]
and eax, dword [rip - 0x2affdc36]
and eax, dword [rip - 0x75ffdc26]
and al, 5
and al, 0
and al, 0x25
int3
and al, 0
and eax, 0xe2000005
and eax, 0x24cc05
lodsd eax, dword [rsi]
add eax, 0xff0026a3
inc dword [rcx]
and ah, byte [rsi]
cmp eax, dword [rax]
add byte [rax + 0x48d3301], ah
add byte [rbp + 0x4a00502], al
add byte [rcx - 0x4bfe13fe], bl
add al, 0
wait
add al, 5
add byte [rax], al
int 4
add eax, 0x4b4
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], ah
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + rax*2], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 3], ch
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
ror byte [rsi], 0x40
add byte [rax], al
add byte [rax], al
add byte [rip], cl
add byte [rax], al
add byte [rax + rsi + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
cmp eax, 0x60
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
cmp eax, 0x60
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov word [rax + rax], es
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 2], ah
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bl
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bh
ljmp [rdi]
add byte [rax], al
add byte [rax], cl
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
ljmp [rdi]
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
ljmp [rdi]
add byte [rax], al
add byte [rdx + rcx + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dh
add byte [rax], al
add byte [rax], al
add byte [rsi], al
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
cmovo eax, dword es:[rax]
add byte [rax], al
add byte [rax], al
cmovo eax, dword ss:[rax]
add byte [rax], al
add byte [rax], al
cmovo r8d, dword [rax]
add byte [rax], al
add byte [rax], al
push rsi
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
cmovo ax, word [rax]
add byte [rax], al
add byte [rax], al
jbe 0x404069
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x400f], al
add byte [rax], al
add byte [rsi + 0x400f], dl
add byte [rax], al
add byte [rsi + 0x400f], ah
add byte [rax], al
add byte [rsi + 0x400f], dh
add byte [rax], al
add dh, al
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
out 0xf, al
add byte [rax], al
add byte [rax], al
add dh, dh
cmovo eax, dword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte es:[rax], al
add byte [rax], al
add byte [rax], al
adc byte ss:[rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], r8b
add byte [rax], al
add byte [rax], al
push rsi
adc byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
jbe 0x4040ea
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4010], al
add byte [rax], al
add byte [rsi + 0x4010], dl
add byte [rax], al
add byte [rsi + 0x4010], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x43], al
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x404180
je 0x404189
and byte [rip + 0x302e342e], dh
sub eax, 0x75627536
outsb dx, byte [rsi]
je 0x404197
xor dword [rsi + 0x31], edi
xor byte cs:[rsi + rbp], dh
xor al, 0x29
and byte [rip + 0x302e342e], dh
and byte [rdx], dh
xor byte [rcx], dh
xor byte ss:[rsi], dh
xor byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add al, byte [rax]
push rsp
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, dword [rax]
je 0x404194
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], al
cwde
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, 0x4002d000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], al
add byte [rdx + rcx + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or byte [rax], al
or byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], cl
add al, bl
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or al, byte [rax]
and byte [rax + rax*2], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], cl
add al, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], cl
loopne 0x404278
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x4010b000], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], cl
add al, al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
lldt word [rax + rsi + 0x40]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], dl
add byte [rax + 0x30], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], dl
add byte [rax], ah
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc al, byte [rax]
js 0x40432b
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], dl
add byte [rbx + rsi + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc al, 0
call 0x40a36a
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x603df800], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], dl
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], bl
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], bl
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], bl
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0x4013], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add al, al
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte cs:[rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax], al
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rcx], al
add byte [rbx], bl
add byte [rax + 0x43], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add dword [rax], eax
adc eax, 0x603df800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, byte [rax]
add byte [rax], ah
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], al
add byte [rax + rax], dl
call 0x40a502
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x4000000], ah
add cl, dh
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2000000], ch
add byte [rsi], cl
add byte [rax], ah
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add bl, bl
add byte [rax], al
add byte [rcx], al
add byte [rbx], bl
add byte [rcx + 0x43], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ch
add byte [rax], al
add byte [rcx], al
add byte [rdx], dl
add byte [rax + 0x4033], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rcx], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
and byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add dword [rax], eax
add byte [rcx], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 1], ch
add byte [rax + rax], dl
clc
cmp eax, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword ds:[rax], eax
add byte [rax], al
add byte [rax + rax], dl
call 0x40a60a
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 1], dl
add byte [rax], al
add dword [rax], eax
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 4], cl
add byte [rax], al
and byte [rax], al
sbb al, byte [rax]
clc
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 1], bl
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
and byte [rcx + 0x60], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax + 1], dh
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
wait
add dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x12000001], dh
add byte [rsi], cl
add byte [rax + 0x30], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 4], cl
add byte [rax], al
adc al, byte [rax]
add byte [rax + 0x13], dl
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, al
add dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ah
add dword [rax], eax
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bl
add al, byte [rax]
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add al, byte [rax]
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x12000002], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 2], dl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + rax + 0x120000], bh
lldt word [rax + rsi + 0x40]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dl
add al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x12000000], bh
add byte [rsi], cl
add byte [rax + 0x14], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], bh
or byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bh
add al, byte [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 3], cl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push 3
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test byte [rbx], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fld qword [rbx]
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
mov al, 0xf
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add al, 0
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add al, 0
add byte [rcx], dl
add byte [rax], dl
add byte [rax + 0x30], ah
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub eax, 0x20000004
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 4], al
add byte [rax], al
adc byte [rax], al
sbb al, byte [rax]
clc
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rax], dl
add byte [rcx], dl
add bl, byte [rdx]
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 4], ah
add byte [rax], al
adc dword [rax], eax
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdi + 4], dh
add byte [rax], al
adc dword [rdx], eax
sbb al, byte [rax]
add byte [rcx + 0x60], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsp + rax + 0x120000], al
add al, ah
add byte [rax], al
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, esp
add al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ah
add al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 5], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rsi
add eax, 0x100000
sbb eax, dword [rax]
or byte [rcx + 0x60], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 5], ah
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jge 0x404927
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cdq
add eax, 0x120000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov cl, 5
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fild dword [rip + 0x120000]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp dword [rcx], eax
add byte [rax], al
adc byte [rax], al
sbb eax, dword [rax]
pop rax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x12000006], al
add byte [rsi], cl
add byte [rax + 0x401c], dl
add byte [rax], al
add byte [rdx], dh
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x12000006], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
add byte [rax], al
adc byte [rax], al
sbb al, byte [rax]
or byte [rcx + 0x60], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
int1
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 7
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 7
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor eax, 0x12000007
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 7], cl
add byte [rax], al
and al, byte [rax]
add al, dl
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 7], ah
add byte [rax], al
adc al, byte [rax]
add al, al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
push rdi
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x12000004], cl
add byte [rbx], cl
add al, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsxd rsi, dword [rdx + 0x74]
jae 0x404b32
jne 0x404b26
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
pop rdi
pop rdi
add byte [rbp + 0x72], ah
imul esi, dword gs:[ebx + 0x74], 0x745f7265
insd dword [rdi], dx
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x404ae6
pop rdi
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x404b64
jb 0x404b6a
pop rdi
jne 0x404b73
add byte [rbx + 0x6f], ah
insd dword [rdi], dx
jo 0x404b6d
je 0x404b69
xor eax, 0x5f003538
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x404b89
jb 0x404b8f
pop rdi
jne 0x404b98
pop rdi
imul bp, word [rsi + 0x69], 0x615f
jb 0x404b9b
jns 0x404b8b
outsb dx, byte gs:[rsi]
je 0x404ba2
jns 0x404b32
jb 0x404b96
insd dword [rdi], dx
pop rdi
jne 0x404ba8
insd dword [rdi], dx
jns 0x404b3e
pop rdi
pop rdi
jb 0x404ba4
insd dword [rdi], dx
pop rdi
jne 0x404bb6
insd dword [rdi], dx
jns 0x404bab
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x404bb6
jns 0x404bb6
outsb dx, byte gs:[rsi]
je 0x404bcd
jns 0x404b5d
movsxd rsi, dword cs:[rax + 0x70]
add byte [rdi + 0x47], bl
pop rdi
pop rdi
jae 0x404be3
pop rdi
pop r15
pop rdi
pop rdx
xor eax, 0x636c6163
xor al, byte [rdx + 0x35]
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
push rbx
je 0x404bba
jbe 0x404beb
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
add byte [rdi + 0x5a], bl
push rbx
je 0x404be4
cmp byte [rdi + 0x5f], bl
imul ebp, dword [rdi + 0x69], 0x74696e
pop rdi
pop rdi
push rdx
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push r10
pop rdi
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push rbp
pop rdi
pop rdi
push rdx
pop r15
push rdx
add byte [rdi + 0x47], bl
pop rdi
push rbx
push r12
pop rdi
push rsp
pop r15
add byte [rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x404c51
jns 0x404c51
outsb dx, byte gs:[rsi]
add byte fs:[rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x404c62
jns 0x404c62
jae 0x404c79
jb 0x404c7c
add byte [rdi + 0x44], bl
pop rcx
add byte [r15 + 0x5a], bl
push rbx
je 0x404c4a
movsxd rbp, dword [rcx + 0x6e]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x404c5f
xor byte [rdi + 0x5f], bl
je 0x404c9a
jb 0x404ca3
ja 0x404c95
insb byte [rdi], dx
outsb dx, byte gs:[rsi]
je 0x404ca4
pop rdi
jb 0x404cb2
outsd dx, dword [rsi]
jb 0x404c93
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
outsd dx, dword [rsi]
insb byte [rdi], dx
jae 0x404ca0
imul eax, dword [rax + 0x40], 0x42494c47
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul bp, word [rsi + 0x69], 0x5f00
pop rdx
push rbx
je 0x404cb0
pop rdi
pop rdi
je 0x404cec
jb 0x404cf5
ja 0x404ce7
pop rdi
movsxd rsp, dword [rcx + 0x73]
je 0x404d07
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x404cd6
xor al, 0x5f
pop rdi
je 0x404d11
jb 0x404d1a
ja 0x404d0c
outsd dx, dword [rsi]
jne 0x404d24
pop rdi
outsd dx, dword [rsi]
pop di
jb 0x404d17
outsb dx, byte [rsi]
pop rdi
insw word [rdi], dx
je 0x404d0e
movsxd rdi, dword [r10 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rax]
add byte [rdi + 0x5f], bl
insd dword [edi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x404d4f
jb 0x404d52
pop rdi
pop rdi
add byte [rdi + 0x4a], bl
jbe 0x404d44
push rdx
imul esi, dword gs:[ebx + 0x74], 0x6c437265
jae 0x404d65
jae 0x404cf5
pop rdi
pop rdx
insb byte [rdi], dx
push rax
jbe 0x404d3c
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push r11
je 0x404d45
movsxd rsi, dword [rcx + rdi*2 + 0x70]
movsxd rax, dword gs:[r13 + 0x31]
xor ebx, dword [rdi + 0x4d]
pop rdi
ja 0x404d88
outsb dx, byte gs:[rsi]
pop rdi
imul ebp, dword [rsi + 0x69], 0x40764574
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dword [rcx], esi
add byte [rdi + 0x5a], bl
push rbx
je 0x404d77
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x404db6
movsxd rbx, dword [rdi + 0x73]
je 0x404dc4
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x404dbf
je 0x404dd4
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp dword [rdi + 0x4d], ebx
pop rdi
movsxd rsi, dword [rdx + 0x65]
je 0x404dde
push r10
insd dword [rdi], dx
insd dword [rdi], dx
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x404dcc
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rbx + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x404df0
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x404e2f
movsxd rbx, dword [rdi + 0x73]
je 0x404e3d
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x404e38
je 0x404e4d
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
jb 0x404e50
jae 0x404e56
jp 0x404e54
insd dword [rdi], dx
movsxd rax, dword [rax + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5f], bl
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x6174735f
jb 0x404e83
pop rdi
insd dword [rdi], dx
imul ebp, dword [rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x635f5f00
js 0x404e88
pop rdi
je 0x404e90
js 0x404e96
je 0x404e6f
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
je 0x404e79
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x404eb8
movsxd rbx, dword [rdi + 0x73]
je 0x404ec6
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x404ec1
je 0x404ed6
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor dword [rax], esi
pop rdi
pop r15
jb 0x404edd
jo 0x404ee6
movsxd rsp, dword [rbp + 0x45]
insd dword [rdi], dx
insd dword [rdi], dx
push rax
movsxd rbp, dword [r13 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x404ed3
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rsp + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
push r12
pop r15
jb 0x404f28
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x49], bl
pop r15
jae 0x404f50
imul ebp, dword fs:[rsi + 0x5f], 0x64657375
add byte [rdi + 0x49], bl
push rsp
pop r15
jb 0x404f51
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5f], bl
je 0x404f66
pop rdi
jae 0x404f7c
jb 0x404f7f
add byte [rdi + 0x5f], bl
push rsp
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
push rbx
je 0x404f51
movsxd rbp, dword [rdi + 0x75]
je 0x404f62
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdi
jae 0x404fa3
pop rdi
push 0x6c646e61
add byte gs:[rdi + 0x5f], bl
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul ebp, dword [rsi + 0x69], 0x5a5f0074
push rbx
je 0x404f89
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x404fc8
movsxd rbx, dword [rdi + 0x73]
je 0x404fd6
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x404fd1
je 0x404fe6
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
xor al, 0x73
ja 0x404fe6
jo 0x404fcc
push rdx
push rbx
xor al, 0x5f
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x404fd2
pop rdi
pop rdi
outsd dx, dword [rsi]
jae 0x40501b
jb 0x40500e
insd dword [rdi], dx
pop rdi
imul ebp, dword [rsi + 0x73], 0x49747265
movsxd rdx, dword [rbx + 0x74]
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40501c
je 0x405031
imul esi, dword [rbx + rsi*2 + 0x49], 0x52454563
push rbx
je 0x404ffc
xor esp, dword [rdx + 0x61]
jae 0x405039
movsxd rbx, dword [rdi + 0x6f]
jae 0x405049
jb 0x40503c
insd dword [rdi], dx
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push rbx
pop rdi
push rax
push r11
xor ebx, dword [rdi + 0x6c]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
cmp dword [rax], eax
insd dword [rdi], dx
insd dword [rdi], dx
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x405065
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x625f5f00
jae 0x405086
pop rdi
jae 0x40508a
jb 0x40508d
add byte [rdi + 0x5a], bl
push rbx
outsd dx, dword [rsi]
xor eax, 0x73756c66
push 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdi
jae 0x4050ad
movsxd rbp, dword [rbx + 0x5f]
movsxd rbp, dword [rax + 0x6b]
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
imul esi, dword [rdx + 0x73], 0x40695245
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40509f
cmp dword [rdi + 0x5f], ebx
je 0x4050db
jb 0x4050e4
ja 0x4050d6
insb byte [rdi], dx
outsd dx, dword [rsi]
imul esp, dword [ebx + 0x5f], 0x6f727265
jb 0x4050d3
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push r11
je 0x4050d1
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x405110
movsxd rbx, dword [rdi + 0x73]
je 0x40511e
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x405119
je 0x40512e
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
movsxd rbp, dword [rdi + 0x6d]
jo 0x405130
jb 0x405136
push r8
movsxd rax, dword [r8 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
push rbx
je 0x405123
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
xor dword [rdx], esi
jae 0x405162
movsxd rbx, dword [rdi + 0x73]
je 0x405170
imul ebp, dword [rsi + 0x67], 0x74536349
xor dword [rcx], esi
movsxd rbp, dword [rax + 0x61]
jb 0x40516b
je 0x405180
imul esi, dword [rbx + rsi*2 + 0x49], 0x61534563
movsxd rax, dword [r13 + 0x45]
cmp dword [rdi + 0x4d], ebx
pop rdi
jo 0x405192
outsb dx, byte gs:[rsi]
push r8
movsxd rbp, dword [r13 + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0x2e
xor dh, byte [rcx]
add byte [rdi + 0x5a], bl
xor al, 0x63
insb byte [rdi], dx
movsxd rax, dword [rdx + 0x35]
movsxd rdi, dword [rax + 0x78]
xor dword [rcx], esi
push rbx
je 0x405182
jbe 0x4051b3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
imul rdx, qword [r11 + 0x61], 0x45456949
add byte [rdi + 0x5a], bl
push rbx
je 0x405191
pop rdi
pop rdi
je 0x4051cd
jb 0x4051d6
ja 0x4051c8
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsi, dword [rsi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
je 0x4051e8
add byte [rdi + 0x5f], bl
js 0x405205
pop rdi
jo 0x4051f5
jb 0x405205
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
imul esi, dword [rcx + rdi*2 + 0x5f], 0x40403076
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
outsb dx, byte [rsi]
ja 0x40521b
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
push rbp
outsb dx, byte [rsi]
ja 0x40522a
outsb dx, byte [rsi]
pop rdi
push rdx
jae 0x40523d
insd dword [rdi], dx
pop r15
xor ebp, dword [rsi]
xor byte [rax], al
pop rdi
pop rdx
push rbx
outsd dx, dword [rsi]
xor esi, dword [rax + 0x75]
je 0x405223
movsxd rax, dword [rax + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
insd dword [rdi], dx
insd dword [rdi], dx
movsxd rsi, dword [rax + 0x79]
pop r15
xor ch, byte [rsi]
xor dword [rax + rax], esi
pop rdi
pop rdx
push r11
je 0x40523c
movsxd rsi, dword [rcx + rdi*2 + 0x70]
movsxd rax, dword gs:[r13 + 0x38]
outsd dx, dword fs:[rsi]
pop rdi
ja 0x40527e
outsb dx, byte gs:[rsi]
movsxd r8, dword [r8]
insd dword [rdi], dx
imul ebp, dword [rsi], 0x79732e00
insd dword [rdi], dx
je 0x405288
add byte [rsi], ch
jae 0x4052a0
jb 0x4052a2
add byte [rsi], ch
jae 0x40529c
jae 0x4052aa
jb 0x4052ac
add byte [rsi], ch
imul ebp, dword [rsi + 0x74], 0x707265
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x4052ad
sub rax, 0x676174
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x4052bb
outsb dx, byte cs:[esi]
jne 0x405289
jne 0x4052c7
insb byte [rdi], dx
sub eax, 0x2e006469
outsb dx, byte [esi]
jne 0x405297
push 0x687361
jns 0x4052e0
jae 0x4052ed
insd dword [rdi], dx
add byte [rsi], ch
jns 0x4052e8
jae 0x4052f0
jb 0x40527e
outsb dx, byte cs:[esi]
jne 0x4052b1
jbe 0x4052ea
jb 0x4052fa
imul ebp, dword [rdi + 0x6e], 0x6e672e00
jne 0x4052be
jbe 0x4052f7
jb 0x405307
imul ebp, dword [rdi + 0x6e], 0x2e00725f
jb 0x405302
insb byte [rdi], dx
jns 0x405311
add byte [rsi], ch
jb 0x40530c
insb byte [rdi], dx
jo 0x405318
je 0x4052ae
imul ebp, dword cs:[rsi + 0x69], 0x702e0074
insb byte [rdi], dx
je 0x4052e7
outsd dx, dword [esi]
je 0x4052bd
je 0x405325
js 0x405336
add byte [rsi], ch
imul bp, word [rsi + 0x69], 0x2e00
jb 0x40533b
je 0x405331
add byte [rsi], ch
push 0x6172665f
insd dword [rdi], dx
pop rdi
push 0x2e007264
push 0x6172665f
insd dword [rdi], dx
add byte gs:[rsi], ch
movsxd rsp, dword [ebx + 0x5f]
js 0x405354
jo 0x405368
pop rdi
je 0x405358
insb byte [rdi], dx
add byte gs:[rsi], ch
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x405366
jns 0x405307
imul bp, word cs:[rsi + 0x69], 0x615f
jb 0x405382
jns 0x405313
push 0x63
jb 0x405318
jns 0x40538a
insd dword [rdi], dx
imul esp, dword [rbx], 0x746f672e
jo 0x405394
je 0x40532a
je 0x405390
add byte [rsi], ch
jae 0x4053a7
add byte [rsi], ch
movsxd rbp, dword [rdi + 0x6d]
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x40533e
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add dh, dh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rax + 2], bl
add byte [rax], al
add byte [rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rdx], 1
add byte [rax], al
add byte [rax], al
add al, dl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax + 3], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov word [rax + rax], es
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rcx + 0x40], bh
add byte [rax], al
mov esp, 0xa
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
or byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rax], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, 0
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
fmul dword [rbx]
add byte [rax], al
add byte [rax], al
add al, bl
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x40000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
or al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax], ah
or al, 0
add byte [rax], al
add byte [rax], al
add byte [rax + 2], ah
add byte [rax], al
add byte [rip + 0x19000000], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
add byte [rax], al
add byte [rax], al
add al, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
add byte [rax], al
add byte [rax], al
add al, ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rcx], 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, esp
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4010], dh
add byte [rax], al
add byte [rax + 0x10], dh
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x1000000], bl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
rcl byte [rax], 0
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x1f], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000000], ah
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rsi + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x30], ah
add byte [rax], al
add byte [rax], al
add byte [rax + 0x30], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rax], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1000000], dh
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
and byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rsp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x31], bh
add byte [rax], al
add byte [rax], al
add byte [rax + 0x31], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 2
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
leave
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rsi + 0x40], dl
add byte [rax], al
xchg eax, esp
xor eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdi], ah
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
cmp eax, 0x60
add byte [rax], al
call 0x40589a
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ah
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
cmp eax, 0x60
add byte [rax], al
clc
cmp eax, 0
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte ds:[rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte ds:[rax], al
add byte [rax], al
add byte [rax], al
lock add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], bl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rcx], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x60], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add dword [rax], eax
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rcx], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rcx + 0x60], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [r8], al
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0x1000001
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [r8], al
add byte [rax], al
add byte [rax], al
xor al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x41], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
js 0x405aeb
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dh
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4a], bh
add byte [rax], al
add byte [rax + 7], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
