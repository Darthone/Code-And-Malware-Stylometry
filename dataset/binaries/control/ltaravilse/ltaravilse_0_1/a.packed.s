call 0x401230
push rbp
push rbx
push rcx
push rdx
add rsi, rdi
push rsi
mov rsi, rdi
mov rdi, rdx
xor ebx, ebx
xor ecx, ecx
or rbp, 0xffffffffffffffff
call 0x401048
add ebx, ebx
je 0x400ffe
ret
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
ret
lea rax, [rdi + rbp]
cmp ecx, 5
mov dl, byte [rax]
jbe 0x401036
cmp rbp, -4
ja 0x401036
sub ecx, 4
mov edx, dword [rax]
add rax, 4
sub ecx, 4
mov dword [rdi], edx
lea rdi, [rdi + 4]
jae 0x40101e
add ecx, 4
mov dl, byte [rax]
je 0x401046
inc rax
mov byte [rdi], dl
sub ecx, 1
mov dl, byte [rax]
lea rdi, [rdi + 1]
jne 0x401036
ret
cld
pop r11
cmp r8b, 2
je 0x40105e
jmp 0x4010db
inc rsi
mov byte [rdi], dl
inc rdi
mov dl, byte [rsi]
add ebx, ebx
jne 0x40106e
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jb 0x401056
lea eax, [rcx + 1]
call r11
adc eax, eax
add ebx, ebx
jne 0x401086
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
mov dl, byte [rsi]
jae 0x401073
sub eax, 3
jb 0x4010a4
shl eax, 8
movzx edx, dl
or eax, edx
inc rsi
xor eax, 0xffffffff
je 0x4010db
movsxd rbp, eax
lea eax, [rcx + 1]
call r11
adc ecx, ecx
call r11
adc ecx, ecx
jne 0x4010cb
mov ecx, eax
add eax, 2
call r11
adc ecx, ecx
add ebx, ebx
jne 0x4010c9
mov ebx, dword [rsi]
sub rsi, -4
adc ebx, ebx
jae 0x4010b8
cmp rbp, -0xd00
adc ecx, eax
call 0x40100a
jmp 0x40105e
pop rcx
mov rax, rsi
sub rax, rcx
pop rdx
sub rdi, rdx
pop rcx
mov dword [rcx], edi
pop rbx
pop rbp
ret
push 0x1e
pop rdx
call 0x4011b4
push rax
push rdx
push r12
pop rdi
pop r8
jl 0x401152
push rdx
push r12
pop rdi
push rdi
push rdx
push r12
and byte [r14 + 0x61], r12b
imul ebp, dword [rbp + 0x64], 0xa000a2e
add byte [rcx + rcx*2], ah
outsb dx, byte [rsi]
outsw dx, word [rsi]
cmp ah, byte [rax]
push rsp
push 0x66207369
imul ebp, dword [rbp + 0x20], 0x70207369
movsxd rbp, dword [rbx + 0x65]
and byte fs:[rdi + 0x69], dh
je 0x40119e
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x78], ah
movsxd rsi, dword gs:[rbp + 0x74]
insb byte [rdi], dx
and byte gs:[rax + 0x61], dh
movsxd rbp, dword [rbx + 0x65]
jb 0x401171
push 0x3a707474
jne 0x4011ca
js 0x40118a
jae 0x4011c4
outsb dx, byte cs:[rsi]
je 0x401183
and al, 0xa
add byte [rcx + rcx*2], ah
cmp ah, byte fs:[rax]
push rbp
push rax
pop rax
and byte [rbx], dh
cmp dword cs:[rax], esi
outsd dx, dword [rsi]
jo 0x4011f1
jb 0x4011e3
push 0x43282074
sub dword [rax], esp
xor dword [rcx], edi
cmp dword [rsi], esi
sub eax, 0x37313032
and byte [rax + rbp*2 + 0x65], dh
and byte [rbp + 0x50], dl
pop rax
and byte [rbp + 0x61], dl
insd dword [rdi], dx
and byte cs:[rcx + 0x6c], al
insb byte [rdi], dx
and byte [rdx + 0x69], dl
push 0x52207374
jae 0x40120e
jb 0x401221
and byte cs:[rdx + rcx], ah
add byte [rax + 0x26a5e90], dl
pop rdi
push 1
pop rax
syscall
push 0x7f
pop rdi
push 0x3c
pop rax
syscall
pop rbx
push 0
push 0x40000c
push rax
push 0x212626
push rcx
push r15
mov edi, 0x800000
push 7
pop rdx
mov esi, 0x212626
push 0x32
pop r10
sub r8d, r8d
push 9
pop rax
syscall
cmp edi, eax
jne 0x4010ec
mov esi, 0x400000
mov edx, edi
sub edx, esi
je 0x401217
add ebp, edx
add dword [rsp + 8], edx
add dword [rsp + 0x18], edx
mov ecx, ebx
sub ecx, esi
shr ecx, 3
cld
rep movsq qword [rdi], qword ptr [rsi]
xchg eax, edi
mov rsi, rbx
push rax
xchg eax, edx
lodsd eax, dword [rsi]
push rax
mov rcx, rsp
lodsd eax, dword [rsi]
xchg eax, edi
lodsd eax, dword [rsi]
movzx r8d, al
xchg rsi, rdi
call rbp
pop rcx
ret
pop rbp
lea rax, [rbp - 9]
mov r15d, dword [rax]
sub rax, r15
movzx edx, word [rax + 0x38]
imul edx, edx, 0x38
add edx, 0x58
sub r15d, edx
lea rcx, [rax + rdx]
call 0x4011c5
xchg eax, esp
add byte [rax], al
add eax, 0x49020000
add byte [rax], al
jmp rbp
call 0x706f12bf
jb 0x4012d7
movsxd rbp, dword [rdi]
jae 0x4012d1
insb byte [rdi], dx
js 0x4012d7
add byte [rbx + 0x447549f9], al
push rbx
push rdi
dec dword [rdi + rsi - 3]
pop rsi
push rsi
pop rbx
jmp 0x4012b7
cmp rsi, rcx
jae 0x4012bf
push rsi
pop rsi
lodsb al, byte [rsi]
cmp al, 0x80
jb 0x40129e
cmp al, 0x8f
ja 0x40129e
cmp byte [rsi - 2], 0xf
je 0x4012a4
sub al, 0xe8
jg 0x4012a1
push rdi
cmp al, 1
ja 0x40128c
sbb edx, dword [rsi]
push rsi
lodsd eax, dword [rsi]
sub al, dl
jne 0x40128f
pop rdi
bswap eax
sub eax, edi
add eax, ebx
stosd dword [rdi], eax
adc al, byte [rbx]
lodsb al, byte [rsi]
jmp 0x4012bc
fld xword [rdi - 1]
fistp word [rbx - 0x3d]
pop r9
mov rsi, rsp
mov r14d, 0xffffeff0
or esp, edi
push 7
pop rcx
rep movsq qword [rdi], qword ptr [rsi]
sub rsp, -0x50
mov bh, 0xdb
add byte ds:[rip - 0x5ef078b], al
stosq qword [rdi], rax
or al, 0x57
or ch, bh
in eax, dx
out dx, al
fisttp qword [rdx]
test byte [rbp + rcx*4 + 0x7f], 0x1b
cmp bh, byte [rax - 0x54c2ffe0]
mov edx, 0xff001000
mov edi, 0x4cfe8920
mov edi, ecx
push 0x59
pop rax
syscall
test eax, eax
js 0x401313
mov byte [rsi + rax], 0
add r9, 0xf
pop rcx
pop rsi
pop rdi
sub rsp, -0x1249900
lahf
or dl, ah
mov r8, rbp
push 0
call 0x5a4c1791
adc al, 0xc4
ljmp [rdi + 0x1d]
pop rcx
pop rcx
shl ecx, 0xc
add rdi, rcx
sub esi, ecx
push rax
push 0xb
pop rax
jmp qword [r15]
mov al, 0xb
jmp 0x401357
mov al, 0xa
jmp 0x401357
mov al, 0xc
mov ebx, 0xebf6fb7d
add eax, 0xca3209b0
movzx eax, al
push rbx
cmp rax, 0x729ff000
add al, 0x82
imul edi, eax, -1
jg 0x401333
inc ebx
mov al, 0
jmp 0x40135b
mov al, 2
jmp 0x40135b
mov al, 3
jmp 0x40135b
mov al, 0x3c
jmp 0x40135b
push rcx
rcr ah, 1
fstp st(7)
jle 0x40139c
mov r8, qword [rdi + 8]
enter -0xb6, 0x73
or bh, byte [rdi - 0x1e17ed81]
call rcx
in eax, dx
fstp st(2), st(0)
sub bh, bh
je 0x4013ae
jg 0x4013a0
leave
inc r8
mov byte [rsi], al
fidiv word [rsi - 0x14391249]
jmp 0x296a6b23
pop rax
std
push rbp
push r12
pop rsi
mov esi, 0x55cc04dd
cld
std
push rbx
mov qword [rbx + 0xfe828ec], rax
test dl, ah
in eax, dx
std
out 0x44, al
je 0x4013fa
adc byte [rdx - 0x1076f6f4], bh
call 0x54cb6577
mov ebx, 0x10b6fffd
mov edx, dword [rsp + rdx]
test edx, edx
jne 0x401402
cmp esi, 0x21585055
jne 0x401406
jge 0x4013f8
xor byte [rdi + 6], ch
sti
cmpsb byte [rsi], byte ptr [rdi]
mov cl, 0xeb
add al, 0x85
div byte [rbp - 0x80]
cmp esi, edx
ja 0x4013fb
outsb dx, byte [rsi]
in eax, dx
dec byte [rcx + 0x33b48d0]
ja 0x4013ff
or cl, byte [rax - 0x75]
or byte [r11 + 0x68], sil
mov dword [rcx - 0xf], eax
mov edi, dword [rbp + 0x61]
fstp xword [rsi - 0x15]
stosd dword [rdi], eax
or byte [rbx + rcx*4 + 0x44], r8b
and al, 0x18
pop rbx
ret 0xd5f9
fstp st(2), st(0)
outsb dx, byte [rsi]
ja 0x4014ab
pop rcx
or al, 0x3b
jb 0x4014b1
mov ebp, 0x84191db2
leave
movq mm6, qword [rdi - 0x3d6a0121]
xor eax, eax
test r12, r12
rol byte [rbp + 0x711e74c2], 0
add bl, byte [rcx + 0x77]
mov ebx, ebx
mov dh, 0xb5
mov bh, 0xf0
add esi, dword [rbp + 0xf]
and al, 0x4b
sbb al, byte [rcx + rcx*8]
jnp 0x401423
jmp 0x401425
or byte [rcx - 0x2c], al
adc al, 0xda
mov byte [rip - 0x41b24977], r9b
mov ecx, 0xc6b6b3f2
call 0x3661366
sbb eax, 0xccd6b784
push rbx
imul ebx, dword [rax], 3
jmp 0xffffffffdbf535ae
in eax, dx
jg 0x40145d
sub byte [rbx + 0x5d], bl
pop r12
pop r13
ret
adc eax, 0x74ab49ff
sub dword [rdi], esp
out dx, al
test edx, eax
mov dl, 0x5f
int1
enter 0x2c38, -0x38
sete byte [rax + 0x6b385942]
sar dword [rdi + 8], cl
out 0xf, al
pop bx
ja 0x4014a3
mov bh, 0x2a
add edi, 0x10
jmp 0x4014a0
push rdi
mov eax, 0xff3500e8
mov edi, 0x41c287e1
push rsi
cld
push rbp
push rbx
push 0x2067034c
or byte [rdi], ch
jg 0x4014dd
cmp dword [rdi + 0x10], 3
in al, dx
cmp al, 0xf
mov bh, 0x57
cmp byte [rax - 0x77], cl
xor byte [rcx - 0x1107b7f0], bh
mov dh, 0xdf
stosb byte [rdi], al
sub byte [rbx + rdx + 0x20], cl
cmove ecx, eax
pop rsi
clc
out dx, eax
add byte [rbx - 0x24ce0033], 0x30
and bh, bh
retf 0x2178
jge 0x401519
jne 0x401530
fstpnce st(6), st(0)
jle 0x4014f9
test byte [rsi - 0x50], al
cmp eax, ebp
cmovb rax, qword [rbx]
add eax, dword [rsi + 0x28]
or al, bl
mov cl, 0xf1
lodsd eax, dword [rsi]
fsub dword [rdi]
cmp bl, ch
fstp xword [rip - 0x2dcef11b]
xor r14d, r10d
cmp esi, ebx
cli
sub ebx, ebp
adc al, 0xea
add ebx, 0x1c5f0fff
outsb dx, byte [rsi]
ja 0x40152f
jrcxz 0x401563
fsubp st(0)
mov esp, 0x148d07fd
sbb byte [rbx], ah
call 0xffffffffc1e1b4c7
frstor dword [rdi + rdi*2]
cmp byte [rbx + 0x6d], bh
and eax, 0xb2f648b5
jnp 0x4015e2
wait
push rbx
test byte [rbx + 0x7c839301], bl
add byte [rbp + 0x24], dh
fild word [rsi + 0x243cfe1b]
jne 0x4015a2
sub rax, 0x32034918
mov esi, 0xfe8b2803
mov ecx, 0x301d6f0d
call 0x58295b77
sub al, 0x24
add dword [rdi], ecx
test dword [rbx + rdi*8 + 0x2f], ecx
iretd
out 0xa, al
sub byte [rsp + rax*2 + 0x41], al
mov esi, 0x73516240
mov edx, r9d
in eax, dx
fstp xword [rdx + 0x498e046f]
and byte [r8 - 0x3b], spl
jo 0x401615
or al, 0xb6
int1
insd dword [rdi], dx
ja 0x4015af
and ecx, 7
or al, 0xeb
jae 0x40161a
int1
add ah, byte [rbx - 0x4e049062]
stosb byte [rdi], al
add eax, ebp
shr r14d, cl
popfq
frstor dword [rsi]
or byte [rax], cl
mov edi, 0xe63cdd2f
pop rbp
sub al, 0x1a
mov ecx, 0xd8297832
cdq
jne 0x40164f
movabs eax, dword [0x4412b13c27078ff0]
movsxd rax, ecx
xor ch, bh
xchg byte [rbx - 0x357c1183], bl
add bl, byte [rdx]
clc
fiadd word [rsi + rdx*8 - 0x18]
sar ah, 1
xor esi, dword [rcx + rax*8 - 0x3ac61422]
jne 0x40168d
retf
sbb dword [rbx - 0xd2236a3], ebx
out dx, eax
jrcxz 0x401646
push rax
call 0xffffffff868d1333
neg esi
int1
push qword [rbx - 0x9be7e25]
mov byte [rdx], 0x74
or eax, 0x2d7c8d4a
add byte [rcx], dh
adc bl, cl
cld
rep stosb byte [rdi], al
mov ebp, dword [rip + 0x3b3fc1dd]
jns 0x401650
std
cmp edi, esi
xchg eax, edi
jle 0x4016a5
or al, 0xc7
or al, 0x88
ret
nop
xor esi, esi
call 0x18c95c31
sbb ebp, esi
leave
xchg byte [rip + 0x744f794e], dl
hlt
mov bh, 0x9b
jnp 0x4016a3
imul ecx, dword [rip + 0x1d448d49], -0x24
std
cmp ebp, dword [rdx + rax*2 + 0x73]
add al, 0x83
imul eax, esi, 6
stosb byte [rdi], al
cmpsd dword [rsi], dword ptr [rdi]
loope 0x401691
idiv byte [rcx + 0x40dc0858]
cmp eax, 0xffc1b718
fidivr word [rbp - 0x3669e643]
mov bh, 0x47
cmp byte [rax - 0x3c], bh
cmp byte [rcx], bh
or al, 0xf
mov word [rbp - 2], fs
mov es, word [rdi + 0x24bc9f3f]
movabs al, byte [0xd0b6c38b2bbf74ae]
mov ebp, 0x2f70f94
xor byte [rdi + 0xe], dl
add dword [rdx + 0x331b27e3], ebp
sbb al, cl
push 0x5f415e41
shr byte [rip - 0x6a8e65c8], 1
sub eax, 0x9b5578ce
pop rcx
mov edx, 0xe6406a52
push rbx
mov rbx, r8
cmp byte [rbx + 0xd8f870b], cl
xchg eax, ecx
xor al, 0x24
adc byte [rdx], ah
sub al, 0x89
xor al, 0xbd
int 0x3d
mov esi, esi
and dl, al
cwde
out 0xb6, eax
sbb dword [rbx - 0x17df65c1], edi
sti
mov edx, dword [rbp + 0xf]
imul esp
fistp dword [rbx + 0x58]
ret 0xcc4c
mov edx, 0xbe3855b1
add eax, 0x6d8d6d15
imul eax
mov edx, 0x66534111
loope 0x4016ba
js 0x4016fa
mov cl, 0xdf
div byte [rcx - 0x72690eef]
js 0x40178c
sbb byte [rax + 0x31], dl
in al, 0xde
fcomp st(0), st(0)
mov esi, 0x2fc2bd09
and eax, esp
call 0x5cad29c7
movabs al, byte [0x8d5a41889b7d29b1]
xchg eax, ecx
jrcxz 0x4017ad
leave
sbb al, 0x41
fdiv qword [rsi + 0x78]
jo 0x4017b2
mov bh, 0xc3
xchg byte [rsi + 0x7d], dh
adc byte [rbx + rsi*2 + 0xb], cl
sti
mov eax, 0xfbaf1778
iretd
add ch, byte [rdi + 4]
out dx, al
mov edi, eax
call 0x3dc21264
setnp byte [rcx + 0x77]
or byte [rsi - 0x14], bh
adc dword [rcx + 0x50], eax
insb byte [rdi], dx
add al, al
test byte [rsi - 0x76fb913b], ch
fidivr dword [rbp + 0x3e]
xchg dword [rax - 0x58], edx
jl 0x401740
int 0x43
cmp byte ds:[rsi + 0x482b207], 0x75
sub esp, eax
fimul word [rcx + 0x3aade8df]
nop
iretd
cmp byte [r11 - 0x1f], r13b
mov dh, 0xb0
mov qword [rbp + r8*8 - 0x7c38c6fa], 0x100236f
cmp edi, dword [rax]
sub esp, eax
pop rbp
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rdi*8], 0
add byte [rax], al
push 0xa
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax + 0x908282], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dil, dil
enter 0x33, 0
jns 0x4017f2
add byte [rax], al
add al, byte [rax]
add byte [rax], al
sti
inc dword [rdi + 0x43]
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x401866
je 0x40186f
and byte [rip + 0x302e342e], dh
sub eax, 0x310d7536
jle 0x401838
mov dh, 0x7d
jbe 0x401837
adc byte [rcx + rbp], dh
and byte [rdx], dh
xor byte [rax], dl
xor byte [rcx], al
sar dh, 0xa3
in al, dx
cmp dword [rax], eax
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax + 0x17]
sahf
add al, byte [rax]
push rsp
add eax, dword [rax]
je 0x401870
sahf
sahf
add al, 0
cwde
add eax, 0x1f90c800
and byte [rdi + 0x4900006], bl
add byte [rsi], dl
nop
nop
invd
add byte [rax + 9], al
add al, al
enter -0x6fd9, 0x27
or al, byte [rax]
or eax, dword [rax]
sub byte [rax], cl
in al, dx
adc ecx, eax
or al, 0
push rax
or eax, 0x8f093000
adc dword ds:[rbp + 0xf170e03], 0x13182400
pop rax
cmp eax, eax
adc byte [r15], r10b
adc dword [rbx], eax
in al, dx
adc ecx, eax
add al, dh
adc al, byte [rax]
loopne 0x40189c
pop rdi
nop
rcl byte [rsi + 0x14172313], 0
call 0x280878be
nop
adc eax, 0x16f800
add byte [rsi], ch
insb byte [rdi], dx
adc ecx, eax
add byte [rax], cl
sbb byte [rdi + 0x2f], al
fdiv dword [rdx - 0x80]
sbb dword [rax], esi
sbb dl, byte [rbx]
enter -0x37ed, 0
sbb byte [rbx], 0
movabs al, byte [0x170113653779231c]
add al, 0
int1
call rbx
jo 0x401929
mov cl, 0xc
sbb edi, dword [rdi + 0x24029719]
or dword [rip + 0x171b7049], 0xffffffb0
fcom dword [rax - 0xfd1cdf4]
pop rdi
cmp edi, ecx
sbb eax, dword [rax]
mov eax, 0x53170131
jbe 0x40190f
jp 0x401934
adc byte [rdx], cl
push rdi
in al, 0x86
xchg eax, edi
movsd dword [rdi], dword ptr [rsi]
xlatb
fldenv [rbx + 0x3827ab0c]
ja 0x4018c8
nop
or al, 0x36
cmp ebx, ebx
leave
xor dil, byte [r10]
call 0x2108d2d0
or dword [rip + 0x43c47f7], 0xffffffb0
and dword [rcx], edi
cmp dword [rsi], ebx
add dword [rax + 0x30], eax
xchg eax, edx
xchg byte [r9 + rax*2 + 0x43], spl
fcom dword [rax + 0x1551d9c]
pop rdi
je 0x401948
leave
and byte [rbx + 0x32], al
xchg rax, rsp
xor r12b, byte [rbx + rax*4]
or al, 0xb6
push rax
xlatb
xor cl, al
nop
or al, 0x54
cld
pop rax
sbb dword [rdx + 0x21b4393], edx
pop rsp
cmp eax, 0x6486419
pop rdx
xchg byte fs:[rax + rdx*4 + 0x21], ah
js 0x4019c3
xchg eax, edi
sbb dword [rdx + 0x70bf6c41], edx
and dword [rcx], ebx
out 0x74, eax
or dword [rcx + rcx*8], 0xffffffc9
lsl edi, dword [rax + 0x37]
jl 0x401903
or al, 0x32
and al, 0x5f
and byte [rax], 0x43
xor cl, al
test byte [rbx - 0x36f37cdc], ch
mov dh, dl
mov word [rax + 0x1393921], ss
add al, 0x90
sub dl, byte [rdx - 0x6b9b79bf]
cdqe
sbb dword [rax - 0x64], edi
movsb byte [rdi], byte ptr [rsi]
nop
and dword [rcx], ebx
movabs al, byte [0xa8f28641921ca4cc]
sbb dword [rip - 0x636f37ce], eax
lodsb al, byte [rsi]
mov r8b, 0xc
leave
and byte [rbx + 0x67], al
mov ah, 0x8d
or al, 0x32
and al, 0x83
mov eax, 0x3243bcb3
enter -0x2370, -0x40
add al, byte [rsi]
sbb dword [rdx + 0x28c40693], edx
enter 0x1921, 0x64
push rdx
int3
xchg byte [r8 + rdx*4 + 0x7d], spl
shl byte [rbx - 0x6f94f8d9], 1
fmul dword [rax]
jg 0x4019ad
cmp eax, 0xb3906419
or eax, 0x7bf93e17
movabs eax, dword [0x21bc071257150604]
or dword [rip + 0x205f2077], 0x17
cmp eax, 0x2f1842c0
sub al, 7
in al, dx
retf 0x5e0
xlatb
xchg eax, r12d
rcr al, 0x95
push rbp
adc al, 0x57
xor bl, r8b
call 0x7070619d
scasd eax, dword [rdi]
or al, 0xa7
movsd dword [rdi], dword ptr [rsi]
stosd dword [rdi], eax
ja 0x401a22
xor bh, byte [rax + 7]
lea esi, [rdi + 0x18]
add dword [rdi], edx
in al, dx
jae 0x4019d3
and bl, byte [rdi]
adc dl, byte [rbx - 0x535a4dd1]
sbb ebp, esp
adc ch, cl
stc
leave
ror dword [rsi + 0xe], 0x16
sbb edx, dword [rdi]
adc byte [rax], cl
mov ebx, 0x32c90ec0
or byte [rdi + 0x3f], al
nop
xchg eax, ebx
fld qword [rdi + 0x20]
sbb byte [rdx], al
xchg rax, r11
sbb dword [rbp + 0x200da21c], 0x2f
test eax, 0xc8320e0e
leave
or dword [rdx], ebp
je 0x401a5e
adc dh, byte [rdx - 0x70]
pop rcx
mov cl, 0x66
adc dword [rdi], esp
sbb esi, dword [rsi + 0x4c]
mov edi, 0x50109a17
jns 0x401a82
in al, 0x20
and eax, 0x130ef409
add dword [rdx + 6], esi
cmp dword [rsi - 0x14], ecx
xlatb
and byte [rdi], spl
sbb edx, dword [rdi]
adc esi, dword ds:[rip - 0x37c6c6fa]
ret
adc al, 0x10
or esi, ecx
sahf
sbb al, 0x92
or byte [r15], bl
or bl, byte [rbx + rdx + 0x4e419072]
adc dl, byte [rbp + 0x49720e1d]
jg 0x401ad4
adc eax, dword [rax]
test byte [rbx - 0x28], al
mov ss, word [rdi]
movabs byte [0x720e40bc172e970a], al
and al, 0xb5
or cl, cl
or ah, byte [rdi - 0x44]
nop
jg 0x401b36
adc cl, byte [rbx]
mov cl, byte [rdx + rax*8]
and byte [rdi], cl
pop r14
mov esp, 0xb4bef12
jo 0x401b07
in al, 0x20
mov r10b, 0x11
mov al, 0xb
and byte [rax], dl
or dword [r8 - 0x7031b78a], r9d
cli
cmp ecx, dword [rdi + rbp]
cmp ebx, esp
push rbp
or al, 0x57
nop
and ebx, dword [rbp + 0xc]
leave
shr dword [rsi], 0x10
scasd eax, dword [rdi]
mov edx, dword [rdi]
rcl byte [rcx], 0xbb
ret 0x4f53
mov ch, 0xc
enter -0x3771, 0x20
cmp al, 0x10
pop rsi
stc
cmp esp, dword [rsi + 0xd1e57c0]
adc dword [rcx], esp
mov ebx, 0x174bcf30
adc dword [rip + 0x7840bc67], 0x9fdf0d83
or eax, 0x4e48ec3f
cmp byte [rdx + rdi*4], ah
or eax, 0xa4872e67
sub dword [rsi - 7], 0x30571117
or byte [rsi], cl
rcl byte [rax - 0x17d0984d], cl
or eax, 0x93772ea7
iretd
push rax
or ah, byte [rdi + 0xe45013c]
add bh, byte [rcx]
enter 0x73c9, 0x13
sub dword [rcx - 0x5bfe4cf2], ecx
jmp 0x401b35
xchg eax, edi
adc byte [rax + 0x4e41c947], dh
jb 0x401ba2
xlatb
sahf
sbb al, 0xe4
in al, 0x7e
adc dword [rdi], ebx
pminsw mm2, qword [rax]
enter 0x4e41, 0x43
pop rcx
jne 0x612507d2
ja 0x401b6b
bswap ecx
sahf
iretd
adc eax, 0xc8100445
adc edi, dword [rax]
enter 0x4f9d, 0
xor edx, dword [rax]
in al, 0xe4
adc byte [rdi], 9
adc eax, 0xb6c90e78
sbb eax, dword [rsi]
mov al, 0x11
add ch, bh
nop
adc dl, byte [rcx]
xor byte [rsi - 0x38], bl
adc ebp, dword [rdi + 0x113b0dc2]
nop
xchg eax, ebx
insb byte [rdi], dx
adc dword [rdi + 0x2f], ebx
adc al, 0x31
and dword [rcx], ebx
mov dh, ah
adc dword [rdi - 0x63], esp
cmp al, 0xe1
add eax, 0xb0c71214
enter -0x6c37, -0x7d
and al, 0x12
lodsb al, byte [rsi]
adc eax, 0x3c9c8323
cmp dword [rax], ecx
or bl, byte ss:[rdx]
sbb esp, esp
in al, dx
and byte [rdx + 0x17], dl
sub eax, 0x41a41c8a
mov ss, word [rdi]
rcl byte [rdx], 0x4a
clc
js 0x401bb7
adc cl, byte [rdi]
sbb ebx, dword [rdi]
hlt
sahf
jno 0x401c3e
adc dh, byte [rdi + 0x13241670]
enter 0x4e41, -0x62
out dx, eax
adc al, 0x12
push rsp
adc r8, rcx
or esp, dword [rdi + rdx - 0x7ce8ec98]
adc edi, dword [rax + rax*8 - 0x65587e88]
adc eax, dword [rdi - 0x731bec41]
sbb bh, ch
adc edi, edi
ret 0xc9c8
xchg dword [rsp + rdx], ebp
cmpsd dword [rsi], dword ptr [rdi]
cmp al, 0x81
int1
add bh, byte [rcx]
test dword [rbx*4 + 0x41909f14], edx
js 0x401c4a
adc al, 0x37
xor ecx, dword [rcx + 0x7617279]
sal byte [rcx], 0x14
repne movsb byte [rdi], byte ptr [rsi]
push -0x28ea85ee
xchg eax, ebx
adc al, 0xf0
add al, byte [rbx + 0x5f15b917]
not dword [rip + 0x205e102f]
xchg dword [rcx], esi
neg dword [rbx + 0x16]
or esp, dword [rsi + rbx*2]
xlatb
adc dword [rsi], 0x7243604f
ret 0x16aa
fisttp word [rdi + 0x7a4a17ea]
in al, 0x80
out dx, eax
or al, 8
idiv byte [rsi]
ja 0x401c8a
pop rdi
xor eax, dword [rbp + rbx*2 + 0x17728f60]
mov dh, dl
in al, 0xc9
scasb al, byte [rdi]
mov word [rbx], cs
mov cl, 1
mov bl, dl
add eax, 0x5b3f471e
sahf
int1
mov esi, 0x14c10f17
wait
movsxd rbx, edi
xchg eax, edi
push qword [rdx + 0x74]
jae 0x401d76
jne 0x401d6a
movsxd rbx, dword cs:[rdi + 0x4a]
push r10
pop rdi
push r11
push rsp
or dword [rax], eax
jb 0x401d05
outsd dx, dword [rsi]
in eax, dx
imul ebx, dword gs:[edx], 0x6d745f06
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x401d4a
outsd dx, dword fs:[rsi]
pop rdi
jle 0x401d2a
outsd dx, dword [rsi]
outsd dx, dword [rsi]
or esp, dword [rdx + 0x61]
insb byte [rdi], dx
or dword [rdi + rbp*2 + 0x72], esi
jae 0x401d9a
jne 0x401db6
outsd dx, dword [rsi]
insd dword [rdi], dx
jo 0x401daf
not byte gs:[rdi]
fcomp st(7)
sub dword [rsi + rbp + 0x37], esp
xor eax, 0x5f243538
imul bp, word [rsi + 0x69], 0xed08
loop 0x401d59
jb 0x401dce
jns 0x401dbe
outsb dx, byte gs:[rsi]
je 0x401dd5
jns 0x401d5e
or ch, byte [rbp + 0x65]
and byte [rbx + rbx + 0x6d75f730], ch
insd dword [rdi], dx
jns 0x401da4
or eax, 0x2a74295f
mov edi, 0x9c4126dd
jo 0x401def
and al, 0x5a
push rbx
je 0x401dd0
xor dword [rcx], edi
jo 0x401df1
movsxd rsp, dword gs:[rbp + 0x77]
fbstp tbyte [rsi + 0x772d99d6]
outsb dx, byte [rsi]
lahf
jb 0x401e0c
movsxd rsi, dword [rdx + rbx - 0x4d]
fstp st(2)
xor esi, dword [rax + 0x75]
movsxd rsp, dword [rcx + 0x72]
cmp eax, 0xdbbd1467
fdecstp
imul esp, dword ss:[rdi + 0x6e], 0x380c650f
imul ebp, dword [edi + 0x5d], 0xdb5b6fdd
cmp qword [rdx + r11], r9
jne 0x401e06
js 0x401e3c
xor r14b, byte [rcx]
mov bl, 0x65
fdivr dword [rdi - 0x29]
mov dh, 0x66
cmpsb byte [rsi], byte ptr [rdi]
insb byte [rdi], dx
ja 0x401e13
imul ebx, dword [rdi + 0x70], 0x6f
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x7b065745
xor byte [rbx], bl
sbb dword [rcx], edx
xor ebx, ebx
pop rax
jmp 0x401d80
pop rdi
adc dh, byte [eax]
cmc
jo 0x401e31
mov bl, 0xd
mov bh, 0x37
pop rbp
adc dh, byte [rcx]
xor eax, 0xa5786540
or bl, bl
mov dh, 0xb7
jae 0x401e53
xor eax, 0x45b66153
fst qword [rsi + rsi*8]
in eax, dx
test al, 0x73
jne 0x401e78
jae 0x401e37
cmp byte [rdi + 0x69], bl
sub esi, dword [rbx + rbp + 0x7a696dec]
or al, byte [rcx]
inc dword [rbp + 0x205856df]
movsd dword [rdi], dword ptr [rsi]
push r11
pop rdx
cmp eax, dword [rbp + 0x244a69b5]
xor eax, 0x16a9a562
mov dh, 0xb6
ret 0xd86
outsb dx, byte [rsi]
adc ah, byte [rdx + rcx - 0x45]
nop
ret 0x8721
ja 0x401ebb
sbb al, 0x64
push rdi
fdiv dword [rsi + 0x34]
adc dword [eax + 0x7b], esi
xchg byte [rax + 0x5b], dh
loop 0x401ecf
fisub word [rbx + 0x68]
lodsb al, byte [rsi]
movabs eax, dword [0x101362915127ca90]
enter 0x5804, 0x27
test dword gs:[rbp + 0x774fb640], eax
scasb al, byte [rdi]
mov al, 0x6d
jbe 0x401eba
or edi, dword es:[rcx + 0x4a]
xor al, 0x32
nop
mov ch, 0x4b
outsb dx, byte [rsi]
jmp 0x401e28
retf 0x1ade
outsb dx, byte [rsi]
adc dword [rsi], ebx
sub dword [rdi + 0x75], ebp
jae 0x401ec3
sub esp, 0x18709b6d
jbe 0x401f1d
jbe 0x401f04
imul edx, dword [rbp + 0x5d], 0x34d2b825
sub ax, 0x306a
mov dh, 0xca
sub cl, bl
int 0x35
sbb ecx, eax
mov edx, 0x37f57015
sub byte [rax], ah
fistp dword [rdx - 0x35]
add eax, 0x542b6c17
xchg byte [rcx + 0x69], ch
xor edx, dword [rdx + rsi*2 - 0x6fcd0b15]
cmp eax, 0x742731d8
jns 0x401f4d
and eax, 0x52bd9432
imul esp, ebp, -0x5c
je 0x401eb2
mov dh, 0x52
sub dword [rbx], esp
out 0x1b, eax
je 0x401ecc
test eax, 0x72629dcc
sub byte [rip + 0x6e4b6170], ah
sbb eax, ecx
adc ah, byte [rax]
cdq
xor al, 0x6d
xchg eax, esp
int 0xe
sub byte fs:[rsi + 0x24], cl
and bh, byte [rcx]
xchg eax, ebp
mov ch, 0x6e
sbb byte [rbx + rsi*2 + 0x70], dh
lodsb al, byte [rsi]
rcl byte [rsp - 0x799a48cb], 1
sub dword [rax + 6], edi
xchg eax, ebx
sub esi, dword [rsi]
sub al, 0x78
imul ebx, dword [rdx + rax*8 + 0x55], 0x747a8c56
cmp edi, dword [rax]
ror dword [rsi], 0x1c
pop fs
je 0x401ee5
add dword [rdi + 0x53], ebx
test dword [rdi - 0x42dd3cc0], esi
movabs byte [0xd68c6067af92264], al
jns 0x401f7c
bswap ebp
jne 0x401fb0
sar byte [rbx + 0x7a206941], 1
or eax, 0x70337f56
cmp eax, 0x69300f2b
imul esi, edi, 0x2f6fee02
xor r14b, byte [rbx + 0x5f]
pop r15
xchg eax, esp
in eax, dx
pop rbx
movsxd rsi, dword [rax]
movsxd rsp, dword [rsp]
or al, byte [rsi + 0x52]
pop r15
insb byte [rdi], dx
jns 0x401f3b
adc rcx, qword [r11]
push rbp
and byte [rdi + 0x481ec9f8], dl
push rdx
push rbx
push rsp
adc eax, dword [rsi]
out dx, eax
sub r10b, r8b
adc byte fs:[rax - 0x45], dh
sub dword [rsi - 0x5d], 0x72
add dword [rcx + rbx*2 + 0x4e], 0xfc434945
outsd dx, dword [rsi]
mov bh, 0x63
xor esp, dword ds:[rbx + 0x1f]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0xd3
push rsi
pop rdx
sbb byte [rax + 0x176e0a15], ah
test byte [rdi], 0x26
fisubr dword [rdi + rax*2 - 0x70]
loope 0x402028
push rax
jno 0x401fbf
fcmovb st(0), st(2)
xor al, 0x9b
imul ecx, dword [rcx], 0x360a45b3
jbe 0x401fcb
mov bh, 0xf0
sub edx, dword [rip + 0x1d325316]
add eax, 0xc1430045
mov bh, 0xed
xor al, byte [rbp + 0x52]
and eax, 0x72708f34
je 0x402071
mov bh, 0x65
out dx, eax
cld
pop rdi
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x312e4328
cmpsb byte [rsi], byte ptr [rdi]
and byte [rdi], al
mov al, 0x76
xor r10b, byte [rcx + 0x6d90c2ed]
cmpsb byte fs:[rsi], byte ptr [rdi]
pop rdi
movsxd rsp, dword [rbx + 0xa2458b2]
loopne 0x40205e
mov eax, edx
wait
outsd dx, dword [rsi]
fld dword [rbp - 0x6d]
xor dword [rcx + 0x78], ebp
insd dword [rdi], dx
div byte [rbp - 0x5df490e2]
push rsi
cmp edi, dword es:[rdx]
push 0x2b806eb4
cmc
pop r9
sbb al, 0x21
movabs eax, dword [0x6dad612873e17ba3]
sbb byte [rdx + rax*8 - 0xbcb6bb8], dh
pop rdi
fstp xword [rip + 0x6d90beba]
cmp cl, byte [rcx - 0x45]
push r11
cdq
insb byte [rdi], dx
xor bl, cl
in eax, 0x69
jnp 0x402090
xor ebx, dword [rdi - 0x7c]
movsb byte [rdi], byte ptr [rsi]
mov dl, 0x37
add bh, ch
or ecx, dword [rip + 0x54683bd9]
pushfq
xor esi, dword [rdx]
ja 0x402069
test byte [rip - 0x674e619a], bl
cmp byte [rsi], dl
adc al, 8
or ebp, dword [rsi]
ror eax, 1
jbe 0x4020b2
jne 0x402036
xor eax, 0x3bc833cc
push rax
adc eax, 0x5c3b026d
xor dword [rsp + rax*2 - 0x20], 0x34f4f82d
wait
stc
jp 0x4020ff
cmp ebp, dword [rdi + 0x79]
adc byte [rdx], bl
jae 0x4020e3
jbe 0x4020b4
shl dword [rbp - 0x7f], cl
and dword [rcx - 1], ebp
push 0x48
xchg byte [rdi + 0xd], cl
xor byte [rdx], dh
sub dword [rdi + 0x6d], esp
xchg eax, edi
adc al, cl
push 0x4a61a783
xchg eax, edi
push rdx
jbe 0x402150
fstpnce st(3), st(0)
fiadd dword [rbx + 0x6c]
jae 0x40214d
xchg rax, r13
push 0x643f4815
insb byte [rdi], dx
push rax
jbe 0x402128
movabs dword [0xbcf4d05c64d7b361], eax
add eax, dword [rsi + rbp*2 + 0x624c49fb]
mov al, 0x45
pop rsi
or byte fs:[rax + 0x908c835], dh
xor eax, 0xae735f38
int3
cdq
mov es, word [rsp + rsi]
int1
out 0xa6, eax
push -0x15eff668
cmp eax, esi
and al, 0xbc
and eax, 0x7054145c
lahf
popfq
outsb dx, byte [rsi]
test byte [rcx + 0x13], cl
clc
stosb byte [rdi], al
push -0x68
xchg eax, ebp
lodsb al, byte [rsi]
ret 0x7019
paddusw mm6, qword [rax]
ret 0x3117
in al, dx
sub dword [rcx - 0xf], esp
enter 0x6c0e, 0x24
je 0x40211c
outsb dx, byte [rsi]
ja 0x4020db
adc al, 8
movabs dword [0x49128d1d4b656bd7], eax
cbw
sbb ch, byte [rsi + 2]
loope 0x402128
js 0x402191
adc dh, byte [rcx]
add ah, cl
sal dword [rcx - 0x528692c2], 1
lodsb al, byte [rsi]
dec byte fs:[rbp + 0x60]
ja 0x402150
add dword [rdx + 0x5b], edx
push rsp
xor byte [rdx - 0x26d4f72e], al
loope 0x40211e
sti
pushfq
fisubr dword [rcx + 0x5b]
cmp dh, byte [rdx]
mov edi, 0x601bd53e
or eax, dword [rdx]
outsb dx, byte [rsi]
or al, 0x43
insb byte [rdi], dx
push rsp
not dword [rsi + 2]
lodsd eax, dword [rsi]
mov ch, 0x8e
rol eax, -0xf
movabs al, byte [0x198a4f494831498c]
mov edx, 0x4f640bd0
pop rdi
jne 0x402173
jmp 0x3b175b60
mov esp, 0xd75e3a78
push rdi
and al, 0x48
fcom dword [rsi + 0x65ff3538]
xchg eax, edi
xchg eax, edx
fdiv dword [rsi + rdx*4]
cmp al, 0x32
jb 0x40224d
outsb dx, byte [rsi]
js 0x402227
or al, 1
pop rdx
xor edx, dword [rcx + 0x7f]
and edx, eax
wait
adc byte [rdx], bh
insd dword [rdi], dx
xor al, 0x3a
or byte ss:[rdi + 0x313d8233], al
add eax, 0xd6c66003
mov r11b, 0x61
mov eax, 0x4a958759
mov ah, bl
or al, 0
or byte [rsp + rdx*2 + 0x2596f9be], dh
fild dword [rax - 0x317b2c7]
retf 0xade
or al, 0xe4
scasd eax, dword [rdi]
add dword gs:[rax + rdx*4 - 0x26954a6f], -0x50
xchg byte [rsi - 0xacf54cf], ch
cmp byte [rdx], ah
sbb ebx, dword [rdi + rax*4 + 0x4584610b]
xor eax, 0x236c120b
mov esi, 0x4e430731
pop rbx
push rdi
mov word [rbx], es
insb byte [rdi], dx
jrcxz 0x402292
cdq
add byte [rsi + rcx*8], ch
jo 0x402299
xor dword [rcx - 0x2ffa636f], ecx
xor byte [rax - 0x27cdb4ea], ch
leave
xor edx, dword [rbx + rdi*2]
mov dword [rbx], esi
xor al, byte [rbp + rsi + 0x35]
xlatb
loopne 0x402204
retf 0x4501
add al, byte [rdx + rcx*8 + 0x2a]
imul eax, dword [rdx - 0x72], 0x71
in eax, 0x86
and byte fs:[rdi + rsi*8], ch
xor al, 0x73
movabs byte [0x382fb7595b223172], al
call 0x1977d65b
cmp dword [rbx], esi
xor eax, dword [rdi]
rcl byte [rbx + 0x43967fa3], cl
jae 0x402305
pop rdi
push 0x1a1042fa
or byte [rcx - 0x4e2b8924], al
add cl, byte [rbx + 0x193dd211]
mov dl, 0xc
sub esp, ebx
push rax
pop rbx
or byte [rip + 0x564a1319], bl
cmp al, 0xc1
test byte [rsi - 0x7ba058f0], ch
xchg eax, ebx
or al, 0x84
mov dh, 0x32
push rdi
xchg eax, ebp
sub edx, dword [rdi + 0x369d4dac]
and eax, 0xbdaae6ec
mov esi, 0x32666f15
jne 0x40226e
jno 0x40229b
wait
movabs eax, dword [0x8be333d59a973311]
mov cl, 0xd
push -0x47b68f95
sub ch, byte [rdx - 0x64d4cbec]
sbb al, 0x20
enter 0x1a31, 0x36
mov dword [rip + 0x56331458], eax
push rsi
mov dh, byte [rbx]
mov edx, dword [rsi + 3]
test eax, 0x15231b37
add dword [rsi - 0x74], ebx
xchg byte [rbx - 0x6d], dh
xor byte [rip - 0x53f2f67c], ch
imul ebp, dword [rbp + 0x28a9003d], -0x19
cmp cl, byte [rdx - 0x73fc5096]
pop rdi
push rsp
jnp 0x40234e
xchg eax, esp
shl byte [rbp + rsi*2 + 0x7e], 1
pop rbp
imul ebp, dword [rsp + rax*8], 0x178122e4
xor dword [rbx - 0x36], ecx
pop rsp
or dword [rcx + rsi], 0xe900da7a
jb 0x40237e
jl 0x40237c
and eax, 0x9008d242
xchg eax, ebp
cwde
push rdx
and byte [rsp + rbp + 0x2e], ah
xor dword [rdx + rdx*2 - 0x6d], edx
xor dl, byte [rbx]
push rdx
cmc
ja 0x4022e2
insb byte [rdi], dx
jb 0x4023a4
xor bh, byte [rip - 0x385b766e]
jno 0x40233b
mov r8b, 0xd0
sub dword [rax], edi
je 0x4023dc
cmp al, 0x77
sub al, byte [rbx + rdx + 0x7679215c]
jrcxz 0x402353
adc dword [rdi + 0x52], ebp
mov bh, 0x4e
sbb eax, 0x7a406677
mov al, 0xb8
xchg eax, ebp
test al, 0x4f
mov ah, 0x56
movsd dword [rdi], dword ptr [rsi]
or byte [rsp + rax*8 + 0x4d], cl
fst qword [rdx - 0x7f]
pop rsp
scasd eax, dword [rdi]
xchg eax, ebx
movsxd rdx, ebx
xor al, 0
mov eax, dword [rbx + 0x6c]
xor al, 0xf7
adc al, 0x5e
cmp al, 0x1c
xor al, 0x29
add eax, 0xa3429365
insd dword [rdi], dx
scasd eax, dword [rdi]
mov esi, 0xbb5d5f4a
mov eax, 0x3c8e6f6b
push -0x21cf89a1
fiadd dword [rcx + 0x42]
sbb rsi, qword [r10 + 0x2ef4dd49]
xor ecx, dword [rcx]
push rbp
adc bl, byte [rbp - 0x40]
insd dword [rdi], dx
out 0x5f, eax
insd dword [rdi], dx
xchg eax, edx
cmp byte [rbp + 0x43431bdb], dh
xor byte [rax], al
xchg eax, edx
mov dh, byte [rcx + rsi + 0x40]
or rax, 0x22485035
test ecx, esi
outsb dx, byte [rsi]
jnp 0x40239b
xchg byte [rbx + 0x65], dh
jae 0x402478
insd dword [rdi], dx
mov esi, 0x6d0d0762
fmul st(1)
je 0x40247b
push 0x700e4809
mov al, 0xad
pop rbx
outsb dx, byte [rsi]
outsb dx, byte [rsi]
outsd dx, dword [rsi]
sub eax, 0x1a0d6715
mov ebp, 0x2e3a4375
jne 0x4023fb
sub eax, 0xd6f73069
sbb al, ah
or eax, 0x6409385e
jns 0x4024a1
xchg rax, r15
loope 0x402423
cmp eax, 0x7619b507
adc edi, dword [rcx]
out dx, eax
wait
xor byte [rdi + rbx*2], cl
sbb edx, dword [rsi + 0x7328616c]
fisub dword [rax + 9]
jo 0x4023f6
jb 0x4024b6
or al, al
mov ecx, 0x6f2cdb72
or byte [rax + 5], dl
mov al, 0xbd
and al, 0x6f
push -0x63f5348c
and dword [rax - 0x58], ebp
or eax, 0xa895635d
rcr byte [rdx], 1
cmpsd dword [rsi], dword ptr [rdi]
call 0x8898af5
xlatb
mov ebp, 0x4368116c
ficomp word [rbx - 0x14]
ret
or ebp, dword [rdx + 0x63]
jb 0x40242c
imul esp, dword ss:[rbx], 0x9839a268
int 0x7b
pop rsi
adc dword [rdx + rax], eax
mov al, 0xad
xor eax, 0xfd5299
add byte [rsi - 0x68ab8bef], dl
add dword [rdi], esi
in al, 0xcc
sub r15b, byte [r15 - 0x6fe3c0f9]
xchg byte [rcx], al
and eax, dword [rdi]
xchg eax, edx
sbb dword [rsp + rdx*2 + 0x20], edx
sbb dword [rdx + 0x31041921], edx
je 0x40244c
xchg eax, edx
je 0x4024ef
xor r9b, al
and edi, ebp
jg 0x4024c8
ljmp [rdi - 0x68]
cwde
leave
and byte [rbx + 0x805300c], al
stosd dword [rdi], eax
pop rax
ror byte [rsi + rcx*2], cl
or ebx, dword [rdi - 0x37]
fxch st(1)
add byte [rcx], al
sti
movsb byte [rdi], byte ptr [rsi]
sbb dword [rdx + rsi*4 + 0x3f], esp
sbb byte [rsi + 3], dl
or dword [rdi + 0x56], ebp
mov cl, 0x87
movabs r10, 0x72ffbf5e0186e48b
mul byte [rsi + 0x15]
scasd eax, dword [rdi]
mov edi, 0x64374826
add al, byte [r15]
imul edi, dword [rdi], -2
enter -0x6467, 0xc
cmpsd dword [rsi], dword ptr [rdi]
adc byte [rax], 0xa6
insb byte [rdi], dx
xor al, byte [rsi]
jp 0x40257a
or dword [rsi + 0x72], ebp
pop rax
rol byte [rdi], 0x3f
mov al, 0xc3
inc dword [rdi + rdi + 0x641c942]
sbb eax, esi
cmp byte [rcx], al
or al, 0xc2
add byte [rdx + 0x19], dh
mov ss, word [rbx]
adc ebx, esi
lodsb al, byte [rsi]
sysret
jmp qword [rax + rcx*8 - 0x7a]
xchg eax, edx
sbb cl, byte [rcx + 0x486c503f]
sbb dword [rax - 0x20], edx
adc byte [rdi], al
or dword [rax - 0x38], edx
xchg byte [rdi + rdi + 0x605b239f], dl
mov eax, 0x330f2f07
sbb dword [rdx + 0x7403f9d], esi
jg 0x402508
ret
enter 0xee2, 0x3f
movabs dword [0x9ff07ff10526e67], eax
insd dword [rdi], dx
and dword [rip - 0x404056db], ecx
movabs eax, dword [0x641c018189064e4]
sbb esi, dword [rdx + 0x7ff03fb1]
lock sub byte [rdi + rdx], ah
leave
in al, dx
add dword [rdi + 0xcdccf24], edi
jg 0x4025ef
or byte [rbx], dh
movabs al, byte [0x72ce4a118fc95c90]
jg 0x402613
adc dword [rbx + 0x62b75707], edx
add edx, dword [rax + 0x72]
mul byte [rsi]
fild word [rdi]
call qword [rax]
outsb dx, byte [rsi]
xor ah, byte [rax]
fucom st(7)
psubb mm0, qword [rdi]
retf
add eax, 0x3ff3ff08
add eax, 0xd71164d8
outsb dx, byte [rsi]
pop rbx
sar al, cl
wait
insb byte [rdi], dx
leave
pop rcx
jg 0x4025de
jg 0x402600
enter -0x6f4a, 0x41
cwde
mov edi, 0x45c8392f
xor ch, byte [rdi]
or byte [rcx], al
add dword [rbp + 0x13], esp
shl byte [rcx], cl
xor byte [rax - 8], ah
cmp byte [rdi], 0xb8
leave
nop
or al, 0xa
add byte [rdi], 0x80
je 0x402629
and byte [rdi + 0x10], bh
or byte [rdx + 0xe], al
xor cl, al
movabs al, byte [0x20e486c1b2012090]
adc eax, 0xb17307f
sbb al, 0x16
xor al, 0x3f
loopne 0x4025c6
int 0xe
adc dword [rbx], edi
xor eax, 0x4a119b5b
movabs rdi, 0xc82bd6793900bb1e
xor bh, bh
js 0x40265c
xchg dword [rax + 0x95fa401], esi
jg 0x402693
add byte [r10 + r10*4], bpl
cmc
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
inc dword [rax]
add byte [rax], al
add byte [rbp + 0x50], dl
pop rax
and dword [rax], eax
add byte [rax], al
add byte [rax], al
push rbp
push rax
pop rax
and dword [rip + 0x2080216], ecx
pop rdx
cmp eax, 0x1a97baac
enter 0x33, 0
jns 0x402694
add byte [rax], al
pop rax
add byte fs:[rax], al
add byte [r8], al
push rax
hlt
add byte [rax], al
add bh, bh
