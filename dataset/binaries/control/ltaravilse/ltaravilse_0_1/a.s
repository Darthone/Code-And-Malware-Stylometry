xor ebp, ebp
mov r9, rdx
pop rsi
mov rdx, rsp
and rsp, 0xfffffffffffffff0
push rax
push rsp
mov r8, sym.__libc_csu_fini
mov rcx, sym.__libc_csu_init
mov rdi, sym.main
call sym.imp.__libc_start_main
hlt
nop word [rax + rax]
mov eax, 0x603097
push rbp
sub rax, obj.__TMC_END__
cmp rax, 0xe
mov rbp, rsp
jbe 0x4009a0
mov eax, 0
test rax, rax
je 0x4009a0
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop word [rax + rax]
pop rbp
ret
nop dword [rax]
nop word cs:[rax + rax]
mov esi, obj.__TMC_END__
push rbp
sub rsi, obj.__TMC_END__
sar rsi, 3
mov rbp, rsp
mov rax, rsi
shr rax, 0x3f
add rsi, rax
sar rsi, 1
je 0x4009e8
mov eax, 0
test rax, rax
je 0x4009e8
pop rbp
mov edi, obj.__TMC_END__
jmp rax
nop dword [rax]
pop rbp
ret
nop word [rax + rax]
cmp byte [rip + 0x2027c1], 0
jne 0x400a0a
push rbp
mov rbp, rsp
call sym.deregister_tm_clones
pop rbp
mov byte [rip + 0x2027ae], 1
ret
nop dword [rax]
mov edi, obj.__JCR_LIST__
cmp qword [rdi], 0
jne 0x400a20
jmp sym.register_tm_clones
nop dword [rax]
mov eax, 0
test rax, rax
je 0x400a1b
push rbp
mov rbp, rsp
call rax
pop rbp
jmp sym.register_tm_clones
push rbp
mov rbp, rsp
movsd qword [rbp - 8], xmm0
movsd qword [rbp - 0x10], xmm1
movsd xmm0, qword [rbp - 8]
divsd xmm0, qword [rbp - 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x48
movsd qword [rbp - 0x38], xmm0
mov qword [rbp - 0x40], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
mov rax, qword [rbp - 0x40]
mov esi, 0
mov rdi, rax
call sym.std::vector_std::pair_double_double__std::allocator_std::pair_double_double___::operator__
movsd xmm2, qword [rax + 8]
movsd qword [rbp - 0x48], xmm2
mov rax, qword [rbp - 0x40]
mov esi, 0
mov rdi, rax
call sym.std::vector_std::pair_double_double__std::allocator_std::pair_double_double___::operator__
movsd xmm1, qword [rax]
movsd xmm0, qword [rbp - 0x38]
subsd xmm0, xmm1
movsd xmm1, qword [rbp - 0x48]
call sym.calc
movq rax, xmm0
mov qword [rbp - 0x28], rax
mov dword [rbp - 0x2c], 1
mov eax, dword [rbp - 0x2c]
movsxd rbx, eax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_std::pair_double_double__std::allocator_std::pair_double_double___::size
cmp rbx, rax
setb al
test al, al
je 0x400b59
mov eax, dword [rbp - 0x2c]
movsxd rdx, eax
mov rax, qword [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::pair_double_double__std::allocator_std::pair_double_double___::operator__
movsd xmm3, qword [rax + 8]
movsd qword [rbp - 0x48], xmm3
mov eax, dword [rbp - 0x2c]
movsxd rdx, eax
mov rax, qword [rbp - 0x40]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::pair_double_double__std::allocator_std::pair_double_double___::operator__
movsd xmm1, qword [rax]
movsd xmm0, qword [rbp - 0x38]
subsd xmm0, xmm1
movsd xmm1, qword [rbp - 0x48]
call sym.calc
movq rax, xmm0
mov qword [rbp - 0x20], rax
lea rdx, [rbp - 0x20]
lea rax, [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::max_double_
movsd xmm0, qword [rax]
movsd qword [rbp - 0x28], xmm0
add dword [rbp - 0x2c], 1
jmp 0x400ac4
movsd xmm1, qword [rbp - 0x28]
movsd xmm0, qword [rbp - 0x38]
divsd xmm0, xmm1
movsd qword [rbp - 0x28], xmm0
movsd xmm0, qword [rbp - 0x28]
mov rax, qword [rbp - 0x18]
xor rax, qword fs:[0x28]
je 0x400b85
call sym.imp.__stack_chk_fail
add rsp, 0x48
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x68
mov rax, qword fs:[0x28]
mov qword [rbp - 0x18], rax
xor eax, eax
lea rax, [rbp - 0x64]
mov rsi, rax
mov edi, obj.std::cin
call sym.std::istream::operator__
mov dword [rbp - 0x58], 1
mov eax, dword [rbp - 0x64]
cmp dword [rbp - 0x58], eax
jg 0x400cd6
lea rax, [rbp - 0x60]
mov rsi, rax
mov edi, obj.std::cin
call sym.std::istream::operator__
mov rdx, rax
lea rax, [rbp - 0x5c]
mov rsi, rax
mov rdi, rdx
call sym.std::istream::operator__
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::allocator_std::pair_double_double__::allocator
mov eax, dword [rbp - 0x5c]
movsxd rcx, eax
lea rdx, [rbp - 0x30]
lea rax, [rbp - 0x50]
mov rsi, rcx
mov rdi, rax
call 0x400e4e
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::allocator_std::pair_double_double__::_allocator
mov dword [rbp - 0x54], 0
mov eax, dword [rbp - 0x5c]
cmp dword [rbp - 0x54], eax
jge 0x400c77
mov eax, dword [rbp - 0x54]
movsxd rdx, eax
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::pair_double_double__std::allocator_std::pair_double_double___::operator__
lea rbx, [rax + 8]
mov eax, dword [rbp - 0x54]
movsxd rdx, eax
lea rax, [rbp - 0x50]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::pair_double_double__std::allocator_std::pair_double_double___::operator__
mov rsi, rax
mov edi, obj.std::cin
call 0x400870
mov rsi, rbx
mov rdi, rax
call 0x400870
add dword [rbp - 0x54], 1
jmp 0x400c23
lea rdx, [rbp - 0x50]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::pair_double_double__std::allocator_std::pair_double_double___::vector
mov eax, dword [rbp - 0x60]
pxor xmm0, xmm0
cvtsi2sd xmm0, eax
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.speed
mov eax, dword [rbp - 0x58]
mov esi, eax
mov edi, str.Case___d:__.6f_n
mov eax, 1
call sym.imp.printf
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::vector_std::pair_double_double__std::allocator_std::pair_double_double___::_vector
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::vector_std::pair_double_double__std::allocator_std::pair_double_double___::_vector
add dword [rbp - 0x58], 1
jmp 0x400bbc
mov eax, 0
mov rcx, qword [rbp - 0x18]
xor rcx, qword fs:[0x28]
je 0x400d36
jmp 0x400d31
mov rbx, rax
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::allocator_std::pair_double_double__::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.std::vector_std::pair_double_double__std::allocator_std::pair_double_double___::_vector
jmp 0x400d1a
mov rbx, rax
lea rax, [rbp - 0x50]
mov rdi, rax
call sym.std::vector_std::pair_double_double__std::allocator_std::pair_double_double___::_vector
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x68
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov dword [rbp - 4], edi
mov dword [rbp - 8], esi
cmp dword [rbp - 4], 1
jne 0x400d78
cmp dword [rbp - 8], 0xffff
jne 0x400d78
mov edi, obj.std::__ioinit
call sym.std::ios_base::Init::Init
mov edx, obj.__dso_handle
mov esi, obj.std::__ioinit
mov edi, sym.std::ios_base::Init::_Init
call sym.imp.__cxa_atexit
nop
leave
ret
push rbp
mov rbp, rsp
mov esi, 0xffff
mov edi, 1
call sym.__static_initialization_and_destruction_0
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 4
add rax, rdx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 8]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 4
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
movsd xmm1, qword [rax]
mov rax, qword [rbp - 0x10]
movsd xmm0, qword [rax]
ucomisd xmm0, xmm1
jbe 0x400e10
mov rax, qword [rbp - 0x10]
jmp 0x400e14
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call method.__gnu_cxx::new_allocator_std::pair_double_double__.new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_double_double__::_new_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::pair_double_double__std::allocator_std::pair_double_double___::_Vector_base
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::vector_std::pair_double_double__std::allocator_std::pair_double_double___::_M_default_initialize
jmp 0x400ea9
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_std::pair_double_double__std::allocator_std::pair_double_double___::__Vector_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::pair_double_double__std::allocator_std::pair_double_double___::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax + 8]
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rsi, rcx
mov rdi, rax
call sym.std::_Destroy_std::pair_double_double___std::pair_double_double__
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::pair_double_double__std::allocator_std::pair_double_double___::__Vector_base
nop
leave
ret
push rbp
mov rbp, rsp
push r13
push r12
push rbx
sub rsp, 0x28
mov qword [rbp - 0x38], rdi
mov qword [rbp - 0x40], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 0x28], rax
xor eax, eax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call method.std::_Vector_base_std::pair_double_double__std::allocator_std::pair_double_double___._M_get_Tp_allocator
mov rdx, rax
lea rax, [rbp - 0x29]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__alloc_traits_std::allocator_std::pair_double_double___::_S_select_on_copy
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_std::pair_double_double__std::allocator_std::pair_double_double___::size
mov rcx, rax
mov rax, qword [rbp - 0x38]
lea rdx, [rbp - 0x29]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::pair_double_double__std::allocator_std::pair_double_double___::_Vector_base
lea rax, [rbp - 0x29]
mov rdi, rax
call sym.std::allocator_std::pair_double_double__::_allocator
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_std::pair_double_double__std::allocator_std::pair_double_double___::_M_get_Tp_allocator
mov r13, rax
mov rax, qword [rbp - 0x38]
mov rbx, qword [rax]
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_std::pair_double_double__std::allocator_std::pair_double_double___::end
mov r12, rax
mov rax, qword [rbp - 0x40]
mov rdi, rax
call sym.std::vector_std::pair_double_double__std::allocator_std::pair_double_double___::begin
mov rcx, r13
mov rdx, rbx
mov rsi, r12
mov rdi, rax
call sym.std::__uninitialized_copy_a___gnu_cxx::__normal_iterator_std::pair_double_double_const__std::vector_std::pair_double_double__std::allocator_std::pair_double_double_____std::pair_double_double___std::pair_double_double__
mov rdx, rax
mov rax, qword [rbp - 0x38]
mov qword [rax + 8], rdx
nop
mov rax, qword [rbp - 0x28]
xor rax, qword fs:[0x28]
je 0x400ffc
jmp 0x400ff7
mov rbx, rax
lea rax, [rbp - 0x29]
mov rdi, rax
call sym.std::allocator_std::pair_double_double__::_allocator
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
mov rbx, rax
mov rax, qword [rbp - 0x38]
mov rdi, rax
call sym.std::_Vector_base_std::pair_double_double__std::allocator_std::pair_double_double___::__Vector_base
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
call sym.imp.__stack_chk_fail
add rsp, 0x28
pop rbx
pop r12
pop r13
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::allocator_std::pair_double_double__::_allocator
nop
leave
ret
nop
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x28
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x28], rdx
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x28]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::pair_double_double__std::allocator_std::pair_double_double___::_Vector_impl::_Vector_impl
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::pair_double_double__std::allocator_std::pair_double_double___::_M_create_storage
jmp 0x401093
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::_Vector_base_std::pair_double_double__std::allocator_std::pair_double_double___::_Vector_impl::__Vector_impl
mov rax, rbx
mov rdi, rax
call sym.imp._Unwind_Resume
add rsp, 0x28
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax + 0x10]
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
sub rdx, rax
mov rax, rdx
sar rax, 4
mov rdx, rax
mov rax, qword [rbp - 8]
mov rcx, qword [rax]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.std::_Vector_base_std::pair_double_double__std::allocator_std::pair_double_double___::_M_deallocate
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::pair_double_double__std::allocator_std::pair_double_double___::_Vector_impl::__Vector_impl
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::_Vector_base_std::pair_double_double__std::allocator_std::pair_double_double___::_M_get_Tp_allocator
mov rdx, rax
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_default_n_a_std::pair_double_double___unsignedlong_std::pair_double_double__
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_std::pair_double_double___
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x18]
mov rdx, qword [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_double_double___::select_on_container_copy_construction
mov rax, qword [rbp - 0x18]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x4011b0
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax]
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_double_const__std::vector_std::pair_double_double__std::allocator_std::pair_double_double____::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x401211
call sym.imp.__stack_chk_fail
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x28], rdi
mov rax, qword fs:[0x28]
mov qword [rbp - 8], rax
xor eax, eax
mov rax, qword [rbp - 0x28]
mov rax, qword [rax + 8]
mov qword [rbp - 0x10], rax
lea rdx, [rbp - 0x10]
lea rax, [rbp - 0x20]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_double_const__std::vector_std::pair_double_double__std::allocator_std::pair_double_double____::__normal_iterator
mov rax, qword [rbp - 0x20]
mov rcx, qword [rbp - 8]
xor rcx, qword fs:[0x28]
je 0x401266
call sym.imp.__stack_chk_fail
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x10], rdi
mov qword [rbp - 0x20], rsi
mov qword [rbp - 0x18], rdx
mov qword [rbp - 8], rcx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::uninitialized_copy___gnu_cxx::__normal_iterator_std::pair_double_double_const__std::vector_std::pair_double_double__std::allocator_std::pair_double_double_____std::pair_double_double___
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call 0x4013ec
mov rax, qword [rbp - 8]
mov qword [rax], 0
mov rax, qword [rbp - 8]
mov qword [rax + 8], 0
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], 0
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Vector_base_std::pair_double_double__std::allocator_std::pair_double_double___::_M_allocate
mov rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax + 8], rdx
mov rax, qword [rbp - 8]
mov rax, qword [rax]
mov rdx, qword [rbp - 0x10]
shl rdx, 4
add rdx, rax
mov rax, qword [rbp - 8]
mov qword [rax + 0x10], rdx
nop
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
cmp qword [rbp - 0x10], 0
je 0x401370
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rsi, rcx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_double_double___::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::__uninitialized_default_n_std::pair_double_double___unsignedlong_
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.std::_Destroy_aux_true_::__destroy_std::pair_double_double___
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call 0x4013ec
mov rax, qword [rbp - 8]
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rdx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_double_double__::new_allocator
nop
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rax, qword [rbp - 0x10]
mov rdx, qword [rax]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x30
mov qword [rbp - 0x20], rdi
mov qword [rbp - 0x30], rsi
mov qword [rbp - 0x28], rdx
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x28]
mov rcx, qword [rbp - 0x30]
mov rax, qword [rbp - 0x20]
mov rsi, rcx
mov rdi, rax
call sym.std::__uninitialized_copy_false_::__uninit_copy___gnu_cxx::__normal_iterator_std::pair_double_double_const__std::vector_std::pair_double_double__std::allocator_std::pair_double_double_____std::pair_double_double___
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
cmp qword [rbp - 0x10], 0
je 0x40148c
mov rax, qword [rbp - 8]
mov rdx, qword [rbp - 0x10]
mov rsi, rdx
mov rdi, rax
call sym.std::allocator_traits_std::allocator_std::pair_double_double___::allocate
jmp 0x401491
mov eax, 0
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rdx, qword [rbp - 0x18]
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_double_double__::deallocate
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov byte [rbp - 1], 1
mov rdx, qword [rbp - 0x20]
mov rax, qword [rbp - 0x18]
mov rsi, rdx
mov rdi, rax
call sym.std::__uninitialized_default_n_1_false_::__uninit_default_n_std::pair_double_double___unsignedlong_
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
nop
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x38
mov qword [rbp - 0x30], rdi
mov qword [rbp - 0x40], rsi
mov qword [rbp - 0x38], rdx
mov rax, qword [rbp - 0x38]
mov qword [rbp - 0x18], rax
lea rdx, [rbp - 0x40]
lea rax, [rbp - 0x30]
mov rsi, rdx
mov rdi, rax
call sym.__gnu_cxx::operator___std::pair_double_double_const__std::vector_std::pair_double_double__std::allocator_std::pair_double_double____
test al, al
je 0x401576
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_double_const__std::vector_std::pair_double_double__std::allocator_std::pair_double_double____::operator_
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.std::__addressof_std::pair_double_double__
mov rsi, rbx
mov rdi, rax
call sym.std::_Construct_std::pair_double_double__std::pair_double_double_const__
lea rax, [rbp - 0x30]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_double_const__std::vector_std::pair_double_double__std::allocator_std::pair_double_double____::operator__
add qword [rbp - 0x18], 0x10
jmp 0x401526
mov rax, qword [rbp - 0x18]
add rsp, 0x38
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov rcx, qword [rbp - 0x10]
mov rax, qword [rbp - 8]
mov edx, 0
mov rsi, rcx
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_double_double__::allocate
leave
ret
nop
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 0x10]
mov rdi, rax
call sym.operatordelete
nop
leave
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov qword [rbp - 8], rax
cmp qword [rbp - 0x20], 0
je 0x40160e
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.std::__addressof_std::pair_double_double__
mov rdi, rax
call sym.std::_Construct_std::pair_double_double__
sub qword [rbp - 0x20], 1
add qword [rbp - 8], 0x10
jmp 0x4015e7
mov rax, qword [rbp - 8]
leave
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x18]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_double_const__std::vector_std::pair_double_double__std::allocator_std::pair_double_double____::base
mov rbx, qword [rax]
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.__gnu_cxx::__normal_iterator_std::pair_double_double_const__std::vector_std::pair_double_double__std::allocator_std::pair_double_double____::base
mov rax, qword [rax]
cmp rbx, rax
setne al
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
lea rdx, [rax + 0x10]
mov rax, qword [rbp - 8]
mov qword [rax], rdx
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rax, qword [rax]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
push rbx
sub rsp, 0x18
mov qword [rbp - 0x18], rdi
mov qword [rbp - 0x20], rsi
mov rax, qword [rbp - 0x20]
mov rdi, rax
call sym.std::forward_std::pair_double_double_const__
mov rbx, rax
mov rax, qword [rbp - 0x18]
mov rsi, rax
mov edi, 0x10
call 0x400d90
mov rcx, rax
test rcx, rcx
je 0x4016e4
mov rax, qword [rbx]
mov rdx, qword [rbx + 8]
mov qword [rcx], rax
mov qword [rcx + 8], rdx
nop
add rsp, 0x18
pop rbx
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x20
mov qword [rbp - 8], rdi
mov qword [rbp - 0x10], rsi
mov qword [rbp - 0x18], rdx
mov rax, qword [rbp - 8]
mov rdi, rax
call sym.__gnu_cxx::new_allocator_std::pair_double_double__::max_size
cmp rax, qword [rbp - 0x10]
setb al
test al, al
je 0x40171c
call sym.std::__throw_bad_alloc
mov rax, qword [rbp - 0x10]
shl rax, 4
mov rdi, rax
call sym.operatornew
leave
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pxor xmm0, xmm0
movsd qword [rax], xmm0
mov rax, qword [rbp - 8]
pxor xmm0, xmm0
movsd qword [rax + 8], xmm0
nop
pop rbp
ret
push rbp
mov rbp, rsp
sub rsp, 0x10
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
mov rsi, rax
mov edi, 0x10
call 0x400d90
test rax, rax
je 0x40177c
mov rdi, rax
call sym.std::pair_double_double_::pair
nop
leave
ret
nop
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
mov rax, qword [rbp - 8]
pop rbp
ret
push rbp
mov rbp, rsp
mov qword [rbp - 8], rdi
movabs rax, 0xfffffffffffffff
pop rbp
ret
nop word cs:[rax + rax]
nop dword [rax]
push r15
push r14
mov r15d, edi
push r13
push r12
lea r12, [rip + 0x201626]
push rbp
lea rbp, [rip + 0x20162e]
push rbx
mov r14, rsi
mov r13, rdx
sub rbp, r12
sub rsp, 8
sar rbp, 3
call sym._init
test rbp, rbp
je 0x401806
xor ebx, ebx
nop dword [rax + rax]
mov rdx, r13
mov rsi, r14
mov edi, r15d
call qword [r12 + rbx*8]
add rbx, 1
cmp rbx, rbp
jne 0x4017f0
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
nop word cs:[rax + rax]
ret
add byte [rax], al
sub rsp, 8
add rsp, 8
ret
add byte [rax], al
add byte [rcx], al
add dword [rax], eax
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add al, 0
add byte [rax], al
or byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], 0
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add al, 0
add byte [rax], al
or byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, 0
add byte [rax], al
add eax, 0x6000000
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], cl
or byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
or al, byte [rax]
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
or al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rbx + 0x61]
jae 0x401949
and byte [rbx], ah
and eax, 0x25203a64
or al, byte ss:[rax]
add dword [rbx], ebx
add edi, dword [rbx]
in al, dx
add dword [rax], eax
add byte [rax + rax], bh
add byte [rax], al
out dx, eax
cmp byte [rdx], al
add byte [rax], al
push rax
dec dword [rax]
add al, byte [rax]
add byte [rsi - 0xf], al
inc dword [rax + 0x60000002]
int1
jmp qword [rax - 0x63fffffe]
call 0x4d401927
hlt
call qword [rax - 0x74fffff7]
hlt
push qword [rax - 0x5ffffff7]
hlt
jmp qword [rax + 2]
add byte [rax], al
mov dl, 0xf4
call qword [rax]
add eax, dword [rax]
add dl, dl
hlt
push qword [rax]
add eax, dword [rax]
add al, bh
hlt
call qword [rax + 3]
add byte [rax], al
cmc
push qword [rax + 3]
add byte [rax], al
cmc
call qword [rax + 0x5e000003]
cmc
push qword [rax - 0x3ffffffd]
cmc
fadd dword [rbx]
add byte [rax], al
add al, 0xf6
inc dword [rax]
add al, 0
add byte [rax], bl
idiv edi
push qword [rax]
add al, 0
add byte [rdi + rsi*8], ah
call qword [rax + 4]
add byte [rax], al
xor bh, dh
push qword [rax + 4]
add byte [rax], al
idiv rdi
call qword [rax - 0x55fffffc]
idiv edi
mov eax, 0xfa000004
idiv edi
jmp rax
add al, 0
add byte [rsi], bh
clc
inc dword [rax]
add eax, 0xf84c0000
jmp qword [rax]
add eax, 0xf8760000
inc dword [rax + 5]
add byte [rax], al
ret 0xfff8
jmp qword [rax + 5]
add byte [rax], al
sar al, 1
inc dword [rax + 0x24000005]
stc
jmp qword [rax + 0x78000005]
stc
inc eax
add eax, 0xf9aa0000
jmp rax
add eax, 0xf9f40000
inc dword [rax]
add byte [rax], al
cli
jmp qword [rax]
add byte [rax], al
cmp edx, -1
inc dword [rax + 6]
add byte [rax], al
lodsb al, byte [rsi]
cli
jmp qword [rax + 6]
add byte [rax], al
sar dl, cl
inc dword [rax - 0x3fffffa]
cli
jmp qword [rax + 0x22000006]
sti
inc eax
add byte [rax], al
sti
jmp rax
add byte [rax], al
jo 0x401a29
inc dword [rax]
add byte [rax], al
movabs dword [0xd100000720fffffb], eax
sti
inc dword [rax + 7]
add byte [rax], al
cli
sti
jmp qword [rax + 7]
add byte [rax], al
or bh, ah
inc dword [rax + 0x19000007]
cld
jmp qword [rax - 0x6efffff9]
cld
dec eax
add byte [rax], al
mov esp, 0xe8fffffc
add byte [rax], al
cld
dec dword [rax]
or byte [rax], al
add byte [rdi*8 + 0x828ffff], ah
add byte [rax], al
std
dec dword [rax + 8]
add byte [rax], al
cmp ch, 0xff
ljmp [rax + 8]
add byte [rax], al
std
dec dword [rax - 0x60fffff8]
std
ljmp [rax - 0x52fffff8]
std
dec eax
or byte [rax], al
add ah, bh
std
push rax
or byte [rax], al
add byte [rsi], bh
call qword [rax]
or dword [rax], eax
add byte [rdx - 2], ah
push qword [rax]
or dword [rax], eax
add byte [rax + 0x50fffffe], dl
or dword [rax], eax
add byte [rsi + 0x70fffffe], bl
or dword [rax], eax
add al, al
call rax
or dword [rax], eax
add byte [rax], dh
lcall [rax]
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x401aff
add dword [rbx], ebx
or al, 7
or byte [rax + 0x14100701], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
out dx, al
ljmp [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x52], edi
add byte [rcx], al
js 0x401b2f
add dword [rbx], ebx
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
and ch, ch
jmp rax
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0xe], al
sbb byte [rdx + 0xf], cl
or esi, dword [rdi + 8]
add byte [rax], 0x3f
sbb bh, byte [rbx]
sub dh, byte [rbx]
and al, 0x22
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], r8b
add byte [rax], bh
call qword [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte fs:[rax], al
add byte [rsi + 0x1affffee], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rbp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
test byte [rax], al
add byte [rax], al
mov eax, 0x3cffffee
add dword [rax], eax
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
xor al, byte [rcx]
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rdx + 0x50], edi
push rdx
add byte [rcx], al
js 0x401bd9
add eax, dword [rax]
or dword [rax], eax
add ebx, dword [rbx]
or al, 7
or byte [rax + 0x24000001], dl
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
lodsb al, byte [rsi]
out dx, eax
push qword [rcx + 0x4000001]
and al, 0x23
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 3
cmpsd dword [rsi], dword ptr [rdi]
add dword [rdi + rax], ecx
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
hlt
add byte [rax], al
add byte [rdx + 0x20fffff1], bl
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 1
add byte [rax], al
int1
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 1
add byte [rax], al
movabs al, byte [0x2efffff1]
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
push rsp
add dword [rax], eax
add byte [rsi + 0x1bfffff1], ch
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x401c87
add byte [rax], al
stosb byte [rdi], al
int1
lcall [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
in al, dx
add byte [rax], al
add byte [rsi + 0x62fffff1], ah
add byte [rax], al
add byte [rdx + rax*2], al
and eax, dword [rax]
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
adc al, 1
add byte [rax], al
loopne 0x401cc3
inc dword [rax + rax]
add byte [rdx + rdx*2], al
and eax, dword [rax]
adc byte [rsi + 0x60d4302], al
jg 0x401cf3
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub al, 0
add byte [rax], al
cmp al, 1
add byte [rax], al
cld
int1
call qword [rbx]
add dword [rax], eax
add byte [rsi + rdx*2], al
and eax, dword [rax]
adc byte [rsi + 0x60d4302], al
lea rax, [r11]
mov word [rbx + rax*4], es
add eax, 0xc010503
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
adc al, 2
add byte [rax], al
loopne 0x401d1c
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 2
add byte [rax], al
int3
dec dword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
add al, byte [rax]
add byte [rax + 0x1bfffff2], bh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
push rsi
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
int3
add dword [rax], eax
add byte [rdx + rsi*8 + 0x5effff], dh
add byte [rax], al
add al, 0x6e
and eax, dword [rax]
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
push rsp
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
hlt
add dword [rax], eax
add dl, ch
call qword [rax]
add byte [rax], al
add al, 0x7a
and eax, dword [rax]
adc byte [rsi + 0x60d4302], al
add cl, byte [rbx + 0xc]
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add al, byte [rax]
add byte [rdx], dl
inc dword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jle 0x401df7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 2
add byte [rax], al
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 3
add byte [rax], al
and al, 0xf3
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 3
add byte [rax], al
dec dword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add al, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add r8d, dword [rax]
add byte [rdx - 0xd], bl
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add eax, dword fs:[rax]
add byte [rax - 0xd], cl
call qword [rbx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rsi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
test byte [rbx], al
add byte [rax], al
jl 0x401e8d
call qword [rax + rax]
add byte [rax], al
adc byte [rsi + 0x60d4302], al
add cl, byte [rdi + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add eax, dword [rax]
add byte [rax + 0x31fffff3], dh
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add eax, dword [rax]
add dl, al
dec dword [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
in al, 3
add byte [rax], al
in al, dx
lcall [rcx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dl, byte [rsp + rcx + 7]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
add al, 4
add byte [rax], al
hlt
push qword [rip]
adc byte [rsi + 0x60d4302], al
jo 0x401f37
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
and al, 4
add byte [rax], al
cmp esi, esp
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0
add byte [rsp + rsi*8 - 1], al
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0
add byte [rdx - 0xc], cl
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
test byte [rax + rax], al
add byte [rsp + rsi*8 - 1], dl
jmp qword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add al, 0
add byte [rdx - 0xc], bl
lcall [rip]
adc byte [rsi + 0x60d4302], al
pop rax
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 0
add byte [rdi - 0xc], dl
push qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
insb byte [rdi], dx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, 4
add byte [rax], al
push 0x33fffff4
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add al, 5
add byte [rax], al
jnp 0x40200e
ljmp [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
imul ecx, dword [rdi + rax], 8
sbb al, 0
add byte [rax], al
and al, 5
add byte [rax], al
mov esp, esi
ljmp [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add eax, 0xf4920000
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add eax, 0xf4820000
dec dword [rdi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
test byte [rip - 0xb8f0000], al
js 0x40209e
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
outsb dx, byte [rsi]
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
lodsb al, byte [rsi]
add eax, 0xf4c10000
ljmp [rdx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
int3
add eax, 0xf4cc0000
jmp qword [rbx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rsi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
in al, dx
add eax, 0xf4cf0000
inc dword [rbp]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add al, byte [rax + 0xc]
or byte [rax], al
add byte [rax + rax], bl
add byte [rax], al
or al, 6
add byte [rax], al
hlt
hlt
cmp al, 0
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 0x72
or al, 7
or byte [rax + rax], bl
add byte [rax], al
sub al, 6
add byte [rax], al
adc ch, dh
jmp qword [rax]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
pop rbx
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
adc ch, dh
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
insb byte [rdi], dx
add byte [rax], al
hlt
call qword [rcx]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
mov word [rsi], es
add byte [rax], al
out dx, eax
hlt
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
and al, 0
add byte [rax], al
lodsb al, byte [rsi]
add byte [rax], al
hlt
dec dword [rdi]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
add dword [r11], 2
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add al, 0xf5
inc dword [rdx]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
jge 0x402207
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
hlt
add byte [rax], al
cmc
jmp qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
pop rdi
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
adc al, 7
add byte [rax], al
sub dh, ch
ljmp [rip]
adc byte [rsi + 0x60d4302], al
push 0x8070c
add byte [rax], al
sbb al, 0
add byte [rax], al
xor al, 7
add byte [rax], al
cmp ch, dh
dec dword [rsi]
add byte [rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
push rsp
add byte [rax], al
cmc
call qword [rax + rax]
add byte [rax], al
add byte [rcx + 0xe], al
adc byte [rsi + 0x60d4302], al
or al, 7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
je 0x40228d
add byte [rax], al
mov ch, 0xea
add byte ds:[rax], al
add byte [rax], al
adc byte [rsi + 0x60d4302], al
jns 0x4022a7
or byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
xchg eax, esp
add byte [rax], al
shr edx, cl
call qword [rip]
adc byte [rsi + 0x60d4302], al
push rax
or al, 7
or byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rdi + rax - 0xb180000], dh
jmp qword [rbp]
add byte [rax], al
add byte [rdx + 0xe], al
adc byte [rdi + 0x180e4202], cl
mov es, word [rbx]
and byte [rbp + 0x280e4204], cl
mov word [rip - 0x79cff1b8], es
cmp byte [rbx + 0x400e4d07], al
jb 0x402302
cmp byte [rcx + 0xe], al
xor byte [rcx + 0xe], al
sub byte [rdx + 0xe], al
and byte [rdx + 0xe], al
sbb byte [rdx + 0xe], al
adc byte [rdx + 0xe], al
or byte [rax], al
adc al, 0
add byte [rax], al
cld
add byte [rax], al
adc ch, dh
inc dword [rdx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
inc dword [rcx]
sbb ah, byte [rbx + rdi]
add byte [rax], al
jg 0x402333
loopne 0x402332
add ch, dl
add dword [rcx], ebp
mov eax, dword [rbx]
add byte [rdx + rax + 0x2fa05], ah
cmc
add dh, byte [rax]
add byte [rax], al
inc dword [rcx]
or al, 0x27
add eax, 0x53a0000
add byte [r14 + 5], dl
add byte [rax], al
inc dword [rcx]
add bh, bh
inc dword [rcx]
adc al, 0x3d
add eax, 0x55f0000
iretd
add dword [rax], eax
lodsd eax, dword [rsi]
add dword [rip - 0x1bfffe17], eax
add dword [rdi], ebx
add byte [rax], al
inc dword [rcx]
or byte [rsi], dh
add eax, 0x552003d
add byte [rax], al
inc dword [rcx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rdx], cl
add byte [rax], al
add byte [rax], al
add byte [rbx + 0xd], bh
add byte [rax], al
add byte [rax], al
add al, dh
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rip], cl
add byte [rax], al
add byte [rax + rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
sub eax, 0x60
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
sub eax, 0x60
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmc
ljmp [rdi]
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax + 0x4004], dl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
add al, byte [rax]
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc eax, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rax], ah
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
add byte [rax], al
add byte [rax], al
add byte [rdi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bh
ljmp [rdi]
add byte [rax], al
add byte [rax + 6], al
add byte [rax], al
add byte [rax], al
add bh, bh
ljmp [rdi]
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
ljmp [rdi]
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 8], ah
add byte [rax], al
add byte [rax], al
add byte [rsi + 8], dh
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x4008], al
add byte [rax], al
add byte [rsi + 0x4008], dl
add byte [rax], al
add byte [rsi + 0x4008], ah
add byte [rax], al
add byte [rsi + 0x4008], dh
add byte [rax], al
add dh, al
or byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
out 8, al
add byte [rax], al
add byte [rax], al
add dh, dh
or byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
or dword es:[rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp spl, byte [r8]
sub byte [rbp + 0x62], dl
jne 0x403108
je 0x403111
and byte [rip + 0x302e342e], dh
sub eax, 0x75627536
outsb dx, byte [rsi]
je 0x40311f
xor dword [rsi + 0x31], edi
xor byte cs:[rsi + rbp], dh
xor al, 0x29
and byte [rip + 0x302e342e], dh
and byte [rdx], dh
xor byte [rcx], dh
xor byte ss:[rsi], dh
xor byte [rcx], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add al, byte [rax]
push rsp
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, dword [rax]
je 0x40311c
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], al
cwde
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add eax, 0x4002c800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], al
add byte [rax + 0x4004], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], cl
add byte [rax + 6], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], cl
add al, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdx], cl
add al, dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], cl
add byte [rax], ch
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or al, 0
push rax
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
or eax, 0x40093000
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], cl
add byte [rax + 9], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], cl
add byte [rax + rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], dl
add byte [rax], dh
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc dword [rax], eax
lock sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
adc al, byte [rax]
loopne 0x40329c
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], dl
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], dl
call 0x4092e2
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rip + 0x602df800], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rdi], dl
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax], bl
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rcx], bl
add byte [rax], al
xor byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
sbb al, byte [rax]
xor byte [rax], 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rbx], bl
add byte [rax + 0x6030], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], al
add byte [rax + rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add al, 0
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 9], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add byte [rax + 0x4009], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rdx], al
add byte [rsi], cl
add al, dh
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add byte [rcx], al
add byte [rbx], bl
add byte [rax + 0x6031], bh
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add byte [rax], al
add dword [rax], eax
adc eax, 0x602df800
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, byte [rax]
add byte [rax], dl
or al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg byte [rax], al
add byte [rax], al
add dword [rax], eax
adc al, 0
call 0x40947a
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x4000000], ah
add cl, dh
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000000], ch
add byte [rax], dl
add byte [rax], bh
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov byte [rax], 0
add byte [rcx], al
add byte [rax], dl
add byte [rcx], bh
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
fild dword [rax]
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
cmp bl, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
add byte [rax], al
add byte [rcx], al
add byte [rbx], bl
add byte [rcx + 0x6031], bh
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, dh
add byte [rax], al
add byte [rcx], al
add byte [rax], dl
add byte [rax + rbx], bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x18], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add dword [rax], eax
add byte [rcx], al
add byte [rax], dl
add byte [rcx + 0x18], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 1], al
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rbp
add dword [rax], eax
add byte [rcx], al
add byte [rax], dl
add byte [rax + rbx + 0x40], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
je 0x40354b
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, esp
add dword [rax], eax
add byte [rcx], al
add byte [rax], dl
add byte [rax + rbx + 0x40], cl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dh, 1
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
push rax
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
xlatb
add dword [rax], eax
add byte [rcx], al
add byte [rax], dl
add byte [rax + rbx + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
cld
add dword [rax], eax
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x18], bl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rdx]
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
pop rsp
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp eax, 0x1000002
add byte [rax], dl
add byte [rax + 0x18], ah
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rdx
add al, byte [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax + rbx + 0x40], ah
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
js 0x40360c
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
push 0x4018
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, edi
add al, byte [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax + rbx + 0x40], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000002
add byte [rax], dl
add byte [rax + 0x18], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
out 2, eax
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
je 0x403672
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
lsl eax, dword [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x18], bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax + rbx + 0x40], bh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rdi
add eax, dword [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x4018], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax + rbx + 0x40], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
stosd dword [rdi], eax
add eax, dword [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x4018], cl
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, dword [rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax + rbx + 0x40], cl
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax + rax], eax
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x4018], dl
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub al, byte [rax + rax]
add byte [rcx], al
add byte [rax], dl
add byte [rax + rbx + 0x40], dl
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x4018], bl
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
js 0x403746
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
pushfq
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsb byte [rdi], byte ptr [rsi]
add al, 0
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x4018], ah
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
int3
add al, 0
add byte [rcx], al
add byte [rax], dl
add byte [rax + rbx + 0x40], ah
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rcx], al
add byte [rax], dl
add byte [rax + 0x4018], ch
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb dword [rip + 0x10000], eax
adc byte [rax], al
lodsb al, byte [rsi]
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x10000
adc byte [rax], al
mov al, 0x18
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x10000
adc byte [rax], al
mov ah, 0x18
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
lea eax, [rip + 0x10000]
adc byte [rax], al
mov eax, 0x4018
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov bl, 5
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
mov esp, 0x4018
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
fadd qword [rip + 0x10000]
adc byte [rax], al
rcr byte [rax], 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rsi]
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub byte [rsi], al
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
enter 0x4018, 0
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
push rdx
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
int3
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
jge 0x403880
add byte [rax], al
add dword [rax], eax
adc byte [rax], al
rcr byte [rax], 1
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs dword [0xd800100001000006], eax
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
leave
add byte [rax], al
add al, byte [rax]
add byte [rip + 0x400d], bh
add byte [rax], al
add byte [rsi], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bh
add byte [rax], al
add al, byte [rax]
add byte [rbx + 0xd], bh
add byte [rax], al
add byte [rax], al
add byte [rip], dl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add dword [rax], eax
adc al, byte [rax]
and byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
int1
inc dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + rax], ch
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
lock sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
sbb dword [rax], eax
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 7], dl
add byte [rax], al
add byte [rax], al
adc al, 0
clc
sub eax, 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
call 0x4099ba
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 7], bh
add byte [rax], al
add dword [rax], eax
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2000000e], ah
add byte [rdx], bl
add byte [rax + 0x6030], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x11000007], al
add byte [rbx], bl
add byte [rax + 0x6030], ah
add byte [rax], al
add byte [rax], bl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax + 0x22000007], bl
add byte [rsi], cl
add byte [rdx], dl
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add ch, ah
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
stc
add byte [rax], al
and al, byte [rax]
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], ah
or byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bh
or byte [rax], al
add byte [rdx], dl
add byte [rsi], cl
add byte [rax], ah
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [r8], r8b
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x400d], ah
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1200000e], ch
add byte [rsi], cl
add byte [rax + 9], al
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rcx], dh
add byte [rdx], ah
add byte [rsi], cl
add ah, ah
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
pop rcx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000008], dh
add byte [rsi], cl
add byte [rsi + 0x11], ah
add byte [rax], al
add byte [rax], al
add byte [rax + rax], cl
add byte [rax], al
add byte [rax], al
add cl, bh
or byte [rax], al
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x4010], bl
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, 0x22000009
add byte [rsi], cl
add ah, dh
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi + 9], cl
add byte [rax], al
and al, byte [rax]
add ah, ch
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg byte [rcx], cl
add byte [rax], al
and al, byte [rax]
add byte [rsi], bh
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
xor eax, 0
add byte [rax], al
add bl, al
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, dh
or dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], cl
adc byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rbx + rdx + 0x40], bl
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0xa], al
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4012], bl
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
jg 0x403b9c
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov cs, word [rdx]
add byte [rax], al
and byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs byte [0x2e000e002200000a], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov ch, 0xa
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
leave
or al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x16], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
or eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add dl, ch
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 8], cl
add byte [rax], al
adc al, byte [rax]
verr word [rax + rbx]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0xb], cl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jo 0x403c5d
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4011], dh
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2200000b], dh
add byte [rsi], cl
add byte [rax], ah
adc byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], cl
or al, 0
add byte [rdx], ah
add byte [rsi], cl
add dl, bh
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
or al, 0
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0xc], dl
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x400d], dl
add byte [rax], al
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0xc], bl
add byte [rax], al
and al, byte [rax]
add byte [rax + rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2200000c], cl
add byte [rsi], cl
add al, al
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
push rbx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x2200000c], dh
add byte [rsi], cl
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
enter 0xc, 0
and al, byte [rax]
add byte [rax + rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
stc
or al, 0
add byte [rdx], dl
add byte [rax], al
add al, al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, 0x220000
add byte [rcx + rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0xd], cl
add byte [rax], al
and al, byte [rax]
add byte [rcx + 0x4015], al
add byte [rax], al
add byte [rdx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x2000000d], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x2200000d], bl
add byte [rsi], cl
add ah, ch
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x2200000d], bh
add byte [rsi], cl
add byte [rsi], ch
adc dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bh
or eax, 0x110000
adc byte [rax], al
xor byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rsi], cl
add byte [rax], al
and al, byte [rax]
add al, ch
or eax, 0x40
add byte [rax], al
add byte cs:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
adc al, byte [rax]
add byte [rax + 0xa], dl
add byte [rax], al
add byte [rax], al
add byte [rcx + rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x13], dh
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x2000000e], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x1000000e], ah
add byte [rdx], bl
add byte [rax + 0x6030], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x2200000e], dh
add byte [rsi], cl
add byte [rax + 0x400e], dh
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add ch, dl
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0x16], bh
add byte [rax], al
add byte [rax], al
add byte [rcx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
sldt word [rax]
and al, byte [rax]
add dl, ch
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0xf], bl
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x4010], bl
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
test dword [rdi], ecx
add byte [rax], al
and al, byte [rax]
add byte [rsi + 0xe], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
scasd eax, dword [rdi]
sldt word [rax]
and al, byte [rax]
add bh, cl
adc eax, 0x40
add byte [rax], al
add byte [r8], r8b
add byte [rax], al
add byte [rax], al
add byte [rax + rdx], al
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x4016], bl
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor edx, dword [rax]
add byte [rax], al
and al, byte [rax]
add byte [rdx], dl
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rip], bl
add byte [rax], al
add byte [rax + 0x22000010], al
add byte [rsi], cl
add byte [rcx], cl
adc eax, 0x40
add byte [rax], al
js 0x403f32
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rcx], dl
add bl, byte [rdx]
add byte [rax + 0x6030], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], dl
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add dl, al
or eax, 0x40
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bh
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + rdx], bh
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
insb byte [rdi], dx
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rdi], ch
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, bl
adc dword [rax], eax
add byte [rcx], dl
add bl, byte [rdx]
add byte [rax + 0x6030], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, ah
adc dword [rax], eax
add byte [rdx], ah
add byte [rsi], cl
add byte [rax], cl
adc byte [rax], al
add byte [rax], al
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0x12
add byte [rax], al
adc al, byte [rax]
add byte [rax + 0x4017], dh
add byte [rax], al
add byte [rbp], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, 0x12
add byte [rax], al
and al, byte [rax]
add byte [rbp + rdx + 0x40], ch
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rdi], al
add byte [rax], al
adc al, byte [rax]
add byte [rsi], dh
or al, byte [rax]
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rdx + 0x17], dl
add byte [rax], al
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add byte [rdx + 0x22000012], cl
add byte [rsi], cl
add byte [rsi + 0x4017], cl
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
rcl byte [rdx], 0
add byte [rdx], ah
add byte [rsi], cl
add dl, bh
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, dh
adc al, byte [rax]
add byte [rax], dl
add byte [rbx], bl
add byte [rax + 0x6030], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bh
adc al, byte [rax]
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x16], dh
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + rdx], ah
add byte [rax], al
and al, byte [rax]
add byte [rdx + rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rbx + rdx], cl
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x13], ch
add byte [rax], al
and al, byte [rax]
add ah, ch
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx + 0x22000013], al
add byte [rsi], cl
add byte [rdx], dh
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000013], bl
add byte [rsi], cl
add byte [rax + 0x400e], dh
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x22000013], bh
add byte [rsi], cl
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, dl
adc eax, dword [rax]
add byte [rdx], ah
add byte [rsi], cl
add dl, al
adc eax, dword [rax]
add byte [rax], al
add byte [rax], al
sub dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
sub al, 0x14
add byte [rax], al
and al, byte [rax]
add byte [rsi + rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax + rax], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
test dword [rax + rax], edx
add byte [rdx], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbp + 0x22000014], bl
add byte [rsi], cl
add byte [rsi + 0xe], cl
add byte [rax], al
add byte [rax], al
add byte [rdx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x14], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 7], ah
add byte [rax], al
adc byte [rax], al
sbb eax, dword [rax]
sal byte [rcx], 0x60
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dh, bh
adc al, 0
add byte [rdx], ah
add byte [rsi], cl
add byte [rax + 0x12], ch
add byte [rax], al
add byte [rax], al
add byte [rcx], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x15], bh
add byte [rax], al
and al, byte [rax]
add byte [rbx + 0x4014], dl
add byte [rax], al
add byte [rsi], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x22000015], bh
add byte [rsi], cl
add byte [rdx + 0x4012], bl
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
not dword [rip + 0x220000]
add byte [rax], ah
adc byte [rax], al
add byte [rax], al
add byte [rax], al
sbb eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rsi], edx
add byte [rax], al
and al, byte [rax]
add byte [rdx + 0x17], dl
add byte [rax], al
add byte [rax], al
add byte [rip], ch
add byte [rax], al
add byte [rbx + 0x16], bl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rsi], 0x220000
add ah, dh
add byte [rax], al
add byte [rax], al
add byte [rbx], dl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx + 0x22000016], ch
add byte [rsi], cl
add byte [rdi + 0x4016], cl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dl, ch
add byte [rax], al
and al, byte [rax]
add byte [rax + 0x4017], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], dh
add byte [rax], al
adc byte [rax], al
sbb al, byte [rax]
nop
xor byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi + 0x17], bl
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
jb 0x4042e1
add byte [rax], al
adc al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dl, byte [rdi]
add byte [rax], al
adc al, byte [rax]
add byte [rbx + rcx + 0x40], cl
add byte [rax], al
mov cl, 1
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and al, byte [rax]
add byte [rbp + 0x4016], bl
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc al, byte [rax]
add byte [rdx], dl
add byte [rbx], cl
add byte [rax], ch
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov esi, 0x22000017
add byte [rsi], cl
add cl, al
adc al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rcx], ch
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movsxd rsi, dword [rdx + 0x74]
jae 0x4043ba
jne 0x4043ae
movsxd rax, dword cs:[rax]
pop rdi
pop rdi
push r10
pop rdi
push r11
push rsp
pop rdi
pop rdi
add byte [rbp + 0x72], ah
imul esi, dword gs:[ebx + 0x74], 0x745f7265
insd dword [rdi], dx
pop rdi
movsxd rbp, dword [rdi + rbp*2 + 0x6e]
jae 0x40436e
pop rdi
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x4043ec
jb 0x4043f2
pop rdi
jne 0x4043fb
add byte [rbx + 0x6f], ah
insd dword [rdi], dx
jo 0x4043f5
je 0x4043f1
xor eax, 0x5f003538
pop rdi
outsd dx, dword fs:[rsi]
pop rdi
insb byte [edi], dx
outsd dx, dword [rsi]
insb byte [rdi], dx
pop rdi
je 0x404411
jb 0x404417
pop rdi
jne 0x404420
pop rdi
imul bp, word [rsi + 0x69], 0x615f
jb 0x404423
jns 0x404413
outsb dx, byte gs:[rsi]
je 0x40442a
jns 0x4043ba
jb 0x40441e
insd dword [rdi], dx
pop rdi
jne 0x404430
insd dword [rdi], dx
jns 0x4043c6
pop rdi
pop rdi
jb 0x40442c
insd dword [rdi], dx
pop rdi
jne 0x40443e
insd dword [rdi], dx
jns 0x404433
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x40443e
jns 0x40443e
outsb dx, byte gs:[rsi]
je 0x404455
jns 0x4043e5
movsxd rsi, dword cs:[rax + 0x70]
add byte [rdi + 0x5a], bl
push rbx
je 0x40443c
xor dword [rcx], edi
jo 0x40445d
movsxd rsp, dword gs:[rbp + 0x77]
imul esi, dword [rbx + 0x65], 0x6e6f635f
jae 0x404475
jb 0x404478
movsxd rsi, dword [rax + rax + 0x5f]
pop rdx
push rbx
je 0x404457
xor dword [rbx], esi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x404476
jb 0x404481
add byte [rdi + 0x5a], bl
push rbx
je 0x40446c
imul esp, dword ss:[rdi + 0x6e], 0x65726f
pop rdi
pop rdx
push rbx
je 0x404479
cmp byte [rdi + 0x5f], bl
imul ebp, dword [rdi + 0x69], 0x74696e
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4044a0
movsxd rdi, dword [rax + 0x78]
xor r14b, byte [rcx]
pop rdi
pop rdi
jne 0x4044bb
je 0x4044b0
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx + 0x5f]
jo 0x4044c7
insb byte [rdi], dx
imul esp, dword [rbx + 0x79], 0x5a5f0045
push rbx
je 0x4044af
xor dword [rax], esi
jb 0x4044ca
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx]
pop rdi
pop rdx
push rbx
je 0x4044c1
xor dword [rcx], esi
je 0x4044eb
jns 0x4044da
je 0x4044ec
pop rdi
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx]
pop rdi
pop rdx
push rbx
je 0x4044d4
xor dword [rax], esi
outsd dx, dword fs:[rsi]
jo 0x404503
pop rdi
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbp, dword [rbx]
pop rdi
pop rdx
push rbx
je 0x4044cc
xor eax, 0x65676572
js 0x404501
movsxd rbp, dword [rdi + 0x6e]
jae 0x40451b
outsb dx, byte [rsi]
je 0x40451e
xor rax, 0x73616369
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x4044eb
xor eax, 0x65676572
js 0x404520
movsxd rbp, dword [rdi + 0x6e]
jae 0x40453a
outsb dx, byte [rsi]
je 0x40453d
outsb dx, byte ss:[rsi]
outsd dx, dword [rsi]
jae 0x404545
jae 0x404518
add byte [rdi + 0x5a], bl
push rbx
je 0x40450b
xor eax, 0x65676572
js 0x404540
movsxd rbp, dword [rdi + 0x6e]
jae 0x40455a
outsb dx, byte [rsi]
je 0x40455d
cmp byte [rdi + 0x70], r13b
je 0x404559
insd dword [rdi], dx
imul edi, dword [rdx + 0x65], 0x5a5f0045
push rbx
je 0x40452d
xor eax, 0x65676572
js 0x404562
movsxd rbp, dword [rdi + 0x6e]
jae 0x40457c
outsb dx, byte [rsi]
je 0x40457f
movsxd rbp, dword [rdi + 0x6c]
insb byte [rdi], dx
je 0x40457a
add byte [r15 + 0x5a], r11b
push rbx
je 0x40454e
xor eax, 0x65676572
js 0x404583
movsxd rbp, dword [rdi + 0x6e]
jae 0x40459d
outsb dx, byte [rsi]
je 0x4045a0
xor qword [rax], r14
push r11
movsxd rsi, dword [rdx + 0x69]
jo 0x4045ae
add byte [r15 + 0x5a], r11b
push rbx
je 0x404573
xor eax, 0x65676572
js 0x4045a8
movsxd rbp, dword [rdi + 0x6e]
jae 0x4045c2
outsb dx, byte [rsi]
je 0x4045c5
xor rax, 0x69736162
movsxd rax, dword [rbp]
pop rdi
pop rdx
push rbx
je 0x404592
xor eax, 0x65676572
js 0x4045c7
movsxd rbp, dword [rdi + 0x6e]
jae 0x4045e1
outsb dx, byte [rsi]
je 0x4045e4
cmp byte [rbp + 0x78], r12b
je 0x4045dc
outsb dx, byte [rsi]
add byte fs:[r15 + 0x5a], r11b
push rbx
je 0x4045b4
xor eax, 0x65676572
js 0x4045e9
movsxd rbp, dword [rdi + 0x6e]
jae 0x404603
outsb dx, byte [rsi]
je 0x404606
xor r12, qword [rcx + 0x77]
imul eax, dword [rbp], 0x5f
pop rdx
push rbx
je 0x4045d1
xor eax, 0x65676572
js 0x404606
movsxd rbp, dword [rdi + 0x6e]
jae 0x404620
outsb dx, byte [rsi]
je 0x404623
xor al, 0x67
jb 0x40461a
jo 0x4045fc
add byte [rdi + 0x5a], bl
push rbx
je 0x4045ef
xor eax, 0x65676572
js 0x404624
movsxd rbp, dword [rdi + 0x6e]
jae 0x40463e
outsb dx, byte [rsi]
je 0x404641
xor rax, 0x65726765
jo 0x40461b
add byte [rdi + 0x5a], bl
push rbx
je 0x40460e
xor eax, 0x65676572
js 0x404643
movsxd rbp, dword [rdi + 0x6e]
jae 0x40465d
outsb dx, byte [rsi]
je 0x404660
xor qword [rbx], r14
insd dword [rdi], dx
je 0x404657
push 0x6665645f
jne 0x404668
je 0x404643
add byte [rdi + 0x5a], bl
push rbx
je 0x404636
xor eax, 0x65676572
js 0x40466b
movsxd rbp, dword [rdi + 0x6e]
jae 0x404685
outsb dx, byte [rsi]
je 0x404688
xor qword [rbx], r14
insd dword [rdi], dx
je 0x40467f
push 0x746f6e5f
pop rdi
outsd dx, dword [rsi]
insb byte [rdi], dx
add byte [r15 + 0x5a], r11b
push rbx
je 0x40465e
xor eax, 0x65676572
js 0x404693
movsxd rbp, dword [rdi + 0x6e]
jae 0x4046ad
outsb dx, byte [rsi]
je 0x4046b0
xor qword [rbx], r14
insd dword [rdi], dx
je 0x4046a7
push 0x746f6e5f
pop rdi
outsd dx, dword gs:[rsi]
insb byte [rdi], dx
add byte [r15 + 0x5a], r11b
push rbx
je 0x404686
xor eax, 0x65676572
js 0x4046bb
movsxd rbp, dword [rdi + 0x6e]
jae 0x4046d5
outsb dx, byte [rsi]
je 0x4046d8
xor qword [rbx], r14
insd dword [rdi], dx
je 0x4046cf
push 0x746f6e5f
pop rdi
outsd dx, dword [rsi]
ja 0x4046bb
add byte [rdi + 0x5a], bl
push rbx
je 0x4046ae
xor eax, 0x65676572
js 0x4046e3
movsxd rbp, dword [rdi + 0x6e]
jae 0x4046fd
outsb dx, byte [rsi]
je 0x404700
xor qword [rbx], r14
insd dword [rdi], dx
je 0x4046f7
push 0x746f6e5f
pop rdi
outsd dx, dword gs:[rsi]
ja 0x4046e3
add byte [rdi + 0x5a], bl
push rbx
je 0x4046d6
xor eax, 0x65676572
js 0x40470b
movsxd rbp, dword [rdi + 0x6e]
jae 0x404725
outsb dx, byte [rsi]
je 0x404728
cmp qword [rbp + 0x61], r13
je 0x40471e
push 0x796e615f
add byte [r15 + 0x5a], r11b
push rbx
je 0x4046f9
xor eax, 0x65676572
js 0x40472e
movsxd rbp, dword [rdi + 0x6e]
jae 0x404748
outsb dx, byte [rsi]
je 0x40474b
xor qword [rbp*2 + 0x68637461], r14
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
je 0x404744
outsb dx, byte [rsi]
jne 0x404754
insb byte [rdi], dx
add byte [r15 + 0x5a], r11b
push rbx
je 0x404722
xor eax, 0x65676572
js 0x404757
movsxd rbp, dword [rdi + 0x6e]
jae 0x404771
outsb dx, byte [rsi]
je 0x404774
xor qword [rsi], r14
insd dword [rdi], dx
je 0x40476b
push 0x6e6f635f
je 0x404778
outsb dx, byte [rsi]
jne 0x404781
jne 0x404787
add byte [r15 + 0x5a], r11b
push rbx
je 0x40474d
xor eax, 0x65676572
js 0x404782
movsxd rbp, dword [rdi + 0x6e]
jae 0x40479c
outsb dx, byte [rsi]
je 0x40479f
xor qword [rsi], r14
insd dword [rdi], dx
je 0x404796
push 0x6572705f
jbe 0x404799
jbe 0x40479e
imul ebp, dword [rbp + rax*2], 0x534e5a5f
je 0x404778
xor eax, 0x65676572
js 0x4047ad
movsxd rbp, dword [rdi + 0x6e]
jae 0x4047c7
outsb dx, byte [rsi]
je 0x4047ca
xor qword [rsi], r14
outsd dx, dword [rsi]
jb 0x4047cb
je 0x4047c0
jne 0x4047d3
je 0x4047ae
add byte [rdi + 0x5a], bl
push rbx
je 0x4047a1
xor eax, 0x65676572
js 0x4047d6
movsxd rbp, dword [rdi + 0x6e]
jae 0x4047f0
outsb dx, byte [rsi]
je 0x4047f3
xor qword [rax], r14
outsw dx, word [rsi]
jb 0x4047f4
je 0x4047e9
jae 0x4047f1
add byte fs:[r15 + 0x5a], r11b
push rbx
je 0x4047c6
xor eax, 0x65676572
js 0x4047fb
movsxd rbp, dword [rdi + 0x6e]
jae 0x404815
outsb dx, byte [rsi]
je 0x404818
xor qword [rsi], r14
outsd dx, dword [rsi]
jb 0x404819
je 0x40480e
outsb dx, byte [rsi]
outsd dx, dword [rsi]
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x4047fc
add byte [rdi + 0x5a], bl
push rbx
je 0x4047ef
xor eax, 0x65676572
js 0x404824
movsxd rbp, dword [rdi + 0x6e]
jae 0x40483e
outsb dx, byte [rsi]
je 0x404841
xor qword [rdi], r14
outsw dx, word [rsi]
jb 0x404842
je 0x404837
imul si, word [rdx + 0x73], 0x5f74
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
jns 0x404828
add byte [rdi + 0x5a], bl
push rbx
je 0x40481b
xor eax, 0x65676572
js 0x404850
movsxd rbp, dword [rdi + 0x6e]
jae 0x40486a
outsb dx, byte [rsi]
je 0x40486d
xor qword [rbx], r14
jb 0x404872
outsd dx, dword [rsi]
jb 0x404862
movsxd rbp, dword [rdi + 0x6c]
insb byte [rdi], dx
je 0x40486f
add byte [r15 + 0x5a], r11b
push rbx
je 0x404843
xor eax, 0x65676572
js 0x404878
movsxd rbp, dword [rdi + 0x6e]
jae 0x404892
outsb dx, byte [rsi]
je 0x404895
xor qword [rcx], r14
jb 0x40489a
outsd dx, dword [rsi]
jb 0x40488a
movsxd rsi, dword [rcx + rdi*2 + 0x70]
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x404869
xor eax, 0x65676572
js 0x40489e
movsxd rbp, dword [rdi + 0x6e]
jae 0x4048b8
outsb dx, byte [rsi]
je 0x4048bb
xor qword [rdx], r14
jb 0x4048c0
outsd dx, dword [rsi]
jb 0x4048b0
jae 0x4048b7
jo 0x4048bc
add byte [r15 + 0x5a], r11b
push rbx
je 0x404890
xor eax, 0x65676572
js 0x4048c5
movsxd rbp, dword [rdi + 0x6e]
jae 0x4048df
outsb dx, byte [rsi]
je 0x4048e2
xor qword [rbx], r14
jb 0x4048e7
outsd dx, dword [rsi]
jb 0x4048d7
movsxd rbp, dword [rbx + 0x72]
add byte gs:[r15 + 0x5a], r11b
push rbx
je 0x4048b8
xor eax, 0x65676572
js 0x4048ed
movsxd rbp, dword [rdi + 0x6e]
jae 0x404907
outsb dx, byte [rsi]
je 0x40490a
xor qword [rcx], r14
jb 0x40490f
outsd dx, dword [rsi]
jb 0x4048ff
jb 0x404904
movsxd rbp, dword [rbx + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x4048de
xor eax, 0x65676572
js 0x404913
movsxd rbp, dword [rdi + 0x6e]
jae 0x40492d
outsb dx, byte [rsi]
je 0x404930
xor qword [rcx], r14
jb 0x404935
outsd dx, dword [rsi]
jb 0x404925
jo 0x404929
jb 0x40492f
outsb dx, byte [rsi]
add byte [r15 + 0x5a], r11b
push rbx
je 0x404904
xor eax, 0x65676572
js 0x404939
movsxd rbp, dword [rdi + 0x6e]
jae 0x404953
outsb dx, byte [rsi]
je 0x404956
xor qword [rcx], r14
jb 0x40495b
outsd dx, dword [rsi]
jb 0x40494b
jb 0x404950
movsxd rsp, dword [rbp + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x40492a
xor eax, 0x65676572
js 0x40495f
movsxd rbp, dword [rdi + 0x6e]
jae 0x404979
outsb dx, byte [rsi]
je 0x40497c
xor qword [0x726f7272], r14
pop rdi
jb 0x404979
movsxd rsp, dword [rbp + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x404953
xor eax, 0x65676572
js 0x404988
movsxd rbp, dword [rdi + 0x6e]
jae 0x4049a2
outsb dx, byte [rsi]
je 0x4049a5
xor qword [rcx], r14
jb 0x4049aa
outsd dx, dword [rsi]
jb 0x40499a
jb 0x40499e
outsb dx, byte [rsi]
add byte gs:[r15d + 0x5a], r11b
push rbx
je 0x404979
xor eax, 0x65676572
js 0x4049ae
movsxd rbp, dword [rdi + 0x6e]
jae 0x4049c8
outsb dx, byte [rsi]
je 0x4049cb
xor qword [rcx], r14
jb 0x4049d0
outsd dx, dword [rsi]
jb 0x4049c0
jae 0x4049d3
movsxd rsp, dword [rbp + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x40499f
xor eax, 0x65676572
js 0x4049d4
movsxd rbp, dword [rdi + 0x6e]
jae 0x4049ee
outsb dx, byte [rsi]
je 0x4049f1
xor qword [rip + 0x6f727265], r14
jb 0x4049e6
jb 0x4049f1
jo 0x4049f3
je 0x4049d6
add byte [rdi + 0x5a], bl
push rbx
je 0x4049c9
xor eax, 0x65676572
js 0x4049fe
movsxd rbp, dword [rdi + 0x6e]
jae 0x404a18
outsb dx, byte [rsi]
je 0x404a1b
xor qword [rsi], r14
jb 0x404a20
outsd dx, dword [rsi]
jb 0x404a10
movsxd rbp, dword [rdi + 0x6d]
jo 0x404a22
js 0x404a22
je 0x404a34
add byte [r15 + 0x5a], r11b
push rbx
je 0x4049f4
xor eax, 0x65676572
js 0x404a29
movsxd rbp, dword [rdi + 0x6e]
jae 0x404a43
outsb dx, byte [rsi]
je 0x404a46
xor qword [rcx], r14
jb 0x404a4b
outsd dx, dword [rsi]
jb 0x404a3b
jae 0x404a52
movsxd rbp, dword [rbx + 0x45]
add byte [rdi + 0x5a], bl
push rbx
je 0x404a21
pop rdi
pop rdi
je 0x404a50
imul ebp, dword [rsp + rcx*2 + 0x31], 0x5f535f39
imul ebp, dword [rsi + 0x76], 0x64696c61
pop rdi
jae 0x404a75
je 0x404a69
pop rdi
imul esp, dword [rbp + rax*2], 0x31345a5f
pop rdi
pop rdi
jae 0x404a85
je 0x404a7d
movsxd rbx, dword [rdi + 0x69]
outsb dx, byte [rsi]
imul esi, dword [rcx + rbp*2 + 0x61], 0x617a696c
je 0x404a8b
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
outsb dx, byte [rsi]
pop rdi
jae 0x404aa1
jb 0x404aa4
movsxd rsi, dword [rcx + rbp*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
xor byte [rcx + 0x69], ch
add byte [rdi + 0x47], bl
pop rdi
pop rdi
jae 0x404ab9
pop rdi
pop r15
pop rdi
pop rdx
xor al, 0x63
insb byte [rdi], dx
movsxd rsp, dword [rsp]
pop rdi
pop rdi
push rdx
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push r10
pop rdi
pop rdi
pop rdi
add byte [rdi + 0x5f], bl
push rbp
pop rdi
pop rdi
push rdx
pop r15
push rdx
add byte [rdi + 0x47], bl
pop rdi
push rbx
push r12
pop rdi
push rsp
pop r15
add byte [rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x404b01
jns 0x404b01
outsb dx, byte gs:[rsi]
add byte fs:[rdi + 0x5f], bl
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x404b12
jns 0x404b12
jae 0x404b29
jb 0x404b2c
add byte [rdi + 0x44], bl
pop rcx
add byte [r15 + 0x5a], bl
push rbx
je 0x404afa
movsxd rbp, dword [rcx + 0x6e]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x404b41
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x404b5a
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push r11
je 0x404b32
jo 0x404b61
imul esi, dword [rdx + 0x49], 0x53456464
je 0x404b3f
jbe 0x404b70
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor al, byte [r13 + 0x52]
push r11
xor al, 0x5f
add byte [rax + 0x72], dh
imul ebp, dword [rsi + 0x74], 0x47404066
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
push rbx
push r11
je 0x404b76
jo 0x404ba5
imul esi, dword [rdx + 0x49], 0x45456464
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
push r11
je 0x404b8d
jo 0x404bbc
imul esi, dword [rdx + 0x49], 0x45456464
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
imul esi, dword [rdx + 0x73], 0x40645245
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul bp, word [rsi + 0x69], 0x5f00
pop rdx
push rbx
je 0x404bcb
jbe 0x404bfc
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x404bd3
jo 0x404c02
imul esi, dword [rdx + 0x49], 0x53456464
push r11
xor dword [rdi + 0x45], ebx
imul r15d, dword [r8 + 0x45], 0x5a5f006d
push rbx
je 0x404beb
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x404c2c
push r11
je 0x404bff
jo 0x404c2e
imul esi, dword [rdx + 0x49], 0x53456464
push r11
xor dword [rdi + 0x45], ebx
xor dword [r15], r14d
pop rdi
pop r15
movsxd rsi, dword [rdx + 0x65]
je 0x404c4b
pop rdi
jae 0x404c5d
outsd dx, dword [rsi]
jb 0x404c4d
insd dword [edi], dx
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x404c5a
movsxd rdi, dword [rax + 0x78]
xor dword [rdi + rbx*2], esi
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rbx, dword [rdi + 0x74]
jb 0x404c6c
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x404c49
jo 0x404c78
imul esi, dword [rdx + 0x49], 0x45456464
xor dword [r15], r14d
pop rdi
push rbx
pop rdi
jae 0x404c8b
insb byte [rdi], dx
movsxd rsi, dword gs:[rdi + rbx*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
movsxd rbp, dword [rdi + 0x70]
jns 0x404c78
push rdx
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x404c70
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x404cb1
push r11
je 0x404c84
jo 0x404cb3
imul esi, dword [rdx + 0x49], 0x53456464
push r11
xor dword [rdi + 0x45], ebx
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x404ca1
jbe 0x404cd2
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x404ca9
jo 0x404cd8
imul esi, dword [rdx + 0x49], 0x53456464
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x52]
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x404cf7
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x404d00
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x404cf4
push rbx
je 0x404ce2
jo 0x404d11
imul esi, dword [rdx + 0x49], 0x45456464
cmp byte [rcx + 0x6c], ah
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
push rax
jbe 0x404cc6
pop rdi
pop rdx
push rbx
je 0x404cfd
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x404d3e
push r11
je 0x404d11
jo 0x404d40
imul esi, dword [rdx + 0x49], 0x53456464
push r11
xor dword [rdi + 0x45], ebx
xor dword [r11], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor dword [rdi + 0x6d], ebx
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x404d6c
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x404d75
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x404d69
push rbx
je 0x404d57
jo 0x404d86
imul esi, dword [rdx + 0x49], 0x45456464
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x404d9a
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x404da3
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x404d97
push rbx
je 0x404d85
jo 0x404db4
imul esi, dword [rdx + 0x49], 0x45456464
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x404d9c
pop rdi
jae 0x404ddd
jb 0x404dda
jns 0x404db6
push rax
push rbx
je 0x404da5
jo 0x404dd4
imul esi, dword [rdx + 0x49], 0x45456464
jbe 0x404dd0
pop rdi
push rbx
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x404db8
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x404df9
push r11
je 0x404dcc
jo 0x404dfb
imul esi, dword [rdx + 0x49], 0x53456464
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531436c
push rdx
push r11
xor bl, byte [rdi]
pop rdi
pop rdi
insd dword [edi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
pop rdi
jae 0x404e3c
jb 0x404e3f
pop rdi
pop rdi
add byte [rdi + 0x4a], bl
jbe 0x404e31
push rdx
imul esi, dword gs:[ebx + 0x74], 0x6c437265
jae 0x404e52
jae 0x404de2
pop rdi
pop rdx
push rbx
je 0x404e1c
jo 0x404e4b
imul esi, dword [rdx + 0x49], 0x43456464
xor al, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
insb byte [rdi], dx
push rax
jbe 0x404e3c
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x404e72
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x404e8b
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push r11
je 0x404e63
jo 0x404e92
imul esi, dword [rdx + 0x49], 0x53456464
je 0x404e70
jbe 0x404ea1
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
jo 0x404ebf
jbe 0x404e52
pop rdi
pop rdx
push rbx
je 0x404e89
xor bl, byte [rdi + 0x44]
jae 0x404ed2
jb 0x404ecf
jns 0x404ec1
jne 0x404edd
xor dword [rbp + 0x45], eax
cmp dword [rdi + 0x5f], ebx
jae 0x404ee6
jb 0x404ee3
jns 0x404ebf
push rax
push rbx
je 0x404eae
jo 0x404edd
imul esi, dword [rdx + 0x49], 0x45456464
jbe 0x404eda
pop rdi
push rbx
xor eax, 0x5a5f005f
push rbx
je 0x404ec9
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rbx + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push r11
je 0x404ee8
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x404f29
push r11
je 0x404efc
jo 0x404f2b
imul esi, dword [rdx + 0x49], 0x53456464
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r15d
pop rdi
pop r15
je 0x404f40
push rsp
jo 0x404f43
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x404f33
jbe 0x404ef0
pop rdi
pop rdx
push rbx
je 0x404f27
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x404f68
push r11
je 0x404f3b
jo 0x404f6a
imul esi, dword [rdx + 0x49], 0x53456464
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4531446c
jbe 0x404f2a
pop rdi
pop rdi
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x6174735f
jb 0x404faa
pop rdi
insd dword [rdi], dx
imul ebp, dword [rsi + 0x40], 0x494c4740
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x4e5a5f00
cmp dword [rdi + 0x5f], ebx
outsb dx, byte [esi]
jne 0x404fb2
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x404fbb
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x404faf
push rbx
je 0x404f9d
jo 0x404fcc
imul esi, dword [rdx + 0x49], 0x45456464
xor dword [r13 + 0x52], eax
push r11
xor ebx, dword [rdi]
pop rdi
pop rdi
movsxd rdi, dword [rax + 0x61]
pop rdi
je 0x404fe9
js 0x404fef
je 0x404fc8
pop r15
xor ch, byte [rsi]
xor ch, byte [rsi]
xor eax, 0x6e5a5f00
ja 0x405007
push rax
jbe 0x404f9d
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405006
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40500f
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405003
push rbx
je 0x404ff1
jo 0x405020
imul esi, dword [rdx + 0x49], 0x45456464
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push r11
je 0x405008
jbe 0x405039
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x405010
jo 0x40503f
imul esi, dword [rdx + 0x49], 0x53456464
push r11
xor dword [rdi + 0x45], ebx
xor eax, 0x69676562
outsb dx, byte [rsi]
jbe 0x404ff5
pop rdi
pop rdx
push rbx
je 0x40502f
jo 0x40505e
imul esi, dword [rdx + 0x49], 0x43456464
xor dword [rbp + 0x76], eax
add byte [rdi + 0x5a], bl
push rbx
je 0x40503f
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x405080
push r11
je 0x405053
jo 0x405082
imul esi, dword [rdx + 0x49], 0x53456464
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x6d]
push rdx
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x405077
imul ebp, dword [rdi + 0x73], 0x7361625f
xor al, 0x49
outsb dx, byte [rsi]
imul esi, dword [rsp + rax*2 + 0x31], 0x40407645
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x40509b
pop rdi
jae 0x4050dc
jb 0x4050d9
jns 0x4050b5
push rax
push rbx
je 0x4050a4
jo 0x4050d3
imul esi, dword [rdx + 0x49], 0x53456464
xor dword [rdi + 0x45], ebx
jbe 0x4050d2
pop rdi
push rbx
xor ebx, dword [rdi + 0x52]
push rbx
push r12
xor byte [rdi + 0x45], bl
add byte [rdi + 0x5a], bl
push rbx
je 0x4050c2
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4050fb
je 0x405110
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x4050dd
jo 0x40510c
imul esi, dword [rdx + 0x49], 0x45456464
cmp byte [r9 + 0x6c], r12b
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor bl, byte [rdi + 0x6d]
add byte [rdi + 0x49], bl
push rsp
pop r15
jb 0x405131
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5a], bl
push rbx
push r11
je 0x40511c
jo 0x40514b
imul esi, dword [rdx + 0x49], 0x45456464
xor al, byte [r13 + 0x52]
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
je 0x405131
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x405172
push r11
je 0x405145
jo 0x405174
imul esi, dword [rdx + 0x49], 0x53456464
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r15d
pop rdi
pop r15
je 0x405189
push rsp
jo 0x40518c
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40517c
jbe 0x405139
pop rdi
pop r15
jae 0x4051b3
imul ebp, dword fs:[rsi + 0x5f], 0x64657375
add byte [rdi + 0x5a], bl
push rbx
je 0x405180
insd dword [rdi], dx
js 0x40519a
push r10
push r12
pop rdi
push rbx
xor bl, byte [rdi + 0x53]
xor bl, byte [rdi]
pop rdi
pop rdx
xor eax, 0x65657073
push rbx
je 0x4051a0
jbe 0x4051d1
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x4051a8
jo 0x4051d7
imul esi, dword [rdx + 0x49], 0x53456464
push r11
xor dword [rdi + 0x45], ebx
add byte [r15 + 0x5a], r11b
push rbx
je 0x4051bc
pop rdi
pop rdi
jne 0x4051fd
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x40520d
je 0x405202
outsb dx, byte [rsi]
pop rdi
push r8
push rbx
je 0x4051df
jo 0x40520e
imul esi, dword [rdx + 0x49], 0x6d456464
push rbx
xor dword [rdi + 0x45], ebx
push rsp
pop rdi
push rbx
xor ebx, dword [rdi + 0x54]
xor byte [rdi + 0x52], bl
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x49], bl
push rsp
pop r15
jb 0x405235
imul esi, dword [ebx + 0x74], 0x4d547265
insb byte [rdi], dx
outsd dx, dword [rsi]
outsb dx, byte [rsi]
push rsp
insb byte [rdi], dx
add byte gs:[rdi + 0x5f], bl
je 0x40524a
pop rdi
jae 0x405260
jb 0x405263
add byte [rdi + 0x5a], bl
push rbx
je 0x40522c
jbe 0x40525d
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x405234
jo 0x405263
imul esi, dword [rdx + 0x49], 0x53456464
push r11
xor dword [rdi + 0x45], ebx
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x40527f
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x405298
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push r11
je 0x405270
jo 0x40529f
imul esi, dword [rdx + 0x49], 0x53456464
je 0x40527d
jbe 0x4052ae
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
jbe 0x40525f
pop rdi
pop rdx
push rbx
je 0x40529b
jbe 0x4052cc
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x4052a3
jo 0x4052d2
imul esi, dword [rdx + 0x49], 0x53456464
push r11
xor dword [rdi + 0x45], ebx
xor r14b, byte [r9]
pop rdi
pop r15
jne 0x4052f6
je 0x4052eb
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x5f006d45
pop rdx
push rbx
je 0x4052d0
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x405311
push r11
je 0x4052e4
jo 0x405313
imul esi, dword [rdx + 0x49], 0x53456464
push r11
xor dword [rdi + 0x45], ebx
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x405301
jbe 0x405332
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x405309
jo 0x405338
imul esi, dword [rdx + 0x49], 0x53456464
push r11
xor dword [rdi + 0x45], ebx
xor al, byte [r13 + 0x6d]
push rdx
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x405327
pop rdi
pop rdi
jne 0x405368
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x405378
je 0x40536d
outsb dx, byte [rsi]
pop rdi
xor dword [rcx + 0x4c], ecx
xor byte [rbp + 0x45], al
xor dword [rax], edi
pop rdi
pop rdi
jne 0x40538b
imul ebp, dword [rsi + 0x69], 0x65645f74
jne 0x405394
je 0x405389
outsb dx, byte [rsi]
push r8
push rbx
je 0x405364
jo 0x405393
imul esi, dword [rdx + 0x49], 0x6d456464
push r12
pop rdi
push rbx
xor eax, 0x5f30545f
add byte [rdi + 0x5a], bl
push rbx
je 0x40537a
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x4053c4
jb 0x4053c7
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x40538c
jo 0x4053bb
imul esi, dword [rdx + 0x49], 0x49456464
push rdx
push r11
xor dword [rdi + 0x45], ebx
jbe 0x4053ba
push rsp
pop rdi
jo 0x4053be
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4053dc
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4053f5
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push r11
je 0x4053cd
jo 0x4053fc
imul esi, dword [rdx + 0x49], 0x53456464
je 0x4053da
jbe 0x40540b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor dword [r13 + 0x52], eax
push r11
xor al, 0x5f
add byte [rdi + 0x5a], bl
push rbx
je 0x4053f8
xor byte [rdi + 0x5f], bl
jne 0x405439
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x405454
xor byte [rbp + 0x45], al
xor dword [rbx], esi
pop rdi
pop rdi
jne 0x405455
imul ebp, dword [rsi + 0x69], 0x6f635f74
jo 0x405469
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405458
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x405471
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push r11
je 0x405449
jo 0x405478
imul esi, dword [rdx + 0x49], 0x53456464
je 0x405456
jbe 0x405487
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor eax, 0x4961535f
push rbx
xor eax, 0x4545455f
push r8
push rbx
xor eax, 0x5445455f
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
pop rdi
add byte [rdi + 0x5f], bl
push rsp
pop r15
pop rdi
pop rdi
add byte [rdi + 0x5a], bl
push r11
je 0x40548f
jbe 0x4054c0
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x405497
jo 0x4054c6
imul esi, dword [rdx + 0x49], 0x53456464
push r11
xor dword [rdi + 0x45], ebx
xor al, 0x73
imul edi, dword [rdx + 0x65], 0x5f007645
pop rdx
push rbx
je 0x4054b2
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4054f3
push r11
je 0x4054c6
jo 0x4054f5
imul esi, dword [rdx + 0x49], 0x53456464
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x6d], eax
push rdx
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x4054e2
cmp byte [rbp + 0x6e], dh
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x40553d
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40552c
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x405545
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push r11
je 0x40551d
jo 0x40554c
imul esi, dword [rdx + 0x49], 0x53456464
je 0x40552a
jbe 0x40555b
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push r8
push rbx
xor ebx, dword [rdi + 0x45]
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
pop rdi
add byte [rdi + 0x5f], bl
jae 0x40558d
pop rdi
push 0x6c646e61
add byte gs:[rdi + 0x5a], bl
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x40558f
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x405598
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40558c
push rbx
je 0x40557a
jo 0x4055a9
imul esi, dword [rdx + 0x49], 0x45456464
xor dword [r13 + 0x76], eax
add byte [rdi + 0x5f], bl
insb byte [rdi], dx
imul esp, dword [rdx + 0x63], 0x7573635f
pop rdi
imul ebp, dword [rsi + 0x69], 0x5a5f0074
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4055cd
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x4055d6
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x4055ca
push rbx
je 0x4055b8
jo 0x4055e7
imul esi, dword [rdx + 0x49], 0x45456464
xor dword [rax], esi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r8
push rbx
xor bl, byte [rdi + 0x6d]
add byte [rdi + 0x5a], bl
push rbx
je 0x4055d6
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x405620
jb 0x405623
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x4055e8
jo 0x405617
imul esi, dword [rdx + 0x49], 0x4a456464
jbe 0x405611
push rsp
pop rdi
jo 0x405615
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x405634
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x40563d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405631
push rbx
je 0x40561f
jo 0x40564e
imul esi, dword [rdx + 0x49], 0x45456464
cmp byte [rbp + 0x61], ch
js 0x405658
jae 0x405664
jp 0x405662
jbe 0x405600
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x405669
movsxd rdi, dword [rax + 0x78]
xor dword [rbx], esi
outsb dx, byte [rsi]
ja 0x405672
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405666
push rbx
je 0x405654
jo 0x405683
imul esi, dword [rdx + 0x49], 0x45456464
xor al, byte [r13 + 0x52]
push r11
xor ebx, dword [rdi]
pop rdi
pop rdi
jae 0x4056aa
pop rdi
jae 0x4056ae
jb 0x4056b1
add byte [rdi + 0x5a], bl
push rbx
je 0x405674
xor dword [rdi + 0x5f], ebx
jb 0x4056b0
jae 0x4056c0
outsd dx, dword [rsi]
push r11
je 0x405687
jo 0x4056b6
imul esi, dword [rdx + 0x49], 0x45456464
push rax
push rsp
pop rdi
push rdx
push rbx
xor bl, byte [rdi]
pop rdi
pop rdx
push r11
je 0x4056a1
jbe 0x4056d2
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x4056a9
jo 0x4056d8
imul esi, dword [rdx + 0x49], 0x53456464
push r11
xor dword [rdi + 0x45], ebx
xor r12d, dword [r13 + 0x6e]
jbe 0x40568c
pop rdi
pop rdi
jae 0x405704
movsxd rbp, dword [rbx + 0x5f]
movsxd rbp, dword [rax + 0x6b]
pop rdi
imul ebp, dword [rax + rax*2 + 0x40], 0x42494c47
pop r15
xor ch, byte [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
push r11
je 0x4056e5
jo 0x405714
imul esi, dword [rdx + 0x49], 0x45456464
xor dword [r13 + 0x52], eax
push r11
xor dword [rdi], ebx
pop rdi
pop rdx
push rbx
push r11
je 0x405700
jo 0x40572f
imul esi, dword [rdx + 0x49], 0x45456464
xor dword [rbp + 0x76], r8d
add byte [rdi + 0x5a], bl
push rbx
je 0x405716
jbe 0x405747
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x40571e
jo 0x40574d
imul esi, dword [rdx + 0x49], 0x53456464
push r11
xor dword [rdi + 0x45], ebx
xor r8b, byte [rbp + 0x76]
add byte [rdi + 0x5a], bl
push rbx
push r11
je 0x40573c
jo 0x40576b
imul esi, dword [rdx + 0x49], 0x45456464
xor al, byte [r13 + 0x76]
add byte [rdi + 0x5a], bl
push rbx
je 0x40574d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x405786
je 0x40579b
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x405768
jo 0x405797
imul esi, dword [rdx + 0x49], 0x45456464
xor r14d, dword [r15]
jae 0x4057a7
insb byte [rdi], dx
movsxd rsi, dword gs:[rdi + rbx*2 + 0x6f]
outsb dx, byte [rsi]
pop rdi
movsxd rbp, dword [rdi + 0x6e]
je 0x4057b0
imul ebp, dword [rsi + 0x65], 0x6f635f72
jo 0x4057d1
pop rdi
movsxd rbp, dword [rdi + 0x6e]
jae 0x4057d2
jb 0x4057d5
movsxd rsi, dword [rcx + rbp*2 + 0x6f]
outsb dx, byte [rsi]
push r10
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4057d5
movsxd rdi, dword [rax + 0x78]
outsb dx, byte [rsi]
push r8
push r11
je 0x4057b5
jo 0x4057e4
imul esi, dword [rdx + 0x49], 0x53456464
je 0x4057c2
jbe 0x4057f3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
push rdx
push rbx
pop rdi
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x40581b
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r12
pop rdi
push rsp
xor byte [rdi + 0x45], bl
push r11
pop rdi
add byte [rdi + 0x5a], bl
push rbx
imul esi, dword [rdx + 0x73], 0x40695245
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x405819
jbe 0x40584a
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x405821
jo 0x405850
imul esi, dword [rdx + 0x49], 0x53456464
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x6d], eax
push rdx
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40583e
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x40587f
push r11
je 0x405852
jo 0x405881
imul esi, dword [rdx + 0x49], 0x53456464
push r11
xor dword [rdi + 0x45], ebx
xor dword [r9], r14d
pop rdi
pop r15
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
insd dword [rdi], dx
add byte [rdi + 0x5a], bl
push rbx
je 0x405875
xor bl, byte [rdi + 0x5f]
jne 0x4058b6
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x6f635f64
jo 0x4058d1
pop rdi
cmp qword [rdi + 0x5f], r11
outsb dx, byte [esi]
jne 0x4058c2
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x4058db
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push r11
je 0x4058b3
jo 0x4058e2
imul esi, dword [rdx + 0x49], 0x53456464
je 0x4058c0
jbe 0x4058f1
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor ebx, dword [rdi + 0x53]
push r11
xor ebx, dword [rdi + 0x45]
push r8
push rbx
xor ebx, dword [rdi + 0x53]
xor ebx, dword [rdi + 0x45]
push rsp
xor byte [rdi + 0x54], bl
pop rdi
push rbx
pop r15
push rbx
pop rdi
push rdx
push rbx
push r12
xor dword [rdi + 0x45], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x4058f1
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
outsd dx, dword [rsi]
jb 0x40592a
je 0x40593f
imul esi, dword [rbx + rsi*2 + 0x49], 0x53496153
je 0x40590c
jo 0x40593b
imul esi, dword [rdx + 0x49], 0x45456464
xor dword [r8], r14d
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsp, dword [rcx + 0x74]
push r10
push rbx
xor bl, byte [rdi + 0x50]
push rbx
xor dword [rdi + 0x6d], ebx
add byte [rdi + 0x5a], bl
push rbx
je 0x405930
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x405971
push r11
je 0x405944
jo 0x405973
imul esi, dword [rdx + 0x49], 0x53456464
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532436c
push rdx
push r11
xor bl, byte [rdi]
pop rdi
pop rdx
push rbx
je 0x40596e
xor bl, byte [rdi + 0x56]
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
jae 0x4059af
push r11
je 0x405982
jo 0x4059b1
imul esi, dword [rdx + 0x49], 0x53456464
push r11
xor dword [rdi + 0x45], ebx
xor dword [r10], r14d
pop rdi
push rsi
movsxd rsi, dword gs:[rdi + rbp*2 + 0x72]
pop rdi
imul ebp, dword [rbp + 0x70], 0x4532446c
jbe 0x405971
pop rdi
pop rdx
push rbx
je 0x4059a7
xor byte [rdi + 0x43], bl
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x4059f1
jb 0x4059f4
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x4059b9
jo 0x4059e8
imul esi, dword [rdx + 0x49], 0x49456464
jbe 0x4059e2
push rsp
pop rdi
jo 0x4059e6
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x4059d1
pop rdi
pop rdi
je 0x405a0d
jb 0x405a16
ja 0x405a08
pop rdi
insb byte [rdi], dx
insb byte [rdi], dx
outsd dx, dword [rsi]
movsxd rsi, dword [rsi + 0x40]
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
pop rdx
push rbx
je 0x4059fd
jbe 0x405a2e
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
je 0x405a05
jo 0x405a34
imul esi, dword [rdx + 0x49], 0x53456464
push r11
xor dword [rdi + 0x45], ebx
xor dword [r13 + 0x52], eax
push r11
xor ebx, dword [rdi]
pop rdi
pop rdx
push rbx
je 0x405a26
outsw dx, word [rsi]
jb 0x405a6a
jb 0x405a5a
push r10
push r11
je 0x405a30
jo 0x405a5f
imul esi, dword [rdx + 0x49], 0x45456464
push r12
pop rdi
push rdx
push rbx
je 0x405a3e
jb 0x405a75
insd dword [rdi], dx
outsd dx, dword [rsi]
jbe 0x405a79
pop rdi
jb 0x405a7c
jb 0x405a80
outsb dx, byte [rsi]
movsxd rsp, dword [rbp + 0x49]
push rbx
xor al, 0x5f
xor al, 0x74
jns 0x405a97
add byte gs:[r15 + 0x5a], r11b
cmp qword [r15 + 0x5f], rbx
outsb dx, byte [esi]
jne 0x405a94
movsxd rdi, dword [rax + 0x78]
xor dword [rdi], esi
pop rdi
pop rdi
outsb dx, byte [rsi]
outsd dx, dword [rsi]
jb 0x405aad
insb byte [rdi], dx
pop rdi
imul esi, dword [rbp + 0x72], 0x726f7461
push r8
push r11
je 0x405a85
jo 0x405ab4
imul esi, dword [rdx + 0x49], 0x53456464
je 0x405a92
jbe 0x405ac3
movsxd rsi, dword [rdi + rbp*2 + 0x72]
push r11
xor bl, byte [rdi + 0x53]
push r11
xor bl, byte [rdi + 0x45]
xor al, 0x62
jae 0x405ad9
jbe 0x405a77
pop rdi
je 0x405ade
add byte [rdi + 0x5f], bl
js 0x405afb
pop rdi
jo 0x405aeb
jb 0x405afb
outsd dx, dword [rsi]
outsb dx, byte [rsi]
insb byte [rdi], dx
imul esi, dword [rcx + rdi*2 + 0x5f], 0x40403076
pop r8
pop rax
pop r15
xor dword [rsi], ebp
xor eax, dword [rax]
pop rdi
pop rdx
outsb dx, byte [rsi]
ja 0x405b11
pop r8
pop rax
pop rdi
xor ebp, dword [rsi]
xor al, 0
pop rdi
push rbp
outsb dx, byte [rsi]
ja 0x405b20
outsb dx, byte [rsi]
pop rdi
push rdx
jae 0x405b33
insd dword [rdi], dx
pop r15
xor ebp, dword [rsi]
xor byte [rax], al
insd dword [rdi], dx
imul ebp, dword [rsi], 0x74535a5f
xor dword [rax], esi
pop rdi
outsd dx, dword [rsi]
outsb dx, byte [rsi]
jae 0x405b4f
jb 0x405b52
movsxd rsi, dword [rcx + rcx*2 + 0x53]
je 0x405b17
jo 0x405b46
imul esi, dword [rdx + 0x49], 0x4a456464
push rdx
push r11
xor dword [rdi + 0x45], ebx
jbe 0x405b45
push rsp
pop rdi
jo 0x405b49
push rsp
xor byte [rdi], bl
pop rdi
pop rdx
push rbx
je 0x405b35
xor eax, 0x6e755f5f
imul ebp, dword [rsi + 0x69], 0x6c616974
imul edi, dword [rdx + 0x65], 0x65645f64
jne 0x405b86
je 0x405b7b
outsb dx, byte [rsi]
push r8
push rbx
je 0x405b56
jo 0x405b85
imul esi, dword [rdx + 0x49], 0x6d456464
push r12
pop rdi
push rbx
xor ebx, dword [rdi + 0x54]
xor byte [rdi], bl
add byte [rsi], ch
jae 0x405bb2
insd dword [rdi], dx
je 0x405b9d
add byte [rsi], ch
jae 0x405bb5
jb 0x405bb7
add byte [rsi], ch
jae 0x405bb1
jae 0x405bbf
jb 0x405bc1
add byte [rsi], ch
imul ebp, dword [rsi + 0x74], 0x707265
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x405bc2
sub rax, 0x676174
outsb dx, byte cs:[rsi]
outsd dx, dword [rsi]
je 0x405bd0
outsb dx, byte cs:[esi]
jne 0x405b9e
jne 0x405bdc
insb byte [rdi], dx
sub eax, 0x2e006469
outsb dx, byte [esi]
jne 0x405bac
push 0x687361
jns 0x405bf5
jae 0x405c02
insd dword [rdi], dx
add byte [rsi], ch
jns 0x405bfd
jae 0x405c05
jb 0x405b93
outsb dx, byte cs:[esi]
jne 0x405bc6
jbe 0x405bff
jb 0x405c0f
imul ebp, dword [rdi + 0x6e], 0x6e672e00
jne 0x405bd3
jbe 0x405c0c
jb 0x405c1c
imul ebp, dword [rdi + 0x6e], 0x2e00725f
jb 0x405c17
insb byte [rdi], dx
jns 0x405c26
add byte [rsi], ch
jb 0x405c21
insb byte [rdi], dx
jo 0x405c2d
je 0x405bc3
imul ebp, dword cs:[rsi + 0x69], 0x702e0074
insb byte [rdi], dx
je 0x405bfc
outsd dx, dword [esi]
je 0x405bd2
je 0x405c3a
js 0x405c4b
add byte [rsi], ch
imul bp, word [rsi + 0x69], 0x2e00
jb 0x405c50
je 0x405c46
add byte [rsi], ch
push 0x6172665f
insd dword [rdi], dx
pop rdi
push 0x2e007264
push 0x6172665f
insd dword [rdi], dx
add byte gs:[rsi], ch
movsxd rsp, dword [ebx + 0x5f]
js 0x405c69
jo 0x405c7d
pop rdi
je 0x405c6d
insb byte [rdi], dx
add byte gs:[rsi], ch
imul ebp, dword [rsi + 0x69], 0x72615f74
jb 0x405c7b
jns 0x405c1c
imul bp, word cs:[rsi + 0x69], 0x615f
jb 0x405c97
jns 0x405c28
push 0x63
jb 0x405c2d
jns 0x405c9f
insd dword [rdi], dx
imul esp, dword [rbx], 0x746f672e
jo 0x405ca9
je 0x405c3f
je 0x405ca5
add byte [rsi], ch
jae 0x405cbc
add byte [rsi], ch
movsxd rbp, dword [rdi + 0x6d]
insd dword [rdi], dx
outsb dx, byte gs:[rsi]
je 0x405c53
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], bl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bh
add al, byte [rax]
add byte [rax], al
add byte [rax], al
cmp byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
and eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dl
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx + rax + 0x40], dh
add byte [rax], al
add byte [rax], al
add byte [rdx + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax + rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], r8b
add dh, dh
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x4002], bl
add byte [rax], al
add byte [rax + 2], bl
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
or eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
enter 0x4002, 0
add byte [rax], al
add byte [rax], al
enter 2, 0
add byte [rax], al
add byte [rax], al
enter 1, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
nop
add al, 0x40
add byte [rax], al
add byte [rax], al
add byte [rax + 4], dl
add byte [rax], al
add byte [rsi + 1], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], bl
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rsi], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte es:[rax], al
add byte [rax], al
add byte [rax], al
add byte [rip], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ch
add byte [rax], al
ljmp [rdi + 2]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 6], al
add byte [rax], al
add byte [rax], al
add byte [rax + 6], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], 0
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], bh
add byte [rax], al
add al, 0
add byte [rax], al
add al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rsi], 0x40
add byte [rax], al
add byte [rax], al
add al, al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax + 0x40000], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
add byte [rax], al
add byte [rax], al
add al, dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
cmp byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add eax, 0x19000000
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rsi + 0x1000000], cl
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ch
or byte [rax], al
add byte [rax], al
add byte [rax], al
sub byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov dword [rax], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 8], dl
add byte [rax], al
add byte [rax], al
add byte [rax + 8], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
loopne 0x405f7a
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xchg eax, esp
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
or dword [rax], eax
add byte [rax], al
add byte [rax], al
xor byte [rcx], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
popfq
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 9], al
add byte [rax], al
add byte [rax], al
add byte [rax + 9], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
loop 0x406008
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
movabs dword [0x600000001000000], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax + rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
test eax, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rax], bl
add byte [rax], al
add byte [rax], al
add byte [rax], al
rol byte [rax], 0
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx + 0x1000000], dh
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, dh
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
lock sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add ah, ch
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
mov edi, 0x1000000
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ah
sbb al, byte [rax]
add byte [rax], al
add byte [rax], al
loopne 0x40610c
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], r8b
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add cl, cl
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rbx], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
pop rdx
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bl, bl
add byte [rax], al
add byte [rsi], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, ch
sub eax, 0x60
add byte [rax], al
call 0x4061a2
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add bh, ah
add byte [rax], al
add byte [rdi], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
sub eax, 0x60
add byte [rax], al
clc
sub eax, 0
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte cs:[rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
clc
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte cs:[rax], al
add byte [rax], al
add byte [rax], al
lock add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rsi], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x1000000], bl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add al, bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rcx], eax
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdx], cl
add dword [rax], eax
add byte [rcx], al
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x6030], al
add byte [rax], al
add byte [rax + 0x30], al
add byte [rax], al
add byte [rax], dl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], cl
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], dl
add dword [rax], eax
add byte [rax], cl
add byte [rax], al
add byte [rbx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x6030], ah
add byte [rax], al
add byte [rax + 0x30], dl
add byte [rax], al
add byte [rax], ah
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], ah
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rip + 0x1000001], dl
add byte [rax], al
add byte [rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x30], dl
add byte [rax], al
add byte [rax + rax], dh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
adc dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
xor eax, 0x5b
add byte [rax], al
add byte [rsi], bl
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rcx], al
add byte [rax], al
add byte [rdx], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add al, cl
xor byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax + 0x12], bh
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rdi], bl
add byte [rax], al
or byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
sbb byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
or dword [rax], eax
add byte [rax], al
add eax, dword [rax]
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [r8], al
add byte [rax], al
add byte [rax], al
cmc
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add dword [rax], eax
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
add byte [rax], al
