#! /usr/bin/env bash


packer="../../upx/upx"
bin_path="binaries"
asm_path="asm"
obf="stunnix/bin/cxx-obfus"
source_code="sorted_source_code"

# Decompiles a binary ($1) and places the assembly into a file $2.s
function disassemble() {
    # decompile with radare2
	#echo 'y' | r2 -c 'pi $s' $1 | grep -v invalid | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g" | head -n -2 > $2.s
    # decompile with ndiasm 
    ndisasm -b 32 $1 | sed -re 's,\s+, ,g' | cut -d' ' -f 3- > $2.s

}

# Do all the work
# Compile, pack, and disassemble
function compile () {
    echo "Working on $1"
    # compile basic
    g++ $1 -o $2/a.out -std=c++11 -lpthread
    $packer $2/a.out -o $2/a.packed -f
    disassemble $2/a.out $3/a
    disassemble $2/a.packed $3/a.packed
    
    # compile with optimization 
    g++ $1 -o $2/o3.out -std=c++11 -lpthread -O3
    $packer $2/o3.out -o $2/o3.packed -f
    disassemble $2/o3.out $3/o3
    disassemble $2/o3.packed $3/o3.packed
}

# Obfuscate code if it hasn't been already
stunnix_path=$source_code/stunnix
if [ ! -d $stunnix_path ]; then
    mkdir -p $stunnix_path
    for dir in $source_code/control/*
    do
        for d in ${dir}/*
        do
            for f in ${d}/*.cpp
            do
                $obf -x st_exceptions $f > $stunnix_path/${f#*/*/}
            done
        done
    done
fi


# process all source code
for dir in sorted_source_code/*
do
	for s in ${dir}/*
    do
        for d in ${s}/*
        do
            b_path=$bin_path/${d#*/}
            a_path=$asm_path/${d#*/}
            mkdir -p $b_path
            mkdir -p $a_path
            for f in ${d}/*.cpp
            do
                compile $f $a_path $b_path
            done
        done
    done
done
